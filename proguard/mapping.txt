android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat -> android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat:
    android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoVersionImpl IMPL -> IMPL
    int FEEDBACK_ALL_MASK -> FEEDBACK_ALL_MASK
    java.lang.String getId(android.accessibilityservice.AccessibilityServiceInfo) -> getId
    android.content.pm.ResolveInfo getResolveInfo(android.accessibilityservice.AccessibilityServiceInfo) -> getResolveInfo
    java.lang.String getSettingsActivityName(android.accessibilityservice.AccessibilityServiceInfo) -> getSettingsActivityName
    boolean getCanRetrieveWindowContent(android.accessibilityservice.AccessibilityServiceInfo) -> getCanRetrieveWindowContent
    java.lang.String getDescription(android.accessibilityservice.AccessibilityServiceInfo) -> getDescription
    java.lang.String feedbackTypeToString(int) -> feedbackTypeToString
    java.lang.String flagToString(int) -> flagToString
android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoIcsImpl -> android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoIcsImpl:
    boolean getCanRetrieveWindowContent(android.accessibilityservice.AccessibilityServiceInfo) -> getCanRetrieveWindowContent
    java.lang.String getDescription(android.accessibilityservice.AccessibilityServiceInfo) -> getDescription
    java.lang.String getId(android.accessibilityservice.AccessibilityServiceInfo) -> getId
    android.content.pm.ResolveInfo getResolveInfo(android.accessibilityservice.AccessibilityServiceInfo) -> getResolveInfo
    java.lang.String getSettingsActivityName(android.accessibilityservice.AccessibilityServiceInfo) -> getSettingsActivityName
android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoStubImpl -> android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoStubImpl:
    boolean getCanRetrieveWindowContent(android.accessibilityservice.AccessibilityServiceInfo) -> getCanRetrieveWindowContent
    java.lang.String getDescription(android.accessibilityservice.AccessibilityServiceInfo) -> getDescription
    java.lang.String getId(android.accessibilityservice.AccessibilityServiceInfo) -> getId
    android.content.pm.ResolveInfo getResolveInfo(android.accessibilityservice.AccessibilityServiceInfo) -> getResolveInfo
    java.lang.String getSettingsActivityName(android.accessibilityservice.AccessibilityServiceInfo) -> getSettingsActivityName
android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoVersionImpl -> android.support.v4.accessibilityservice.AccessibilityServiceInfoCompat$AccessibilityServiceInfoVersionImpl:
    java.lang.String getId(android.accessibilityservice.AccessibilityServiceInfo) -> getId
    android.content.pm.ResolveInfo getResolveInfo(android.accessibilityservice.AccessibilityServiceInfo) -> getResolveInfo
    boolean getCanRetrieveWindowContent(android.accessibilityservice.AccessibilityServiceInfo) -> getCanRetrieveWindowContent
    java.lang.String getDescription(android.accessibilityservice.AccessibilityServiceInfo) -> getDescription
    java.lang.String getSettingsActivityName(android.accessibilityservice.AccessibilityServiceInfo) -> getSettingsActivityName
android.support.v4.accessibilityservice.AccessibilityServiceInfoCompatIcs -> android.support.v4.accessibilityservice.AccessibilityServiceInfoCompatIcs:
    boolean getCanRetrieveWindowContent(android.accessibilityservice.AccessibilityServiceInfo) -> getCanRetrieveWindowContent
    java.lang.String getDescription(android.accessibilityservice.AccessibilityServiceInfo) -> getDescription
    java.lang.String getId(android.accessibilityservice.AccessibilityServiceInfo) -> getId
    android.content.pm.ResolveInfo getResolveInfo(android.accessibilityservice.AccessibilityServiceInfo) -> getResolveInfo
    java.lang.String getSettingsActivityName(android.accessibilityservice.AccessibilityServiceInfo) -> getSettingsActivityName
android.support.v4.app.ActionBarDrawerToggle -> android.support.v4.app.ActionBarDrawerToggle:
    android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImpl IMPL -> IMPL
    int ID_HOME -> ID_HOME
    android.app.Activity mActivity -> mActivity
    android.support.v4.widget.DrawerLayout mDrawerLayout -> mDrawerLayout
    boolean mDrawerIndicatorEnabled -> mDrawerIndicatorEnabled
    android.graphics.drawable.Drawable mThemeImage -> mThemeImage
    android.graphics.drawable.Drawable mDrawerImage -> mDrawerImage
    android.support.v4.app.ActionBarDrawerToggle$SlideDrawable mSlider -> mSlider
    int mDrawerImageResource -> mDrawerImageResource
    int mOpenDrawerContentDescRes -> mOpenDrawerContentDescRes
    int mCloseDrawerContentDescRes -> mCloseDrawerContentDescRes
    java.lang.Object mSetIndicatorInfo -> mSetIndicatorInfo
    void syncState() -> syncState
    void setDrawerIndicatorEnabled(boolean) -> setDrawerIndicatorEnabled
    boolean isDrawerIndicatorEnabled() -> isDrawerIndicatorEnabled
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onDrawerSlide(android.view.View,float) -> onDrawerSlide
    void onDrawerOpened(android.view.View) -> onDrawerOpened
    void onDrawerClosed(android.view.View) -> onDrawerClosed
    void onDrawerStateChanged(int) -> onDrawerStateChanged
android.support.v4.app.ActionBarDrawerToggle$1 -> android.support.v4.app.ActionBarDrawerToggle$1:
android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImpl -> android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImpl:
    android.graphics.drawable.Drawable getThemeUpIndicator(android.app.Activity) -> getThemeUpIndicator
    java.lang.Object setActionBarUpIndicator(java.lang.Object,android.app.Activity,android.graphics.drawable.Drawable,int) -> setActionBarUpIndicator
    java.lang.Object setActionBarDescription(java.lang.Object,android.app.Activity,int) -> setActionBarDescription
android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImplBase -> android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImplBase:
    android.graphics.drawable.Drawable getThemeUpIndicator(android.app.Activity) -> getThemeUpIndicator
    java.lang.Object setActionBarUpIndicator(java.lang.Object,android.app.Activity,android.graphics.drawable.Drawable,int) -> setActionBarUpIndicator
    java.lang.Object setActionBarDescription(java.lang.Object,android.app.Activity,int) -> setActionBarDescription
android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImplHC -> android.support.v4.app.ActionBarDrawerToggle$ActionBarDrawerToggleImplHC:
    android.graphics.drawable.Drawable getThemeUpIndicator(android.app.Activity) -> getThemeUpIndicator
    java.lang.Object setActionBarUpIndicator(java.lang.Object,android.app.Activity,android.graphics.drawable.Drawable,int) -> setActionBarUpIndicator
    java.lang.Object setActionBarDescription(java.lang.Object,android.app.Activity,int) -> setActionBarDescription
android.support.v4.app.ActionBarDrawerToggle$SlideDrawable -> android.support.v4.app.ActionBarDrawerToggle$SlideDrawable:
    android.graphics.drawable.Drawable mWrapped -> mWrapped
    float mOffset -> mOffset
    float mOffsetBy -> mOffsetBy
    android.graphics.Rect mTmpRect -> mTmpRect
    void setOffset(float) -> setOffset
    float getOffset() -> getOffset
    void setOffsetBy(float) -> setOffsetBy
    void draw(android.graphics.Canvas) -> draw
    void setChangingConfigurations(int) -> setChangingConfigurations
    int getChangingConfigurations() -> getChangingConfigurations
    void setDither(boolean) -> setDither
    void setFilterBitmap(boolean) -> setFilterBitmap
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    void setColorFilter(int,android.graphics.PorterDuff$Mode) -> setColorFilter
    void clearColorFilter() -> clearColorFilter
    boolean isStateful() -> isStateful
    boolean setState(int[]) -> setState
    int[] getState() -> getState
    android.graphics.drawable.Drawable getCurrent() -> getCurrent
    boolean setVisible(boolean,boolean) -> setVisible
    int getOpacity() -> getOpacity
    android.graphics.Region getTransparentRegion() -> getTransparentRegion
    boolean onStateChange(int[]) -> onStateChange
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    int getIntrinsicWidth() -> getIntrinsicWidth
    int getIntrinsicHeight() -> getIntrinsicHeight
    int getMinimumWidth() -> getMinimumWidth
    int getMinimumHeight() -> getMinimumHeight
    boolean getPadding(android.graphics.Rect) -> getPadding
    android.graphics.drawable.Drawable$ConstantState getConstantState() -> getConstantState
    void invalidateDrawable(android.graphics.drawable.Drawable) -> invalidateDrawable
    void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long) -> scheduleDrawable
    void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable) -> unscheduleDrawable
android.support.v4.app.ActionBarDrawerToggleHoneycomb -> android.support.v4.app.ActionBarDrawerToggleHoneycomb:
    java.lang.String TAG -> TAG
    int[] THEME_ATTRS -> THEME_ATTRS
    java.lang.Object setActionBarUpIndicator(java.lang.Object,android.app.Activity,android.graphics.drawable.Drawable,int) -> setActionBarUpIndicator
    java.lang.Object setActionBarDescription(java.lang.Object,android.app.Activity,int) -> setActionBarDescription
    android.graphics.drawable.Drawable getThemeUpIndicator(android.app.Activity) -> getThemeUpIndicator
android.support.v4.app.ActionBarDrawerToggleHoneycomb$SetIndicatorInfo -> android.support.v4.app.ActionBarDrawerToggleHoneycomb$SetIndicatorInfo:
    java.lang.reflect.Method setHomeAsUpIndicator -> setHomeAsUpIndicator
    java.lang.reflect.Method setHomeActionContentDescription -> setHomeActionContentDescription
    android.widget.ImageView upIndicatorView -> upIndicatorView
android.support.v4.app.ActivityCompat -> android.support.v4.app.ActivityCompat:
    boolean invalidateOptionsMenu(android.app.Activity) -> invalidateOptionsMenu
    void startActivity(android.app.Activity,android.content.Intent,android.os.Bundle) -> startActivity
    void startActivityForResult(android.app.Activity,android.content.Intent,int,android.os.Bundle) -> startActivityForResult
android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.ActivityCompatHoneycomb:
    void invalidateOptionsMenu(android.app.Activity) -> invalidateOptionsMenu
    void dump(android.app.Activity,java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
android.support.v4.app.ActivityCompatJB -> android.support.v4.app.ActivityCompatJB:
    void startActivity(android.content.Context,android.content.Intent,android.os.Bundle) -> startActivity
    void startActivityForResult(android.app.Activity,android.content.Intent,int,android.os.Bundle) -> startActivityForResult
android.support.v4.app.ActivityOptionsCompat -> android.support.v4.app.ActivityOptionsCompat:
    android.support.v4.app.ActivityOptionsCompat makeCustomAnimation(android.content.Context,int,int) -> makeCustomAnimation
    android.support.v4.app.ActivityOptionsCompat makeScaleUpAnimation(android.view.View,int,int,int,int) -> makeScaleUpAnimation
    android.support.v4.app.ActivityOptionsCompat makeThumbnailScaleUpAnimation(android.view.View,android.graphics.Bitmap,int,int) -> makeThumbnailScaleUpAnimation
    android.os.Bundle toBundle() -> toBundle
    void update(android.support.v4.app.ActivityOptionsCompat) -> update
android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImplJB -> android.support.v4.app.ActivityOptionsCompat$ActivityOptionsImplJB:
    android.support.v4.app.ActivityOptionsCompatJB mImpl -> mImpl
    android.os.Bundle toBundle() -> toBundle
    void update(android.support.v4.app.ActivityOptionsCompat) -> update
android.support.v4.app.ActivityOptionsCompatJB -> android.support.v4.app.ActivityOptionsCompatJB:
    android.app.ActivityOptions mActivityOptions -> mActivityOptions
    android.support.v4.app.ActivityOptionsCompatJB makeCustomAnimation(android.content.Context,int,int) -> makeCustomAnimation
    android.support.v4.app.ActivityOptionsCompatJB makeScaleUpAnimation(android.view.View,int,int,int,int) -> makeScaleUpAnimation
    android.support.v4.app.ActivityOptionsCompatJB makeThumbnailScaleUpAnimation(android.view.View,android.graphics.Bitmap,int,int) -> makeThumbnailScaleUpAnimation
    android.os.Bundle toBundle() -> toBundle
    void update(android.support.v4.app.ActivityOptionsCompatJB) -> update
android.support.v4.app.BackStackRecord -> android.support.v4.app.BackStackRecord:
    java.lang.String TAG -> TAG
    android.support.v4.app.FragmentManagerImpl mManager -> mManager
    int OP_NULL -> OP_NULL
    int OP_ADD -> OP_ADD
    int OP_REPLACE -> OP_REPLACE
    int OP_REMOVE -> OP_REMOVE
    int OP_HIDE -> OP_HIDE
    int OP_SHOW -> OP_SHOW
    int OP_DETACH -> OP_DETACH
    int OP_ATTACH -> OP_ATTACH
    android.support.v4.app.BackStackRecord$Op mHead -> mHead
    android.support.v4.app.BackStackRecord$Op mTail -> mTail
    int mNumOp -> mNumOp
    int mEnterAnim -> mEnterAnim
    int mExitAnim -> mExitAnim
    int mPopEnterAnim -> mPopEnterAnim
    int mPopExitAnim -> mPopExitAnim
    int mTransition -> mTransition
    int mTransitionStyle -> mTransitionStyle
    boolean mAddToBackStack -> mAddToBackStack
    boolean mAllowAddToBackStack -> mAllowAddToBackStack
    java.lang.String mName -> mName
    boolean mCommitted -> mCommitted
    int mIndex -> mIndex
    int mBreadCrumbTitleRes -> mBreadCrumbTitleRes
    java.lang.CharSequence mBreadCrumbTitleText -> mBreadCrumbTitleText
    int mBreadCrumbShortTitleRes -> mBreadCrumbShortTitleRes
    java.lang.CharSequence mBreadCrumbShortTitleText -> mBreadCrumbShortTitleText
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> dump
    int getId() -> getId
    int getBreadCrumbTitleRes() -> getBreadCrumbTitleRes
    int getBreadCrumbShortTitleRes() -> getBreadCrumbShortTitleRes
    java.lang.CharSequence getBreadCrumbTitle() -> getBreadCrumbTitle
    java.lang.CharSequence getBreadCrumbShortTitle() -> getBreadCrumbShortTitle
    void addOp(android.support.v4.app.BackStackRecord$Op) -> addOp
    android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String) -> add
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment) -> add
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> add
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> doAddOp
    android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment) -> replace
    android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String) -> replace
    android.support.v4.app.FragmentTransaction remove(android.support.v4.app.Fragment) -> remove
    android.support.v4.app.FragmentTransaction hide(android.support.v4.app.Fragment) -> hide
    android.support.v4.app.FragmentTransaction show(android.support.v4.app.Fragment) -> show
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> detach
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> attach
    android.support.v4.app.FragmentTransaction setCustomAnimations(int,int) -> setCustomAnimations
    android.support.v4.app.FragmentTransaction setCustomAnimations(int,int,int,int) -> setCustomAnimations
    android.support.v4.app.FragmentTransaction setTransition(int) -> setTransition
    android.support.v4.app.FragmentTransaction setTransitionStyle(int) -> setTransitionStyle
    android.support.v4.app.FragmentTransaction addToBackStack(java.lang.String) -> addToBackStack
    boolean isAddToBackStackAllowed() -> isAddToBackStackAllowed
    android.support.v4.app.FragmentTransaction disallowAddToBackStack() -> disallowAddToBackStack
    android.support.v4.app.FragmentTransaction setBreadCrumbTitle(int) -> setBreadCrumbTitle
    android.support.v4.app.FragmentTransaction setBreadCrumbTitle(java.lang.CharSequence) -> setBreadCrumbTitle
    android.support.v4.app.FragmentTransaction setBreadCrumbShortTitle(int) -> setBreadCrumbShortTitle
    android.support.v4.app.FragmentTransaction setBreadCrumbShortTitle(java.lang.CharSequence) -> setBreadCrumbShortTitle
    void bumpBackStackNesting(int) -> bumpBackStackNesting
    int commit() -> commit
    int commitAllowingStateLoss() -> commitAllowingStateLoss
    int commitInternal(boolean) -> commitInternal
    void run() -> run
    void popFromBackStack(boolean) -> popFromBackStack
    java.lang.String getName() -> getName
    int getTransition() -> getTransition
    int getTransitionStyle() -> getTransitionStyle
    boolean isEmpty() -> isEmpty
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.BackStackRecord$Op:
    android.support.v4.app.BackStackRecord$Op next -> next
    android.support.v4.app.BackStackRecord$Op prev -> prev
    int cmd -> cmd
    android.support.v4.app.Fragment fragment -> fragment
    int enterAnim -> enterAnim
    int exitAnim -> exitAnim
    int popEnterAnim -> popEnterAnim
    int popExitAnim -> popExitAnim
    java.util.ArrayList removed -> removed
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> mOps
    int mTransition -> mTransition
    int mTransitionStyle -> mTransitionStyle
    java.lang.String mName -> mName
    int mIndex -> mIndex
    int mBreadCrumbTitleRes -> mBreadCrumbTitleRes
    java.lang.CharSequence mBreadCrumbTitleText -> mBreadCrumbTitleText
    int mBreadCrumbShortTitleRes -> mBreadCrumbShortTitleRes
    java.lang.CharSequence mBreadCrumbShortTitleText -> mBreadCrumbShortTitleText
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> instantiate
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.BackStackState$1:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> createFromParcel
    android.support.v4.app.BackStackState[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.DialogFragment -> android.support.v4.app.DialogFragment:
    int STYLE_NORMAL -> STYLE_NORMAL
    int STYLE_NO_TITLE -> STYLE_NO_TITLE
    int STYLE_NO_FRAME -> STYLE_NO_FRAME
    int STYLE_NO_INPUT -> STYLE_NO_INPUT
    java.lang.String SAVED_DIALOG_STATE_TAG -> SAVED_DIALOG_STATE_TAG
    java.lang.String SAVED_STYLE -> SAVED_STYLE
    java.lang.String SAVED_THEME -> SAVED_THEME
    java.lang.String SAVED_CANCELABLE -> SAVED_CANCELABLE
    java.lang.String SAVED_SHOWS_DIALOG -> SAVED_SHOWS_DIALOG
    java.lang.String SAVED_BACK_STACK_ID -> SAVED_BACK_STACK_ID
    int mStyle -> mStyle
    int mTheme -> mTheme
    boolean mCancelable -> mCancelable
    boolean mShowsDialog -> mShowsDialog
    int mBackStackId -> mBackStackId
    android.app.Dialog mDialog -> mDialog
    boolean mViewDestroyed -> mViewDestroyed
    boolean mDismissed -> mDismissed
    boolean mShownByMe -> mShownByMe
    void setStyle(int,int) -> setStyle
    void show(android.support.v4.app.FragmentManager,java.lang.String) -> show
    int show(android.support.v4.app.FragmentTransaction,java.lang.String) -> show
    void dismiss() -> dismiss
    void dismissAllowingStateLoss() -> dismissAllowingStateLoss
    void dismissInternal(boolean) -> dismissInternal
    android.app.Dialog getDialog() -> getDialog
    int getTheme() -> getTheme
    void setCancelable(boolean) -> setCancelable
    boolean isCancelable() -> isCancelable
    void setShowsDialog(boolean) -> setShowsDialog
    boolean getShowsDialog() -> getShowsDialog
    void onAttach(android.app.Activity) -> onAttach
    void onDetach() -> onDetach
    void onCreate(android.os.Bundle) -> onCreate
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> getLayoutInflater
    android.app.Dialog onCreateDialog(android.os.Bundle) -> onCreateDialog
    void onCancel(android.content.DialogInterface) -> onCancel
    void onDismiss(android.content.DialogInterface) -> onDismiss
    void onActivityCreated(android.os.Bundle) -> onActivityCreated
    void onStart() -> onStart
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStop() -> onStop
    void onDestroyView() -> onDestroyView
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    java.util.HashMap sClassMap -> sClassMap
    int INITIALIZING -> INITIALIZING
    int CREATED -> CREATED
    int ACTIVITY_CREATED -> ACTIVITY_CREATED
    int STOPPED -> STOPPED
    int STARTED -> STARTED
    int RESUMED -> RESUMED
    int mState -> mState
    android.view.View mAnimatingAway -> mAnimatingAway
    int mStateAfterAnimating -> mStateAfterAnimating
    android.os.Bundle mSavedFragmentState -> mSavedFragmentState
    android.util.SparseArray mSavedViewState -> mSavedViewState
    int mIndex -> mIndex
    java.lang.String mWho -> mWho
    android.os.Bundle mArguments -> mArguments
    android.support.v4.app.Fragment mTarget -> mTarget
    int mTargetIndex -> mTargetIndex
    int mTargetRequestCode -> mTargetRequestCode
    boolean mAdded -> mAdded
    boolean mRemoving -> mRemoving
    boolean mResumed -> mResumed
    boolean mFromLayout -> mFromLayout
    boolean mInLayout -> mInLayout
    boolean mRestored -> mRestored
    int mBackStackNesting -> mBackStackNesting
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> mFragmentManager
    android.support.v4.app.FragmentActivity mActivity -> mActivity
    android.support.v4.app.FragmentManagerImpl mChildFragmentManager -> mChildFragmentManager
    android.support.v4.app.Fragment mParentFragment -> mParentFragment
    int mFragmentId -> mFragmentId
    int mContainerId -> mContainerId
    java.lang.String mTag -> mTag
    boolean mHidden -> mHidden
    boolean mDetached -> mDetached
    boolean mRetainInstance -> mRetainInstance
    boolean mRetaining -> mRetaining
    boolean mHasMenu -> mHasMenu
    boolean mMenuVisible -> mMenuVisible
    boolean mCalled -> mCalled
    int mNextAnim -> mNextAnim
    android.view.ViewGroup mContainer -> mContainer
    android.view.View mView -> mView
    android.view.View mInnerView -> mInnerView
    boolean mDeferStart -> mDeferStart
    boolean mUserVisibleHint -> mUserVisibleHint
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> mLoaderManager
    boolean mLoadersStarted -> mLoadersStarted
    boolean mCheckedForLoaderManager -> mCheckedForLoaderManager
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> instantiate
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> instantiate
    void restoreViewState(android.os.Bundle) -> restoreViewState
    void setIndex(int,android.support.v4.app.Fragment) -> setIndex
    boolean isInBackStack() -> isInBackStack
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int getId() -> getId
    java.lang.String getTag() -> getTag
    void setArguments(android.os.Bundle) -> setArguments
    android.os.Bundle getArguments() -> getArguments
    void setInitialSavedState(android.support.v4.app.Fragment$SavedState) -> setInitialSavedState
    void setTargetFragment(android.support.v4.app.Fragment,int) -> setTargetFragment
    android.support.v4.app.Fragment getTargetFragment() -> getTargetFragment
    int getTargetRequestCode() -> getTargetRequestCode
    android.support.v4.app.FragmentActivity getActivity() -> getActivity
    android.content.res.Resources getResources() -> getResources
    java.lang.CharSequence getText(int) -> getText
    java.lang.String getString(int) -> getString
    java.lang.String getString(int,java.lang.Object[]) -> getString
    android.support.v4.app.FragmentManager getFragmentManager() -> getFragmentManager
    android.support.v4.app.FragmentManager getChildFragmentManager() -> getChildFragmentManager
    android.support.v4.app.Fragment getParentFragment() -> getParentFragment
    boolean isAdded() -> isAdded
    boolean isDetached() -> isDetached
    boolean isRemoving() -> isRemoving
    boolean isInLayout() -> isInLayout
    boolean isResumed() -> isResumed
    boolean isVisible() -> isVisible
    boolean isHidden() -> isHidden
    void onHiddenChanged(boolean) -> onHiddenChanged
    void setRetainInstance(boolean) -> setRetainInstance
    boolean getRetainInstance() -> getRetainInstance
    void setHasOptionsMenu(boolean) -> setHasOptionsMenu
    void setMenuVisibility(boolean) -> setMenuVisibility
    void setUserVisibleHint(boolean) -> setUserVisibleHint
    boolean getUserVisibleHint() -> getUserVisibleHint
    android.support.v4.app.LoaderManager getLoaderManager() -> getLoaderManager
    void startActivity(android.content.Intent) -> startActivity
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> getLayoutInflater
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> onInflate
    void onAttach(android.app.Activity) -> onAttach
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> onCreateAnimation
    void onCreate(android.os.Bundle) -> onCreate
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
    void onViewCreated(android.view.View,android.os.Bundle) -> onViewCreated
    android.view.View getView() -> getView
    void onActivityCreated(android.os.Bundle) -> onActivityCreated
    void onViewStateRestored(android.os.Bundle) -> onViewStateRestored
    void onStart() -> onStart
    void onResume() -> onResume
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> onPause
    void onStop() -> onStop
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> onDestroyView
    void onDestroy() -> onDestroy
    void initState() -> initState
    void onDetach() -> onDetach
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> onCreateOptionsMenu
    void onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onDestroyOptionsMenu() -> onDestroyOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onOptionsMenuClosed(android.view.Menu) -> onOptionsMenuClosed
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    void registerForContextMenu(android.view.View) -> registerForContextMenu
    void unregisterForContextMenu(android.view.View) -> unregisterForContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    android.support.v4.app.Fragment findFragmentByWho(java.lang.String) -> findFragmentByWho
    void instantiateChildFragmentManager() -> instantiateChildFragmentManager
    void performCreate(android.os.Bundle) -> performCreate
    android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> performCreateView
    void performActivityCreated(android.os.Bundle) -> performActivityCreated
    void performStart() -> performStart
    void performResume() -> performResume
    void performConfigurationChanged(android.content.res.Configuration) -> performConfigurationChanged
    void performLowMemory() -> performLowMemory
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> performCreateOptionsMenu
    boolean performPrepareOptionsMenu(android.view.Menu) -> performPrepareOptionsMenu
    boolean performOptionsItemSelected(android.view.MenuItem) -> performOptionsItemSelected
    boolean performContextItemSelected(android.view.MenuItem) -> performContextItemSelected
    void performOptionsMenuClosed(android.view.Menu) -> performOptionsMenuClosed
    void performSaveInstanceState(android.os.Bundle) -> performSaveInstanceState
    void performPause() -> performPause
    void performStop() -> performStop
    void performReallyStop() -> performReallyStop
    void performDestroyView() -> performDestroyView
    void performDestroy() -> performDestroy
android.support.v4.app.Fragment$1 -> android.support.v4.app.Fragment$1:
    android.support.v4.app.Fragment this$0 -> this$0
    android.view.View findViewById(int) -> findViewById
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.Fragment$InstantiationException:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> mState
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.Fragment$SavedState$1:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> createFromParcel
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.FragmentActivity:
    java.lang.String TAG -> TAG
    java.lang.String FRAGMENTS_TAG -> FRAGMENTS_TAG
    int HONEYCOMB -> HONEYCOMB
    int MSG_REALLY_STOPPED -> MSG_REALLY_STOPPED
    int MSG_RESUME_PENDING -> MSG_RESUME_PENDING
    android.os.Handler mHandler -> mHandler
    android.support.v4.app.FragmentManagerImpl mFragments -> mFragments
    android.support.v4.app.FragmentContainer mContainer -> mContainer
    boolean mCreated -> mCreated
    boolean mResumed -> mResumed
    boolean mStopped -> mStopped
    boolean mReallyStopped -> mReallyStopped
    boolean mRetaining -> mRetaining
    boolean mOptionsMenuInvalidated -> mOptionsMenuInvalidated
    boolean mCheckedForLoaderManager -> mCheckedForLoaderManager
    boolean mLoadersStarted -> mLoadersStarted
    java.util.HashMap mAllLoaderManagers -> mAllLoaderManagers
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> mLoaderManager
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> onResumeFragments
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> onRetainCustomNonConfigurationInstance
    java.lang.Object getLastCustomNonConfigurationInstance() -> getLastCustomNonConfigurationInstance
    void supportInvalidateOptionsMenu() -> supportInvalidateOptionsMenu
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    java.lang.String viewToString(android.view.View) -> viewToString
    void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View) -> dumpViewHierarchy
    void doReallyStop(boolean) -> doReallyStop
    void onReallyStop() -> onReallyStop
    void onAttachFragment(android.support.v4.app.Fragment) -> onAttachFragment
    android.support.v4.app.FragmentManager getSupportFragmentManager() -> getSupportFragmentManager
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void startActivityFromFragment(android.support.v4.app.Fragment,android.content.Intent,int) -> startActivityFromFragment
    void invalidateSupportFragment(java.lang.String) -> invalidateSupportFragment
    android.support.v4.app.LoaderManager getSupportLoaderManager() -> getSupportLoaderManager
    android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean) -> getLoaderManager
android.support.v4.app.FragmentActivity$1 -> android.support.v4.app.FragmentActivity$1:
    android.support.v4.app.FragmentActivity this$0 -> this$0
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.app.FragmentActivity$2 -> android.support.v4.app.FragmentActivity$2:
    android.support.v4.app.FragmentActivity this$0 -> this$0
    android.view.View findViewById(int) -> findViewById
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.FragmentActivity$FragmentTag:
    int[] Fragment -> Fragment
    int Fragment_id -> Fragment_id
    int Fragment_name -> Fragment_name
    int Fragment_tag -> Fragment_tag
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.FragmentActivity$NonConfigurationInstances:
    java.lang.Object activity -> activity
    java.lang.Object custom -> custom
    java.util.HashMap children -> children
    java.util.ArrayList fragments -> fragments
    java.util.HashMap loaders -> loaders
android.support.v4.app.FragmentContainer -> android.support.v4.app.FragmentContainer:
    android.view.View findViewById(int) -> findViewById
android.support.v4.app.FragmentManager -> android.support.v4.app.FragmentManager:
    int POP_BACK_STACK_INCLUSIVE -> POP_BACK_STACK_INCLUSIVE
    android.support.v4.app.FragmentTransaction beginTransaction() -> beginTransaction
    android.support.v4.app.FragmentTransaction openTransaction() -> openTransaction
    boolean executePendingTransactions() -> executePendingTransactions
    android.support.v4.app.Fragment findFragmentById(int) -> findFragmentById
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> findFragmentByTag
    void popBackStack() -> popBackStack
    boolean popBackStackImmediate() -> popBackStackImmediate
    void popBackStack(java.lang.String,int) -> popBackStack
    boolean popBackStackImmediate(java.lang.String,int) -> popBackStackImmediate
    void popBackStack(int,int) -> popBackStack
    boolean popBackStackImmediate(int,int) -> popBackStackImmediate
    int getBackStackEntryCount() -> getBackStackEntryCount
    android.support.v4.app.FragmentManager$BackStackEntry getBackStackEntryAt(int) -> getBackStackEntryAt
    void addOnBackStackChangedListener(android.support.v4.app.FragmentManager$OnBackStackChangedListener) -> addOnBackStackChangedListener
    void removeOnBackStackChangedListener(android.support.v4.app.FragmentManager$OnBackStackChangedListener) -> removeOnBackStackChangedListener
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> putFragment
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> getFragment
    android.support.v4.app.Fragment$SavedState saveFragmentInstanceState(android.support.v4.app.Fragment) -> saveFragmentInstanceState
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    void enableDebugLogging(boolean) -> enableDebugLogging
android.support.v4.app.FragmentManager$BackStackEntry -> android.support.v4.app.FragmentManager$BackStackEntry:
    int getId() -> getId
    java.lang.String getName() -> getName
    int getBreadCrumbTitleRes() -> getBreadCrumbTitleRes
    int getBreadCrumbShortTitleRes() -> getBreadCrumbShortTitleRes
    java.lang.CharSequence getBreadCrumbTitle() -> getBreadCrumbTitle
    java.lang.CharSequence getBreadCrumbShortTitle() -> getBreadCrumbShortTitle
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.FragmentManager$OnBackStackChangedListener:
    void onBackStackChanged() -> onBackStackChanged
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.FragmentManagerImpl:
    boolean DEBUG -> DEBUG
    java.lang.String TAG -> TAG
    boolean HONEYCOMB -> HONEYCOMB
    java.lang.String TARGET_REQUEST_CODE_STATE_TAG -> TARGET_REQUEST_CODE_STATE_TAG
    java.lang.String TARGET_STATE_TAG -> TARGET_STATE_TAG
    java.lang.String VIEW_STATE_TAG -> VIEW_STATE_TAG
    java.lang.String USER_VISIBLE_HINT_TAG -> USER_VISIBLE_HINT_TAG
    java.util.ArrayList mPendingActions -> mPendingActions
    java.lang.Runnable[] mTmpActions -> mTmpActions
    boolean mExecutingActions -> mExecutingActions
    java.util.ArrayList mActive -> mActive
    java.util.ArrayList mAdded -> mAdded
    java.util.ArrayList mAvailIndices -> mAvailIndices
    java.util.ArrayList mBackStack -> mBackStack
    java.util.ArrayList mCreatedMenus -> mCreatedMenus
    java.util.ArrayList mBackStackIndices -> mBackStackIndices
    java.util.ArrayList mAvailBackStackIndices -> mAvailBackStackIndices
    java.util.ArrayList mBackStackChangeListeners -> mBackStackChangeListeners
    int mCurState -> mCurState
    android.support.v4.app.FragmentActivity mActivity -> mActivity
    android.support.v4.app.FragmentContainer mContainer -> mContainer
    android.support.v4.app.Fragment mParent -> mParent
    boolean mNeedMenuInvalidate -> mNeedMenuInvalidate
    boolean mStateSaved -> mStateSaved
    boolean mDestroyed -> mDestroyed
    java.lang.String mNoTransactionsBecause -> mNoTransactionsBecause
    boolean mHavePendingDeferredStart -> mHavePendingDeferredStart
    android.os.Bundle mStateBundle -> mStateBundle
    android.util.SparseArray mStateArray -> mStateArray
    java.lang.Runnable mExecCommit -> mExecCommit
    android.view.animation.Interpolator DECELERATE_QUINT -> DECELERATE_QUINT
    android.view.animation.Interpolator DECELERATE_CUBIC -> DECELERATE_CUBIC
    android.view.animation.Interpolator ACCELERATE_QUINT -> ACCELERATE_QUINT
    android.view.animation.Interpolator ACCELERATE_CUBIC -> ACCELERATE_CUBIC
    int ANIM_DUR -> ANIM_DUR
    int ANIM_STYLE_OPEN_ENTER -> ANIM_STYLE_OPEN_ENTER
    int ANIM_STYLE_OPEN_EXIT -> ANIM_STYLE_OPEN_EXIT
    int ANIM_STYLE_CLOSE_ENTER -> ANIM_STYLE_CLOSE_ENTER
    int ANIM_STYLE_CLOSE_EXIT -> ANIM_STYLE_CLOSE_EXIT
    int ANIM_STYLE_FADE_ENTER -> ANIM_STYLE_FADE_ENTER
    int ANIM_STYLE_FADE_EXIT -> ANIM_STYLE_FADE_EXIT
    void throwException(java.lang.RuntimeException) -> throwException
    android.support.v4.app.FragmentTransaction beginTransaction() -> beginTransaction
    boolean executePendingTransactions() -> executePendingTransactions
    void popBackStack() -> popBackStack
    boolean popBackStackImmediate() -> popBackStackImmediate
    void popBackStack(java.lang.String,int) -> popBackStack
    boolean popBackStackImmediate(java.lang.String,int) -> popBackStackImmediate
    void popBackStack(int,int) -> popBackStack
    boolean popBackStackImmediate(int,int) -> popBackStackImmediate
    int getBackStackEntryCount() -> getBackStackEntryCount
    android.support.v4.app.FragmentManager$BackStackEntry getBackStackEntryAt(int) -> getBackStackEntryAt
    void addOnBackStackChangedListener(android.support.v4.app.FragmentManager$OnBackStackChangedListener) -> addOnBackStackChangedListener
    void removeOnBackStackChangedListener(android.support.v4.app.FragmentManager$OnBackStackChangedListener) -> removeOnBackStackChangedListener
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> putFragment
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> getFragment
    android.support.v4.app.Fragment$SavedState saveFragmentInstanceState(android.support.v4.app.Fragment) -> saveFragmentInstanceState
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> makeOpenCloseAnimation
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> makeFadeAnimation
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> loadAnimation
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> performPendingDeferredStart
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> moveToState
    void moveToState(android.support.v4.app.Fragment) -> moveToState
    void moveToState(int,boolean) -> moveToState
    void moveToState(int,int,int,boolean) -> moveToState
    void startPendingDeferredFragments() -> startPendingDeferredFragments
    void makeActive(android.support.v4.app.Fragment) -> makeActive
    void makeInactive(android.support.v4.app.Fragment) -> makeInactive
    void addFragment(android.support.v4.app.Fragment,boolean) -> addFragment
    void removeFragment(android.support.v4.app.Fragment,int,int) -> removeFragment
    void hideFragment(android.support.v4.app.Fragment,int,int) -> hideFragment
    void showFragment(android.support.v4.app.Fragment,int,int) -> showFragment
    void detachFragment(android.support.v4.app.Fragment,int,int) -> detachFragment
    void attachFragment(android.support.v4.app.Fragment,int,int) -> attachFragment
    android.support.v4.app.Fragment findFragmentById(int) -> findFragmentById
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> findFragmentByTag
    android.support.v4.app.Fragment findFragmentByWho(java.lang.String) -> findFragmentByWho
    void checkStateLoss() -> checkStateLoss
    void enqueueAction(java.lang.Runnable,boolean) -> enqueueAction
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> allocBackStackIndex
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> setBackStackIndex
    void freeBackStackIndex(int) -> freeBackStackIndex
    boolean execPendingActions() -> execPendingActions
    void reportBackStackChanged() -> reportBackStackChanged
    void addBackStackState(android.support.v4.app.BackStackRecord) -> addBackStackState
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> popBackStackState
    java.util.ArrayList retainNonConfig() -> retainNonConfig
    void saveFragmentViewState(android.support.v4.app.Fragment) -> saveFragmentViewState
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> saveFragmentBasicState
    android.os.Parcelable saveAllState() -> saveAllState
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> restoreAllState
    void attachActivity(android.support.v4.app.FragmentActivity,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment) -> attachActivity
    void noteStateNotSaved() -> noteStateNotSaved
    void dispatchCreate() -> dispatchCreate
    void dispatchActivityCreated() -> dispatchActivityCreated
    void dispatchStart() -> dispatchStart
    void dispatchResume() -> dispatchResume
    void dispatchPause() -> dispatchPause
    void dispatchStop() -> dispatchStop
    void dispatchReallyStop() -> dispatchReallyStop
    void dispatchDestroyView() -> dispatchDestroyView
    void dispatchDestroy() -> dispatchDestroy
    void dispatchConfigurationChanged(android.content.res.Configuration) -> dispatchConfigurationChanged
    void dispatchLowMemory() -> dispatchLowMemory
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> dispatchCreateOptionsMenu
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> dispatchPrepareOptionsMenu
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> dispatchOptionsItemSelected
    boolean dispatchContextItemSelected(android.view.MenuItem) -> dispatchContextItemSelected
    void dispatchOptionsMenuClosed(android.view.Menu) -> dispatchOptionsMenuClosed
    int reverseTransit(int) -> reverseTransit
    int transitToStyleIndex(int,boolean) -> transitToStyleIndex
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.FragmentManagerImpl$1:
    android.support.v4.app.FragmentManagerImpl this$0 -> this$0
    void run() -> run
android.support.v4.app.FragmentManagerImpl$2 -> android.support.v4.app.FragmentManagerImpl$2:
    android.support.v4.app.FragmentManagerImpl this$0 -> this$0
    void run() -> run
android.support.v4.app.FragmentManagerImpl$3 -> android.support.v4.app.FragmentManagerImpl$3:
    java.lang.String val$name -> val$name
    int val$flags -> val$flags
    android.support.v4.app.FragmentManagerImpl this$0 -> this$0
    void run() -> run
android.support.v4.app.FragmentManagerImpl$4 -> android.support.v4.app.FragmentManagerImpl$4:
    int val$id -> val$id
    int val$flags -> val$flags
    android.support.v4.app.FragmentManagerImpl this$0 -> this$0
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.FragmentManagerImpl$5:
    android.support.v4.app.Fragment val$fragment -> val$fragment
    android.support.v4.app.FragmentManagerImpl this$0 -> this$0
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> mActive
    int[] mAdded -> mAdded
    android.support.v4.app.BackStackState[] mBackStack -> mBackStack
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.FragmentManagerState$1:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> createFromParcel
    android.support.v4.app.FragmentManagerState[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentPagerAdapter -> android.support.v4.app.FragmentPagerAdapter:
    java.lang.String TAG -> TAG
    boolean DEBUG -> DEBUG
    android.support.v4.app.FragmentManager mFragmentManager -> mFragmentManager
    android.support.v4.app.FragmentTransaction mCurTransaction -> mCurTransaction
    android.support.v4.app.Fragment mCurrentPrimaryItem -> mCurrentPrimaryItem
    android.support.v4.app.Fragment getItem(int) -> getItem
    void startUpdate(android.view.ViewGroup) -> startUpdate
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> instantiateItem
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> destroyItem
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> setPrimaryItem
    void finishUpdate(android.view.ViewGroup) -> finishUpdate
    boolean isViewFromObject(android.view.View,java.lang.Object) -> isViewFromObject
    android.os.Parcelable saveState() -> saveState
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> restoreState
    long getItemId(int) -> getItemId
    java.lang.String makeFragmentName(int,long) -> makeFragmentName
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> mClassName
    int mIndex -> mIndex
    boolean mFromLayout -> mFromLayout
    int mFragmentId -> mFragmentId
    int mContainerId -> mContainerId
    java.lang.String mTag -> mTag
    boolean mRetainInstance -> mRetainInstance
    boolean mDetached -> mDetached
    android.os.Bundle mArguments -> mArguments
    android.os.Bundle mSavedFragmentState -> mSavedFragmentState
    android.support.v4.app.Fragment mInstance -> mInstance
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity,android.support.v4.app.Fragment) -> instantiate
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.FragmentState$1:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> createFromParcel
    android.support.v4.app.FragmentState[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentStatePagerAdapter -> android.support.v4.app.FragmentStatePagerAdapter:
    java.lang.String TAG -> TAG
    boolean DEBUG -> DEBUG
    android.support.v4.app.FragmentManager mFragmentManager -> mFragmentManager
    android.support.v4.app.FragmentTransaction mCurTransaction -> mCurTransaction
    java.util.ArrayList mSavedState -> mSavedState
    java.util.ArrayList mFragments -> mFragments
    android.support.v4.app.Fragment mCurrentPrimaryItem -> mCurrentPrimaryItem
    android.support.v4.app.Fragment getItem(int) -> getItem
    void startUpdate(android.view.ViewGroup) -> startUpdate
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> instantiateItem
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> destroyItem
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> setPrimaryItem
    void finishUpdate(android.view.ViewGroup) -> finishUpdate
    boolean isViewFromObject(android.view.View,java.lang.Object) -> isViewFromObject
    android.os.Parcelable saveState() -> saveState
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> restoreState
android.support.v4.app.FragmentTabHost -> android.support.v4.app.FragmentTabHost:
    java.util.ArrayList mTabs -> mTabs
    android.widget.FrameLayout mRealTabContent -> mRealTabContent
    android.content.Context mContext -> mContext
    android.support.v4.app.FragmentManager mFragmentManager -> mFragmentManager
    int mContainerId -> mContainerId
    android.widget.TabHost$OnTabChangeListener mOnTabChangeListener -> mOnTabChangeListener
    android.support.v4.app.FragmentTabHost$TabInfo mLastTab -> mLastTab
    boolean mAttached -> mAttached
    void initFragmentTabHost(android.content.Context,android.util.AttributeSet) -> initFragmentTabHost
    void setup() -> setup
    void setup(android.content.Context,android.support.v4.app.FragmentManager) -> setup
    void setup(android.content.Context,android.support.v4.app.FragmentManager,int) -> setup
    void ensureContent() -> ensureContent
    void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener) -> setOnTabChangedListener
    void addTab(android.widget.TabHost$TabSpec,java.lang.Class,android.os.Bundle) -> addTab
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onTabChanged(java.lang.String) -> onTabChanged
    android.support.v4.app.FragmentTransaction doTabChanged(java.lang.String,android.support.v4.app.FragmentTransaction) -> doTabChanged
android.support.v4.app.FragmentTabHost$1 -> android.support.v4.app.FragmentTabHost$1:
android.support.v4.app.FragmentTabHost$DummyTabFactory -> android.support.v4.app.FragmentTabHost$DummyTabFactory:
    android.content.Context mContext -> mContext
    android.view.View createTabContent(java.lang.String) -> createTabContent
android.support.v4.app.FragmentTabHost$SavedState -> android.support.v4.app.FragmentTabHost$SavedState:
    java.lang.String curTab -> curTab
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.app.FragmentTabHost$SavedState$1 -> android.support.v4.app.FragmentTabHost$SavedState$1:
    android.support.v4.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel) -> createFromParcel
    android.support.v4.app.FragmentTabHost$SavedState[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost$TabInfo -> android.support.v4.app.FragmentTabHost$TabInfo:
    java.lang.String tag -> tag
    java.lang.Class clss -> clss
    android.os.Bundle args -> args
    android.support.v4.app.Fragment fragment -> fragment
    android.support.v4.app.Fragment access$102(android.support.v4.app.FragmentTabHost$TabInfo,android.support.v4.app.Fragment) -> access$102
    android.support.v4.app.Fragment access$100(android.support.v4.app.FragmentTabHost$TabInfo) -> access$100
    java.lang.String access$200(android.support.v4.app.FragmentTabHost$TabInfo) -> access$200
    java.lang.Class access$300(android.support.v4.app.FragmentTabHost$TabInfo) -> access$300
    android.os.Bundle access$400(android.support.v4.app.FragmentTabHost$TabInfo) -> access$400
android.support.v4.app.FragmentTransaction -> android.support.v4.app.FragmentTransaction:
    int TRANSIT_ENTER_MASK -> TRANSIT_ENTER_MASK
    int TRANSIT_EXIT_MASK -> TRANSIT_EXIT_MASK
    int TRANSIT_UNSET -> TRANSIT_UNSET
    int TRANSIT_NONE -> TRANSIT_NONE
    int TRANSIT_FRAGMENT_OPEN -> TRANSIT_FRAGMENT_OPEN
    int TRANSIT_FRAGMENT_CLOSE -> TRANSIT_FRAGMENT_CLOSE
    int TRANSIT_FRAGMENT_FADE -> TRANSIT_FRAGMENT_FADE
    android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String) -> add
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment) -> add
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> add
    android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment) -> replace
    android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String) -> replace
    android.support.v4.app.FragmentTransaction remove(android.support.v4.app.Fragment) -> remove
    android.support.v4.app.FragmentTransaction hide(android.support.v4.app.Fragment) -> hide
    android.support.v4.app.FragmentTransaction show(android.support.v4.app.Fragment) -> show
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> detach
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> attach
    boolean isEmpty() -> isEmpty
    android.support.v4.app.FragmentTransaction setCustomAnimations(int,int) -> setCustomAnimations
    android.support.v4.app.FragmentTransaction setCustomAnimations(int,int,int,int) -> setCustomAnimations
    android.support.v4.app.FragmentTransaction setTransition(int) -> setTransition
    android.support.v4.app.FragmentTransaction setTransitionStyle(int) -> setTransitionStyle
    android.support.v4.app.FragmentTransaction addToBackStack(java.lang.String) -> addToBackStack
    boolean isAddToBackStackAllowed() -> isAddToBackStackAllowed
    android.support.v4.app.FragmentTransaction disallowAddToBackStack() -> disallowAddToBackStack
    android.support.v4.app.FragmentTransaction setBreadCrumbTitle(int) -> setBreadCrumbTitle
    android.support.v4.app.FragmentTransaction setBreadCrumbTitle(java.lang.CharSequence) -> setBreadCrumbTitle
    android.support.v4.app.FragmentTransaction setBreadCrumbShortTitle(int) -> setBreadCrumbShortTitle
    android.support.v4.app.FragmentTransaction setBreadCrumbShortTitle(java.lang.CharSequence) -> setBreadCrumbShortTitle
    int commit() -> commit
    int commitAllowingStateLoss() -> commitAllowingStateLoss
android.support.v4.app.ListFragment -> android.support.v4.app.ListFragment:
    int INTERNAL_EMPTY_ID -> INTERNAL_EMPTY_ID
    int INTERNAL_PROGRESS_CONTAINER_ID -> INTERNAL_PROGRESS_CONTAINER_ID
    int INTERNAL_LIST_CONTAINER_ID -> INTERNAL_LIST_CONTAINER_ID
    android.os.Handler mHandler -> mHandler
    java.lang.Runnable mRequestFocus -> mRequestFocus
    android.widget.AdapterView$OnItemClickListener mOnClickListener -> mOnClickListener
    android.widget.ListAdapter mAdapter -> mAdapter
    android.widget.ListView mList -> mList
    android.view.View mEmptyView -> mEmptyView
    android.widget.TextView mStandardEmptyView -> mStandardEmptyView
    android.view.View mProgressContainer -> mProgressContainer
    android.view.View mListContainer -> mListContainer
    java.lang.CharSequence mEmptyText -> mEmptyText
    boolean mListShown -> mListShown
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
    void onViewCreated(android.view.View,android.os.Bundle) -> onViewCreated
    void onDestroyView() -> onDestroyView
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    void setListAdapter(android.widget.ListAdapter) -> setListAdapter
    void setSelection(int) -> setSelection
    int getSelectedItemPosition() -> getSelectedItemPosition
    long getSelectedItemId() -> getSelectedItemId
    android.widget.ListView getListView() -> getListView
    void setEmptyText(java.lang.CharSequence) -> setEmptyText
    void setListShown(boolean) -> setListShown
    void setListShownNoAnimation(boolean) -> setListShownNoAnimation
    void setListShown(boolean,boolean) -> setListShown
    android.widget.ListAdapter getListAdapter() -> getListAdapter
    void ensureList() -> ensureList
android.support.v4.app.ListFragment$1 -> android.support.v4.app.ListFragment$1:
    android.support.v4.app.ListFragment this$0 -> this$0
    void run() -> run
android.support.v4.app.ListFragment$2 -> android.support.v4.app.ListFragment$2:
    android.support.v4.app.ListFragment this$0 -> this$0
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
android.support.v4.app.LoaderManager -> android.support.v4.app.LoaderManager:
    android.support.v4.content.Loader initLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> initLoader
    android.support.v4.content.Loader restartLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> restartLoader
    void destroyLoader(int) -> destroyLoader
    android.support.v4.content.Loader getLoader(int) -> getLoader
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    void enableDebugLogging(boolean) -> enableDebugLogging
    boolean hasRunningLoaders() -> hasRunningLoaders
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.LoaderManager$LoaderCallbacks:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> onCreateLoader
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> onLoadFinished
    void onLoaderReset(android.support.v4.content.Loader) -> onLoaderReset
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.LoaderManagerImpl:
    java.lang.String TAG -> TAG
    boolean DEBUG -> DEBUG
    android.support.v4.util.SparseArrayCompat mLoaders -> mLoaders
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> mInactiveLoaders
    java.lang.String mWho -> mWho
    android.support.v4.app.FragmentActivity mActivity -> mActivity
    boolean mStarted -> mStarted
    boolean mRetaining -> mRetaining
    boolean mRetainingStarted -> mRetainingStarted
    boolean mCreatingLoader -> mCreatingLoader
    void updateActivity(android.support.v4.app.FragmentActivity) -> updateActivity
    android.support.v4.app.LoaderManagerImpl$LoaderInfo createLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> createLoader
    android.support.v4.app.LoaderManagerImpl$LoaderInfo createAndInstallLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> createAndInstallLoader
    void installLoader(android.support.v4.app.LoaderManagerImpl$LoaderInfo) -> installLoader
    android.support.v4.content.Loader initLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> initLoader
    android.support.v4.content.Loader restartLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> restartLoader
    void destroyLoader(int) -> destroyLoader
    android.support.v4.content.Loader getLoader(int) -> getLoader
    void doStart() -> doStart
    void doStop() -> doStop
    void doRetain() -> doRetain
    void finishRetain() -> finishRetain
    void doReportNextStart() -> doReportNextStart
    void doReportStart() -> doReportStart
    void doDestroy() -> doDestroy
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    boolean hasRunningLoaders() -> hasRunningLoaders
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.LoaderManagerImpl$LoaderInfo:
    int mId -> mId
    android.os.Bundle mArgs -> mArgs
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> mCallbacks
    android.support.v4.content.Loader mLoader -> mLoader
    boolean mHaveData -> mHaveData
    boolean mDeliveredData -> mDeliveredData
    java.lang.Object mData -> mData
    boolean mStarted -> mStarted
    boolean mRetaining -> mRetaining
    boolean mRetainingStarted -> mRetainingStarted
    boolean mReportNextStart -> mReportNextStart
    boolean mDestroyed -> mDestroyed
    boolean mListenerRegistered -> mListenerRegistered
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> mPendingLoader
    android.support.v4.app.LoaderManagerImpl this$0 -> this$0
    void start() -> start
    void retain() -> retain
    void finishRetain() -> finishRetain
    void reportStart() -> reportStart
    void stop() -> stop
    void destroy() -> destroy
    void onLoadComplete(android.support.v4.content.Loader,java.lang.Object) -> onLoadComplete
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> callOnLoadFinished
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
android.support.v4.app.NavUtils -> android.support.v4.app.NavUtils:
    java.lang.String TAG -> TAG
    java.lang.String PARENT_ACTIVITY -> PARENT_ACTIVITY
    android.support.v4.app.NavUtils$NavUtilsImpl IMPL -> IMPL
    boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent) -> shouldUpRecreateTask
    void navigateUpFromSameTask(android.app.Activity) -> navigateUpFromSameTask
    void navigateUpTo(android.app.Activity,android.content.Intent) -> navigateUpTo
    android.content.Intent getParentActivityIntent(android.app.Activity) -> getParentActivityIntent
    android.content.Intent getParentActivityIntent(android.content.Context,java.lang.Class) -> getParentActivityIntent
    android.content.Intent getParentActivityIntent(android.content.Context,android.content.ComponentName) -> getParentActivityIntent
    java.lang.String getParentActivityName(android.app.Activity) -> getParentActivityName
    java.lang.String getParentActivityName(android.content.Context,android.content.ComponentName) -> getParentActivityName
android.support.v4.app.NavUtils$NavUtilsImpl -> android.support.v4.app.NavUtils$NavUtilsImpl:
    android.content.Intent getParentActivityIntent(android.app.Activity) -> getParentActivityIntent
    boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent) -> shouldUpRecreateTask
    void navigateUpTo(android.app.Activity,android.content.Intent) -> navigateUpTo
    java.lang.String getParentActivityName(android.content.Context,android.content.pm.ActivityInfo) -> getParentActivityName
android.support.v4.app.NavUtils$NavUtilsImplBase -> android.support.v4.app.NavUtils$NavUtilsImplBase:
    android.content.Intent getParentActivityIntent(android.app.Activity) -> getParentActivityIntent
    boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent) -> shouldUpRecreateTask
    void navigateUpTo(android.app.Activity,android.content.Intent) -> navigateUpTo
    java.lang.String getParentActivityName(android.content.Context,android.content.pm.ActivityInfo) -> getParentActivityName
android.support.v4.app.NavUtils$NavUtilsImplJB -> android.support.v4.app.NavUtils$NavUtilsImplJB:
    android.content.Intent getParentActivityIntent(android.app.Activity) -> getParentActivityIntent
    android.content.Intent superGetParentActivityIntent(android.app.Activity) -> superGetParentActivityIntent
    boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent) -> shouldUpRecreateTask
    void navigateUpTo(android.app.Activity,android.content.Intent) -> navigateUpTo
    java.lang.String getParentActivityName(android.content.Context,android.content.pm.ActivityInfo) -> getParentActivityName
android.support.v4.app.NavUtilsJB -> android.support.v4.app.NavUtilsJB:
    android.content.Intent getParentActivityIntent(android.app.Activity) -> getParentActivityIntent
    boolean shouldUpRecreateTask(android.app.Activity,android.content.Intent) -> shouldUpRecreateTask
    void navigateUpTo(android.app.Activity,android.content.Intent) -> navigateUpTo
    java.lang.String getParentActivityName(android.content.pm.ActivityInfo) -> getParentActivityName
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.NoSaveStateFrameLayout:
    android.view.ViewGroup wrap(android.view.View) -> wrap
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.NotificationCompat -> android.support.v4.app.NotificationCompat:
    int FLAG_HIGH_PRIORITY -> FLAG_HIGH_PRIORITY
    int PRIORITY_DEFAULT -> PRIORITY_DEFAULT
    int PRIORITY_LOW -> PRIORITY_LOW
    int PRIORITY_MIN -> PRIORITY_MIN
    int PRIORITY_HIGH -> PRIORITY_HIGH
    int PRIORITY_MAX -> PRIORITY_MAX
    android.support.v4.app.NotificationCompat$NotificationCompatImpl IMPL -> IMPL
    android.support.v4.app.NotificationCompat$NotificationCompatImpl access$000() -> access$000
android.support.v4.app.NotificationCompat$Action -> android.support.v4.app.NotificationCompat$Action:
    int icon -> icon
    java.lang.CharSequence title -> title
    android.app.PendingIntent actionIntent -> actionIntent
android.support.v4.app.NotificationCompat$BigPictureStyle -> android.support.v4.app.NotificationCompat$BigPictureStyle:
    android.graphics.Bitmap mPicture -> mPicture
    android.graphics.Bitmap mBigLargeIcon -> mBigLargeIcon
    boolean mBigLargeIconSet -> mBigLargeIconSet
    android.support.v4.app.NotificationCompat$BigPictureStyle setBigContentTitle(java.lang.CharSequence) -> setBigContentTitle
    android.support.v4.app.NotificationCompat$BigPictureStyle setSummaryText(java.lang.CharSequence) -> setSummaryText
    android.support.v4.app.NotificationCompat$BigPictureStyle bigPicture(android.graphics.Bitmap) -> bigPicture
    android.support.v4.app.NotificationCompat$BigPictureStyle bigLargeIcon(android.graphics.Bitmap) -> bigLargeIcon
android.support.v4.app.NotificationCompat$BigTextStyle -> android.support.v4.app.NotificationCompat$BigTextStyle:
    java.lang.CharSequence mBigText -> mBigText
    android.support.v4.app.NotificationCompat$BigTextStyle setBigContentTitle(java.lang.CharSequence) -> setBigContentTitle
    android.support.v4.app.NotificationCompat$BigTextStyle setSummaryText(java.lang.CharSequence) -> setSummaryText
    android.support.v4.app.NotificationCompat$BigTextStyle bigText(java.lang.CharSequence) -> bigText
android.support.v4.app.NotificationCompat$Builder -> android.support.v4.app.NotificationCompat$Builder:
    android.content.Context mContext -> mContext
    java.lang.CharSequence mContentTitle -> mContentTitle
    java.lang.CharSequence mContentText -> mContentText
    android.app.PendingIntent mContentIntent -> mContentIntent
    android.app.PendingIntent mFullScreenIntent -> mFullScreenIntent
    android.widget.RemoteViews mTickerView -> mTickerView
    android.graphics.Bitmap mLargeIcon -> mLargeIcon
    java.lang.CharSequence mContentInfo -> mContentInfo
    int mNumber -> mNumber
    int mPriority -> mPriority
    boolean mUseChronometer -> mUseChronometer
    android.support.v4.app.NotificationCompat$Style mStyle -> mStyle
    java.lang.CharSequence mSubText -> mSubText
    int mProgressMax -> mProgressMax
    int mProgress -> mProgress
    boolean mProgressIndeterminate -> mProgressIndeterminate
    java.util.ArrayList mActions -> mActions
    android.app.Notification mNotification -> mNotification
    android.support.v4.app.NotificationCompat$Builder setWhen(long) -> setWhen
    android.support.v4.app.NotificationCompat$Builder setUsesChronometer(boolean) -> setUsesChronometer
    android.support.v4.app.NotificationCompat$Builder setSmallIcon(int) -> setSmallIcon
    android.support.v4.app.NotificationCompat$Builder setSmallIcon(int,int) -> setSmallIcon
    android.support.v4.app.NotificationCompat$Builder setContentTitle(java.lang.CharSequence) -> setContentTitle
    android.support.v4.app.NotificationCompat$Builder setContentText(java.lang.CharSequence) -> setContentText
    android.support.v4.app.NotificationCompat$Builder setSubText(java.lang.CharSequence) -> setSubText
    android.support.v4.app.NotificationCompat$Builder setNumber(int) -> setNumber
    android.support.v4.app.NotificationCompat$Builder setContentInfo(java.lang.CharSequence) -> setContentInfo
    android.support.v4.app.NotificationCompat$Builder setProgress(int,int,boolean) -> setProgress
    android.support.v4.app.NotificationCompat$Builder setContent(android.widget.RemoteViews) -> setContent
    android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent) -> setContentIntent
    android.support.v4.app.NotificationCompat$Builder setDeleteIntent(android.app.PendingIntent) -> setDeleteIntent
    android.support.v4.app.NotificationCompat$Builder setFullScreenIntent(android.app.PendingIntent,boolean) -> setFullScreenIntent
    android.support.v4.app.NotificationCompat$Builder setTicker(java.lang.CharSequence) -> setTicker
    android.support.v4.app.NotificationCompat$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews) -> setTicker
    android.support.v4.app.NotificationCompat$Builder setLargeIcon(android.graphics.Bitmap) -> setLargeIcon
    android.support.v4.app.NotificationCompat$Builder setSound(android.net.Uri) -> setSound
    android.support.v4.app.NotificationCompat$Builder setSound(android.net.Uri,int) -> setSound
    android.support.v4.app.NotificationCompat$Builder setVibrate(long[]) -> setVibrate
    android.support.v4.app.NotificationCompat$Builder setLights(int,int,int) -> setLights
    android.support.v4.app.NotificationCompat$Builder setOngoing(boolean) -> setOngoing
    android.support.v4.app.NotificationCompat$Builder setOnlyAlertOnce(boolean) -> setOnlyAlertOnce
    android.support.v4.app.NotificationCompat$Builder setAutoCancel(boolean) -> setAutoCancel
    android.support.v4.app.NotificationCompat$Builder setDefaults(int) -> setDefaults
    void setFlag(int,boolean) -> setFlag
    android.support.v4.app.NotificationCompat$Builder setPriority(int) -> setPriority
    android.support.v4.app.NotificationCompat$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent) -> addAction
    android.support.v4.app.NotificationCompat$Builder setStyle(android.support.v4.app.NotificationCompat$Style) -> setStyle
    android.app.Notification getNotification() -> getNotification
    android.app.Notification build() -> build
android.support.v4.app.NotificationCompat$InboxStyle -> android.support.v4.app.NotificationCompat$InboxStyle:
    java.util.ArrayList mTexts -> mTexts
    android.support.v4.app.NotificationCompat$InboxStyle setBigContentTitle(java.lang.CharSequence) -> setBigContentTitle
    android.support.v4.app.NotificationCompat$InboxStyle setSummaryText(java.lang.CharSequence) -> setSummaryText
    android.support.v4.app.NotificationCompat$InboxStyle addLine(java.lang.CharSequence) -> addLine
android.support.v4.app.NotificationCompat$NotificationCompatImpl -> android.support.v4.app.NotificationCompat$NotificationCompatImpl:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> build
android.support.v4.app.NotificationCompat$NotificationCompatImplBase -> android.support.v4.app.NotificationCompat$NotificationCompatImplBase:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> build
android.support.v4.app.NotificationCompat$NotificationCompatImplHoneycomb -> android.support.v4.app.NotificationCompat$NotificationCompatImplHoneycomb:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> build
android.support.v4.app.NotificationCompat$NotificationCompatImplIceCreamSandwich -> android.support.v4.app.NotificationCompat$NotificationCompatImplIceCreamSandwich:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> build
android.support.v4.app.NotificationCompat$NotificationCompatImplJellybean -> android.support.v4.app.NotificationCompat$NotificationCompatImplJellybean:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> build
android.support.v4.app.NotificationCompat$Style -> android.support.v4.app.NotificationCompat$Style:
    android.support.v4.app.NotificationCompat$Builder mBuilder -> mBuilder
    java.lang.CharSequence mBigContentTitle -> mBigContentTitle
    java.lang.CharSequence mSummaryText -> mSummaryText
    boolean mSummaryTextSet -> mSummaryTextSet
    void setBuilder(android.support.v4.app.NotificationCompat$Builder) -> setBuilder
    android.app.Notification build() -> build
android.support.v4.app.NotificationCompatHoneycomb -> android.support.v4.app.NotificationCompatHoneycomb:
    android.app.Notification add(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap) -> add
android.support.v4.app.NotificationCompatIceCreamSandwich -> android.support.v4.app.NotificationCompatIceCreamSandwich:
    android.app.Notification add(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap,int,int,boolean) -> add
android.support.v4.app.NotificationCompatJellybean -> android.support.v4.app.NotificationCompatJellybean:
    android.app.Notification$Builder b -> b
    void addAction(int,java.lang.CharSequence,android.app.PendingIntent) -> addAction
    void addBigTextStyle(java.lang.CharSequence,boolean,java.lang.CharSequence,java.lang.CharSequence) -> addBigTextStyle
    void addBigPictureStyle(java.lang.CharSequence,boolean,java.lang.CharSequence,android.graphics.Bitmap,android.graphics.Bitmap,boolean) -> addBigPictureStyle
    void addInboxStyle(java.lang.CharSequence,boolean,java.lang.CharSequence,java.util.ArrayList) -> addInboxStyle
    android.app.Notification build() -> build
android.support.v4.app.ServiceCompat -> android.support.v4.app.ServiceCompat:
    int START_STICKY -> START_STICKY
android.support.v4.app.ShareCompat -> android.support.v4.app.ShareCompat:
    java.lang.String EXTRA_CALLING_PACKAGE -> EXTRA_CALLING_PACKAGE
    java.lang.String EXTRA_CALLING_ACTIVITY -> EXTRA_CALLING_ACTIVITY
    android.support.v4.app.ShareCompat$ShareCompatImpl IMPL -> IMPL
    java.lang.String getCallingPackage(android.app.Activity) -> getCallingPackage
    android.content.ComponentName getCallingActivity(android.app.Activity) -> getCallingActivity
    void configureMenuItem(android.view.MenuItem,android.support.v4.app.ShareCompat$IntentBuilder) -> configureMenuItem
    void configureMenuItem(android.view.Menu,int,android.support.v4.app.ShareCompat$IntentBuilder) -> configureMenuItem
    android.support.v4.app.ShareCompat$ShareCompatImpl access$000() -> access$000
android.support.v4.app.ShareCompat$IntentBuilder -> android.support.v4.app.ShareCompat$IntentBuilder:
    android.app.Activity mActivity -> mActivity
    android.content.Intent mIntent -> mIntent
    java.lang.CharSequence mChooserTitle -> mChooserTitle
    java.util.ArrayList mToAddresses -> mToAddresses
    java.util.ArrayList mCcAddresses -> mCcAddresses
    java.util.ArrayList mBccAddresses -> mBccAddresses
    java.util.ArrayList mStreams -> mStreams
    android.support.v4.app.ShareCompat$IntentBuilder from(android.app.Activity) -> from
    android.content.Intent getIntent() -> getIntent
    android.app.Activity getActivity() -> getActivity
    void combineArrayExtra(java.lang.String,java.util.ArrayList) -> combineArrayExtra
    void combineArrayExtra(java.lang.String,java.lang.String[]) -> combineArrayExtra
    android.content.Intent createChooserIntent() -> createChooserIntent
    void startChooser() -> startChooser
    android.support.v4.app.ShareCompat$IntentBuilder setChooserTitle(java.lang.CharSequence) -> setChooserTitle
    android.support.v4.app.ShareCompat$IntentBuilder setChooserTitle(int) -> setChooserTitle
    android.support.v4.app.ShareCompat$IntentBuilder setType(java.lang.String) -> setType
    android.support.v4.app.ShareCompat$IntentBuilder setText(java.lang.CharSequence) -> setText
    android.support.v4.app.ShareCompat$IntentBuilder setHtmlText(java.lang.String) -> setHtmlText
    android.support.v4.app.ShareCompat$IntentBuilder setStream(android.net.Uri) -> setStream
    android.support.v4.app.ShareCompat$IntentBuilder addStream(android.net.Uri) -> addStream
    android.support.v4.app.ShareCompat$IntentBuilder setEmailTo(java.lang.String[]) -> setEmailTo
    android.support.v4.app.ShareCompat$IntentBuilder addEmailTo(java.lang.String) -> addEmailTo
    android.support.v4.app.ShareCompat$IntentBuilder addEmailTo(java.lang.String[]) -> addEmailTo
    android.support.v4.app.ShareCompat$IntentBuilder setEmailCc(java.lang.String[]) -> setEmailCc
    android.support.v4.app.ShareCompat$IntentBuilder addEmailCc(java.lang.String) -> addEmailCc
    android.support.v4.app.ShareCompat$IntentBuilder addEmailCc(java.lang.String[]) -> addEmailCc
    android.support.v4.app.ShareCompat$IntentBuilder setEmailBcc(java.lang.String[]) -> setEmailBcc
    android.support.v4.app.ShareCompat$IntentBuilder addEmailBcc(java.lang.String) -> addEmailBcc
    android.support.v4.app.ShareCompat$IntentBuilder addEmailBcc(java.lang.String[]) -> addEmailBcc
    android.support.v4.app.ShareCompat$IntentBuilder setSubject(java.lang.String) -> setSubject
android.support.v4.app.ShareCompat$IntentReader -> android.support.v4.app.ShareCompat$IntentReader:
    java.lang.String TAG -> TAG
    android.app.Activity mActivity -> mActivity
    android.content.Intent mIntent -> mIntent
    java.lang.String mCallingPackage -> mCallingPackage
    android.content.ComponentName mCallingActivity -> mCallingActivity
    java.util.ArrayList mStreams -> mStreams
    android.support.v4.app.ShareCompat$IntentReader from(android.app.Activity) -> from
    boolean isShareIntent() -> isShareIntent
    boolean isSingleShare() -> isSingleShare
    boolean isMultipleShare() -> isMultipleShare
    java.lang.String getType() -> getType
    java.lang.CharSequence getText() -> getText
    java.lang.String getHtmlText() -> getHtmlText
    android.net.Uri getStream() -> getStream
    android.net.Uri getStream(int) -> getStream
    int getStreamCount() -> getStreamCount
    java.lang.String[] getEmailTo() -> getEmailTo
    java.lang.String[] getEmailCc() -> getEmailCc
    java.lang.String[] getEmailBcc() -> getEmailBcc
    java.lang.String getSubject() -> getSubject
    java.lang.String getCallingPackage() -> getCallingPackage
    android.content.ComponentName getCallingActivity() -> getCallingActivity
    android.graphics.drawable.Drawable getCallingActivityIcon() -> getCallingActivityIcon
    android.graphics.drawable.Drawable getCallingApplicationIcon() -> getCallingApplicationIcon
    java.lang.CharSequence getCallingApplicationLabel() -> getCallingApplicationLabel
android.support.v4.app.ShareCompat$ShareCompatImpl -> android.support.v4.app.ShareCompat$ShareCompatImpl:
    void configureMenuItem(android.view.MenuItem,android.support.v4.app.ShareCompat$IntentBuilder) -> configureMenuItem
    java.lang.String escapeHtml(java.lang.CharSequence) -> escapeHtml
android.support.v4.app.ShareCompat$ShareCompatImplBase -> android.support.v4.app.ShareCompat$ShareCompatImplBase:
    void configureMenuItem(android.view.MenuItem,android.support.v4.app.ShareCompat$IntentBuilder) -> configureMenuItem
    java.lang.String escapeHtml(java.lang.CharSequence) -> escapeHtml
    void withinStyle(java.lang.StringBuilder,java.lang.CharSequence,int,int) -> withinStyle
android.support.v4.app.ShareCompat$ShareCompatImplICS -> android.support.v4.app.ShareCompat$ShareCompatImplICS:
    void configureMenuItem(android.view.MenuItem,android.support.v4.app.ShareCompat$IntentBuilder) -> configureMenuItem
    boolean shouldAddChooserIntent(android.view.MenuItem) -> shouldAddChooserIntent
android.support.v4.app.ShareCompat$ShareCompatImplJB -> android.support.v4.app.ShareCompat$ShareCompatImplJB:
    java.lang.String escapeHtml(java.lang.CharSequence) -> escapeHtml
    boolean shouldAddChooserIntent(android.view.MenuItem) -> shouldAddChooserIntent
android.support.v4.app.ShareCompatICS -> android.support.v4.app.ShareCompatICS:
    java.lang.String HISTORY_FILENAME_PREFIX -> HISTORY_FILENAME_PREFIX
    void configureMenuItem(android.view.MenuItem,android.app.Activity,android.content.Intent) -> configureMenuItem
android.support.v4.app.ShareCompatJB -> android.support.v4.app.ShareCompatJB:
    java.lang.String escapeHtml(java.lang.CharSequence) -> escapeHtml
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.SuperNotCalledException:
android.support.v4.app.TaskStackBuilder -> android.support.v4.app.TaskStackBuilder:
    java.lang.String TAG -> TAG
    android.support.v4.app.TaskStackBuilder$TaskStackBuilderImpl IMPL -> IMPL
    java.util.ArrayList mIntents -> mIntents
    android.content.Context mSourceContext -> mSourceContext
    android.support.v4.app.TaskStackBuilder create(android.content.Context) -> create
    android.support.v4.app.TaskStackBuilder from(android.content.Context) -> from
    android.support.v4.app.TaskStackBuilder addNextIntent(android.content.Intent) -> addNextIntent
    android.support.v4.app.TaskStackBuilder addNextIntentWithParentStack(android.content.Intent) -> addNextIntentWithParentStack
    android.support.v4.app.TaskStackBuilder addParentStack(android.app.Activity) -> addParentStack
    android.support.v4.app.TaskStackBuilder addParentStack(java.lang.Class) -> addParentStack
    android.support.v4.app.TaskStackBuilder addParentStack(android.content.ComponentName) -> addParentStack
    int getIntentCount() -> getIntentCount
    android.content.Intent getIntent(int) -> getIntent
    android.content.Intent editIntentAt(int) -> editIntentAt
    java.util.Iterator iterator() -> iterator
    void startActivities() -> startActivities
    void startActivities(android.os.Bundle) -> startActivities
    android.app.PendingIntent getPendingIntent(int,int) -> getPendingIntent
    android.app.PendingIntent getPendingIntent(int,int,android.os.Bundle) -> getPendingIntent
    android.content.Intent[] getIntents() -> getIntents
android.support.v4.app.TaskStackBuilder$TaskStackBuilderImpl -> android.support.v4.app.TaskStackBuilder$TaskStackBuilderImpl:
    android.app.PendingIntent getPendingIntent(android.content.Context,android.content.Intent[],int,int,android.os.Bundle) -> getPendingIntent
android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplBase -> android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplBase:
    android.app.PendingIntent getPendingIntent(android.content.Context,android.content.Intent[],int,int,android.os.Bundle) -> getPendingIntent
android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplHoneycomb -> android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplHoneycomb:
    android.app.PendingIntent getPendingIntent(android.content.Context,android.content.Intent[],int,int,android.os.Bundle) -> getPendingIntent
android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplJellybean -> android.support.v4.app.TaskStackBuilder$TaskStackBuilderImplJellybean:
    android.app.PendingIntent getPendingIntent(android.content.Context,android.content.Intent[],int,int,android.os.Bundle) -> getPendingIntent
android.support.v4.app.TaskStackBuilderHoneycomb -> android.support.v4.app.TaskStackBuilderHoneycomb:
    android.app.PendingIntent getActivitiesPendingIntent(android.content.Context,int,android.content.Intent[],int) -> getActivitiesPendingIntent
android.support.v4.app.TaskStackBuilderJellybean -> android.support.v4.app.TaskStackBuilderJellybean:
    android.app.PendingIntent getActivitiesPendingIntent(android.content.Context,int,android.content.Intent[],int,android.os.Bundle) -> getActivitiesPendingIntent
android.support.v4.content.AsyncTaskLoader -> android.support.v4.content.AsyncTaskLoader:
    java.lang.String TAG -> TAG
    boolean DEBUG -> DEBUG
    android.support.v4.content.AsyncTaskLoader$LoadTask mTask -> mTask
    android.support.v4.content.AsyncTaskLoader$LoadTask mCancellingTask -> mCancellingTask
    long mUpdateThrottle -> mUpdateThrottle
    long mLastLoadCompleteTime -> mLastLoadCompleteTime
    android.os.Handler mHandler -> mHandler
    void setUpdateThrottle(long) -> setUpdateThrottle
    void onForceLoad() -> onForceLoad
    boolean cancelLoad() -> cancelLoad
    void onCanceled(java.lang.Object) -> onCanceled
    void executePendingTask() -> executePendingTask
    void dispatchOnCancelled(android.support.v4.content.AsyncTaskLoader$LoadTask,java.lang.Object) -> dispatchOnCancelled
    void dispatchOnLoadComplete(android.support.v4.content.AsyncTaskLoader$LoadTask,java.lang.Object) -> dispatchOnLoadComplete
    java.lang.Object loadInBackground() -> loadInBackground
    java.lang.Object onLoadInBackground() -> onLoadInBackground
    void waitForLoader() -> waitForLoader
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
android.support.v4.content.AsyncTaskLoader$LoadTask -> android.support.v4.content.AsyncTaskLoader$LoadTask:
    java.lang.Object result -> result
    boolean waiting -> waiting
    java.util.concurrent.CountDownLatch done -> done
    android.support.v4.content.AsyncTaskLoader this$0 -> this$0
    java.lang.Object doInBackground(java.lang.Void[]) -> doInBackground
    void onPostExecute(java.lang.Object) -> onPostExecute
    void onCancelled() -> onCancelled
    void run() -> run
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    java.util.concurrent.CountDownLatch access$000(android.support.v4.content.AsyncTaskLoader$LoadTask) -> access$000
android.support.v4.content.ContextCompat -> android.support.v4.content.ContextCompat:
    boolean startActivities(android.content.Context,android.content.Intent[]) -> startActivities
    boolean startActivities(android.content.Context,android.content.Intent[],android.os.Bundle) -> startActivities
android.support.v4.content.ContextCompatHoneycomb -> android.support.v4.content.ContextCompatHoneycomb:
    void startActivities(android.content.Context,android.content.Intent[]) -> startActivities
android.support.v4.content.ContextCompatJellybean -> android.support.v4.content.ContextCompatJellybean:
    void startActivities(android.content.Context,android.content.Intent[],android.os.Bundle) -> startActivities
android.support.v4.content.CursorLoader -> android.support.v4.content.CursorLoader:
    android.support.v4.content.Loader$ForceLoadContentObserver mObserver -> mObserver
    android.net.Uri mUri -> mUri
    java.lang.String[] mProjection -> mProjection
    java.lang.String mSelection -> mSelection
    java.lang.String[] mSelectionArgs -> mSelectionArgs
    java.lang.String mSortOrder -> mSortOrder
    android.database.Cursor mCursor -> mCursor
    android.database.Cursor loadInBackground() -> loadInBackground
    void registerContentObserver(android.database.Cursor,android.database.ContentObserver) -> registerContentObserver
    void deliverResult(android.database.Cursor) -> deliverResult
    void onStartLoading() -> onStartLoading
    void onStopLoading() -> onStopLoading
    void onCanceled(android.database.Cursor) -> onCanceled
    void onReset() -> onReset
    android.net.Uri getUri() -> getUri
    void setUri(android.net.Uri) -> setUri
    java.lang.String[] getProjection() -> getProjection
    void setProjection(java.lang.String[]) -> setProjection
    java.lang.String getSelection() -> getSelection
    void setSelection(java.lang.String) -> setSelection
    java.lang.String[] getSelectionArgs() -> getSelectionArgs
    void setSelectionArgs(java.lang.String[]) -> setSelectionArgs
    java.lang.String getSortOrder() -> getSortOrder
    void setSortOrder(java.lang.String) -> setSortOrder
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    java.lang.Object loadInBackground() -> loadInBackground
    void onCanceled(java.lang.Object) -> onCanceled
    void deliverResult(java.lang.Object) -> deliverResult
android.support.v4.content.FileProvider -> android.support.v4.content.FileProvider:
    java.lang.String[] COLUMNS -> COLUMNS
    java.lang.String META_DATA_FILE_PROVIDER_PATHS -> META_DATA_FILE_PROVIDER_PATHS
    java.lang.String TAG_ROOT_PATH -> TAG_ROOT_PATH
    java.lang.String TAG_FILES_PATH -> TAG_FILES_PATH
    java.lang.String TAG_CACHE_PATH -> TAG_CACHE_PATH
    java.lang.String TAG_EXTERNAL -> TAG_EXTERNAL
    java.lang.String ATTR_NAME -> ATTR_NAME
    java.lang.String ATTR_PATH -> ATTR_PATH
    java.io.File DEVICE_ROOT -> DEVICE_ROOT
    java.util.HashMap sCache -> sCache
    android.support.v4.content.FileProvider$PathStrategy mStrategy -> mStrategy
    boolean onCreate() -> onCreate
    void attachInfo(android.content.Context,android.content.pm.ProviderInfo) -> attachInfo
    android.net.Uri getUriForFile(android.content.Context,java.lang.String,java.io.File) -> getUriForFile
    android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> query
    java.lang.String getType(android.net.Uri) -> getType
    android.net.Uri insert(android.net.Uri,android.content.ContentValues) -> insert
    int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
    int delete(android.net.Uri,java.lang.String,java.lang.String[]) -> delete
    android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String) -> openFile
    android.support.v4.content.FileProvider$PathStrategy getPathStrategy(android.content.Context,java.lang.String) -> getPathStrategy
    android.support.v4.content.FileProvider$PathStrategy parsePathStrategy(android.content.Context,java.lang.String) -> parsePathStrategy
    int modeToMode(java.lang.String) -> modeToMode
    java.io.File buildPath(java.io.File,java.lang.String[]) -> buildPath
    java.lang.String[] copyOf(java.lang.String[],int) -> copyOf
    java.lang.Object[] copyOf(java.lang.Object[],int) -> copyOf
android.support.v4.content.FileProvider$PathStrategy -> android.support.v4.content.FileProvider$PathStrategy:
    android.net.Uri getUriForFile(java.io.File) -> getUriForFile
    java.io.File getFileForUri(android.net.Uri) -> getFileForUri
android.support.v4.content.FileProvider$SimplePathStrategy -> android.support.v4.content.FileProvider$SimplePathStrategy:
    java.lang.String mAuthority -> mAuthority
    java.util.HashMap mRoots -> mRoots
    void addRoot(java.lang.String,java.io.File) -> addRoot
    android.net.Uri getUriForFile(java.io.File) -> getUriForFile
    java.io.File getFileForUri(android.net.Uri) -> getFileForUri
android.support.v4.content.IntentCompat -> android.support.v4.content.IntentCompat:
    android.support.v4.content.IntentCompat$IntentCompatImpl IMPL -> IMPL
    java.lang.String ACTION_EXTERNAL_APPLICATIONS_AVAILABLE -> ACTION_EXTERNAL_APPLICATIONS_AVAILABLE
    java.lang.String ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE -> ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE
    java.lang.String EXTRA_CHANGED_PACKAGE_LIST -> EXTRA_CHANGED_PACKAGE_LIST
    java.lang.String EXTRA_CHANGED_UID_LIST -> EXTRA_CHANGED_UID_LIST
    java.lang.String EXTRA_HTML_TEXT -> EXTRA_HTML_TEXT
    int FLAG_ACTIVITY_TASK_ON_HOME -> FLAG_ACTIVITY_TASK_ON_HOME
    int FLAG_ACTIVITY_CLEAR_TASK -> FLAG_ACTIVITY_CLEAR_TASK
    android.content.Intent makeMainActivity(android.content.ComponentName) -> makeMainActivity
    android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String) -> makeMainSelectorActivity
    android.content.Intent makeRestartActivityTask(android.content.ComponentName) -> makeRestartActivityTask
android.support.v4.content.IntentCompat$IntentCompatImpl -> android.support.v4.content.IntentCompat$IntentCompatImpl:
    android.content.Intent makeMainActivity(android.content.ComponentName) -> makeMainActivity
    android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String) -> makeMainSelectorActivity
    android.content.Intent makeRestartActivityTask(android.content.ComponentName) -> makeRestartActivityTask
android.support.v4.content.IntentCompat$IntentCompatImplBase -> android.support.v4.content.IntentCompat$IntentCompatImplBase:
    android.content.Intent makeMainActivity(android.content.ComponentName) -> makeMainActivity
    android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String) -> makeMainSelectorActivity
    android.content.Intent makeRestartActivityTask(android.content.ComponentName) -> makeRestartActivityTask
android.support.v4.content.IntentCompat$IntentCompatImplHC -> android.support.v4.content.IntentCompat$IntentCompatImplHC:
    android.content.Intent makeMainActivity(android.content.ComponentName) -> makeMainActivity
    android.content.Intent makeRestartActivityTask(android.content.ComponentName) -> makeRestartActivityTask
android.support.v4.content.IntentCompat$IntentCompatImplIcsMr1 -> android.support.v4.content.IntentCompat$IntentCompatImplIcsMr1:
    android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String) -> makeMainSelectorActivity
android.support.v4.content.IntentCompatHoneycomb -> android.support.v4.content.IntentCompatHoneycomb:
    android.content.Intent makeMainActivity(android.content.ComponentName) -> makeMainActivity
    android.content.Intent makeRestartActivityTask(android.content.ComponentName) -> makeRestartActivityTask
android.support.v4.content.IntentCompatIcsMr1 -> android.support.v4.content.IntentCompatIcsMr1:
    android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String) -> makeMainSelectorActivity
android.support.v4.content.Loader -> android.support.v4.content.Loader:
    int mId -> mId
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> mListener
    android.content.Context mContext -> mContext
    boolean mStarted -> mStarted
    boolean mAbandoned -> mAbandoned
    boolean mReset -> mReset
    boolean mContentChanged -> mContentChanged
    void deliverResult(java.lang.Object) -> deliverResult
    android.content.Context getContext() -> getContext
    int getId() -> getId
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> registerListener
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> unregisterListener
    boolean isStarted() -> isStarted
    boolean isAbandoned() -> isAbandoned
    boolean isReset() -> isReset
    void startLoading() -> startLoading
    void onStartLoading() -> onStartLoading
    void forceLoad() -> forceLoad
    void onForceLoad() -> onForceLoad
    void stopLoading() -> stopLoading
    void onStopLoading() -> onStopLoading
    void abandon() -> abandon
    void onAbandon() -> onAbandon
    void reset() -> reset
    void onReset() -> onReset
    boolean takeContentChanged() -> takeContentChanged
    void onContentChanged() -> onContentChanged
    java.lang.String dataToString(java.lang.Object) -> dataToString
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
android.support.v4.content.Loader$ForceLoadContentObserver -> android.support.v4.content.Loader$ForceLoadContentObserver:
    android.support.v4.content.Loader this$0 -> this$0
    boolean deliverSelfNotifications() -> deliverSelfNotifications
    void onChange(boolean) -> onChange
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.content.Loader$OnLoadCompleteListener:
    void onLoadComplete(android.support.v4.content.Loader,java.lang.Object) -> onLoadComplete
android.support.v4.content.LocalBroadcastManager -> android.support.v4.content.LocalBroadcastManager:
    java.lang.String TAG -> TAG
    boolean DEBUG -> DEBUG
    android.content.Context mAppContext -> mAppContext
    java.util.HashMap mReceivers -> mReceivers
    java.util.HashMap mActions -> mActions
    java.util.ArrayList mPendingBroadcasts -> mPendingBroadcasts
    int MSG_EXEC_PENDING_BROADCASTS -> MSG_EXEC_PENDING_BROADCASTS
    android.os.Handler mHandler -> mHandler
    java.lang.Object mLock -> mLock
    android.support.v4.content.LocalBroadcastManager mInstance -> mInstance
    android.support.v4.content.LocalBroadcastManager getInstance(android.content.Context) -> getInstance
    void registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter) -> registerReceiver
    void unregisterReceiver(android.content.BroadcastReceiver) -> unregisterReceiver
    boolean sendBroadcast(android.content.Intent) -> sendBroadcast
    void sendBroadcastSync(android.content.Intent) -> sendBroadcastSync
    void executePendingBroadcasts() -> executePendingBroadcasts
    void access$000(android.support.v4.content.LocalBroadcastManager) -> access$000
android.support.v4.content.LocalBroadcastManager$1 -> android.support.v4.content.LocalBroadcastManager$1:
    android.support.v4.content.LocalBroadcastManager this$0 -> this$0
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.content.LocalBroadcastManager$BroadcastRecord -> android.support.v4.content.LocalBroadcastManager$BroadcastRecord:
    android.content.Intent intent -> intent
    java.util.ArrayList receivers -> receivers
android.support.v4.content.LocalBroadcastManager$ReceiverRecord -> android.support.v4.content.LocalBroadcastManager$ReceiverRecord:
    android.content.IntentFilter filter -> filter
    android.content.BroadcastReceiver receiver -> receiver
    boolean broadcasting -> broadcasting
    java.lang.String toString() -> toString
android.support.v4.content.ModernAsyncTask -> android.support.v4.content.ModernAsyncTask:
    java.lang.String LOG_TAG -> LOG_TAG
    int CORE_POOL_SIZE -> CORE_POOL_SIZE
    int MAXIMUM_POOL_SIZE -> MAXIMUM_POOL_SIZE
    int KEEP_ALIVE -> KEEP_ALIVE
    java.util.concurrent.ThreadFactory sThreadFactory -> sThreadFactory
    java.util.concurrent.BlockingQueue sPoolWorkQueue -> sPoolWorkQueue
    java.util.concurrent.Executor THREAD_POOL_EXECUTOR -> THREAD_POOL_EXECUTOR
    int MESSAGE_POST_RESULT -> MESSAGE_POST_RESULT
    int MESSAGE_POST_PROGRESS -> MESSAGE_POST_PROGRESS
    android.support.v4.content.ModernAsyncTask$InternalHandler sHandler -> sHandler
    java.util.concurrent.Executor sDefaultExecutor -> sDefaultExecutor
    android.support.v4.content.ModernAsyncTask$WorkerRunnable mWorker -> mWorker
    java.util.concurrent.FutureTask mFuture -> mFuture
    android.support.v4.content.ModernAsyncTask$Status mStatus -> mStatus
    java.util.concurrent.atomic.AtomicBoolean mTaskInvoked -> mTaskInvoked
    void init() -> init
    void setDefaultExecutor(java.util.concurrent.Executor) -> setDefaultExecutor
    void postResultIfNotInvoked(java.lang.Object) -> postResultIfNotInvoked
    java.lang.Object postResult(java.lang.Object) -> postResult
    android.support.v4.content.ModernAsyncTask$Status getStatus() -> getStatus
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    void onProgressUpdate(java.lang.Object[]) -> onProgressUpdate
    void onCancelled(java.lang.Object) -> onCancelled
    void onCancelled() -> onCancelled
    boolean isCancelled() -> isCancelled
    boolean cancel(boolean) -> cancel
    java.lang.Object get() -> get
    java.lang.Object get(long,java.util.concurrent.TimeUnit) -> get
    android.support.v4.content.ModernAsyncTask execute(java.lang.Object[]) -> execute
    android.support.v4.content.ModernAsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[]) -> executeOnExecutor
    void execute(java.lang.Runnable) -> execute
    void publishProgress(java.lang.Object[]) -> publishProgress
    void finish(java.lang.Object) -> finish
    java.util.concurrent.atomic.AtomicBoolean access$200(android.support.v4.content.ModernAsyncTask) -> access$200
    java.lang.Object access$300(android.support.v4.content.ModernAsyncTask,java.lang.Object) -> access$300
    void access$400(android.support.v4.content.ModernAsyncTask,java.lang.Object) -> access$400
    void access$500(android.support.v4.content.ModernAsyncTask,java.lang.Object) -> access$500
android.support.v4.content.ModernAsyncTask$1 -> android.support.v4.content.ModernAsyncTask$1:
    java.util.concurrent.atomic.AtomicInteger mCount -> mCount
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
android.support.v4.content.ModernAsyncTask$2 -> android.support.v4.content.ModernAsyncTask$2:
    android.support.v4.content.ModernAsyncTask this$0 -> this$0
    java.lang.Object call() -> call
android.support.v4.content.ModernAsyncTask$3 -> android.support.v4.content.ModernAsyncTask$3:
    android.support.v4.content.ModernAsyncTask this$0 -> this$0
    void done() -> done
android.support.v4.content.ModernAsyncTask$4 -> android.support.v4.content.ModernAsyncTask$4:
    int[] $SwitchMap$android$support$v4$content$ModernAsyncTask$Status -> $SwitchMap$android$support$v4$content$ModernAsyncTask$Status
android.support.v4.content.ModernAsyncTask$AsyncTaskResult -> android.support.v4.content.ModernAsyncTask$AsyncTaskResult:
    android.support.v4.content.ModernAsyncTask mTask -> mTask
    java.lang.Object[] mData -> mData
android.support.v4.content.ModernAsyncTask$InternalHandler -> android.support.v4.content.ModernAsyncTask$InternalHandler:
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.content.ModernAsyncTask$Status -> android.support.v4.content.ModernAsyncTask$Status:
    android.support.v4.content.ModernAsyncTask$Status PENDING -> PENDING
    android.support.v4.content.ModernAsyncTask$Status RUNNING -> RUNNING
    android.support.v4.content.ModernAsyncTask$Status FINISHED -> FINISHED
    android.support.v4.content.ModernAsyncTask$Status[] $VALUES -> $VALUES
    android.support.v4.content.ModernAsyncTask$Status[] values() -> values
    android.support.v4.content.ModernAsyncTask$Status valueOf(java.lang.String) -> valueOf
android.support.v4.content.ModernAsyncTask$WorkerRunnable -> android.support.v4.content.ModernAsyncTask$WorkerRunnable:
    java.lang.Object[] mParams -> mParams
android.support.v4.content.pm.ActivityInfoCompat -> android.support.v4.content.pm.ActivityInfoCompat:
    int CONFIG_UI_MODE -> CONFIG_UI_MODE
android.support.v4.database.DatabaseUtilsCompat -> android.support.v4.database.DatabaseUtilsCompat:
    java.lang.String concatenateWhere(java.lang.String,java.lang.String) -> concatenateWhere
    java.lang.String[] appendSelectionArgs(java.lang.String[],java.lang.String[]) -> appendSelectionArgs
android.support.v4.net.ConnectivityManagerCompat -> android.support.v4.net.ConnectivityManagerCompat:
    android.support.v4.net.ConnectivityManagerCompat$ConnectivityManagerCompatImpl IMPL -> IMPL
    boolean isActiveNetworkMetered(android.net.ConnectivityManager) -> isActiveNetworkMetered
    android.net.NetworkInfo getNetworkInfoFromBroadcast(android.net.ConnectivityManager,android.content.Intent) -> getNetworkInfoFromBroadcast
android.support.v4.net.ConnectivityManagerCompat$BaseConnectivityManagerCompatImpl -> android.support.v4.net.ConnectivityManagerCompat$BaseConnectivityManagerCompatImpl:
    boolean isActiveNetworkMetered(android.net.ConnectivityManager) -> isActiveNetworkMetered
android.support.v4.net.ConnectivityManagerCompat$ConnectivityManagerCompatImpl -> android.support.v4.net.ConnectivityManagerCompat$ConnectivityManagerCompatImpl:
    boolean isActiveNetworkMetered(android.net.ConnectivityManager) -> isActiveNetworkMetered
android.support.v4.net.ConnectivityManagerCompat$GingerbreadConnectivityManagerCompatImpl -> android.support.v4.net.ConnectivityManagerCompat$GingerbreadConnectivityManagerCompatImpl:
    boolean isActiveNetworkMetered(android.net.ConnectivityManager) -> isActiveNetworkMetered
android.support.v4.net.ConnectivityManagerCompat$HoneycombMR2ConnectivityManagerCompatImpl -> android.support.v4.net.ConnectivityManagerCompat$HoneycombMR2ConnectivityManagerCompatImpl:
    boolean isActiveNetworkMetered(android.net.ConnectivityManager) -> isActiveNetworkMetered
android.support.v4.net.ConnectivityManagerCompat$JellyBeanConnectivityManagerCompatImpl -> android.support.v4.net.ConnectivityManagerCompat$JellyBeanConnectivityManagerCompatImpl:
    boolean isActiveNetworkMetered(android.net.ConnectivityManager) -> isActiveNetworkMetered
android.support.v4.net.ConnectivityManagerCompatGingerbread -> android.support.v4.net.ConnectivityManagerCompatGingerbread:
    boolean isActiveNetworkMetered(android.net.ConnectivityManager) -> isActiveNetworkMetered
android.support.v4.net.ConnectivityManagerCompatHoneycombMR2 -> android.support.v4.net.ConnectivityManagerCompatHoneycombMR2:
    boolean isActiveNetworkMetered(android.net.ConnectivityManager) -> isActiveNetworkMetered
android.support.v4.net.ConnectivityManagerCompatJellyBean -> android.support.v4.net.ConnectivityManagerCompatJellyBean:
    boolean isActiveNetworkMetered(android.net.ConnectivityManager) -> isActiveNetworkMetered
android.support.v4.net.TrafficStatsCompat -> android.support.v4.net.TrafficStatsCompat:
    android.support.v4.net.TrafficStatsCompat$TrafficStatsCompatImpl IMPL -> IMPL
    void clearThreadStatsTag() -> clearThreadStatsTag
    int getThreadStatsTag() -> getThreadStatsTag
    void incrementOperationCount(int) -> incrementOperationCount
    void incrementOperationCount(int,int) -> incrementOperationCount
    void setThreadStatsTag(int) -> setThreadStatsTag
    void tagSocket(java.net.Socket) -> tagSocket
    void untagSocket(java.net.Socket) -> untagSocket
android.support.v4.net.TrafficStatsCompat$1 -> android.support.v4.net.TrafficStatsCompat$1:
android.support.v4.net.TrafficStatsCompat$BaseTrafficStatsCompatImpl -> android.support.v4.net.TrafficStatsCompat$BaseTrafficStatsCompatImpl:
    java.lang.ThreadLocal mThreadSocketTags -> mThreadSocketTags
    void clearThreadStatsTag() -> clearThreadStatsTag
    int getThreadStatsTag() -> getThreadStatsTag
    void incrementOperationCount(int) -> incrementOperationCount
    void incrementOperationCount(int,int) -> incrementOperationCount
    void setThreadStatsTag(int) -> setThreadStatsTag
    void tagSocket(java.net.Socket) -> tagSocket
    void untagSocket(java.net.Socket) -> untagSocket
android.support.v4.net.TrafficStatsCompat$BaseTrafficStatsCompatImpl$1 -> android.support.v4.net.TrafficStatsCompat$BaseTrafficStatsCompatImpl$1:
    android.support.v4.net.TrafficStatsCompat$BaseTrafficStatsCompatImpl this$0 -> this$0
    android.support.v4.net.TrafficStatsCompat$BaseTrafficStatsCompatImpl$SocketTags initialValue() -> initialValue
    java.lang.Object initialValue() -> initialValue
android.support.v4.net.TrafficStatsCompat$BaseTrafficStatsCompatImpl$SocketTags -> android.support.v4.net.TrafficStatsCompat$BaseTrafficStatsCompatImpl$SocketTags:
    int statsTag -> statsTag
android.support.v4.net.TrafficStatsCompat$IcsTrafficStatsCompatImpl -> android.support.v4.net.TrafficStatsCompat$IcsTrafficStatsCompatImpl:
    void clearThreadStatsTag() -> clearThreadStatsTag
    int getThreadStatsTag() -> getThreadStatsTag
    void incrementOperationCount(int) -> incrementOperationCount
    void incrementOperationCount(int,int) -> incrementOperationCount
    void setThreadStatsTag(int) -> setThreadStatsTag
    void tagSocket(java.net.Socket) -> tagSocket
    void untagSocket(java.net.Socket) -> untagSocket
android.support.v4.net.TrafficStatsCompat$TrafficStatsCompatImpl -> android.support.v4.net.TrafficStatsCompat$TrafficStatsCompatImpl:
    void clearThreadStatsTag() -> clearThreadStatsTag
    int getThreadStatsTag() -> getThreadStatsTag
    void incrementOperationCount(int) -> incrementOperationCount
    void incrementOperationCount(int,int) -> incrementOperationCount
    void setThreadStatsTag(int) -> setThreadStatsTag
    void tagSocket(java.net.Socket) -> tagSocket
    void untagSocket(java.net.Socket) -> untagSocket
android.support.v4.net.TrafficStatsCompatIcs -> android.support.v4.net.TrafficStatsCompatIcs:
    void clearThreadStatsTag() -> clearThreadStatsTag
    int getThreadStatsTag() -> getThreadStatsTag
    void incrementOperationCount(int) -> incrementOperationCount
    void incrementOperationCount(int,int) -> incrementOperationCount
    void setThreadStatsTag(int) -> setThreadStatsTag
    void tagSocket(java.net.Socket) -> tagSocket
    void untagSocket(java.net.Socket) -> untagSocket
android.support.v4.os.ParcelableCompat -> android.support.v4.os.ParcelableCompat:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> newCreator
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.os.ParcelableCompat$CompatCreator:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> mCallbacks
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.os.ParcelableCompatCreatorCallbacks:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.os.ParcelableCompatCreatorHoneycombMR2:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> mCallbacks
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> instantiate
android.support.v4.util.AtomicFile -> android.support.v4.util.AtomicFile:
    java.io.File mBaseName -> mBaseName
    java.io.File mBackupName -> mBackupName
    java.io.File getBaseFile() -> getBaseFile
    void delete() -> delete
    java.io.FileOutputStream startWrite() -> startWrite
    void finishWrite(java.io.FileOutputStream) -> finishWrite
    void failWrite(java.io.FileOutputStream) -> failWrite
    java.io.FileInputStream openRead() -> openRead
    byte[] readFully() -> readFully
    boolean sync(java.io.FileOutputStream) -> sync
android.support.v4.util.DebugUtils -> android.support.v4.util.DebugUtils:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> buildShortClassTag
android.support.v4.util.LogWriter -> android.support.v4.util.LogWriter:
    java.lang.String mTag -> mTag
    java.lang.StringBuilder mBuilder -> mBuilder
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> flushBuilder
android.support.v4.util.LongSparseArray -> android.support.v4.util.LongSparseArray:
    java.lang.Object DELETED -> DELETED
    boolean mGarbage -> mGarbage
    long[] mKeys -> mKeys
    java.lang.Object[] mValues -> mValues
    int mSize -> mSize
    android.support.v4.util.LongSparseArray clone() -> clone
    java.lang.Object get(long) -> get
    java.lang.Object get(long,java.lang.Object) -> get
    void delete(long) -> delete
    void remove(long) -> remove
    void removeAt(int) -> removeAt
    void gc() -> gc
    void put(long,java.lang.Object) -> put
    int size() -> size
    long keyAt(int) -> keyAt
    java.lang.Object valueAt(int) -> valueAt
    void setValueAt(int,java.lang.Object) -> setValueAt
    int indexOfKey(long) -> indexOfKey
    int indexOfValue(java.lang.Object) -> indexOfValue
    void clear() -> clear
    void append(long,java.lang.Object) -> append
    int binarySearch(long[],int,int,long) -> binarySearch
    int idealByteArraySize(int) -> idealByteArraySize
    int idealLongArraySize(int) -> idealLongArraySize
    java.lang.Object clone() -> clone
android.support.v4.util.LruCache -> android.support.v4.util.LruCache:
    java.util.LinkedHashMap map -> map
    int size -> size
    int maxSize -> maxSize
    int putCount -> putCount
    int createCount -> createCount
    int evictionCount -> evictionCount
    int hitCount -> hitCount
    int missCount -> missCount
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void trimToSize(int) -> trimToSize
    java.lang.Object remove(java.lang.Object) -> remove
    void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object) -> entryRemoved
    java.lang.Object create(java.lang.Object) -> create
    int safeSizeOf(java.lang.Object,java.lang.Object) -> safeSizeOf
    int sizeOf(java.lang.Object,java.lang.Object) -> sizeOf
    void evictAll() -> evictAll
    int size() -> size
    int maxSize() -> maxSize
    int hitCount() -> hitCount
    int missCount() -> missCount
    int createCount() -> createCount
    int putCount() -> putCount
    int evictionCount() -> evictionCount
    java.util.Map snapshot() -> snapshot
    java.lang.String toString() -> toString
android.support.v4.util.SparseArrayCompat -> android.support.v4.util.SparseArrayCompat:
    java.lang.Object DELETED -> DELETED
    boolean mGarbage -> mGarbage
    int[] mKeys -> mKeys
    java.lang.Object[] mValues -> mValues
    int mSize -> mSize
    java.lang.Object get(int) -> get
    java.lang.Object get(int,java.lang.Object) -> get
    void delete(int) -> delete
    void remove(int) -> remove
    void removeAt(int) -> removeAt
    void removeAtRange(int,int) -> removeAtRange
    void gc() -> gc
    void put(int,java.lang.Object) -> put
    int size() -> size
    int keyAt(int) -> keyAt
    java.lang.Object valueAt(int) -> valueAt
    void setValueAt(int,java.lang.Object) -> setValueAt
    int indexOfKey(int) -> indexOfKey
    int indexOfValue(java.lang.Object) -> indexOfValue
    void clear() -> clear
    void append(int,java.lang.Object) -> append
    int binarySearch(int[],int,int,int) -> binarySearch
    int idealByteArraySize(int) -> idealByteArraySize
    int idealIntArraySize(int) -> idealIntArraySize
android.support.v4.util.TimeUtils -> android.support.v4.util.TimeUtils:
    int HUNDRED_DAY_FIELD_LEN -> HUNDRED_DAY_FIELD_LEN
    int SECONDS_PER_MINUTE -> SECONDS_PER_MINUTE
    int SECONDS_PER_HOUR -> SECONDS_PER_HOUR
    int SECONDS_PER_DAY -> SECONDS_PER_DAY
    java.lang.Object sFormatSync -> sFormatSync
    char[] sFormatStr -> sFormatStr
    int accumField(int,int,boolean,int) -> accumField
    int printField(char[],int,char,int,boolean,int) -> printField
    int formatDurationLocked(long,int) -> formatDurationLocked
    void formatDuration(long,java.lang.StringBuilder) -> formatDuration
    void formatDuration(long,java.io.PrintWriter,int) -> formatDuration
    void formatDuration(long,java.io.PrintWriter) -> formatDuration
    void formatDuration(long,long,java.io.PrintWriter) -> formatDuration
android.support.v4.view.AccessibilityDelegateCompat -> android.support.v4.view.AccessibilityDelegateCompat:
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl IMPL -> IMPL
    java.lang.Object DEFAULT_DELEGATE -> DEFAULT_DELEGATE
    java.lang.Object mBridge -> mBridge
    java.lang.Object getBridge() -> getBridge
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> onInitializeAccessibilityNodeInfo
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View) -> getAccessibilityNodeProvider
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> performAccessibilityAction
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl -> android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> newAccessiblityDelegateDefaultImpl
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> newAccessiblityDelegateBridge
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl$1 -> android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl$1:
    android.support.v4.view.AccessibilityDelegateCompat val$compat -> val$compat
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl this$0 -> this$0
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl -> android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> newAccessiblityDelegateDefaultImpl
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> newAccessiblityDelegateBridge
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> getAccessibilityNodeProvider
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> performAccessibilityAction
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl -> android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl:
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> newAccessiblityDelegateBridge
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> getAccessibilityNodeProvider
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> performAccessibilityAction
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl$1 -> android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl$1:
    android.support.v4.view.AccessibilityDelegateCompat val$compat -> val$compat
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl this$0 -> this$0
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
    java.lang.Object getAccessibilityNodeProvider(android.view.View) -> getAccessibilityNodeProvider
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> performAccessibilityAction
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl -> android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> newAccessiblityDelegateDefaultImpl
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> newAccessiblityDelegateBridge
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> getAccessibilityNodeProvider
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> performAccessibilityAction
android.support.v4.view.AccessibilityDelegateCompatIcs -> android.support.v4.view.AccessibilityDelegateCompatIcs:
    java.lang.Object newAccessibilityDelegateDefaultImpl() -> newAccessibilityDelegateDefaultImpl
    java.lang.Object newAccessibilityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge) -> newAccessibilityDelegateBridge
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,java.lang.Object) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
android.support.v4.view.AccessibilityDelegateCompatIcs$1 -> android.support.v4.view.AccessibilityDelegateCompatIcs$1:
    android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge val$bridge -> val$bridge
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge -> android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge:
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
android.support.v4.view.AccessibilityDelegateCompatJellyBean -> android.support.v4.view.AccessibilityDelegateCompatJellyBean:
    java.lang.Object newAccessibilityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean) -> newAccessibilityDelegateBridge
    java.lang.Object getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> getAccessibilityNodeProvider
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> performAccessibilityAction
android.support.v4.view.AccessibilityDelegateCompatJellyBean$1 -> android.support.v4.view.AccessibilityDelegateCompatJellyBean$1:
    android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean val$bridge -> val$bridge
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
    android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View) -> getAccessibilityNodeProvider
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> performAccessibilityAction
android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean -> android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean:
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
    java.lang.Object getAccessibilityNodeProvider(android.view.View) -> getAccessibilityNodeProvider
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> performAccessibilityAction
android.support.v4.view.GestureDetectorCompat -> android.support.v4.view.GestureDetectorCompat:
    android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImpl mImpl -> mImpl
    boolean isLongpressEnabled() -> isLongpressEnabled
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setIsLongpressEnabled(boolean) -> setIsLongpressEnabled
    void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener) -> setOnDoubleTapListener
android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImpl -> android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImpl:
    boolean isLongpressEnabled() -> isLongpressEnabled
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setIsLongpressEnabled(boolean) -> setIsLongpressEnabled
    void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener) -> setOnDoubleTapListener
android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase -> android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase:
    int mTouchSlopSquare -> mTouchSlopSquare
    int mDoubleTapSlopSquare -> mDoubleTapSlopSquare
    int mMinimumFlingVelocity -> mMinimumFlingVelocity
    int mMaximumFlingVelocity -> mMaximumFlingVelocity
    int LONGPRESS_TIMEOUT -> LONGPRESS_TIMEOUT
    int TAP_TIMEOUT -> TAP_TIMEOUT
    int DOUBLE_TAP_TIMEOUT -> DOUBLE_TAP_TIMEOUT
    int SHOW_PRESS -> SHOW_PRESS
    int LONG_PRESS -> LONG_PRESS
    int TAP -> TAP
    android.os.Handler mHandler -> mHandler
    android.view.GestureDetector$OnGestureListener mListener -> mListener
    android.view.GestureDetector$OnDoubleTapListener mDoubleTapListener -> mDoubleTapListener
    boolean mStillDown -> mStillDown
    boolean mDeferConfirmSingleTap -> mDeferConfirmSingleTap
    boolean mInLongPress -> mInLongPress
    boolean mAlwaysInTapRegion -> mAlwaysInTapRegion
    boolean mAlwaysInBiggerTapRegion -> mAlwaysInBiggerTapRegion
    android.view.MotionEvent mCurrentDownEvent -> mCurrentDownEvent
    android.view.MotionEvent mPreviousUpEvent -> mPreviousUpEvent
    boolean mIsDoubleTapping -> mIsDoubleTapping
    float mLastFocusX -> mLastFocusX
    float mLastFocusY -> mLastFocusY
    float mDownFocusX -> mDownFocusX
    float mDownFocusY -> mDownFocusY
    boolean mIsLongpressEnabled -> mIsLongpressEnabled
    android.view.VelocityTracker mVelocityTracker -> mVelocityTracker
    void init(android.content.Context) -> init
    void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener) -> setOnDoubleTapListener
    void setIsLongpressEnabled(boolean) -> setIsLongpressEnabled
    boolean isLongpressEnabled() -> isLongpressEnabled
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void cancel() -> cancel
    void cancelTaps() -> cancelTaps
    boolean isConsideredDoubleTap(android.view.MotionEvent,android.view.MotionEvent,android.view.MotionEvent) -> isConsideredDoubleTap
    void dispatchLongPress() -> dispatchLongPress
    android.view.MotionEvent access$000(android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase) -> access$000
    android.view.GestureDetector$OnGestureListener access$100(android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase) -> access$100
    void access$200(android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase) -> access$200
    android.view.GestureDetector$OnDoubleTapListener access$300(android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase) -> access$300
    boolean access$400(android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase) -> access$400
    boolean access$502(android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase,boolean) -> access$502
android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase$GestureHandler -> android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase$GestureHandler:
    android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplBase this$0 -> this$0
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplJellybeanMr2 -> android.support.v4.view.GestureDetectorCompat$GestureDetectorCompatImplJellybeanMr2:
    android.view.GestureDetector mDetector -> mDetector
    boolean isLongpressEnabled() -> isLongpressEnabled
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setIsLongpressEnabled(boolean) -> setIsLongpressEnabled
    void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener) -> setOnDoubleTapListener
android.support.v4.view.GravityCompat -> android.support.v4.view.GravityCompat:
    android.support.v4.view.GravityCompat$GravityCompatImpl IMPL -> IMPL
    int RELATIVE_LAYOUT_DIRECTION -> RELATIVE_LAYOUT_DIRECTION
    int START -> START
    int END -> END
    int RELATIVE_HORIZONTAL_GRAVITY_MASK -> RELATIVE_HORIZONTAL_GRAVITY_MASK
    void apply(int,int,int,android.graphics.Rect,android.graphics.Rect,int) -> apply
    void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect,int) -> apply
    void applyDisplay(int,android.graphics.Rect,android.graphics.Rect,int) -> applyDisplay
    int getAbsoluteGravity(int,int) -> getAbsoluteGravity
android.support.v4.view.GravityCompat$GravityCompatImpl -> android.support.v4.view.GravityCompat$GravityCompatImpl:
    int getAbsoluteGravity(int,int) -> getAbsoluteGravity
    void apply(int,int,int,android.graphics.Rect,android.graphics.Rect,int) -> apply
    void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect,int) -> apply
    void applyDisplay(int,android.graphics.Rect,android.graphics.Rect,int) -> applyDisplay
android.support.v4.view.GravityCompat$GravityCompatImplBase -> android.support.v4.view.GravityCompat$GravityCompatImplBase:
    int getAbsoluteGravity(int,int) -> getAbsoluteGravity
    void apply(int,int,int,android.graphics.Rect,android.graphics.Rect,int) -> apply
    void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect,int) -> apply
    void applyDisplay(int,android.graphics.Rect,android.graphics.Rect,int) -> applyDisplay
android.support.v4.view.GravityCompat$GravityCompatImplJellybeanMr1 -> android.support.v4.view.GravityCompat$GravityCompatImplJellybeanMr1:
    int getAbsoluteGravity(int,int) -> getAbsoluteGravity
    void apply(int,int,int,android.graphics.Rect,android.graphics.Rect,int) -> apply
    void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect,int) -> apply
    void applyDisplay(int,android.graphics.Rect,android.graphics.Rect,int) -> applyDisplay
android.support.v4.view.GravityCompatJellybeanMr1 -> android.support.v4.view.GravityCompatJellybeanMr1:
    int getAbsoluteGravity(int,int) -> getAbsoluteGravity
    void apply(int,int,int,android.graphics.Rect,android.graphics.Rect,int) -> apply
    void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect,int) -> apply
    void applyDisplay(int,android.graphics.Rect,android.graphics.Rect,int) -> applyDisplay
android.support.v4.view.KeyEventCompat -> android.support.v4.view.KeyEventCompat:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> IMPL
    int normalizeMetaState(int) -> normalizeMetaState
    boolean metaStateHasModifiers(int,int) -> metaStateHasModifiers
    boolean metaStateHasNoModifiers(int) -> metaStateHasNoModifiers
    boolean hasModifiers(android.view.KeyEvent,int) -> hasModifiers
    boolean hasNoModifiers(android.view.KeyEvent) -> hasNoModifiers
    void startTracking(android.view.KeyEvent) -> startTracking
    boolean isTracking(android.view.KeyEvent) -> isTracking
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl:
    int META_MODIFIER_MASK -> META_MODIFIER_MASK
    int META_ALL_MASK -> META_ALL_MASK
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> metaStateFilterDirectionalModifiers
    int normalizeMetaState(int) -> normalizeMetaState
    boolean metaStateHasModifiers(int,int) -> metaStateHasModifiers
    boolean metaStateHasNoModifiers(int) -> metaStateHasNoModifiers
    void startTracking(android.view.KeyEvent) -> startTracking
    boolean isTracking(android.view.KeyEvent) -> isTracking
android.support.v4.view.KeyEventCompat$EclairKeyEventVersionImpl -> android.support.v4.view.KeyEventCompat$EclairKeyEventVersionImpl:
    void startTracking(android.view.KeyEvent) -> startTracking
    boolean isTracking(android.view.KeyEvent) -> isTracking
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl:
    int normalizeMetaState(int) -> normalizeMetaState
    boolean metaStateHasModifiers(int,int) -> metaStateHasModifiers
    boolean metaStateHasNoModifiers(int) -> metaStateHasNoModifiers
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.KeyEventCompat$KeyEventVersionImpl:
    int normalizeMetaState(int) -> normalizeMetaState
    boolean metaStateHasModifiers(int,int) -> metaStateHasModifiers
    boolean metaStateHasNoModifiers(int) -> metaStateHasNoModifiers
    void startTracking(android.view.KeyEvent) -> startTracking
    boolean isTracking(android.view.KeyEvent) -> isTracking
android.support.v4.view.KeyEventCompatEclair -> android.support.v4.view.KeyEventCompatEclair:
    void startTracking(android.view.KeyEvent) -> startTracking
    boolean isTracking(android.view.KeyEvent) -> isTracking
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.KeyEventCompatHoneycomb:
    int normalizeMetaState(int) -> normalizeMetaState
    boolean metaStateHasModifiers(int,int) -> metaStateHasModifiers
    boolean metaStateHasNoModifiers(int) -> metaStateHasNoModifiers
android.support.v4.view.MenuCompat -> android.support.v4.view.MenuCompat:
    android.support.v4.view.MenuCompat$MenuVersionImpl IMPL -> IMPL
    boolean setShowAsAction(android.view.MenuItem,int) -> setShowAsAction
android.support.v4.view.MenuCompat$BaseMenuVersionImpl -> android.support.v4.view.MenuCompat$BaseMenuVersionImpl:
    boolean setShowAsAction(android.view.MenuItem,int) -> setShowAsAction
android.support.v4.view.MenuCompat$HoneycombMenuVersionImpl -> android.support.v4.view.MenuCompat$HoneycombMenuVersionImpl:
    boolean setShowAsAction(android.view.MenuItem,int) -> setShowAsAction
android.support.v4.view.MenuCompat$MenuVersionImpl -> android.support.v4.view.MenuCompat$MenuVersionImpl:
    boolean setShowAsAction(android.view.MenuItem,int) -> setShowAsAction
android.support.v4.view.MenuItemCompat -> android.support.v4.view.MenuItemCompat:
    int SHOW_AS_ACTION_NEVER -> SHOW_AS_ACTION_NEVER
    int SHOW_AS_ACTION_IF_ROOM -> SHOW_AS_ACTION_IF_ROOM
    int SHOW_AS_ACTION_ALWAYS -> SHOW_AS_ACTION_ALWAYS
    int SHOW_AS_ACTION_WITH_TEXT -> SHOW_AS_ACTION_WITH_TEXT
    int SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW -> SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW
    android.support.v4.view.MenuItemCompat$MenuVersionImpl IMPL -> IMPL
    boolean setShowAsAction(android.view.MenuItem,int) -> setShowAsAction
    android.view.MenuItem setActionView(android.view.MenuItem,android.view.View) -> setActionView
android.support.v4.view.MenuItemCompat$BaseMenuVersionImpl -> android.support.v4.view.MenuItemCompat$BaseMenuVersionImpl:
    boolean setShowAsAction(android.view.MenuItem,int) -> setShowAsAction
    android.view.MenuItem setActionView(android.view.MenuItem,android.view.View) -> setActionView
android.support.v4.view.MenuItemCompat$HoneycombMenuVersionImpl -> android.support.v4.view.MenuItemCompat$HoneycombMenuVersionImpl:
    boolean setShowAsAction(android.view.MenuItem,int) -> setShowAsAction
    android.view.MenuItem setActionView(android.view.MenuItem,android.view.View) -> setActionView
android.support.v4.view.MenuItemCompat$MenuVersionImpl -> android.support.v4.view.MenuItemCompat$MenuVersionImpl:
    boolean setShowAsAction(android.view.MenuItem,int) -> setShowAsAction
    android.view.MenuItem setActionView(android.view.MenuItem,android.view.View) -> setActionView
android.support.v4.view.MenuItemCompatHoneycomb -> android.support.v4.view.MenuItemCompatHoneycomb:
    void setShowAsAction(android.view.MenuItem,int) -> setShowAsAction
    android.view.MenuItem setActionView(android.view.MenuItem,android.view.View) -> setActionView
android.support.v4.view.MotionEventCompat -> android.support.v4.view.MotionEventCompat:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> IMPL
    int ACTION_MASK -> ACTION_MASK
    int ACTION_POINTER_DOWN -> ACTION_POINTER_DOWN
    int ACTION_POINTER_UP -> ACTION_POINTER_UP
    int ACTION_HOVER_MOVE -> ACTION_HOVER_MOVE
    int ACTION_SCROLL -> ACTION_SCROLL
    int ACTION_POINTER_INDEX_MASK -> ACTION_POINTER_INDEX_MASK
    int ACTION_POINTER_INDEX_SHIFT -> ACTION_POINTER_INDEX_SHIFT
    int ACTION_HOVER_ENTER -> ACTION_HOVER_ENTER
    int ACTION_HOVER_EXIT -> ACTION_HOVER_EXIT
    int getActionMasked(android.view.MotionEvent) -> getActionMasked
    int getActionIndex(android.view.MotionEvent) -> getActionIndex
    int findPointerIndex(android.view.MotionEvent,int) -> findPointerIndex
    int getPointerId(android.view.MotionEvent,int) -> getPointerId
    float getX(android.view.MotionEvent,int) -> getX
    float getY(android.view.MotionEvent,int) -> getY
    int getPointerCount(android.view.MotionEvent) -> getPointerCount
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl:
    int findPointerIndex(android.view.MotionEvent,int) -> findPointerIndex
    int getPointerId(android.view.MotionEvent,int) -> getPointerId
    float getX(android.view.MotionEvent,int) -> getX
    float getY(android.view.MotionEvent,int) -> getY
    int getPointerCount(android.view.MotionEvent) -> getPointerCount
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl:
    int findPointerIndex(android.view.MotionEvent,int) -> findPointerIndex
    int getPointerId(android.view.MotionEvent,int) -> getPointerId
    float getX(android.view.MotionEvent,int) -> getX
    float getY(android.view.MotionEvent,int) -> getY
    int getPointerCount(android.view.MotionEvent) -> getPointerCount
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.MotionEventCompat$MotionEventVersionImpl:
    int findPointerIndex(android.view.MotionEvent,int) -> findPointerIndex
    int getPointerId(android.view.MotionEvent,int) -> getPointerId
    float getX(android.view.MotionEvent,int) -> getX
    float getY(android.view.MotionEvent,int) -> getY
    int getPointerCount(android.view.MotionEvent) -> getPointerCount
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.MotionEventCompatEclair:
    int findPointerIndex(android.view.MotionEvent,int) -> findPointerIndex
    int getPointerId(android.view.MotionEvent,int) -> getPointerId
    float getX(android.view.MotionEvent,int) -> getX
    float getY(android.view.MotionEvent,int) -> getY
    int getPointerCount(android.view.MotionEvent) -> getPointerCount
android.support.v4.view.PagerAdapter -> android.support.v4.view.PagerAdapter:
    android.database.DataSetObservable mObservable -> mObservable
    int POSITION_UNCHANGED -> POSITION_UNCHANGED
    int POSITION_NONE -> POSITION_NONE
    int getCount() -> getCount
    void startUpdate(android.view.ViewGroup) -> startUpdate
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> instantiateItem
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> destroyItem
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> setPrimaryItem
    void finishUpdate(android.view.ViewGroup) -> finishUpdate
    void startUpdate(android.view.View) -> startUpdate
    java.lang.Object instantiateItem(android.view.View,int) -> instantiateItem
    void destroyItem(android.view.View,int,java.lang.Object) -> destroyItem
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> setPrimaryItem
    void finishUpdate(android.view.View) -> finishUpdate
    boolean isViewFromObject(android.view.View,java.lang.Object) -> isViewFromObject
    android.os.Parcelable saveState() -> saveState
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> restoreState
    int getItemPosition(java.lang.Object) -> getItemPosition
    void notifyDataSetChanged() -> notifyDataSetChanged
    void registerDataSetObserver(android.database.DataSetObserver) -> registerDataSetObserver
    void unregisterDataSetObserver(android.database.DataSetObserver) -> unregisterDataSetObserver
    java.lang.CharSequence getPageTitle(int) -> getPageTitle
    float getPageWidth(int) -> getPageWidth
android.support.v4.view.PagerTabStrip -> android.support.v4.view.PagerTabStrip:
    java.lang.String TAG -> TAG
    int INDICATOR_HEIGHT -> INDICATOR_HEIGHT
    int MIN_PADDING_BOTTOM -> MIN_PADDING_BOTTOM
    int TAB_PADDING -> TAB_PADDING
    int TAB_SPACING -> TAB_SPACING
    int MIN_TEXT_SPACING -> MIN_TEXT_SPACING
    int FULL_UNDERLINE_HEIGHT -> FULL_UNDERLINE_HEIGHT
    int MIN_STRIP_HEIGHT -> MIN_STRIP_HEIGHT
    int mIndicatorColor -> mIndicatorColor
    int mIndicatorHeight -> mIndicatorHeight
    int mMinPaddingBottom -> mMinPaddingBottom
    int mMinTextSpacing -> mMinTextSpacing
    int mMinStripHeight -> mMinStripHeight
    int mTabPadding -> mTabPadding
    android.graphics.Paint mTabPaint -> mTabPaint
    android.graphics.Rect mTempRect -> mTempRect
    int mTabAlpha -> mTabAlpha
    boolean mDrawFullUnderline -> mDrawFullUnderline
    boolean mDrawFullUnderlineSet -> mDrawFullUnderlineSet
    int mFullUnderlineHeight -> mFullUnderlineHeight
    boolean mIgnoreTap -> mIgnoreTap
    float mInitialMotionX -> mInitialMotionX
    float mInitialMotionY -> mInitialMotionY
    int mTouchSlop -> mTouchSlop
    void setTabIndicatorColor(int) -> setTabIndicatorColor
    void setTabIndicatorColorResource(int) -> setTabIndicatorColorResource
    int getTabIndicatorColor() -> getTabIndicatorColor
    void setPadding(int,int,int,int) -> setPadding
    void setTextSpacing(int) -> setTextSpacing
    void setBackgroundDrawable(android.graphics.drawable.Drawable) -> setBackgroundDrawable
    void setBackgroundColor(int) -> setBackgroundColor
    void setBackgroundResource(int) -> setBackgroundResource
    void setDrawFullUnderline(boolean) -> setDrawFullUnderline
    boolean getDrawFullUnderline() -> getDrawFullUnderline
    int getMinHeight() -> getMinHeight
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onDraw(android.graphics.Canvas) -> onDraw
    void updateTextPositions(int,float,boolean) -> updateTextPositions
android.support.v4.view.PagerTabStrip$1 -> android.support.v4.view.PagerTabStrip$1:
    android.support.v4.view.PagerTabStrip this$0 -> this$0
    void onClick(android.view.View) -> onClick
android.support.v4.view.PagerTabStrip$2 -> android.support.v4.view.PagerTabStrip$2:
    android.support.v4.view.PagerTabStrip this$0 -> this$0
    void onClick(android.view.View) -> onClick
android.support.v4.view.PagerTitleStrip -> android.support.v4.view.PagerTitleStrip:
    java.lang.String TAG -> TAG
    android.support.v4.view.ViewPager mPager -> mPager
    android.widget.TextView mPrevText -> mPrevText
    android.widget.TextView mCurrText -> mCurrText
    android.widget.TextView mNextText -> mNextText
    int mLastKnownCurrentPage -> mLastKnownCurrentPage
    float mLastKnownPositionOffset -> mLastKnownPositionOffset
    int mScaledTextSpacing -> mScaledTextSpacing
    int mGravity -> mGravity
    boolean mUpdatingText -> mUpdatingText
    boolean mUpdatingPositions -> mUpdatingPositions
    android.support.v4.view.PagerTitleStrip$PageListener mPageListener -> mPageListener
    java.lang.ref.WeakReference mWatchingAdapter -> mWatchingAdapter
    int[] ATTRS -> ATTRS
    int[] TEXT_ATTRS -> TEXT_ATTRS
    float SIDE_ALPHA -> SIDE_ALPHA
    int TEXT_SPACING -> TEXT_SPACING
    int mNonPrimaryAlpha -> mNonPrimaryAlpha
    int mTextColor -> mTextColor
    android.support.v4.view.PagerTitleStrip$PagerTitleStripImpl IMPL -> IMPL
    void setSingleLineAllCaps(android.widget.TextView) -> setSingleLineAllCaps
    void setTextSpacing(int) -> setTextSpacing
    int getTextSpacing() -> getTextSpacing
    void setNonPrimaryAlpha(float) -> setNonPrimaryAlpha
    void setTextColor(int) -> setTextColor
    void setTextSize(int,float) -> setTextSize
    void setGravity(int) -> setGravity
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void updateText(int,android.support.v4.view.PagerAdapter) -> updateText
    void requestLayout() -> requestLayout
    void updateAdapter(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> updateAdapter
    void updateTextPositions(int,float,boolean) -> updateTextPositions
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    int getMinHeight() -> getMinHeight
    float access$100(android.support.v4.view.PagerTitleStrip) -> access$100
android.support.v4.view.PagerTitleStrip$1 -> android.support.v4.view.PagerTitleStrip$1:
android.support.v4.view.PagerTitleStrip$PageListener -> android.support.v4.view.PagerTitleStrip$PageListener:
    int mScrollState -> mScrollState
    android.support.v4.view.PagerTitleStrip this$0 -> this$0
    void onPageScrolled(int,float,int) -> onPageScrolled
    void onPageSelected(int) -> onPageSelected
    void onPageScrollStateChanged(int) -> onPageScrollStateChanged
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> onAdapterChanged
    void onChanged() -> onChanged
android.support.v4.view.PagerTitleStrip$PagerTitleStripImpl -> android.support.v4.view.PagerTitleStrip$PagerTitleStripImpl:
    void setSingleLineAllCaps(android.widget.TextView) -> setSingleLineAllCaps
android.support.v4.view.PagerTitleStrip$PagerTitleStripImplBase -> android.support.v4.view.PagerTitleStrip$PagerTitleStripImplBase:
    void setSingleLineAllCaps(android.widget.TextView) -> setSingleLineAllCaps
android.support.v4.view.PagerTitleStrip$PagerTitleStripImplIcs -> android.support.v4.view.PagerTitleStrip$PagerTitleStripImplIcs:
    void setSingleLineAllCaps(android.widget.TextView) -> setSingleLineAllCaps
android.support.v4.view.PagerTitleStripIcs -> android.support.v4.view.PagerTitleStripIcs:
    void setSingleLineAllCaps(android.widget.TextView) -> setSingleLineAllCaps
android.support.v4.view.PagerTitleStripIcs$SingleLineAllCapsTransform -> android.support.v4.view.PagerTitleStripIcs$SingleLineAllCapsTransform:
    java.lang.String TAG -> TAG
    java.util.Locale mLocale -> mLocale
    java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View) -> getTransformation
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.VelocityTrackerCompat:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> IMPL
    float getXVelocity(android.view.VelocityTracker,int) -> getXVelocity
    float getYVelocity(android.view.VelocityTracker,int) -> getYVelocity
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl:
    float getXVelocity(android.view.VelocityTracker,int) -> getXVelocity
    float getYVelocity(android.view.VelocityTracker,int) -> getYVelocity
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl:
    float getXVelocity(android.view.VelocityTracker,int) -> getXVelocity
    float getYVelocity(android.view.VelocityTracker,int) -> getYVelocity
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl:
    float getXVelocity(android.view.VelocityTracker,int) -> getXVelocity
    float getYVelocity(android.view.VelocityTracker,int) -> getYVelocity
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.VelocityTrackerCompatHoneycomb:
    float getXVelocity(android.view.VelocityTracker,int) -> getXVelocity
    float getYVelocity(android.view.VelocityTracker,int) -> getYVelocity
android.support.v4.view.ViewCompat -> android.support.v4.view.ViewCompat:
    int OVER_SCROLL_ALWAYS -> OVER_SCROLL_ALWAYS
    int OVER_SCROLL_IF_CONTENT_SCROLLS -> OVER_SCROLL_IF_CONTENT_SCROLLS
    int OVER_SCROLL_NEVER -> OVER_SCROLL_NEVER
    long FAKE_FRAME_TIME -> FAKE_FRAME_TIME
    int IMPORTANT_FOR_ACCESSIBILITY_AUTO -> IMPORTANT_FOR_ACCESSIBILITY_AUTO
    int IMPORTANT_FOR_ACCESSIBILITY_YES -> IMPORTANT_FOR_ACCESSIBILITY_YES
    int IMPORTANT_FOR_ACCESSIBILITY_NO -> IMPORTANT_FOR_ACCESSIBILITY_NO
    int LAYER_TYPE_NONE -> LAYER_TYPE_NONE
    int LAYER_TYPE_SOFTWARE -> LAYER_TYPE_SOFTWARE
    int LAYER_TYPE_HARDWARE -> LAYER_TYPE_HARDWARE
    int LAYOUT_DIRECTION_LTR -> LAYOUT_DIRECTION_LTR
    int LAYOUT_DIRECTION_RTL -> LAYOUT_DIRECTION_RTL
    int LAYOUT_DIRECTION_INHERIT -> LAYOUT_DIRECTION_INHERIT
    int LAYOUT_DIRECTION_LOCALE -> LAYOUT_DIRECTION_LOCALE
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> IMPL
    boolean canScrollHorizontally(android.view.View,int) -> canScrollHorizontally
    boolean canScrollVertically(android.view.View,int) -> canScrollVertically
    int getOverScrollMode(android.view.View) -> getOverScrollMode
    void setOverScrollMode(android.view.View,int) -> setOverScrollMode
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> onInitializeAccessibilityNodeInfo
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> setAccessibilityDelegate
    boolean hasTransientState(android.view.View) -> hasTransientState
    void setHasTransientState(android.view.View,boolean) -> setHasTransientState
    void postInvalidateOnAnimation(android.view.View) -> postInvalidateOnAnimation
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> postInvalidateOnAnimation
    void postOnAnimation(android.view.View,java.lang.Runnable) -> postOnAnimation
    void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long) -> postOnAnimationDelayed
    int getImportantForAccessibility(android.view.View) -> getImportantForAccessibility
    void setImportantForAccessibility(android.view.View,int) -> setImportantForAccessibility
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> performAccessibilityAction
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View) -> getAccessibilityNodeProvider
    void setLayerType(android.view.View,int,android.graphics.Paint) -> setLayerType
    int getLayerType(android.view.View) -> getLayerType
    int getLabelFor(android.view.View) -> getLabelFor
    void setLabelFor(android.view.View,int) -> setLabelFor
    void setLayerPaint(android.view.View,android.graphics.Paint) -> setLayerPaint
    int getLayoutDirection(android.view.View) -> getLayoutDirection
    void setLayoutDirection(android.view.View,int) -> setLayoutDirection
    android.view.ViewParent getParentForAccessibility(android.view.View) -> getParentForAccessibility
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.ViewCompat$BaseViewCompatImpl:
    boolean canScrollHorizontally(android.view.View,int) -> canScrollHorizontally
    boolean canScrollVertically(android.view.View,int) -> canScrollVertically
    int getOverScrollMode(android.view.View) -> getOverScrollMode
    void setOverScrollMode(android.view.View,int) -> setOverScrollMode
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> setAccessibilityDelegate
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> onInitializeAccessibilityNodeInfo
    boolean hasTransientState(android.view.View) -> hasTransientState
    void setHasTransientState(android.view.View,boolean) -> setHasTransientState
    void postInvalidateOnAnimation(android.view.View) -> postInvalidateOnAnimation
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> postInvalidateOnAnimation
    void postOnAnimation(android.view.View,java.lang.Runnable) -> postOnAnimation
    void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long) -> postOnAnimationDelayed
    long getFrameTime() -> getFrameTime
    int getImportantForAccessibility(android.view.View) -> getImportantForAccessibility
    void setImportantForAccessibility(android.view.View,int) -> setImportantForAccessibility
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> performAccessibilityAction
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View) -> getAccessibilityNodeProvider
    void setLayerType(android.view.View,int,android.graphics.Paint) -> setLayerType
    int getLayerType(android.view.View) -> getLayerType
    int getLabelFor(android.view.View) -> getLabelFor
    void setLabelFor(android.view.View,int) -> setLabelFor
    void setLayerPaint(android.view.View,android.graphics.Paint) -> setLayerPaint
    int getLayoutDirection(android.view.View) -> getLayoutDirection
    void setLayoutDirection(android.view.View,int) -> setLayoutDirection
    android.view.ViewParent getParentForAccessibility(android.view.View) -> getParentForAccessibility
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.ViewCompat$GBViewCompatImpl:
    int getOverScrollMode(android.view.View) -> getOverScrollMode
    void setOverScrollMode(android.view.View,int) -> setOverScrollMode
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.ViewCompat$HCViewCompatImpl:
    long getFrameTime() -> getFrameTime
    void setLayerType(android.view.View,int,android.graphics.Paint) -> setLayerType
    int getLayerType(android.view.View) -> getLayerType
    void setLayerPaint(android.view.View,android.graphics.Paint) -> setLayerPaint
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.ViewCompat$ICSViewCompatImpl:
    boolean canScrollHorizontally(android.view.View,int) -> canScrollHorizontally
    boolean canScrollVertically(android.view.View,int) -> canScrollVertically
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> onInitializeAccessibilityNodeInfo
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> setAccessibilityDelegate
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.ViewCompat$JBViewCompatImpl:
    boolean hasTransientState(android.view.View) -> hasTransientState
    void setHasTransientState(android.view.View,boolean) -> setHasTransientState
    void postInvalidateOnAnimation(android.view.View) -> postInvalidateOnAnimation
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> postInvalidateOnAnimation
    void postOnAnimation(android.view.View,java.lang.Runnable) -> postOnAnimation
    void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long) -> postOnAnimationDelayed
    int getImportantForAccessibility(android.view.View) -> getImportantForAccessibility
    void setImportantForAccessibility(android.view.View,int) -> setImportantForAccessibility
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> performAccessibilityAction
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View) -> getAccessibilityNodeProvider
    android.view.ViewParent getParentForAccessibility(android.view.View) -> getParentForAccessibility
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl:
    int getLabelFor(android.view.View) -> getLabelFor
    void setLabelFor(android.view.View,int) -> setLabelFor
    void setLayerPaint(android.view.View,android.graphics.Paint) -> setLayerPaint
    int getLayoutDirection(android.view.View) -> getLayoutDirection
    void setLayoutDirection(android.view.View,int) -> setLayoutDirection
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.ViewCompat$ViewCompatImpl:
    boolean canScrollHorizontally(android.view.View,int) -> canScrollHorizontally
    boolean canScrollVertically(android.view.View,int) -> canScrollVertically
    int getOverScrollMode(android.view.View) -> getOverScrollMode
    void setOverScrollMode(android.view.View,int) -> setOverScrollMode
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> onInitializeAccessibilityNodeInfo
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> setAccessibilityDelegate
    boolean hasTransientState(android.view.View) -> hasTransientState
    void setHasTransientState(android.view.View,boolean) -> setHasTransientState
    void postInvalidateOnAnimation(android.view.View) -> postInvalidateOnAnimation
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> postInvalidateOnAnimation
    void postOnAnimation(android.view.View,java.lang.Runnable) -> postOnAnimation
    void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long) -> postOnAnimationDelayed
    int getImportantForAccessibility(android.view.View) -> getImportantForAccessibility
    void setImportantForAccessibility(android.view.View,int) -> setImportantForAccessibility
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> performAccessibilityAction
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View) -> getAccessibilityNodeProvider
    void setLayerType(android.view.View,int,android.graphics.Paint) -> setLayerType
    int getLayerType(android.view.View) -> getLayerType
    int getLabelFor(android.view.View) -> getLabelFor
    void setLabelFor(android.view.View,int) -> setLabelFor
    void setLayerPaint(android.view.View,android.graphics.Paint) -> setLayerPaint
    int getLayoutDirection(android.view.View) -> getLayoutDirection
    void setLayoutDirection(android.view.View,int) -> setLayoutDirection
    android.view.ViewParent getParentForAccessibility(android.view.View) -> getParentForAccessibility
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.ViewCompatGingerbread:
    int getOverScrollMode(android.view.View) -> getOverScrollMode
    void setOverScrollMode(android.view.View,int) -> setOverScrollMode
android.support.v4.view.ViewCompatHC -> android.support.v4.view.ViewCompatHC:
    long getFrameTime() -> getFrameTime
    void setLayerType(android.view.View,int,android.graphics.Paint) -> setLayerType
    int getLayerType(android.view.View) -> getLayerType
android.support.v4.view.ViewCompatICS -> android.support.v4.view.ViewCompatICS:
    boolean canScrollHorizontally(android.view.View,int) -> canScrollHorizontally
    boolean canScrollVertically(android.view.View,int) -> canScrollVertically
    void setAccessibilityDelegate(android.view.View,java.lang.Object) -> setAccessibilityDelegate
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> onInitializeAccessibilityNodeInfo
android.support.v4.view.ViewCompatJB -> android.support.v4.view.ViewCompatJB:
    boolean hasTransientState(android.view.View) -> hasTransientState
    void setHasTransientState(android.view.View,boolean) -> setHasTransientState
    void postInvalidateOnAnimation(android.view.View) -> postInvalidateOnAnimation
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> postInvalidateOnAnimation
    void postOnAnimation(android.view.View,java.lang.Runnable) -> postOnAnimation
    void postOnAnimationDelayed(android.view.View,java.lang.Runnable,long) -> postOnAnimationDelayed
    int getImportantForAccessibility(android.view.View) -> getImportantForAccessibility
    void setImportantForAccessibility(android.view.View,int) -> setImportantForAccessibility
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> performAccessibilityAction
    java.lang.Object getAccessibilityNodeProvider(android.view.View) -> getAccessibilityNodeProvider
    android.view.ViewParent getParentForAccessibility(android.view.View) -> getParentForAccessibility
android.support.v4.view.ViewCompatJellybeanMr1 -> android.support.v4.view.ViewCompatJellybeanMr1:
    int getLabelFor(android.view.View) -> getLabelFor
    void setLabelFor(android.view.View,int) -> setLabelFor
    void setLayerPaint(android.view.View,android.graphics.Paint) -> setLayerPaint
    int getLayoutDirection(android.view.View) -> getLayoutDirection
    void setLayoutDirection(android.view.View,int) -> setLayoutDirection
android.support.v4.view.ViewConfigurationCompat -> android.support.v4.view.ViewConfigurationCompat:
    android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl IMPL -> IMPL
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> getScaledPagingTouchSlop
android.support.v4.view.ViewConfigurationCompat$BaseViewConfigurationVersionImpl -> android.support.v4.view.ViewConfigurationCompat$BaseViewConfigurationVersionImpl:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> getScaledPagingTouchSlop
android.support.v4.view.ViewConfigurationCompat$FroyoViewConfigurationVersionImpl -> android.support.v4.view.ViewConfigurationCompat$FroyoViewConfigurationVersionImpl:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> getScaledPagingTouchSlop
android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl -> android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> getScaledPagingTouchSlop
android.support.v4.view.ViewConfigurationCompatFroyo -> android.support.v4.view.ViewConfigurationCompatFroyo:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> getScaledPagingTouchSlop
android.support.v4.view.ViewGroupCompat -> android.support.v4.view.ViewGroupCompat:
    android.support.v4.view.ViewGroupCompat$ViewGroupCompatImpl IMPL -> IMPL
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void setMotionEventSplittingEnabled(android.view.ViewGroup,boolean) -> setMotionEventSplittingEnabled
android.support.v4.view.ViewGroupCompat$ViewGroupCompatHCImpl -> android.support.v4.view.ViewGroupCompat$ViewGroupCompatHCImpl:
    void setMotionEventSplittingEnabled(android.view.ViewGroup,boolean) -> setMotionEventSplittingEnabled
android.support.v4.view.ViewGroupCompat$ViewGroupCompatIcsImpl -> android.support.v4.view.ViewGroupCompat$ViewGroupCompatIcsImpl:
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
android.support.v4.view.ViewGroupCompat$ViewGroupCompatImpl -> android.support.v4.view.ViewGroupCompat$ViewGroupCompatImpl:
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void setMotionEventSplittingEnabled(android.view.ViewGroup,boolean) -> setMotionEventSplittingEnabled
android.support.v4.view.ViewGroupCompat$ViewGroupCompatStubImpl -> android.support.v4.view.ViewGroupCompat$ViewGroupCompatStubImpl:
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void setMotionEventSplittingEnabled(android.view.ViewGroup,boolean) -> setMotionEventSplittingEnabled
android.support.v4.view.ViewGroupCompatHC -> android.support.v4.view.ViewGroupCompatHC:
    void setMotionEventSplittingEnabled(android.view.ViewGroup,boolean) -> setMotionEventSplittingEnabled
android.support.v4.view.ViewGroupCompatIcs -> android.support.v4.view.ViewGroupCompatIcs:
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    java.lang.String TAG -> TAG
    boolean DEBUG -> DEBUG
    boolean USE_CACHE -> USE_CACHE
    int DEFAULT_OFFSCREEN_PAGES -> DEFAULT_OFFSCREEN_PAGES
    int MAX_SETTLE_DURATION -> MAX_SETTLE_DURATION
    int MIN_DISTANCE_FOR_FLING -> MIN_DISTANCE_FOR_FLING
    int DEFAULT_GUTTER_SIZE -> DEFAULT_GUTTER_SIZE
    int MIN_FLING_VELOCITY -> MIN_FLING_VELOCITY
    int[] LAYOUT_ATTRS -> LAYOUT_ATTRS
    int mExpectedAdapterCount -> mExpectedAdapterCount
    java.util.Comparator COMPARATOR -> COMPARATOR
    android.view.animation.Interpolator sInterpolator -> sInterpolator
    java.util.ArrayList mItems -> mItems
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> mTempItem
    android.graphics.Rect mTempRect -> mTempRect
    android.support.v4.view.PagerAdapter mAdapter -> mAdapter
    int mCurItem -> mCurItem
    int mRestoredCurItem -> mRestoredCurItem
    android.os.Parcelable mRestoredAdapterState -> mRestoredAdapterState
    java.lang.ClassLoader mRestoredClassLoader -> mRestoredClassLoader
    android.widget.Scroller mScroller -> mScroller
    android.support.v4.view.ViewPager$PagerObserver mObserver -> mObserver
    int mPageMargin -> mPageMargin
    android.graphics.drawable.Drawable mMarginDrawable -> mMarginDrawable
    int mTopPageBounds -> mTopPageBounds
    int mBottomPageBounds -> mBottomPageBounds
    float mFirstOffset -> mFirstOffset
    float mLastOffset -> mLastOffset
    int mChildWidthMeasureSpec -> mChildWidthMeasureSpec
    int mChildHeightMeasureSpec -> mChildHeightMeasureSpec
    boolean mInLayout -> mInLayout
    boolean mScrollingCacheEnabled -> mScrollingCacheEnabled
    boolean mPopulatePending -> mPopulatePending
    int mOffscreenPageLimit -> mOffscreenPageLimit
    boolean mIsBeingDragged -> mIsBeingDragged
    boolean mIsUnableToDrag -> mIsUnableToDrag
    boolean mIgnoreGutter -> mIgnoreGutter
    int mDefaultGutterSize -> mDefaultGutterSize
    int mGutterSize -> mGutterSize
    int mTouchSlop -> mTouchSlop
    float mLastMotionX -> mLastMotionX
    float mLastMotionY -> mLastMotionY
    float mInitialMotionX -> mInitialMotionX
    float mInitialMotionY -> mInitialMotionY
    int mActivePointerId -> mActivePointerId
    int INVALID_POINTER -> INVALID_POINTER
    android.view.VelocityTracker mVelocityTracker -> mVelocityTracker
    int mMinimumVelocity -> mMinimumVelocity
    int mMaximumVelocity -> mMaximumVelocity
    int mFlingDistance -> mFlingDistance
    int mCloseEnough -> mCloseEnough
    int CLOSE_ENOUGH -> CLOSE_ENOUGH
    boolean mFakeDragging -> mFakeDragging
    long mFakeDragBeginTime -> mFakeDragBeginTime
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> mLeftEdge
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> mRightEdge
    boolean mFirstLayout -> mFirstLayout
    boolean mNeedCalculatePageOffsets -> mNeedCalculatePageOffsets
    boolean mCalledSuper -> mCalledSuper
    int mDecorChildCount -> mDecorChildCount
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> mOnPageChangeListener
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> mInternalPageChangeListener
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> mAdapterChangeListener
    android.support.v4.view.ViewPager$PageTransformer mPageTransformer -> mPageTransformer
    java.lang.reflect.Method mSetChildrenDrawingOrderEnabled -> mSetChildrenDrawingOrderEnabled
    int DRAW_ORDER_DEFAULT -> DRAW_ORDER_DEFAULT
    int DRAW_ORDER_FORWARD -> DRAW_ORDER_FORWARD
    int DRAW_ORDER_REVERSE -> DRAW_ORDER_REVERSE
    int mDrawingOrder -> mDrawingOrder
    java.util.ArrayList mDrawingOrderedChildren -> mDrawingOrderedChildren
    android.support.v4.view.ViewPager$ViewPositionComparator sPositionComparator -> sPositionComparator
    int SCROLL_STATE_IDLE -> SCROLL_STATE_IDLE
    int SCROLL_STATE_DRAGGING -> SCROLL_STATE_DRAGGING
    int SCROLL_STATE_SETTLING -> SCROLL_STATE_SETTLING
    java.lang.Runnable mEndScrollRunnable -> mEndScrollRunnable
    int mScrollState -> mScrollState
    void initViewPager() -> initViewPager
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setScrollState(int) -> setScrollState
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> removeNonDecorViews
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    int getClientWidth() -> getClientWidth
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> setCurrentItem
    int getCurrentItem() -> getCurrentItem
    void setCurrentItemInternal(int,boolean,boolean) -> setCurrentItemInternal
    void setCurrentItemInternal(int,boolean,boolean,int) -> setCurrentItemInternal
    void scrollToItem(int,boolean,int,boolean) -> scrollToItem
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setPageTransformer(boolean,android.support.v4.view.ViewPager$PageTransformer) -> setPageTransformer
    void setChildrenDrawingOrderEnabledCompat(boolean) -> setChildrenDrawingOrderEnabledCompat
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    android.support.v4.view.ViewPager$OnPageChangeListener setInternalPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setInternalPageChangeListener
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    int getPageMargin() -> getPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> distanceInfluenceForSnapDuration
    void smoothScrollTo(int,int) -> smoothScrollTo
    void smoothScrollTo(int,int,int) -> smoothScrollTo
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> addNewItem
    void dataSetChanged() -> dataSetChanged
    void populate() -> populate
    void populate(int) -> populate
    void sortChildDrawingOrder() -> sortChildDrawingOrder
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> calculatePageOffsets
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> infoForChild
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> infoForAnyChild
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> infoForPosition
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> recomputeScrollPosition
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> pageScrolled
    void onPageScrolled(int,float,int) -> onPageScrolled
    void completeScroll(boolean) -> completeScroll
    boolean isGutterDrag(float,float) -> isGutterDrag
    void enableLayers(boolean) -> enableLayers
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean performDrag(float) -> performDrag
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> infoForCurrentScrollPosition
    int determineTargetPage(int,float,int,int) -> determineTargetPage
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    boolean beginFakeDrag() -> beginFakeDrag
    void endFakeDrag() -> endFakeDrag
    void fakeDragBy(float) -> fakeDragBy
    boolean isFakeDragging() -> isFakeDragging
    void onSecondaryPointerUp(android.view.MotionEvent) -> onSecondaryPointerUp
    void endDrag() -> endDrag
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    boolean canScroll(android.view.View,boolean,int,int,int) -> canScroll
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> executeKeyEvent
    boolean arrowScroll(int) -> arrowScroll
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> getChildRectInPagerCoordinates
    boolean pageLeft() -> pageLeft
    boolean pageRight() -> pageRight
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    void access$000(android.support.v4.view.ViewPager,int) -> access$000
    android.support.v4.view.PagerAdapter access$200(android.support.v4.view.ViewPager) -> access$200
    int access$300(android.support.v4.view.ViewPager) -> access$300
    int[] access$400() -> access$400
android.support.v4.view.ViewPager$1 -> android.support.v4.view.ViewPager$1:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.ViewPager$2:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$3 -> android.support.v4.view.ViewPager$3:
    android.support.v4.view.ViewPager this$0 -> this$0
    void run() -> run
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.ViewPager$Decor:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.ViewPager$ItemInfo:
    java.lang.Object object -> object
    int position -> position
    boolean scrolling -> scrolling
    float widthFactor -> widthFactor
    float offset -> offset
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.ViewPager$LayoutParams:
    boolean isDecor -> isDecor
    int gravity -> gravity
    float widthFactor -> widthFactor
    boolean needsMeasure -> needsMeasure
    int position -> position
    int childIndex -> childIndex
android.support.v4.view.ViewPager$MyAccessibilityDelegate -> android.support.v4.view.ViewPager$MyAccessibilityDelegate:
    android.support.v4.view.ViewPager this$0 -> this$0
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> onInitializeAccessibilityNodeInfo
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> performAccessibilityAction
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.ViewPager$OnAdapterChangeListener:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> onAdapterChanged
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.ViewPager$OnPageChangeListener:
    void onPageScrolled(int,float,int) -> onPageScrolled
    void onPageSelected(int) -> onPageSelected
    void onPageScrollStateChanged(int) -> onPageScrollStateChanged
android.support.v4.view.ViewPager$PageTransformer -> android.support.v4.view.ViewPager$PageTransformer:
    void transformPage(android.view.View,float) -> transformPage
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.ViewPager$PagerObserver:
    android.support.v4.view.ViewPager this$0 -> this$0
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> position
    android.os.Parcelable adapterState -> adapterState
    java.lang.ClassLoader loader -> loader
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.ViewPager$SavedState$1:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
android.support.v4.view.ViewPager$SimpleOnPageChangeListener -> android.support.v4.view.ViewPager$SimpleOnPageChangeListener:
    void onPageScrolled(int,float,int) -> onPageScrolled
    void onPageSelected(int) -> onPageSelected
    void onPageScrollStateChanged(int) -> onPageScrollStateChanged
android.support.v4.view.ViewPager$ViewPositionComparator -> android.support.v4.view.ViewPager$ViewPositionComparator:
    int compare(android.view.View,android.view.View) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.accessibility.AccessibilityEventCompat -> android.support.v4.view.accessibility.AccessibilityEventCompat:
    android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventVersionImpl IMPL -> IMPL
    int TYPE_VIEW_HOVER_ENTER -> TYPE_VIEW_HOVER_ENTER
    int TYPE_VIEW_HOVER_EXIT -> TYPE_VIEW_HOVER_EXIT
    int TYPE_TOUCH_EXPLORATION_GESTURE_START -> TYPE_TOUCH_EXPLORATION_GESTURE_START
    int TYPE_TOUCH_EXPLORATION_GESTURE_END -> TYPE_TOUCH_EXPLORATION_GESTURE_END
    int TYPE_WINDOW_CONTENT_CHANGED -> TYPE_WINDOW_CONTENT_CHANGED
    int TYPE_VIEW_SCROLLED -> TYPE_VIEW_SCROLLED
    int TYPE_VIEW_TEXT_SELECTION_CHANGED -> TYPE_VIEW_TEXT_SELECTION_CHANGED
    int TYPE_ANNOUNCEMENT -> TYPE_ANNOUNCEMENT
    int TYPE_VIEW_ACCESSIBILITY_FOCUSED -> TYPE_VIEW_ACCESSIBILITY_FOCUSED
    int TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED -> TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED
    int TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY -> TYPE_VIEW_TEXT_TRAVERSED_AT_MOVEMENT_GRANULARITY
    int TYPE_GESTURE_DETECTION_START -> TYPE_GESTURE_DETECTION_START
    int TYPE_GESTURE_DETECTION_END -> TYPE_GESTURE_DETECTION_END
    int TYPE_TOUCH_INTERACTION_START -> TYPE_TOUCH_INTERACTION_START
    int TYPE_TOUCH_INTERACTION_END -> TYPE_TOUCH_INTERACTION_END
    int TYPES_ALL_MASK -> TYPES_ALL_MASK
    int getRecordCount(android.view.accessibility.AccessibilityEvent) -> getRecordCount
    void appendRecord(android.view.accessibility.AccessibilityEvent,android.support.v4.view.accessibility.AccessibilityRecordCompat) -> appendRecord
    android.support.v4.view.accessibility.AccessibilityRecordCompat getRecord(android.view.accessibility.AccessibilityEvent,int) -> getRecord
android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventIcsImpl -> android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventIcsImpl:
    void appendRecord(android.view.accessibility.AccessibilityEvent,java.lang.Object) -> appendRecord
    java.lang.Object getRecord(android.view.accessibility.AccessibilityEvent,int) -> getRecord
    int getRecordCount(android.view.accessibility.AccessibilityEvent) -> getRecordCount
android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventStubImpl -> android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventStubImpl:
    void appendRecord(android.view.accessibility.AccessibilityEvent,java.lang.Object) -> appendRecord
    java.lang.Object getRecord(android.view.accessibility.AccessibilityEvent,int) -> getRecord
    int getRecordCount(android.view.accessibility.AccessibilityEvent) -> getRecordCount
android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventVersionImpl -> android.support.v4.view.accessibility.AccessibilityEventCompat$AccessibilityEventVersionImpl:
    int getRecordCount(android.view.accessibility.AccessibilityEvent) -> getRecordCount
    void appendRecord(android.view.accessibility.AccessibilityEvent,java.lang.Object) -> appendRecord
    java.lang.Object getRecord(android.view.accessibility.AccessibilityEvent,int) -> getRecord
android.support.v4.view.accessibility.AccessibilityEventCompatIcs -> android.support.v4.view.accessibility.AccessibilityEventCompatIcs:
    int getRecordCount(android.view.accessibility.AccessibilityEvent) -> getRecordCount
    void appendRecord(android.view.accessibility.AccessibilityEvent,java.lang.Object) -> appendRecord
    java.lang.Object getRecord(android.view.accessibility.AccessibilityEvent,int) -> getRecord
android.support.v4.view.accessibility.AccessibilityManagerCompat -> android.support.v4.view.accessibility.AccessibilityManagerCompat:
    android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerVersionImpl IMPL -> IMPL
    boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager,android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat) -> addAccessibilityStateChangeListener
    boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager,android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat) -> removeAccessibilityStateChangeListener
    java.util.List getInstalledAccessibilityServiceList(android.view.accessibility.AccessibilityManager) -> getInstalledAccessibilityServiceList
    java.util.List getEnabledAccessibilityServiceList(android.view.accessibility.AccessibilityManager,int) -> getEnabledAccessibilityServiceList
    boolean isTouchExplorationEnabled(android.view.accessibility.AccessibilityManager) -> isTouchExplorationEnabled
    android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerVersionImpl access$000() -> access$000
android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerIcsImpl -> android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerIcsImpl:
    java.lang.Object newAccessiblityStateChangeListener(android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat) -> newAccessiblityStateChangeListener
    boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager,android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat) -> addAccessibilityStateChangeListener
    boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager,android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat) -> removeAccessibilityStateChangeListener
    java.util.List getEnabledAccessibilityServiceList(android.view.accessibility.AccessibilityManager,int) -> getEnabledAccessibilityServiceList
    java.util.List getInstalledAccessibilityServiceList(android.view.accessibility.AccessibilityManager) -> getInstalledAccessibilityServiceList
    boolean isTouchExplorationEnabled(android.view.accessibility.AccessibilityManager) -> isTouchExplorationEnabled
android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerIcsImpl$1 -> android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerIcsImpl$1:
    android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat val$listener -> val$listener
    android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerIcsImpl this$0 -> this$0
    void onAccessibilityStateChanged(boolean) -> onAccessibilityStateChanged
android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerStubImpl -> android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerStubImpl:
    java.lang.Object newAccessiblityStateChangeListener(android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat) -> newAccessiblityStateChangeListener
    boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager,android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat) -> addAccessibilityStateChangeListener
    boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager,android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat) -> removeAccessibilityStateChangeListener
    java.util.List getEnabledAccessibilityServiceList(android.view.accessibility.AccessibilityManager,int) -> getEnabledAccessibilityServiceList
    java.util.List getInstalledAccessibilityServiceList(android.view.accessibility.AccessibilityManager) -> getInstalledAccessibilityServiceList
    boolean isTouchExplorationEnabled(android.view.accessibility.AccessibilityManager) -> isTouchExplorationEnabled
android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerVersionImpl -> android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityManagerVersionImpl:
    java.lang.Object newAccessiblityStateChangeListener(android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat) -> newAccessiblityStateChangeListener
    boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager,android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat) -> addAccessibilityStateChangeListener
    boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager,android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat) -> removeAccessibilityStateChangeListener
    java.util.List getEnabledAccessibilityServiceList(android.view.accessibility.AccessibilityManager,int) -> getEnabledAccessibilityServiceList
    java.util.List getInstalledAccessibilityServiceList(android.view.accessibility.AccessibilityManager) -> getInstalledAccessibilityServiceList
    boolean isTouchExplorationEnabled(android.view.accessibility.AccessibilityManager) -> isTouchExplorationEnabled
android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat -> android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat:
    java.lang.Object mListener -> mListener
    void onAccessibilityStateChanged(boolean) -> onAccessibilityStateChanged
android.support.v4.view.accessibility.AccessibilityManagerCompatIcs -> android.support.v4.view.accessibility.AccessibilityManagerCompatIcs:
    java.lang.Object newAccessibilityStateChangeListener(android.support.v4.view.accessibility.AccessibilityManagerCompatIcs$AccessibilityStateChangeListenerBridge) -> newAccessibilityStateChangeListener
    boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager,java.lang.Object) -> addAccessibilityStateChangeListener
    boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager,java.lang.Object) -> removeAccessibilityStateChangeListener
    java.util.List getEnabledAccessibilityServiceList(android.view.accessibility.AccessibilityManager,int) -> getEnabledAccessibilityServiceList
    java.util.List getInstalledAccessibilityServiceList(android.view.accessibility.AccessibilityManager) -> getInstalledAccessibilityServiceList
    boolean isTouchExplorationEnabled(android.view.accessibility.AccessibilityManager) -> isTouchExplorationEnabled
android.support.v4.view.accessibility.AccessibilityManagerCompatIcs$1 -> android.support.v4.view.accessibility.AccessibilityManagerCompatIcs$1:
    android.support.v4.view.accessibility.AccessibilityManagerCompatIcs$AccessibilityStateChangeListenerBridge val$bridge -> val$bridge
    void onAccessibilityStateChanged(boolean) -> onAccessibilityStateChanged
android.support.v4.view.accessibility.AccessibilityManagerCompatIcs$AccessibilityStateChangeListenerBridge -> android.support.v4.view.accessibility.AccessibilityManagerCompatIcs$AccessibilityStateChangeListenerBridge:
    void onAccessibilityStateChanged(boolean) -> onAccessibilityStateChanged
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat -> android.support.v4.view.accessibility.AccessibilityNodeInfoCompat:
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl IMPL -> IMPL
    java.lang.Object mInfo -> mInfo
    int ACTION_FOCUS -> ACTION_FOCUS
    int ACTION_CLEAR_FOCUS -> ACTION_CLEAR_FOCUS
    int ACTION_SELECT -> ACTION_SELECT
    int ACTION_CLEAR_SELECTION -> ACTION_CLEAR_SELECTION
    int ACTION_CLICK -> ACTION_CLICK
    int ACTION_LONG_CLICK -> ACTION_LONG_CLICK
    int ACTION_ACCESSIBILITY_FOCUS -> ACTION_ACCESSIBILITY_FOCUS
    int ACTION_CLEAR_ACCESSIBILITY_FOCUS -> ACTION_CLEAR_ACCESSIBILITY_FOCUS
    int ACTION_NEXT_AT_MOVEMENT_GRANULARITY -> ACTION_NEXT_AT_MOVEMENT_GRANULARITY
    int ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY -> ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY
    int ACTION_NEXT_HTML_ELEMENT -> ACTION_NEXT_HTML_ELEMENT
    int ACTION_PREVIOUS_HTML_ELEMENT -> ACTION_PREVIOUS_HTML_ELEMENT
    int ACTION_SCROLL_FORWARD -> ACTION_SCROLL_FORWARD
    int ACTION_SCROLL_BACKWARD -> ACTION_SCROLL_BACKWARD
    java.lang.String ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT -> ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT
    java.lang.String ACTION_ARGUMENT_HTML_ELEMENT_STRING -> ACTION_ARGUMENT_HTML_ELEMENT_STRING
    int FOCUS_INPUT -> FOCUS_INPUT
    int FOCUS_ACCESSIBILITY -> FOCUS_ACCESSIBILITY
    int MOVEMENT_GRANULARITY_CHARACTER -> MOVEMENT_GRANULARITY_CHARACTER
    int MOVEMENT_GRANULARITY_WORD -> MOVEMENT_GRANULARITY_WORD
    int MOVEMENT_GRANULARITY_LINE -> MOVEMENT_GRANULARITY_LINE
    int MOVEMENT_GRANULARITY_PARAGRAPH -> MOVEMENT_GRANULARITY_PARAGRAPH
    int MOVEMENT_GRANULARITY_PAGE -> MOVEMENT_GRANULARITY_PAGE
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat wrapNonNullInstance(java.lang.Object) -> wrapNonNullInstance
    java.lang.Object getInfo() -> getInfo
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat obtain(android.view.View) -> obtain
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat obtain(android.view.View,int) -> obtain
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat obtain() -> obtain
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat obtain(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> obtain
    void setSource(android.view.View) -> setSource
    void setSource(android.view.View,int) -> setSource
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat findFocus(int) -> findFocus
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat focusSearch(int) -> focusSearch
    int getWindowId() -> getWindowId
    int getChildCount() -> getChildCount
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getChild(int) -> getChild
    void addChild(android.view.View) -> addChild
    void addChild(android.view.View,int) -> addChild
    int getActions() -> getActions
    void addAction(int) -> addAction
    boolean performAction(int) -> performAction
    boolean performAction(int,android.os.Bundle) -> performAction
    void setMovementGranularities(int) -> setMovementGranularities
    int getMovementGranularities() -> getMovementGranularities
    java.util.List findAccessibilityNodeInfosByText(java.lang.String) -> findAccessibilityNodeInfosByText
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getParent() -> getParent
    void setParent(android.view.View) -> setParent
    void setParent(android.view.View,int) -> setParent
    void getBoundsInParent(android.graphics.Rect) -> getBoundsInParent
    void setBoundsInParent(android.graphics.Rect) -> setBoundsInParent
    void getBoundsInScreen(android.graphics.Rect) -> getBoundsInScreen
    void setBoundsInScreen(android.graphics.Rect) -> setBoundsInScreen
    boolean isCheckable() -> isCheckable
    void setCheckable(boolean) -> setCheckable
    boolean isChecked() -> isChecked
    void setChecked(boolean) -> setChecked
    boolean isFocusable() -> isFocusable
    void setFocusable(boolean) -> setFocusable
    boolean isFocused() -> isFocused
    void setFocused(boolean) -> setFocused
    boolean isVisibleToUser() -> isVisibleToUser
    void setVisibleToUser(boolean) -> setVisibleToUser
    boolean isAccessibilityFocused() -> isAccessibilityFocused
    void setAccessibilityFocused(boolean) -> setAccessibilityFocused
    boolean isSelected() -> isSelected
    void setSelected(boolean) -> setSelected
    boolean isClickable() -> isClickable
    void setClickable(boolean) -> setClickable
    boolean isLongClickable() -> isLongClickable
    void setLongClickable(boolean) -> setLongClickable
    boolean isEnabled() -> isEnabled
    void setEnabled(boolean) -> setEnabled
    boolean isPassword() -> isPassword
    void setPassword(boolean) -> setPassword
    boolean isScrollable() -> isScrollable
    void setScrollable(boolean) -> setScrollable
    java.lang.CharSequence getPackageName() -> getPackageName
    void setPackageName(java.lang.CharSequence) -> setPackageName
    java.lang.CharSequence getClassName() -> getClassName
    void setClassName(java.lang.CharSequence) -> setClassName
    java.lang.CharSequence getText() -> getText
    void setText(java.lang.CharSequence) -> setText
    java.lang.CharSequence getContentDescription() -> getContentDescription
    void setContentDescription(java.lang.CharSequence) -> setContentDescription
    void recycle() -> recycle
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl -> android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl:
    java.lang.Object obtain() -> obtain
    java.lang.Object obtain(android.view.View) -> obtain
    java.lang.Object obtain(java.lang.Object) -> obtain
    void addAction(java.lang.Object,int) -> addAction
    void addChild(java.lang.Object,android.view.View) -> addChild
    java.util.List findAccessibilityNodeInfosByText(java.lang.Object,java.lang.String) -> findAccessibilityNodeInfosByText
    int getActions(java.lang.Object) -> getActions
    void getBoundsInParent(java.lang.Object,android.graphics.Rect) -> getBoundsInParent
    void getBoundsInScreen(java.lang.Object,android.graphics.Rect) -> getBoundsInScreen
    java.lang.Object getChild(java.lang.Object,int) -> getChild
    int getChildCount(java.lang.Object) -> getChildCount
    java.lang.CharSequence getClassName(java.lang.Object) -> getClassName
    java.lang.CharSequence getContentDescription(java.lang.Object) -> getContentDescription
    java.lang.CharSequence getPackageName(java.lang.Object) -> getPackageName
    java.lang.Object getParent(java.lang.Object) -> getParent
    java.lang.CharSequence getText(java.lang.Object) -> getText
    int getWindowId(java.lang.Object) -> getWindowId
    boolean isCheckable(java.lang.Object) -> isCheckable
    boolean isChecked(java.lang.Object) -> isChecked
    boolean isClickable(java.lang.Object) -> isClickable
    boolean isEnabled(java.lang.Object) -> isEnabled
    boolean isFocusable(java.lang.Object) -> isFocusable
    boolean isFocused(java.lang.Object) -> isFocused
    boolean isLongClickable(java.lang.Object) -> isLongClickable
    boolean isPassword(java.lang.Object) -> isPassword
    boolean isScrollable(java.lang.Object) -> isScrollable
    boolean isSelected(java.lang.Object) -> isSelected
    boolean performAction(java.lang.Object,int) -> performAction
    void setBoundsInParent(java.lang.Object,android.graphics.Rect) -> setBoundsInParent
    void setBoundsInScreen(java.lang.Object,android.graphics.Rect) -> setBoundsInScreen
    void setCheckable(java.lang.Object,boolean) -> setCheckable
    void setChecked(java.lang.Object,boolean) -> setChecked
    void setClassName(java.lang.Object,java.lang.CharSequence) -> setClassName
    void setClickable(java.lang.Object,boolean) -> setClickable
    void setContentDescription(java.lang.Object,java.lang.CharSequence) -> setContentDescription
    void setEnabled(java.lang.Object,boolean) -> setEnabled
    void setFocusable(java.lang.Object,boolean) -> setFocusable
    void setFocused(java.lang.Object,boolean) -> setFocused
    void setLongClickable(java.lang.Object,boolean) -> setLongClickable
    void setPackageName(java.lang.Object,java.lang.CharSequence) -> setPackageName
    void setParent(java.lang.Object,android.view.View) -> setParent
    void setPassword(java.lang.Object,boolean) -> setPassword
    void setScrollable(java.lang.Object,boolean) -> setScrollable
    void setSelected(java.lang.Object,boolean) -> setSelected
    void setSource(java.lang.Object,android.view.View) -> setSource
    void setText(java.lang.Object,java.lang.CharSequence) -> setText
    void recycle(java.lang.Object) -> recycle
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl -> android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl:
    java.lang.Object obtain() -> obtain
    java.lang.Object obtain(android.view.View) -> obtain
    java.lang.Object obtain(java.lang.Object) -> obtain
    java.lang.Object obtain(android.view.View,int) -> obtain
    void setSource(java.lang.Object,android.view.View) -> setSource
    void setSource(java.lang.Object,android.view.View,int) -> setSource
    java.lang.Object findFocus(java.lang.Object,int) -> findFocus
    java.lang.Object focusSearch(java.lang.Object,int) -> focusSearch
    int getWindowId(java.lang.Object) -> getWindowId
    int getChildCount(java.lang.Object) -> getChildCount
    java.lang.Object getChild(java.lang.Object,int) -> getChild
    void addChild(java.lang.Object,android.view.View) -> addChild
    void addChild(java.lang.Object,android.view.View,int) -> addChild
    int getActions(java.lang.Object) -> getActions
    void addAction(java.lang.Object,int) -> addAction
    boolean performAction(java.lang.Object,int) -> performAction
    boolean performAction(java.lang.Object,int,android.os.Bundle) -> performAction
    void setMovementGranularities(java.lang.Object,int) -> setMovementGranularities
    int getMovementGranularities(java.lang.Object) -> getMovementGranularities
    java.util.List findAccessibilityNodeInfosByText(java.lang.Object,java.lang.String) -> findAccessibilityNodeInfosByText
    java.lang.Object getParent(java.lang.Object) -> getParent
    void setParent(java.lang.Object,android.view.View,int) -> setParent
    void setParent(java.lang.Object,android.view.View) -> setParent
    void getBoundsInParent(java.lang.Object,android.graphics.Rect) -> getBoundsInParent
    void setBoundsInParent(java.lang.Object,android.graphics.Rect) -> setBoundsInParent
    void getBoundsInScreen(java.lang.Object,android.graphics.Rect) -> getBoundsInScreen
    void setBoundsInScreen(java.lang.Object,android.graphics.Rect) -> setBoundsInScreen
    boolean isCheckable(java.lang.Object) -> isCheckable
    void setCheckable(java.lang.Object,boolean) -> setCheckable
    boolean isChecked(java.lang.Object) -> isChecked
    void setChecked(java.lang.Object,boolean) -> setChecked
    boolean isFocusable(java.lang.Object) -> isFocusable
    void setFocusable(java.lang.Object,boolean) -> setFocusable
    boolean isFocused(java.lang.Object) -> isFocused
    void setFocused(java.lang.Object,boolean) -> setFocused
    boolean isVisibleToUser(java.lang.Object) -> isVisibleToUser
    void setVisibleToUser(java.lang.Object,boolean) -> setVisibleToUser
    boolean isAccessibilityFocused(java.lang.Object) -> isAccessibilityFocused
    void setAccessibilityFocused(java.lang.Object,boolean) -> setAccessibilityFocused
    boolean isSelected(java.lang.Object) -> isSelected
    void setSelected(java.lang.Object,boolean) -> setSelected
    boolean isClickable(java.lang.Object) -> isClickable
    void setClickable(java.lang.Object,boolean) -> setClickable
    boolean isLongClickable(java.lang.Object) -> isLongClickable
    void setLongClickable(java.lang.Object,boolean) -> setLongClickable
    boolean isEnabled(java.lang.Object) -> isEnabled
    void setEnabled(java.lang.Object,boolean) -> setEnabled
    boolean isPassword(java.lang.Object) -> isPassword
    void setPassword(java.lang.Object,boolean) -> setPassword
    boolean isScrollable(java.lang.Object) -> isScrollable
    void setScrollable(java.lang.Object,boolean) -> setScrollable
    java.lang.CharSequence getPackageName(java.lang.Object) -> getPackageName
    void setPackageName(java.lang.Object,java.lang.CharSequence) -> setPackageName
    java.lang.CharSequence getClassName(java.lang.Object) -> getClassName
    void setClassName(java.lang.Object,java.lang.CharSequence) -> setClassName
    java.lang.CharSequence getText(java.lang.Object) -> getText
    void setText(java.lang.Object,java.lang.CharSequence) -> setText
    java.lang.CharSequence getContentDescription(java.lang.Object) -> getContentDescription
    void setContentDescription(java.lang.Object,java.lang.CharSequence) -> setContentDescription
    void recycle(java.lang.Object) -> recycle
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanImpl -> android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanImpl:
    java.lang.Object obtain(android.view.View,int) -> obtain
    java.lang.Object findFocus(java.lang.Object,int) -> findFocus
    java.lang.Object focusSearch(java.lang.Object,int) -> focusSearch
    void addChild(java.lang.Object,android.view.View,int) -> addChild
    void setSource(java.lang.Object,android.view.View,int) -> setSource
    boolean isVisibleToUser(java.lang.Object) -> isVisibleToUser
    void setVisibleToUser(java.lang.Object,boolean) -> setVisibleToUser
    boolean isAccessibilityFocused(java.lang.Object) -> isAccessibilityFocused
    void setAccessibilityFocused(java.lang.Object,boolean) -> setAccessibilityFocused
    boolean performAction(java.lang.Object,int,android.os.Bundle) -> performAction
    void setMovementGranularities(java.lang.Object,int) -> setMovementGranularities
    int getMovementGranularities(java.lang.Object) -> getMovementGranularities
    void setParent(java.lang.Object,android.view.View,int) -> setParent
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl -> android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl:
    java.lang.Object obtain() -> obtain
    java.lang.Object obtain(android.view.View) -> obtain
    java.lang.Object obtain(android.view.View,int) -> obtain
    java.lang.Object obtain(java.lang.Object) -> obtain
    void addAction(java.lang.Object,int) -> addAction
    void addChild(java.lang.Object,android.view.View) -> addChild
    void addChild(java.lang.Object,android.view.View,int) -> addChild
    java.util.List findAccessibilityNodeInfosByText(java.lang.Object,java.lang.String) -> findAccessibilityNodeInfosByText
    int getActions(java.lang.Object) -> getActions
    void getBoundsInParent(java.lang.Object,android.graphics.Rect) -> getBoundsInParent
    void getBoundsInScreen(java.lang.Object,android.graphics.Rect) -> getBoundsInScreen
    java.lang.Object getChild(java.lang.Object,int) -> getChild
    int getChildCount(java.lang.Object) -> getChildCount
    java.lang.CharSequence getClassName(java.lang.Object) -> getClassName
    java.lang.CharSequence getContentDescription(java.lang.Object) -> getContentDescription
    java.lang.CharSequence getPackageName(java.lang.Object) -> getPackageName
    java.lang.Object getParent(java.lang.Object) -> getParent
    java.lang.CharSequence getText(java.lang.Object) -> getText
    int getWindowId(java.lang.Object) -> getWindowId
    boolean isCheckable(java.lang.Object) -> isCheckable
    boolean isChecked(java.lang.Object) -> isChecked
    boolean isClickable(java.lang.Object) -> isClickable
    boolean isEnabled(java.lang.Object) -> isEnabled
    boolean isFocusable(java.lang.Object) -> isFocusable
    boolean isFocused(java.lang.Object) -> isFocused
    boolean isVisibleToUser(java.lang.Object) -> isVisibleToUser
    boolean isAccessibilityFocused(java.lang.Object) -> isAccessibilityFocused
    boolean isLongClickable(java.lang.Object) -> isLongClickable
    boolean isPassword(java.lang.Object) -> isPassword
    boolean isScrollable(java.lang.Object) -> isScrollable
    boolean isSelected(java.lang.Object) -> isSelected
    boolean performAction(java.lang.Object,int) -> performAction
    boolean performAction(java.lang.Object,int,android.os.Bundle) -> performAction
    void setMovementGranularities(java.lang.Object,int) -> setMovementGranularities
    int getMovementGranularities(java.lang.Object) -> getMovementGranularities
    void setBoundsInParent(java.lang.Object,android.graphics.Rect) -> setBoundsInParent
    void setBoundsInScreen(java.lang.Object,android.graphics.Rect) -> setBoundsInScreen
    void setCheckable(java.lang.Object,boolean) -> setCheckable
    void setChecked(java.lang.Object,boolean) -> setChecked
    void setClassName(java.lang.Object,java.lang.CharSequence) -> setClassName
    void setClickable(java.lang.Object,boolean) -> setClickable
    void setContentDescription(java.lang.Object,java.lang.CharSequence) -> setContentDescription
    void setEnabled(java.lang.Object,boolean) -> setEnabled
    void setFocusable(java.lang.Object,boolean) -> setFocusable
    void setFocused(java.lang.Object,boolean) -> setFocused
    void setVisibleToUser(java.lang.Object,boolean) -> setVisibleToUser
    void setAccessibilityFocused(java.lang.Object,boolean) -> setAccessibilityFocused
    void setLongClickable(java.lang.Object,boolean) -> setLongClickable
    void setPackageName(java.lang.Object,java.lang.CharSequence) -> setPackageName
    void setParent(java.lang.Object,android.view.View) -> setParent
    void setPassword(java.lang.Object,boolean) -> setPassword
    void setScrollable(java.lang.Object,boolean) -> setScrollable
    void setSelected(java.lang.Object,boolean) -> setSelected
    void setSource(java.lang.Object,android.view.View) -> setSource
    void setSource(java.lang.Object,android.view.View,int) -> setSource
    java.lang.Object findFocus(java.lang.Object,int) -> findFocus
    java.lang.Object focusSearch(java.lang.Object,int) -> focusSearch
    void setText(java.lang.Object,java.lang.CharSequence) -> setText
    void recycle(java.lang.Object) -> recycle
    void setParent(java.lang.Object,android.view.View,int) -> setParent
android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs -> android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs:
    java.lang.Object obtain() -> obtain
    java.lang.Object obtain(android.view.View) -> obtain
    java.lang.Object obtain(java.lang.Object) -> obtain
    void addAction(java.lang.Object,int) -> addAction
    void addChild(java.lang.Object,android.view.View) -> addChild
    java.util.List findAccessibilityNodeInfosByText(java.lang.Object,java.lang.String) -> findAccessibilityNodeInfosByText
    int getActions(java.lang.Object) -> getActions
    void getBoundsInParent(java.lang.Object,android.graphics.Rect) -> getBoundsInParent
    void getBoundsInScreen(java.lang.Object,android.graphics.Rect) -> getBoundsInScreen
    java.lang.Object getChild(java.lang.Object,int) -> getChild
    int getChildCount(java.lang.Object) -> getChildCount
    java.lang.CharSequence getClassName(java.lang.Object) -> getClassName
    java.lang.CharSequence getContentDescription(java.lang.Object) -> getContentDescription
    java.lang.CharSequence getPackageName(java.lang.Object) -> getPackageName
    java.lang.Object getParent(java.lang.Object) -> getParent
    java.lang.CharSequence getText(java.lang.Object) -> getText
    int getWindowId(java.lang.Object) -> getWindowId
    boolean isCheckable(java.lang.Object) -> isCheckable
    boolean isChecked(java.lang.Object) -> isChecked
    boolean isClickable(java.lang.Object) -> isClickable
    boolean isEnabled(java.lang.Object) -> isEnabled
    boolean isFocusable(java.lang.Object) -> isFocusable
    boolean isFocused(java.lang.Object) -> isFocused
    boolean isLongClickable(java.lang.Object) -> isLongClickable
    boolean isPassword(java.lang.Object) -> isPassword
    boolean isScrollable(java.lang.Object) -> isScrollable
    boolean isSelected(java.lang.Object) -> isSelected
    boolean performAction(java.lang.Object,int) -> performAction
    void setBoundsInParent(java.lang.Object,android.graphics.Rect) -> setBoundsInParent
    void setBoundsInScreen(java.lang.Object,android.graphics.Rect) -> setBoundsInScreen
    void setCheckable(java.lang.Object,boolean) -> setCheckable
    void setChecked(java.lang.Object,boolean) -> setChecked
    void setClassName(java.lang.Object,java.lang.CharSequence) -> setClassName
    void setClickable(java.lang.Object,boolean) -> setClickable
    void setContentDescription(java.lang.Object,java.lang.CharSequence) -> setContentDescription
    void setEnabled(java.lang.Object,boolean) -> setEnabled
    void setFocusable(java.lang.Object,boolean) -> setFocusable
    void setFocused(java.lang.Object,boolean) -> setFocused
    void setLongClickable(java.lang.Object,boolean) -> setLongClickable
    void setPackageName(java.lang.Object,java.lang.CharSequence) -> setPackageName
    void setParent(java.lang.Object,android.view.View) -> setParent
    void setPassword(java.lang.Object,boolean) -> setPassword
    void setScrollable(java.lang.Object,boolean) -> setScrollable
    void setSelected(java.lang.Object,boolean) -> setSelected
    void setSource(java.lang.Object,android.view.View) -> setSource
    void setText(java.lang.Object,java.lang.CharSequence) -> setText
    void recycle(java.lang.Object) -> recycle
android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean -> android.support.v4.view.accessibility.AccessibilityNodeInfoCompatJellyBean:
    void addChild(java.lang.Object,android.view.View,int) -> addChild
    void setSource(java.lang.Object,android.view.View,int) -> setSource
    boolean isVisibleToUser(java.lang.Object) -> isVisibleToUser
    void setVisibleToUser(java.lang.Object,boolean) -> setVisibleToUser
    boolean performAction(java.lang.Object,int,android.os.Bundle) -> performAction
    void setMovementGranularities(java.lang.Object,int) -> setMovementGranularities
    int getMovementGranularities(java.lang.Object) -> getMovementGranularities
    java.lang.Object obtain(android.view.View,int) -> obtain
    java.lang.Object findFocus(java.lang.Object,int) -> findFocus
    java.lang.Object focusSearch(java.lang.Object,int) -> focusSearch
    void setParent(java.lang.Object,android.view.View,int) -> setParent
    boolean isAccessibilityFocused(java.lang.Object) -> isAccessibilityFocused
    void setAccesibilityFocused(java.lang.Object,boolean) -> setAccesibilityFocused
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat -> android.support.v4.view.accessibility.AccessibilityNodeProviderCompat:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderImpl IMPL -> IMPL
    java.lang.Object mProvider -> mProvider
    java.lang.Object getProvider() -> getProvider
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
    boolean performAction(int,int,android.os.Bundle) -> performAction
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> findAccessibilityNodeInfosByText
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderImpl -> android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderImpl:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> newAccessibilityNodeProviderBridge
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl -> android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> newAccessibilityNodeProviderBridge
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1 -> android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat val$compat -> val$compat
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl this$0 -> this$0
    boolean performAction(int,int,android.os.Bundle) -> performAction
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> findAccessibilityNodeInfosByText
    java.lang.Object createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderStubImpl -> android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderStubImpl:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> newAccessibilityNodeProviderBridge
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean -> android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge) -> newAccessibilityNodeProviderBridge
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1 -> android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge val$bridge -> val$bridge
    android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> findAccessibilityNodeInfosByText
    boolean performAction(int,int,android.os.Bundle) -> performAction
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge -> android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge:
    java.lang.Object createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
    boolean performAction(int,int,android.os.Bundle) -> performAction
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> findAccessibilityNodeInfosByText
android.support.v4.view.accessibility.AccessibilityRecordCompat -> android.support.v4.view.accessibility.AccessibilityRecordCompat:
    android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordImpl IMPL -> IMPL
    java.lang.Object mRecord -> mRecord
    java.lang.Object getImpl() -> getImpl
    android.support.v4.view.accessibility.AccessibilityRecordCompat obtain(android.support.v4.view.accessibility.AccessibilityRecordCompat) -> obtain
    android.support.v4.view.accessibility.AccessibilityRecordCompat obtain() -> obtain
    void setSource(android.view.View) -> setSource
    void setSource(android.view.View,int) -> setSource
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getSource() -> getSource
    int getWindowId() -> getWindowId
    boolean isChecked() -> isChecked
    void setChecked(boolean) -> setChecked
    boolean isEnabled() -> isEnabled
    void setEnabled(boolean) -> setEnabled
    boolean isPassword() -> isPassword
    void setPassword(boolean) -> setPassword
    boolean isFullScreen() -> isFullScreen
    void setFullScreen(boolean) -> setFullScreen
    boolean isScrollable() -> isScrollable
    void setScrollable(boolean) -> setScrollable
    int getItemCount() -> getItemCount
    void setItemCount(int) -> setItemCount
    int getCurrentItemIndex() -> getCurrentItemIndex
    void setCurrentItemIndex(int) -> setCurrentItemIndex
    int getFromIndex() -> getFromIndex
    void setFromIndex(int) -> setFromIndex
    int getToIndex() -> getToIndex
    void setToIndex(int) -> setToIndex
    int getScrollX() -> getScrollX
    void setScrollX(int) -> setScrollX
    int getScrollY() -> getScrollY
    void setScrollY(int) -> setScrollY
    int getMaxScrollX() -> getMaxScrollX
    void setMaxScrollX(int) -> setMaxScrollX
    int getMaxScrollY() -> getMaxScrollY
    void setMaxScrollY(int) -> setMaxScrollY
    int getAddedCount() -> getAddedCount
    void setAddedCount(int) -> setAddedCount
    int getRemovedCount() -> getRemovedCount
    void setRemovedCount(int) -> setRemovedCount
    java.lang.CharSequence getClassName() -> getClassName
    void setClassName(java.lang.CharSequence) -> setClassName
    java.util.List getText() -> getText
    java.lang.CharSequence getBeforeText() -> getBeforeText
    void setBeforeText(java.lang.CharSequence) -> setBeforeText
    java.lang.CharSequence getContentDescription() -> getContentDescription
    void setContentDescription(java.lang.CharSequence) -> setContentDescription
    android.os.Parcelable getParcelableData() -> getParcelableData
    void setParcelableData(android.os.Parcelable) -> setParcelableData
    void recycle() -> recycle
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordIcsImpl -> android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordIcsImpl:
    java.lang.Object obtain() -> obtain
    java.lang.Object obtain(java.lang.Object) -> obtain
    int getAddedCount(java.lang.Object) -> getAddedCount
    java.lang.CharSequence getBeforeText(java.lang.Object) -> getBeforeText
    java.lang.CharSequence getClassName(java.lang.Object) -> getClassName
    java.lang.CharSequence getContentDescription(java.lang.Object) -> getContentDescription
    int getCurrentItemIndex(java.lang.Object) -> getCurrentItemIndex
    int getFromIndex(java.lang.Object) -> getFromIndex
    int getItemCount(java.lang.Object) -> getItemCount
    android.os.Parcelable getParcelableData(java.lang.Object) -> getParcelableData
    int getRemovedCount(java.lang.Object) -> getRemovedCount
    int getScrollX(java.lang.Object) -> getScrollX
    int getScrollY(java.lang.Object) -> getScrollY
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getSource(java.lang.Object) -> getSource
    java.util.List getText(java.lang.Object) -> getText
    int getToIndex(java.lang.Object) -> getToIndex
    int getWindowId(java.lang.Object) -> getWindowId
    boolean isChecked(java.lang.Object) -> isChecked
    boolean isEnabled(java.lang.Object) -> isEnabled
    boolean isFullScreen(java.lang.Object) -> isFullScreen
    boolean isPassword(java.lang.Object) -> isPassword
    boolean isScrollable(java.lang.Object) -> isScrollable
    void recycle(java.lang.Object) -> recycle
    void setAddedCount(java.lang.Object,int) -> setAddedCount
    void setBeforeText(java.lang.Object,java.lang.CharSequence) -> setBeforeText
    void setChecked(java.lang.Object,boolean) -> setChecked
    void setClassName(java.lang.Object,java.lang.CharSequence) -> setClassName
    void setContentDescription(java.lang.Object,java.lang.CharSequence) -> setContentDescription
    void setCurrentItemIndex(java.lang.Object,int) -> setCurrentItemIndex
    void setEnabled(java.lang.Object,boolean) -> setEnabled
    void setFromIndex(java.lang.Object,int) -> setFromIndex
    void setFullScreen(java.lang.Object,boolean) -> setFullScreen
    void setItemCount(java.lang.Object,int) -> setItemCount
    void setParcelableData(java.lang.Object,android.os.Parcelable) -> setParcelableData
    void setPassword(java.lang.Object,boolean) -> setPassword
    void setRemovedCount(java.lang.Object,int) -> setRemovedCount
    void setScrollX(java.lang.Object,int) -> setScrollX
    void setScrollY(java.lang.Object,int) -> setScrollY
    void setScrollable(java.lang.Object,boolean) -> setScrollable
    void setSource(java.lang.Object,android.view.View) -> setSource
    void setToIndex(java.lang.Object,int) -> setToIndex
android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordIcsMr1Impl -> android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordIcsMr1Impl:
    int getMaxScrollX(java.lang.Object) -> getMaxScrollX
    int getMaxScrollY(java.lang.Object) -> getMaxScrollY
    void setMaxScrollX(java.lang.Object,int) -> setMaxScrollX
    void setMaxScrollY(java.lang.Object,int) -> setMaxScrollY
android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordImpl -> android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordImpl:
    java.lang.Object obtain() -> obtain
    java.lang.Object obtain(java.lang.Object) -> obtain
    void setSource(java.lang.Object,android.view.View) -> setSource
    void setSource(java.lang.Object,android.view.View,int) -> setSource
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getSource(java.lang.Object) -> getSource
    int getWindowId(java.lang.Object) -> getWindowId
    boolean isChecked(java.lang.Object) -> isChecked
    void setChecked(java.lang.Object,boolean) -> setChecked
    boolean isEnabled(java.lang.Object) -> isEnabled
    void setEnabled(java.lang.Object,boolean) -> setEnabled
    boolean isPassword(java.lang.Object) -> isPassword
    void setPassword(java.lang.Object,boolean) -> setPassword
    boolean isFullScreen(java.lang.Object) -> isFullScreen
    void setFullScreen(java.lang.Object,boolean) -> setFullScreen
    boolean isScrollable(java.lang.Object) -> isScrollable
    void setScrollable(java.lang.Object,boolean) -> setScrollable
    int getItemCount(java.lang.Object) -> getItemCount
    void setItemCount(java.lang.Object,int) -> setItemCount
    int getCurrentItemIndex(java.lang.Object) -> getCurrentItemIndex
    void setCurrentItemIndex(java.lang.Object,int) -> setCurrentItemIndex
    int getFromIndex(java.lang.Object) -> getFromIndex
    void setFromIndex(java.lang.Object,int) -> setFromIndex
    int getToIndex(java.lang.Object) -> getToIndex
    void setToIndex(java.lang.Object,int) -> setToIndex
    int getScrollX(java.lang.Object) -> getScrollX
    void setScrollX(java.lang.Object,int) -> setScrollX
    int getScrollY(java.lang.Object) -> getScrollY
    void setScrollY(java.lang.Object,int) -> setScrollY
    int getMaxScrollX(java.lang.Object) -> getMaxScrollX
    void setMaxScrollX(java.lang.Object,int) -> setMaxScrollX
    int getMaxScrollY(java.lang.Object) -> getMaxScrollY
    void setMaxScrollY(java.lang.Object,int) -> setMaxScrollY
    int getAddedCount(java.lang.Object) -> getAddedCount
    void setAddedCount(java.lang.Object,int) -> setAddedCount
    int getRemovedCount(java.lang.Object) -> getRemovedCount
    void setRemovedCount(java.lang.Object,int) -> setRemovedCount
    java.lang.CharSequence getClassName(java.lang.Object) -> getClassName
    void setClassName(java.lang.Object,java.lang.CharSequence) -> setClassName
    java.util.List getText(java.lang.Object) -> getText
    java.lang.CharSequence getBeforeText(java.lang.Object) -> getBeforeText
    void setBeforeText(java.lang.Object,java.lang.CharSequence) -> setBeforeText
    java.lang.CharSequence getContentDescription(java.lang.Object) -> getContentDescription
    void setContentDescription(java.lang.Object,java.lang.CharSequence) -> setContentDescription
    android.os.Parcelable getParcelableData(java.lang.Object) -> getParcelableData
    void setParcelableData(java.lang.Object,android.os.Parcelable) -> setParcelableData
    void recycle(java.lang.Object) -> recycle
android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordJellyBeanImpl -> android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordJellyBeanImpl:
    void setSource(java.lang.Object,android.view.View,int) -> setSource
android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordStubImpl -> android.support.v4.view.accessibility.AccessibilityRecordCompat$AccessibilityRecordStubImpl:
    java.lang.Object obtain() -> obtain
    java.lang.Object obtain(java.lang.Object) -> obtain
    int getAddedCount(java.lang.Object) -> getAddedCount
    java.lang.CharSequence getBeforeText(java.lang.Object) -> getBeforeText
    java.lang.CharSequence getClassName(java.lang.Object) -> getClassName
    java.lang.CharSequence getContentDescription(java.lang.Object) -> getContentDescription
    int getCurrentItemIndex(java.lang.Object) -> getCurrentItemIndex
    int getFromIndex(java.lang.Object) -> getFromIndex
    int getItemCount(java.lang.Object) -> getItemCount
    int getMaxScrollX(java.lang.Object) -> getMaxScrollX
    int getMaxScrollY(java.lang.Object) -> getMaxScrollY
    android.os.Parcelable getParcelableData(java.lang.Object) -> getParcelableData
    int getRemovedCount(java.lang.Object) -> getRemovedCount
    int getScrollX(java.lang.Object) -> getScrollX
    int getScrollY(java.lang.Object) -> getScrollY
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat getSource(java.lang.Object) -> getSource
    java.util.List getText(java.lang.Object) -> getText
    int getToIndex(java.lang.Object) -> getToIndex
    int getWindowId(java.lang.Object) -> getWindowId
    boolean isChecked(java.lang.Object) -> isChecked
    boolean isEnabled(java.lang.Object) -> isEnabled
    boolean isFullScreen(java.lang.Object) -> isFullScreen
    boolean isPassword(java.lang.Object) -> isPassword
    boolean isScrollable(java.lang.Object) -> isScrollable
    void recycle(java.lang.Object) -> recycle
    void setAddedCount(java.lang.Object,int) -> setAddedCount
    void setBeforeText(java.lang.Object,java.lang.CharSequence) -> setBeforeText
    void setChecked(java.lang.Object,boolean) -> setChecked
    void setClassName(java.lang.Object,java.lang.CharSequence) -> setClassName
    void setContentDescription(java.lang.Object,java.lang.CharSequence) -> setContentDescription
    void setCurrentItemIndex(java.lang.Object,int) -> setCurrentItemIndex
    void setEnabled(java.lang.Object,boolean) -> setEnabled
    void setFromIndex(java.lang.Object,int) -> setFromIndex
    void setFullScreen(java.lang.Object,boolean) -> setFullScreen
    void setItemCount(java.lang.Object,int) -> setItemCount
    void setMaxScrollX(java.lang.Object,int) -> setMaxScrollX
    void setMaxScrollY(java.lang.Object,int) -> setMaxScrollY
    void setParcelableData(java.lang.Object,android.os.Parcelable) -> setParcelableData
    void setPassword(java.lang.Object,boolean) -> setPassword
    void setRemovedCount(java.lang.Object,int) -> setRemovedCount
    void setScrollX(java.lang.Object,int) -> setScrollX
    void setScrollY(java.lang.Object,int) -> setScrollY
    void setScrollable(java.lang.Object,boolean) -> setScrollable
    void setSource(java.lang.Object,android.view.View) -> setSource
    void setSource(java.lang.Object,android.view.View,int) -> setSource
    void setToIndex(java.lang.Object,int) -> setToIndex
android.support.v4.view.accessibility.AccessibilityRecordCompatIcs -> android.support.v4.view.accessibility.AccessibilityRecordCompatIcs:
    java.lang.Object obtain() -> obtain
    java.lang.Object obtain(java.lang.Object) -> obtain
    int getAddedCount(java.lang.Object) -> getAddedCount
    java.lang.CharSequence getBeforeText(java.lang.Object) -> getBeforeText
    java.lang.CharSequence getClassName(java.lang.Object) -> getClassName
    java.lang.CharSequence getContentDescription(java.lang.Object) -> getContentDescription
    int getCurrentItemIndex(java.lang.Object) -> getCurrentItemIndex
    int getFromIndex(java.lang.Object) -> getFromIndex
    int getItemCount(java.lang.Object) -> getItemCount
    android.os.Parcelable getParcelableData(java.lang.Object) -> getParcelableData
    int getRemovedCount(java.lang.Object) -> getRemovedCount
    int getScrollX(java.lang.Object) -> getScrollX
    int getScrollY(java.lang.Object) -> getScrollY
    java.lang.Object getSource(java.lang.Object) -> getSource
    java.util.List getText(java.lang.Object) -> getText
    int getToIndex(java.lang.Object) -> getToIndex
    int getWindowId(java.lang.Object) -> getWindowId
    boolean isChecked(java.lang.Object) -> isChecked
    boolean isEnabled(java.lang.Object) -> isEnabled
    boolean isFullScreen(java.lang.Object) -> isFullScreen
    boolean isPassword(java.lang.Object) -> isPassword
    boolean isScrollable(java.lang.Object) -> isScrollable
    void recycle(java.lang.Object) -> recycle
    void setAddedCount(java.lang.Object,int) -> setAddedCount
    void setBeforeText(java.lang.Object,java.lang.CharSequence) -> setBeforeText
    void setChecked(java.lang.Object,boolean) -> setChecked
    void setClassName(java.lang.Object,java.lang.CharSequence) -> setClassName
    void setContentDescription(java.lang.Object,java.lang.CharSequence) -> setContentDescription
    void setCurrentItemIndex(java.lang.Object,int) -> setCurrentItemIndex
    void setEnabled(java.lang.Object,boolean) -> setEnabled
    void setFromIndex(java.lang.Object,int) -> setFromIndex
    void setFullScreen(java.lang.Object,boolean) -> setFullScreen
    void setItemCount(java.lang.Object,int) -> setItemCount
    void setParcelableData(java.lang.Object,android.os.Parcelable) -> setParcelableData
    void setPassword(java.lang.Object,boolean) -> setPassword
    void setRemovedCount(java.lang.Object,int) -> setRemovedCount
    void setScrollX(java.lang.Object,int) -> setScrollX
    void setScrollY(java.lang.Object,int) -> setScrollY
    void setScrollable(java.lang.Object,boolean) -> setScrollable
    void setSource(java.lang.Object,android.view.View) -> setSource
    void setToIndex(java.lang.Object,int) -> setToIndex
android.support.v4.view.accessibility.AccessibilityRecordCompatIcsMr1 -> android.support.v4.view.accessibility.AccessibilityRecordCompatIcsMr1:
    int getMaxScrollX(java.lang.Object) -> getMaxScrollX
    int getMaxScrollY(java.lang.Object) -> getMaxScrollY
    void setMaxScrollX(java.lang.Object,int) -> setMaxScrollX
    void setMaxScrollY(java.lang.Object,int) -> setMaxScrollY
android.support.v4.view.accessibility.AccessibilityRecordCompatJellyBean -> android.support.v4.view.accessibility.AccessibilityRecordCompatJellyBean:
    void setSource(java.lang.Object,android.view.View,int) -> setSource
android.support.v4.widget.CursorAdapter -> android.support.v4.widget.CursorAdapter:
    boolean mDataValid -> mDataValid
    boolean mAutoRequery -> mAutoRequery
    android.database.Cursor mCursor -> mCursor
    android.content.Context mContext -> mContext
    int mRowIDColumn -> mRowIDColumn
    android.support.v4.widget.CursorAdapter$ChangeObserver mChangeObserver -> mChangeObserver
    android.database.DataSetObserver mDataSetObserver -> mDataSetObserver
    android.support.v4.widget.CursorFilter mCursorFilter -> mCursorFilter
    android.widget.FilterQueryProvider mFilterQueryProvider -> mFilterQueryProvider
    int FLAG_AUTO_REQUERY -> FLAG_AUTO_REQUERY
    int FLAG_REGISTER_CONTENT_OBSERVER -> FLAG_REGISTER_CONTENT_OBSERVER
    void init(android.content.Context,android.database.Cursor,boolean) -> init
    void init(android.content.Context,android.database.Cursor,int) -> init
    android.database.Cursor getCursor() -> getCursor
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    boolean hasStableIds() -> hasStableIds
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup) -> getDropDownView
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> newView
    android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> newDropDownView
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> bindView
    void changeCursor(android.database.Cursor) -> changeCursor
    android.database.Cursor swapCursor(android.database.Cursor) -> swapCursor
    java.lang.CharSequence convertToString(android.database.Cursor) -> convertToString
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> runQueryOnBackgroundThread
    android.widget.Filter getFilter() -> getFilter
    android.widget.FilterQueryProvider getFilterQueryProvider() -> getFilterQueryProvider
    void setFilterQueryProvider(android.widget.FilterQueryProvider) -> setFilterQueryProvider
    void onContentChanged() -> onContentChanged
android.support.v4.widget.CursorAdapter$1 -> android.support.v4.widget.CursorAdapter$1:
android.support.v4.widget.CursorAdapter$ChangeObserver -> android.support.v4.widget.CursorAdapter$ChangeObserver:
    android.support.v4.widget.CursorAdapter this$0 -> this$0
    boolean deliverSelfNotifications() -> deliverSelfNotifications
    void onChange(boolean) -> onChange
android.support.v4.widget.CursorAdapter$MyDataSetObserver -> android.support.v4.widget.CursorAdapter$MyDataSetObserver:
    android.support.v4.widget.CursorAdapter this$0 -> this$0
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.widget.CursorFilter -> android.support.v4.widget.CursorFilter:
    android.support.v4.widget.CursorFilter$CursorFilterClient mClient -> mClient
    java.lang.CharSequence convertResultToString(java.lang.Object) -> convertResultToString
    android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence) -> performFiltering
    void publishResults(java.lang.CharSequence,android.widget.Filter$FilterResults) -> publishResults
android.support.v4.widget.CursorFilter$CursorFilterClient -> android.support.v4.widget.CursorFilter$CursorFilterClient:
    java.lang.CharSequence convertToString(android.database.Cursor) -> convertToString
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> runQueryOnBackgroundThread
    android.database.Cursor getCursor() -> getCursor
    void changeCursor(android.database.Cursor) -> changeCursor
android.support.v4.widget.DrawerLayout -> android.support.v4.widget.DrawerLayout:
    java.lang.String TAG -> TAG
    int STATE_IDLE -> STATE_IDLE
    int STATE_DRAGGING -> STATE_DRAGGING
    int STATE_SETTLING -> STATE_SETTLING
    int LOCK_MODE_UNLOCKED -> LOCK_MODE_UNLOCKED
    int LOCK_MODE_LOCKED_CLOSED -> LOCK_MODE_LOCKED_CLOSED
    int LOCK_MODE_LOCKED_OPEN -> LOCK_MODE_LOCKED_OPEN
    int MIN_DRAWER_MARGIN -> MIN_DRAWER_MARGIN
    int DEFAULT_SCRIM_COLOR -> DEFAULT_SCRIM_COLOR
    int PEEK_DELAY -> PEEK_DELAY
    int MIN_FLING_VELOCITY -> MIN_FLING_VELOCITY
    boolean ALLOW_EDGE_LOCK -> ALLOW_EDGE_LOCK
    int[] LAYOUT_ATTRS -> LAYOUT_ATTRS
    int mMinDrawerMargin -> mMinDrawerMargin
    int mScrimColor -> mScrimColor
    float mScrimOpacity -> mScrimOpacity
    android.graphics.Paint mScrimPaint -> mScrimPaint
    android.support.v4.widget.ViewDragHelper mLeftDragger -> mLeftDragger
    android.support.v4.widget.ViewDragHelper mRightDragger -> mRightDragger
    android.support.v4.widget.DrawerLayout$ViewDragCallback mLeftCallback -> mLeftCallback
    android.support.v4.widget.DrawerLayout$ViewDragCallback mRightCallback -> mRightCallback
    int mDrawerState -> mDrawerState
    boolean mInLayout -> mInLayout
    boolean mFirstLayout -> mFirstLayout
    int mLockModeLeft -> mLockModeLeft
    int mLockModeRight -> mLockModeRight
    boolean mDisallowInterceptRequested -> mDisallowInterceptRequested
    boolean mChildrenCanceledTouch -> mChildrenCanceledTouch
    android.support.v4.widget.DrawerLayout$DrawerListener mListener -> mListener
    float mInitialMotionX -> mInitialMotionX
    float mInitialMotionY -> mInitialMotionY
    android.graphics.drawable.Drawable mShadowLeft -> mShadowLeft
    android.graphics.drawable.Drawable mShadowRight -> mShadowRight
    void setDrawerShadow(android.graphics.drawable.Drawable,int) -> setDrawerShadow
    void setDrawerShadow(int,int) -> setDrawerShadow
    void setScrimColor(int) -> setScrimColor
    void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener) -> setDrawerListener
    void setDrawerLockMode(int) -> setDrawerLockMode
    void setDrawerLockMode(int,int) -> setDrawerLockMode
    void setDrawerLockMode(int,android.view.View) -> setDrawerLockMode
    int getDrawerLockMode(int) -> getDrawerLockMode
    int getDrawerLockMode(android.view.View) -> getDrawerLockMode
    void updateDrawerState(int,int,android.view.View) -> updateDrawerState
    void dispatchOnDrawerClosed(android.view.View) -> dispatchOnDrawerClosed
    void dispatchOnDrawerOpened(android.view.View) -> dispatchOnDrawerOpened
    void dispatchOnDrawerSlide(android.view.View,float) -> dispatchOnDrawerSlide
    void setDrawerViewOffset(android.view.View,float) -> setDrawerViewOffset
    float getDrawerViewOffset(android.view.View) -> getDrawerViewOffset
    int getDrawerViewGravity(android.view.View) -> getDrawerViewGravity
    boolean checkDrawerViewGravity(android.view.View,int) -> checkDrawerViewGravity
    android.view.View findOpenDrawer() -> findOpenDrawer
    void moveDrawerToOffset(android.view.View,float) -> moveDrawerToOffset
    android.view.View findDrawerWithGravity(int) -> findDrawerWithGravity
    java.lang.String gravityToString(int) -> gravityToString
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void requestLayout() -> requestLayout
    void computeScroll() -> computeScroll
    boolean hasOpaqueBackground(android.view.View) -> hasOpaqueBackground
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    boolean isContentView(android.view.View) -> isContentView
    boolean isDrawerView(android.view.View) -> isDrawerView
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void requestDisallowInterceptTouchEvent(boolean) -> requestDisallowInterceptTouchEvent
    void closeDrawers() -> closeDrawers
    void closeDrawers(boolean) -> closeDrawers
    void openDrawer(android.view.View) -> openDrawer
    void openDrawer(int) -> openDrawer
    void closeDrawer(android.view.View) -> closeDrawer
    void closeDrawer(int) -> closeDrawer
    boolean isDrawerOpen(android.view.View) -> isDrawerOpen
    boolean isDrawerOpen(int) -> isDrawerOpen
    boolean isDrawerVisible(android.view.View) -> isDrawerVisible
    boolean isDrawerVisible(int) -> isDrawerVisible
    boolean hasPeekingDrawer() -> hasPeekingDrawer
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean hasVisibleDrawer() -> hasVisibleDrawer
    android.view.View findVisibleDrawer() -> findVisibleDrawer
    void cancelChildViewTouch() -> cancelChildViewTouch
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    int[] access$100() -> access$100
android.support.v4.widget.DrawerLayout$AccessibilityDelegate -> android.support.v4.widget.DrawerLayout$AccessibilityDelegate:
    android.graphics.Rect mTmpRect -> mTmpRect
    android.support.v4.widget.DrawerLayout this$0 -> this$0
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> onInitializeAccessibilityNodeInfo
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    boolean filter(android.view.View) -> filter
    void copyNodeInfoNoChildren(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> copyNodeInfoNoChildren
android.support.v4.widget.DrawerLayout$DrawerListener -> android.support.v4.widget.DrawerLayout$DrawerListener:
    void onDrawerSlide(android.view.View,float) -> onDrawerSlide
    void onDrawerOpened(android.view.View) -> onDrawerOpened
    void onDrawerClosed(android.view.View) -> onDrawerClosed
    void onDrawerStateChanged(int) -> onDrawerStateChanged
android.support.v4.widget.DrawerLayout$LayoutParams -> android.support.v4.widget.DrawerLayout$LayoutParams:
    int gravity -> gravity
    float onScreen -> onScreen
    boolean isPeeking -> isPeeking
    boolean knownOpen -> knownOpen
android.support.v4.widget.DrawerLayout$SavedState -> android.support.v4.widget.DrawerLayout$SavedState:
    int openDrawerGravity -> openDrawerGravity
    int lockModeLeft -> lockModeLeft
    int lockModeRight -> lockModeRight
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.DrawerLayout$SavedState$1 -> android.support.v4.widget.DrawerLayout$SavedState$1:
    android.support.v4.widget.DrawerLayout$SavedState createFromParcel(android.os.Parcel) -> createFromParcel
    android.support.v4.widget.DrawerLayout$SavedState[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.DrawerLayout$SimpleDrawerListener -> android.support.v4.widget.DrawerLayout$SimpleDrawerListener:
    void onDrawerSlide(android.view.View,float) -> onDrawerSlide
    void onDrawerOpened(android.view.View) -> onDrawerOpened
    void onDrawerClosed(android.view.View) -> onDrawerClosed
    void onDrawerStateChanged(int) -> onDrawerStateChanged
android.support.v4.widget.DrawerLayout$ViewDragCallback -> android.support.v4.widget.DrawerLayout$ViewDragCallback:
    int mGravity -> mGravity
    android.support.v4.widget.ViewDragHelper mDragger -> mDragger
    java.lang.Runnable mPeekRunnable -> mPeekRunnable
    android.support.v4.widget.DrawerLayout this$0 -> this$0
    void setDragger(android.support.v4.widget.ViewDragHelper) -> setDragger
    void removeCallbacks() -> removeCallbacks
    boolean tryCaptureView(android.view.View,int) -> tryCaptureView
    void onViewDragStateChanged(int) -> onViewDragStateChanged
    void onViewPositionChanged(android.view.View,int,int,int,int) -> onViewPositionChanged
    void onViewCaptured(android.view.View,int) -> onViewCaptured
    void closeOtherDrawer() -> closeOtherDrawer
    void onViewReleased(android.view.View,float,float) -> onViewReleased
    void onEdgeTouched(int,int) -> onEdgeTouched
    void peekDrawer() -> peekDrawer
    boolean onEdgeLock(int) -> onEdgeLock
    void onEdgeDragStarted(int,int) -> onEdgeDragStarted
    int getViewHorizontalDragRange(android.view.View) -> getViewHorizontalDragRange
    int clampViewPositionHorizontal(android.view.View,int,int) -> clampViewPositionHorizontal
    int clampViewPositionVertical(android.view.View,int,int) -> clampViewPositionVertical
    void access$000(android.support.v4.widget.DrawerLayout$ViewDragCallback) -> access$000
android.support.v4.widget.DrawerLayout$ViewDragCallback$1 -> android.support.v4.widget.DrawerLayout$ViewDragCallback$1:
    android.support.v4.widget.DrawerLayout$ViewDragCallback this$1 -> this$1
    void run() -> run
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.widget.EdgeEffectCompat:
    java.lang.Object mEdgeEffect -> mEdgeEffect
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> IMPL
    void setSize(int,int) -> setSize
    boolean isFinished() -> isFinished
    void finish() -> finish
    boolean onPull(float) -> onPull
    boolean onRelease() -> onRelease
    boolean onAbsorb(int) -> onAbsorb
    boolean draw(android.graphics.Canvas) -> draw
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl:
    java.lang.Object newEdgeEffect(android.content.Context) -> newEdgeEffect
    void setSize(java.lang.Object,int,int) -> setSize
    boolean isFinished(java.lang.Object) -> isFinished
    void finish(java.lang.Object) -> finish
    boolean onPull(java.lang.Object,float) -> onPull
    boolean onRelease(java.lang.Object) -> onRelease
    boolean onAbsorb(java.lang.Object,int) -> onAbsorb
    boolean draw(java.lang.Object,android.graphics.Canvas) -> draw
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl:
    java.lang.Object newEdgeEffect(android.content.Context) -> newEdgeEffect
    void setSize(java.lang.Object,int,int) -> setSize
    boolean isFinished(java.lang.Object) -> isFinished
    void finish(java.lang.Object) -> finish
    boolean onPull(java.lang.Object,float) -> onPull
    boolean onRelease(java.lang.Object) -> onRelease
    boolean onAbsorb(java.lang.Object,int) -> onAbsorb
    boolean draw(java.lang.Object,android.graphics.Canvas) -> draw
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl:
    java.lang.Object newEdgeEffect(android.content.Context) -> newEdgeEffect
    void setSize(java.lang.Object,int,int) -> setSize
    boolean isFinished(java.lang.Object) -> isFinished
    void finish(java.lang.Object) -> finish
    boolean onPull(java.lang.Object,float) -> onPull
    boolean onRelease(java.lang.Object) -> onRelease
    boolean onAbsorb(java.lang.Object,int) -> onAbsorb
    boolean draw(java.lang.Object,android.graphics.Canvas) -> draw
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.widget.EdgeEffectCompatIcs:
    java.lang.Object newEdgeEffect(android.content.Context) -> newEdgeEffect
    void setSize(java.lang.Object,int,int) -> setSize
    boolean isFinished(java.lang.Object) -> isFinished
    void finish(java.lang.Object) -> finish
    boolean onPull(java.lang.Object,float) -> onPull
    boolean onRelease(java.lang.Object) -> onRelease
    boolean onAbsorb(java.lang.Object,int) -> onAbsorb
    boolean draw(java.lang.Object,android.graphics.Canvas) -> draw
android.support.v4.widget.ResourceCursorAdapter -> android.support.v4.widget.ResourceCursorAdapter:
    int mLayout -> mLayout
    int mDropDownLayout -> mDropDownLayout
    android.view.LayoutInflater mInflater -> mInflater
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> newView
    android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> newDropDownView
    void setViewResource(int) -> setViewResource
    void setDropDownViewResource(int) -> setDropDownViewResource
android.support.v4.widget.ScrollerCompat -> android.support.v4.widget.ScrollerCompat:
    java.lang.Object mScroller -> mScroller
    android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl IMPL -> IMPL
    android.support.v4.widget.ScrollerCompat create(android.content.Context) -> create
    android.support.v4.widget.ScrollerCompat create(android.content.Context,android.view.animation.Interpolator) -> create
    boolean isFinished() -> isFinished
    int getCurrX() -> getCurrX
    int getCurrY() -> getCurrY
    int getFinalX() -> getFinalX
    int getFinalY() -> getFinalY
    float getCurrVelocity() -> getCurrVelocity
    boolean computeScrollOffset() -> computeScrollOffset
    void startScroll(int,int,int,int) -> startScroll
    void startScroll(int,int,int,int,int) -> startScroll
    void fling(int,int,int,int,int,int,int,int) -> fling
    void fling(int,int,int,int,int,int,int,int,int,int) -> fling
    void abortAnimation() -> abortAnimation
    void notifyHorizontalEdgeReached(int,int,int) -> notifyHorizontalEdgeReached
    void notifyVerticalEdgeReached(int,int,int) -> notifyVerticalEdgeReached
    boolean isOverScrolled() -> isOverScrolled
android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl -> android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl:
    java.lang.Object createScroller(android.content.Context,android.view.animation.Interpolator) -> createScroller
    boolean isFinished(java.lang.Object) -> isFinished
    int getCurrX(java.lang.Object) -> getCurrX
    int getCurrY(java.lang.Object) -> getCurrY
    float getCurrVelocity(java.lang.Object) -> getCurrVelocity
    boolean computeScrollOffset(java.lang.Object) -> computeScrollOffset
    void startScroll(java.lang.Object,int,int,int,int) -> startScroll
    void startScroll(java.lang.Object,int,int,int,int,int) -> startScroll
    void fling(java.lang.Object,int,int,int,int,int,int,int,int) -> fling
    void fling(java.lang.Object,int,int,int,int,int,int,int,int,int,int) -> fling
    void abortAnimation(java.lang.Object) -> abortAnimation
    void notifyHorizontalEdgeReached(java.lang.Object,int,int,int) -> notifyHorizontalEdgeReached
    void notifyVerticalEdgeReached(java.lang.Object,int,int,int) -> notifyVerticalEdgeReached
    boolean isOverScrolled(java.lang.Object) -> isOverScrolled
    int getFinalX(java.lang.Object) -> getFinalX
    int getFinalY(java.lang.Object) -> getFinalY
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplBase -> android.support.v4.widget.ScrollerCompat$ScrollerCompatImplBase:
    java.lang.Object createScroller(android.content.Context,android.view.animation.Interpolator) -> createScroller
    boolean isFinished(java.lang.Object) -> isFinished
    int getCurrX(java.lang.Object) -> getCurrX
    int getCurrY(java.lang.Object) -> getCurrY
    float getCurrVelocity(java.lang.Object) -> getCurrVelocity
    boolean computeScrollOffset(java.lang.Object) -> computeScrollOffset
    void startScroll(java.lang.Object,int,int,int,int) -> startScroll
    void startScroll(java.lang.Object,int,int,int,int,int) -> startScroll
    void fling(java.lang.Object,int,int,int,int,int,int,int,int) -> fling
    void fling(java.lang.Object,int,int,int,int,int,int,int,int,int,int) -> fling
    void abortAnimation(java.lang.Object) -> abortAnimation
    void notifyHorizontalEdgeReached(java.lang.Object,int,int,int) -> notifyHorizontalEdgeReached
    void notifyVerticalEdgeReached(java.lang.Object,int,int,int) -> notifyVerticalEdgeReached
    boolean isOverScrolled(java.lang.Object) -> isOverScrolled
    int getFinalX(java.lang.Object) -> getFinalX
    int getFinalY(java.lang.Object) -> getFinalY
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplGingerbread -> android.support.v4.widget.ScrollerCompat$ScrollerCompatImplGingerbread:
    java.lang.Object createScroller(android.content.Context,android.view.animation.Interpolator) -> createScroller
    boolean isFinished(java.lang.Object) -> isFinished
    int getCurrX(java.lang.Object) -> getCurrX
    int getCurrY(java.lang.Object) -> getCurrY
    float getCurrVelocity(java.lang.Object) -> getCurrVelocity
    boolean computeScrollOffset(java.lang.Object) -> computeScrollOffset
    void startScroll(java.lang.Object,int,int,int,int) -> startScroll
    void startScroll(java.lang.Object,int,int,int,int,int) -> startScroll
    void fling(java.lang.Object,int,int,int,int,int,int,int,int) -> fling
    void fling(java.lang.Object,int,int,int,int,int,int,int,int,int,int) -> fling
    void abortAnimation(java.lang.Object) -> abortAnimation
    void notifyHorizontalEdgeReached(java.lang.Object,int,int,int) -> notifyHorizontalEdgeReached
    void notifyVerticalEdgeReached(java.lang.Object,int,int,int) -> notifyVerticalEdgeReached
    boolean isOverScrolled(java.lang.Object) -> isOverScrolled
    int getFinalX(java.lang.Object) -> getFinalX
    int getFinalY(java.lang.Object) -> getFinalY
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplIcs -> android.support.v4.widget.ScrollerCompat$ScrollerCompatImplIcs:
    float getCurrVelocity(java.lang.Object) -> getCurrVelocity
android.support.v4.widget.ScrollerCompatGingerbread -> android.support.v4.widget.ScrollerCompatGingerbread:
    java.lang.Object createScroller(android.content.Context,android.view.animation.Interpolator) -> createScroller
    boolean isFinished(java.lang.Object) -> isFinished
    int getCurrX(java.lang.Object) -> getCurrX
    int getCurrY(java.lang.Object) -> getCurrY
    boolean computeScrollOffset(java.lang.Object) -> computeScrollOffset
    void startScroll(java.lang.Object,int,int,int,int) -> startScroll
    void startScroll(java.lang.Object,int,int,int,int,int) -> startScroll
    void fling(java.lang.Object,int,int,int,int,int,int,int,int) -> fling
    void fling(java.lang.Object,int,int,int,int,int,int,int,int,int,int) -> fling
    void abortAnimation(java.lang.Object) -> abortAnimation
    void notifyHorizontalEdgeReached(java.lang.Object,int,int,int) -> notifyHorizontalEdgeReached
    void notifyVerticalEdgeReached(java.lang.Object,int,int,int) -> notifyVerticalEdgeReached
    boolean isOverScrolled(java.lang.Object) -> isOverScrolled
    int getFinalX(java.lang.Object) -> getFinalX
    int getFinalY(java.lang.Object) -> getFinalY
android.support.v4.widget.ScrollerCompatIcs -> android.support.v4.widget.ScrollerCompatIcs:
    float getCurrVelocity(java.lang.Object) -> getCurrVelocity
android.support.v4.widget.SearchViewCompat -> android.support.v4.widget.SearchViewCompat:
    android.support.v4.widget.SearchViewCompat$SearchViewCompatImpl IMPL -> IMPL
    android.view.View newSearchView(android.content.Context) -> newSearchView
    void setSearchableInfo(android.view.View,android.content.ComponentName) -> setSearchableInfo
    void setImeOptions(android.view.View,int) -> setImeOptions
    void setInputType(android.view.View,int) -> setInputType
    void setOnQueryTextListener(android.view.View,android.support.v4.widget.SearchViewCompat$OnQueryTextListenerCompat) -> setOnQueryTextListener
    void setOnCloseListener(android.view.View,android.support.v4.widget.SearchViewCompat$OnCloseListenerCompat) -> setOnCloseListener
    java.lang.CharSequence getQuery(android.view.View) -> getQuery
    void setQuery(android.view.View,java.lang.CharSequence,boolean) -> setQuery
    void setQueryHint(android.view.View,java.lang.CharSequence) -> setQueryHint
    void setIconified(android.view.View,boolean) -> setIconified
    boolean isIconified(android.view.View) -> isIconified
    void setSubmitButtonEnabled(android.view.View,boolean) -> setSubmitButtonEnabled
    boolean isSubmitButtonEnabled(android.view.View) -> isSubmitButtonEnabled
    void setQueryRefinementEnabled(android.view.View,boolean) -> setQueryRefinementEnabled
    boolean isQueryRefinementEnabled(android.view.View) -> isQueryRefinementEnabled
    void setMaxWidth(android.view.View,int) -> setMaxWidth
    android.support.v4.widget.SearchViewCompat$SearchViewCompatImpl access$000() -> access$000
android.support.v4.widget.SearchViewCompat$OnCloseListenerCompat -> android.support.v4.widget.SearchViewCompat$OnCloseListenerCompat:
    java.lang.Object mListener -> mListener
    boolean onClose() -> onClose
android.support.v4.widget.SearchViewCompat$OnQueryTextListenerCompat -> android.support.v4.widget.SearchViewCompat$OnQueryTextListenerCompat:
    java.lang.Object mListener -> mListener
    boolean onQueryTextSubmit(java.lang.String) -> onQueryTextSubmit
    boolean onQueryTextChange(java.lang.String) -> onQueryTextChange
android.support.v4.widget.SearchViewCompat$SearchViewCompatHoneycombImpl -> android.support.v4.widget.SearchViewCompat$SearchViewCompatHoneycombImpl:
    android.view.View newSearchView(android.content.Context) -> newSearchView
    void setSearchableInfo(android.view.View,android.content.ComponentName) -> setSearchableInfo
    java.lang.Object newOnQueryTextListener(android.support.v4.widget.SearchViewCompat$OnQueryTextListenerCompat) -> newOnQueryTextListener
    void setOnQueryTextListener(java.lang.Object,java.lang.Object) -> setOnQueryTextListener
    java.lang.Object newOnCloseListener(android.support.v4.widget.SearchViewCompat$OnCloseListenerCompat) -> newOnCloseListener
    void setOnCloseListener(java.lang.Object,java.lang.Object) -> setOnCloseListener
    java.lang.CharSequence getQuery(android.view.View) -> getQuery
    void setQuery(android.view.View,java.lang.CharSequence,boolean) -> setQuery
    void setQueryHint(android.view.View,java.lang.CharSequence) -> setQueryHint
    void setIconified(android.view.View,boolean) -> setIconified
    boolean isIconified(android.view.View) -> isIconified
    void setSubmitButtonEnabled(android.view.View,boolean) -> setSubmitButtonEnabled
    boolean isSubmitButtonEnabled(android.view.View) -> isSubmitButtonEnabled
    void setQueryRefinementEnabled(android.view.View,boolean) -> setQueryRefinementEnabled
    boolean isQueryRefinementEnabled(android.view.View) -> isQueryRefinementEnabled
    void setMaxWidth(android.view.View,int) -> setMaxWidth
android.support.v4.widget.SearchViewCompat$SearchViewCompatHoneycombImpl$1 -> android.support.v4.widget.SearchViewCompat$SearchViewCompatHoneycombImpl$1:
    android.support.v4.widget.SearchViewCompat$OnQueryTextListenerCompat val$listener -> val$listener
    android.support.v4.widget.SearchViewCompat$SearchViewCompatHoneycombImpl this$0 -> this$0
    boolean onQueryTextSubmit(java.lang.String) -> onQueryTextSubmit
    boolean onQueryTextChange(java.lang.String) -> onQueryTextChange
android.support.v4.widget.SearchViewCompat$SearchViewCompatHoneycombImpl$2 -> android.support.v4.widget.SearchViewCompat$SearchViewCompatHoneycombImpl$2:
    android.support.v4.widget.SearchViewCompat$OnCloseListenerCompat val$listener -> val$listener
    android.support.v4.widget.SearchViewCompat$SearchViewCompatHoneycombImpl this$0 -> this$0
    boolean onClose() -> onClose
android.support.v4.widget.SearchViewCompat$SearchViewCompatIcsImpl -> android.support.v4.widget.SearchViewCompat$SearchViewCompatIcsImpl:
    android.view.View newSearchView(android.content.Context) -> newSearchView
    void setImeOptions(android.view.View,int) -> setImeOptions
    void setInputType(android.view.View,int) -> setInputType
android.support.v4.widget.SearchViewCompat$SearchViewCompatImpl -> android.support.v4.widget.SearchViewCompat$SearchViewCompatImpl:
    android.view.View newSearchView(android.content.Context) -> newSearchView
    void setSearchableInfo(android.view.View,android.content.ComponentName) -> setSearchableInfo
    void setImeOptions(android.view.View,int) -> setImeOptions
    void setInputType(android.view.View,int) -> setInputType
    java.lang.Object newOnQueryTextListener(android.support.v4.widget.SearchViewCompat$OnQueryTextListenerCompat) -> newOnQueryTextListener
    void setOnQueryTextListener(java.lang.Object,java.lang.Object) -> setOnQueryTextListener
    java.lang.Object newOnCloseListener(android.support.v4.widget.SearchViewCompat$OnCloseListenerCompat) -> newOnCloseListener
    void setOnCloseListener(java.lang.Object,java.lang.Object) -> setOnCloseListener
    java.lang.CharSequence getQuery(android.view.View) -> getQuery
    void setQuery(android.view.View,java.lang.CharSequence,boolean) -> setQuery
    void setQueryHint(android.view.View,java.lang.CharSequence) -> setQueryHint
    void setIconified(android.view.View,boolean) -> setIconified
    boolean isIconified(android.view.View) -> isIconified
    void setSubmitButtonEnabled(android.view.View,boolean) -> setSubmitButtonEnabled
    boolean isSubmitButtonEnabled(android.view.View) -> isSubmitButtonEnabled
    void setQueryRefinementEnabled(android.view.View,boolean) -> setQueryRefinementEnabled
    boolean isQueryRefinementEnabled(android.view.View) -> isQueryRefinementEnabled
    void setMaxWidth(android.view.View,int) -> setMaxWidth
android.support.v4.widget.SearchViewCompat$SearchViewCompatStubImpl -> android.support.v4.widget.SearchViewCompat$SearchViewCompatStubImpl:
    android.view.View newSearchView(android.content.Context) -> newSearchView
    void setSearchableInfo(android.view.View,android.content.ComponentName) -> setSearchableInfo
    void setImeOptions(android.view.View,int) -> setImeOptions
    void setInputType(android.view.View,int) -> setInputType
    java.lang.Object newOnQueryTextListener(android.support.v4.widget.SearchViewCompat$OnQueryTextListenerCompat) -> newOnQueryTextListener
    void setOnQueryTextListener(java.lang.Object,java.lang.Object) -> setOnQueryTextListener
    java.lang.Object newOnCloseListener(android.support.v4.widget.SearchViewCompat$OnCloseListenerCompat) -> newOnCloseListener
    void setOnCloseListener(java.lang.Object,java.lang.Object) -> setOnCloseListener
    java.lang.CharSequence getQuery(android.view.View) -> getQuery
    void setQuery(android.view.View,java.lang.CharSequence,boolean) -> setQuery
    void setQueryHint(android.view.View,java.lang.CharSequence) -> setQueryHint
    void setIconified(android.view.View,boolean) -> setIconified
    boolean isIconified(android.view.View) -> isIconified
    void setSubmitButtonEnabled(android.view.View,boolean) -> setSubmitButtonEnabled
    boolean isSubmitButtonEnabled(android.view.View) -> isSubmitButtonEnabled
    void setQueryRefinementEnabled(android.view.View,boolean) -> setQueryRefinementEnabled
    boolean isQueryRefinementEnabled(android.view.View) -> isQueryRefinementEnabled
    void setMaxWidth(android.view.View,int) -> setMaxWidth
android.support.v4.widget.SearchViewCompatHoneycomb -> android.support.v4.widget.SearchViewCompatHoneycomb:
    android.view.View newSearchView(android.content.Context) -> newSearchView
    void setSearchableInfo(android.view.View,android.content.ComponentName) -> setSearchableInfo
    java.lang.Object newOnQueryTextListener(android.support.v4.widget.SearchViewCompatHoneycomb$OnQueryTextListenerCompatBridge) -> newOnQueryTextListener
    void setOnQueryTextListener(java.lang.Object,java.lang.Object) -> setOnQueryTextListener
    java.lang.Object newOnCloseListener(android.support.v4.widget.SearchViewCompatHoneycomb$OnCloseListenerCompatBridge) -> newOnCloseListener
    void setOnCloseListener(java.lang.Object,java.lang.Object) -> setOnCloseListener
    java.lang.CharSequence getQuery(android.view.View) -> getQuery
    void setQuery(android.view.View,java.lang.CharSequence,boolean) -> setQuery
    void setQueryHint(android.view.View,java.lang.CharSequence) -> setQueryHint
    void setIconified(android.view.View,boolean) -> setIconified
    boolean isIconified(android.view.View) -> isIconified
    void setSubmitButtonEnabled(android.view.View,boolean) -> setSubmitButtonEnabled
    boolean isSubmitButtonEnabled(android.view.View) -> isSubmitButtonEnabled
    void setQueryRefinementEnabled(android.view.View,boolean) -> setQueryRefinementEnabled
    boolean isQueryRefinementEnabled(android.view.View) -> isQueryRefinementEnabled
    void setMaxWidth(android.view.View,int) -> setMaxWidth
android.support.v4.widget.SearchViewCompatHoneycomb$1 -> android.support.v4.widget.SearchViewCompatHoneycomb$1:
    android.support.v4.widget.SearchViewCompatHoneycomb$OnQueryTextListenerCompatBridge val$listener -> val$listener
    boolean onQueryTextSubmit(java.lang.String) -> onQueryTextSubmit
    boolean onQueryTextChange(java.lang.String) -> onQueryTextChange
android.support.v4.widget.SearchViewCompatHoneycomb$2 -> android.support.v4.widget.SearchViewCompatHoneycomb$2:
    android.support.v4.widget.SearchViewCompatHoneycomb$OnCloseListenerCompatBridge val$listener -> val$listener
    boolean onClose() -> onClose
android.support.v4.widget.SearchViewCompatHoneycomb$OnCloseListenerCompatBridge -> android.support.v4.widget.SearchViewCompatHoneycomb$OnCloseListenerCompatBridge:
    boolean onClose() -> onClose
android.support.v4.widget.SearchViewCompatHoneycomb$OnQueryTextListenerCompatBridge -> android.support.v4.widget.SearchViewCompatHoneycomb$OnQueryTextListenerCompatBridge:
    boolean onQueryTextSubmit(java.lang.String) -> onQueryTextSubmit
    boolean onQueryTextChange(java.lang.String) -> onQueryTextChange
android.support.v4.widget.SearchViewCompatIcs -> android.support.v4.widget.SearchViewCompatIcs:
    android.view.View newSearchView(android.content.Context) -> newSearchView
    void setImeOptions(android.view.View,int) -> setImeOptions
    void setInputType(android.view.View,int) -> setInputType
android.support.v4.widget.SearchViewCompatIcs$MySearchView -> android.support.v4.widget.SearchViewCompatIcs$MySearchView:
    void onActionViewCollapsed() -> onActionViewCollapsed
android.support.v4.widget.SimpleCursorAdapter -> android.support.v4.widget.SimpleCursorAdapter:
    int[] mFrom -> mFrom
    int[] mTo -> mTo
    int mStringConversionColumn -> mStringConversionColumn
    android.support.v4.widget.SimpleCursorAdapter$CursorToStringConverter mCursorToStringConverter -> mCursorToStringConverter
    android.support.v4.widget.SimpleCursorAdapter$ViewBinder mViewBinder -> mViewBinder
    java.lang.String[] mOriginalFrom -> mOriginalFrom
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> bindView
    android.support.v4.widget.SimpleCursorAdapter$ViewBinder getViewBinder() -> getViewBinder
    void setViewBinder(android.support.v4.widget.SimpleCursorAdapter$ViewBinder) -> setViewBinder
    void setViewImage(android.widget.ImageView,java.lang.String) -> setViewImage
    void setViewText(android.widget.TextView,java.lang.String) -> setViewText
    int getStringConversionColumn() -> getStringConversionColumn
    void setStringConversionColumn(int) -> setStringConversionColumn
    android.support.v4.widget.SimpleCursorAdapter$CursorToStringConverter getCursorToStringConverter() -> getCursorToStringConverter
    void setCursorToStringConverter(android.support.v4.widget.SimpleCursorAdapter$CursorToStringConverter) -> setCursorToStringConverter
    java.lang.CharSequence convertToString(android.database.Cursor) -> convertToString
    void findColumns(java.lang.String[]) -> findColumns
    android.database.Cursor swapCursor(android.database.Cursor) -> swapCursor
    void changeCursorAndColumns(android.database.Cursor,java.lang.String[],int[]) -> changeCursorAndColumns
android.support.v4.widget.SimpleCursorAdapter$CursorToStringConverter -> android.support.v4.widget.SimpleCursorAdapter$CursorToStringConverter:
    java.lang.CharSequence convertToString(android.database.Cursor) -> convertToString
android.support.v4.widget.SimpleCursorAdapter$ViewBinder -> android.support.v4.widget.SimpleCursorAdapter$ViewBinder:
    boolean setViewValue(android.view.View,android.database.Cursor,int) -> setViewValue
android.support.v4.widget.SlidingPaneLayout -> android.support.v4.widget.SlidingPaneLayout:
    java.lang.String TAG -> TAG
    int DEFAULT_OVERHANG_SIZE -> DEFAULT_OVERHANG_SIZE
    int DEFAULT_FADE_COLOR -> DEFAULT_FADE_COLOR
    int mSliderFadeColor -> mSliderFadeColor
    int MIN_FLING_VELOCITY -> MIN_FLING_VELOCITY
    int mCoveredFadeColor -> mCoveredFadeColor
    android.graphics.drawable.Drawable mShadowDrawable -> mShadowDrawable
    int mOverhangSize -> mOverhangSize
    boolean mCanSlide -> mCanSlide
    android.view.View mSlideableView -> mSlideableView
    float mSlideOffset -> mSlideOffset
    float mParallaxOffset -> mParallaxOffset
    int mSlideRange -> mSlideRange
    boolean mIsUnableToDrag -> mIsUnableToDrag
    int mParallaxBy -> mParallaxBy
    float mInitialMotionX -> mInitialMotionX
    float mInitialMotionY -> mInitialMotionY
    android.support.v4.widget.SlidingPaneLayout$PanelSlideListener mPanelSlideListener -> mPanelSlideListener
    android.support.v4.widget.ViewDragHelper mDragHelper -> mDragHelper
    boolean mPreservedOpenState -> mPreservedOpenState
    boolean mFirstLayout -> mFirstLayout
    android.graphics.Rect mTmpRect -> mTmpRect
    java.util.ArrayList mPostedRunnables -> mPostedRunnables
    android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl IMPL -> IMPL
    void setParallaxDistance(int) -> setParallaxDistance
    int getParallaxDistance() -> getParallaxDistance
    void setSliderFadeColor(int) -> setSliderFadeColor
    int getSliderFadeColor() -> getSliderFadeColor
    void setCoveredFadeColor(int) -> setCoveredFadeColor
    int getCoveredFadeColor() -> getCoveredFadeColor
    void setPanelSlideListener(android.support.v4.widget.SlidingPaneLayout$PanelSlideListener) -> setPanelSlideListener
    void dispatchOnPanelSlide(android.view.View) -> dispatchOnPanelSlide
    void dispatchOnPanelOpened(android.view.View) -> dispatchOnPanelOpened
    void dispatchOnPanelClosed(android.view.View) -> dispatchOnPanelClosed
    void updateObscuredViewsVisibility(android.view.View) -> updateObscuredViewsVisibility
    void setAllChildrenVisible() -> setAllChildrenVisible
    boolean hasOpaqueBackground(android.view.View) -> hasOpaqueBackground
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean closePane(android.view.View,int) -> closePane
    boolean openPane(android.view.View,int) -> openPane
    void smoothSlideOpen() -> smoothSlideOpen
    boolean openPane() -> openPane
    void smoothSlideClosed() -> smoothSlideClosed
    boolean closePane() -> closePane
    boolean isOpen() -> isOpen
    boolean canSlide() -> canSlide
    boolean isSlideable() -> isSlideable
    void onPanelDragged(int) -> onPanelDragged
    void dimChildView(android.view.View,float,int) -> dimChildView
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    void invalidateChildRegion(android.view.View) -> invalidateChildRegion
    boolean smoothSlideTo(float,int) -> smoothSlideTo
    void computeScroll() -> computeScroll
    void setShadowDrawable(android.graphics.drawable.Drawable) -> setShadowDrawable
    void setShadowResource(int) -> setShadowResource
    void draw(android.graphics.Canvas) -> draw
    void parallaxOtherViews(float) -> parallaxOtherViews
    boolean canScroll(android.view.View,boolean,int,int,int) -> canScroll
    boolean isDimmed(android.view.View) -> isDimmed
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    boolean access$100(android.support.v4.widget.SlidingPaneLayout) -> access$100
    android.support.v4.widget.ViewDragHelper access$200(android.support.v4.widget.SlidingPaneLayout) -> access$200
    float access$300(android.support.v4.widget.SlidingPaneLayout) -> access$300
    android.view.View access$400(android.support.v4.widget.SlidingPaneLayout) -> access$400
    boolean access$502(android.support.v4.widget.SlidingPaneLayout,boolean) -> access$502
    void access$600(android.support.v4.widget.SlidingPaneLayout,int) -> access$600
    int access$700(android.support.v4.widget.SlidingPaneLayout) -> access$700
    void access$900(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> access$900
    java.util.ArrayList access$1000(android.support.v4.widget.SlidingPaneLayout) -> access$1000
android.support.v4.widget.SlidingPaneLayout$1 -> android.support.v4.widget.SlidingPaneLayout$1:
android.support.v4.widget.SlidingPaneLayout$AccessibilityDelegate -> android.support.v4.widget.SlidingPaneLayout$AccessibilityDelegate:
    android.graphics.Rect mTmpRect -> mTmpRect
    android.support.v4.widget.SlidingPaneLayout this$0 -> this$0
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> onInitializeAccessibilityNodeInfo
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    boolean filter(android.view.View) -> filter
    void copyNodeInfoNoChildren(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> copyNodeInfoNoChildren
android.support.v4.widget.SlidingPaneLayout$DisableLayerRunnable -> android.support.v4.widget.SlidingPaneLayout$DisableLayerRunnable:
    android.view.View mChildView -> mChildView
    android.support.v4.widget.SlidingPaneLayout this$0 -> this$0
    void run() -> run
android.support.v4.widget.SlidingPaneLayout$DragHelperCallback -> android.support.v4.widget.SlidingPaneLayout$DragHelperCallback:
    android.support.v4.widget.SlidingPaneLayout this$0 -> this$0
    boolean tryCaptureView(android.view.View,int) -> tryCaptureView
    void onViewDragStateChanged(int) -> onViewDragStateChanged
    void onViewCaptured(android.view.View,int) -> onViewCaptured
    void onViewPositionChanged(android.view.View,int,int,int,int) -> onViewPositionChanged
    void onViewReleased(android.view.View,float,float) -> onViewReleased
    int getViewHorizontalDragRange(android.view.View) -> getViewHorizontalDragRange
    int clampViewPositionHorizontal(android.view.View,int,int) -> clampViewPositionHorizontal
    void onEdgeDragStarted(int,int) -> onEdgeDragStarted
android.support.v4.widget.SlidingPaneLayout$LayoutParams -> android.support.v4.widget.SlidingPaneLayout$LayoutParams:
    int[] ATTRS -> ATTRS
    float weight -> weight
    boolean slideable -> slideable
    boolean dimWhenOffset -> dimWhenOffset
    android.graphics.Paint dimPaint -> dimPaint
android.support.v4.widget.SlidingPaneLayout$PanelSlideListener -> android.support.v4.widget.SlidingPaneLayout$PanelSlideListener:
    void onPanelSlide(android.view.View,float) -> onPanelSlide
    void onPanelOpened(android.view.View) -> onPanelOpened
    void onPanelClosed(android.view.View) -> onPanelClosed
android.support.v4.widget.SlidingPaneLayout$SavedState -> android.support.v4.widget.SlidingPaneLayout$SavedState:
    boolean isOpen -> isOpen
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.SlidingPaneLayout$SavedState$1 -> android.support.v4.widget.SlidingPaneLayout$SavedState$1:
    android.support.v4.widget.SlidingPaneLayout$SavedState createFromParcel(android.os.Parcel) -> createFromParcel
    android.support.v4.widget.SlidingPaneLayout$SavedState[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.SlidingPaneLayout$SimplePanelSlideListener -> android.support.v4.widget.SlidingPaneLayout$SimplePanelSlideListener:
    void onPanelSlide(android.view.View,float) -> onPanelSlide
    void onPanelOpened(android.view.View) -> onPanelOpened
    void onPanelClosed(android.view.View) -> onPanelClosed
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl -> android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> invalidateChildRegion
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplBase -> android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplBase:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> invalidateChildRegion
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJB -> android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJB:
    java.lang.reflect.Method mGetDisplayList -> mGetDisplayList
    java.lang.reflect.Field mRecreateDisplayList -> mRecreateDisplayList
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> invalidateChildRegion
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJBMR1 -> android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJBMR1:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> invalidateChildRegion
android.support.v4.widget.ViewDragHelper -> android.support.v4.widget.ViewDragHelper:
    java.lang.String TAG -> TAG
    int INVALID_POINTER -> INVALID_POINTER
    int STATE_IDLE -> STATE_IDLE
    int STATE_DRAGGING -> STATE_DRAGGING
    int STATE_SETTLING -> STATE_SETTLING
    int EDGE_LEFT -> EDGE_LEFT
    int EDGE_RIGHT -> EDGE_RIGHT
    int EDGE_TOP -> EDGE_TOP
    int EDGE_BOTTOM -> EDGE_BOTTOM
    int EDGE_ALL -> EDGE_ALL
    int DIRECTION_HORIZONTAL -> DIRECTION_HORIZONTAL
    int DIRECTION_VERTICAL -> DIRECTION_VERTICAL
    int DIRECTION_ALL -> DIRECTION_ALL
    int EDGE_SIZE -> EDGE_SIZE
    int BASE_SETTLE_DURATION -> BASE_SETTLE_DURATION
    int MAX_SETTLE_DURATION -> MAX_SETTLE_DURATION
    int mDragState -> mDragState
    int mTouchSlop -> mTouchSlop
    int mActivePointerId -> mActivePointerId
    float[] mInitialMotionX -> mInitialMotionX
    float[] mInitialMotionY -> mInitialMotionY
    float[] mLastMotionX -> mLastMotionX
    float[] mLastMotionY -> mLastMotionY
    int[] mInitialEdgesTouched -> mInitialEdgesTouched
    int[] mEdgeDragsInProgress -> mEdgeDragsInProgress
    int[] mEdgeDragsLocked -> mEdgeDragsLocked
    int mPointersDown -> mPointersDown
    android.view.VelocityTracker mVelocityTracker -> mVelocityTracker
    float mMaxVelocity -> mMaxVelocity
    float mMinVelocity -> mMinVelocity
    int mEdgeSize -> mEdgeSize
    int mTrackingEdges -> mTrackingEdges
    android.support.v4.widget.ScrollerCompat mScroller -> mScroller
    android.support.v4.widget.ViewDragHelper$Callback mCallback -> mCallback
    android.view.View mCapturedView -> mCapturedView
    boolean mReleaseInProgress -> mReleaseInProgress
    android.view.ViewGroup mParentView -> mParentView
    android.view.animation.Interpolator sInterpolator -> sInterpolator
    java.lang.Runnable mSetIdleRunnable -> mSetIdleRunnable
    android.support.v4.widget.ViewDragHelper create(android.view.ViewGroup,android.support.v4.widget.ViewDragHelper$Callback) -> create
    android.support.v4.widget.ViewDragHelper create(android.view.ViewGroup,float,android.support.v4.widget.ViewDragHelper$Callback) -> create
    void setMinVelocity(float) -> setMinVelocity
    float getMinVelocity() -> getMinVelocity
    int getViewDragState() -> getViewDragState
    void setEdgeTrackingEnabled(int) -> setEdgeTrackingEnabled
    int getEdgeSize() -> getEdgeSize
    void captureChildView(android.view.View,int) -> captureChildView
    android.view.View getCapturedView() -> getCapturedView
    int getActivePointerId() -> getActivePointerId
    int getTouchSlop() -> getTouchSlop
    void cancel() -> cancel
    void abort() -> abort
    boolean smoothSlideViewTo(android.view.View,int,int) -> smoothSlideViewTo
    boolean settleCapturedViewAt(int,int) -> settleCapturedViewAt
    boolean forceSettleCapturedViewAt(int,int,int,int) -> forceSettleCapturedViewAt
    int computeSettleDuration(android.view.View,int,int,int,int) -> computeSettleDuration
    int computeAxisDuration(int,int,int) -> computeAxisDuration
    int clampMag(int,int,int) -> clampMag
    float clampMag(float,float,float) -> clampMag
    float distanceInfluenceForSnapDuration(float) -> distanceInfluenceForSnapDuration
    void flingCapturedView(int,int,int,int) -> flingCapturedView
    boolean continueSettling(boolean) -> continueSettling
    void dispatchViewReleased(float,float) -> dispatchViewReleased
    void clearMotionHistory() -> clearMotionHistory
    void clearMotionHistory(int) -> clearMotionHistory
    void ensureMotionHistorySizeForId(int) -> ensureMotionHistorySizeForId
    void saveInitialMotion(float,float,int) -> saveInitialMotion
    void saveLastMotion(android.view.MotionEvent) -> saveLastMotion
    boolean isPointerDown(int) -> isPointerDown
    void setDragState(int) -> setDragState
    boolean tryCaptureViewForDrag(android.view.View,int) -> tryCaptureViewForDrag
    boolean canScroll(android.view.View,boolean,int,int,int,int) -> canScroll
    boolean shouldInterceptTouchEvent(android.view.MotionEvent) -> shouldInterceptTouchEvent
    void processTouchEvent(android.view.MotionEvent) -> processTouchEvent
    void reportNewEdgeDrags(float,float,int) -> reportNewEdgeDrags
    boolean checkNewEdgeDrag(float,float,int,int) -> checkNewEdgeDrag
    boolean checkTouchSlop(android.view.View,float,float) -> checkTouchSlop
    boolean checkTouchSlop(int) -> checkTouchSlop
    boolean checkTouchSlop(int,int) -> checkTouchSlop
    boolean isEdgeTouched(int) -> isEdgeTouched
    boolean isEdgeTouched(int,int) -> isEdgeTouched
    void releaseViewForPointerUp() -> releaseViewForPointerUp
    void dragTo(int,int,int,int) -> dragTo
    boolean isCapturedViewUnder(int,int) -> isCapturedViewUnder
    boolean isViewUnder(android.view.View,int,int) -> isViewUnder
    android.view.View findTopChildUnder(int,int) -> findTopChildUnder
    int getEdgesTouched(int,int) -> getEdgesTouched
android.support.v4.widget.ViewDragHelper$1 -> android.support.v4.widget.ViewDragHelper$1:
    float getInterpolation(float) -> getInterpolation
android.support.v4.widget.ViewDragHelper$2 -> android.support.v4.widget.ViewDragHelper$2:
    android.support.v4.widget.ViewDragHelper this$0 -> this$0
    void run() -> run
android.support.v4.widget.ViewDragHelper$Callback -> android.support.v4.widget.ViewDragHelper$Callback:
    void onViewDragStateChanged(int) -> onViewDragStateChanged
    void onViewPositionChanged(android.view.View,int,int,int,int) -> onViewPositionChanged
    void onViewCaptured(android.view.View,int) -> onViewCaptured
    void onViewReleased(android.view.View,float,float) -> onViewReleased
    void onEdgeTouched(int,int) -> onEdgeTouched
    boolean onEdgeLock(int) -> onEdgeLock
    void onEdgeDragStarted(int,int) -> onEdgeDragStarted
    int getOrderedChildIndex(int) -> getOrderedChildIndex
    int getViewHorizontalDragRange(android.view.View) -> getViewHorizontalDragRange
    int getViewVerticalDragRange(android.view.View) -> getViewVerticalDragRange
    boolean tryCaptureView(android.view.View,int) -> tryCaptureView
    int clampViewPositionHorizontal(android.view.View,int,int) -> clampViewPositionHorizontal
    int clampViewPositionVertical(android.view.View,int,int) -> clampViewPositionVertical
ch.imvs.sdes4j.CryptoAttribute -> ch.imvs.sdes4j.CryptoAttribute:
    int tag -> tag
    ch.imvs.sdes4j.CryptoSuite cryptoSuite -> cryptoSuite
    ch.imvs.sdes4j.KeyParam[] keyParams -> keyParams
    ch.imvs.sdes4j.SessionParam[] sessionParams -> sessionParams
    ch.imvs.sdes4j.CryptoAttribute create(java.lang.String,ch.imvs.sdes4j.SDesFactory) -> create
    ch.imvs.sdes4j.CryptoAttribute create(java.lang.String,java.lang.String,java.lang.String,java.lang.String,ch.imvs.sdes4j.SDesFactory) -> create
    int getTag() -> getTag
    void setTag(java.lang.String) -> setTag
    ch.imvs.sdes4j.CryptoSuite getCryptoSuite() -> getCryptoSuite
    void setCryptoSuite(java.lang.String,ch.imvs.sdes4j.SDesFactory) -> setCryptoSuite
    ch.imvs.sdes4j.KeyParam[] getKeyParams() -> getKeyParams
    void setKeyParams(java.lang.String,ch.imvs.sdes4j.SDesFactory) -> setKeyParams
    ch.imvs.sdes4j.SessionParam[] getSessionParams() -> getSessionParams
    void setSessionParams(java.util.List,ch.imvs.sdes4j.SDesFactory) -> setSessionParams
    java.lang.String encode() -> encode
    java.lang.String getKeyParamsString() -> getKeyParamsString
    java.lang.String getSessionParamsString() -> getSessionParamsString
ch.imvs.sdes4j.CryptoSuite -> ch.imvs.sdes4j.CryptoSuite:
    java.lang.String encode() -> encode
ch.imvs.sdes4j.KeyParam -> ch.imvs.sdes4j.KeyParam:
    java.lang.String getKeyMethod() -> getKeyMethod
    java.lang.String encode() -> encode
ch.imvs.sdes4j.SDesFactory -> ch.imvs.sdes4j.SDesFactory:
    ch.imvs.sdes4j.CryptoSuite createCryptoSuite(java.lang.String) -> createCryptoSuite
    ch.imvs.sdes4j.KeyParam createKeyParam(java.lang.String) -> createKeyParam
    ch.imvs.sdes4j.KeyParam[] createKeyParamArray(int) -> createKeyParamArray
    ch.imvs.sdes4j.SessionParam createSessionParam(java.lang.String) -> createSessionParam
    ch.imvs.sdes4j.SessionParam[] createSessionParamArray(int) -> createSessionParamArray
    ch.imvs.sdes4j.CryptoAttribute createCryptoAttribute() -> createCryptoAttribute
    void setRandomGenerator(java.util.Random) -> setRandomGenerator
ch.imvs.sdes4j.SessionParam -> ch.imvs.sdes4j.SessionParam:
    java.lang.String encode() -> encode
ch.imvs.sdes4j.srtp.FecKeySessionParam -> ch.imvs.sdes4j.srtp.FecKeySessionParam:
    ch.imvs.sdes4j.srtp.SrtpKeyParam[] keyParams -> keyParams
    ch.imvs.sdes4j.srtp.SrtpKeyParam createSrtpKeyParam(java.lang.String) -> createSrtpKeyParam
    ch.imvs.sdes4j.srtp.SrtpKeyParam[] getKeyParams() -> getKeyParams
    java.lang.String encode() -> encode
ch.imvs.sdes4j.srtp.FecOrderSessionParam -> ch.imvs.sdes4j.srtp.FecOrderSessionParam:
    int FEC_SRTP -> FEC_SRTP
    int SRTP_FEC -> SRTP_FEC
    int mode -> mode
    int getMode() -> getMode
    java.lang.String encode() -> encode
ch.imvs.sdes4j.srtp.KdrSessionParam -> ch.imvs.sdes4j.srtp.KdrSessionParam:
    int kdr -> kdr
    int getKeyDerivationRate() -> getKeyDerivationRate
    int getKeyDerivationRateExpanded() -> getKeyDerivationRateExpanded
    java.lang.String encode() -> encode
ch.imvs.sdes4j.srtp.NoAuthSessionParam -> ch.imvs.sdes4j.srtp.NoAuthSessionParam:
    java.lang.String UNAUTHENTICATED_SRTP -> UNAUTHENTICATED_SRTP
    java.lang.String encode() -> encode
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
ch.imvs.sdes4j.srtp.PlainSrtcpSessionParam -> ch.imvs.sdes4j.srtp.PlainSrtcpSessionParam:
    java.lang.String UNENCRYPTED_SRTCP -> UNENCRYPTED_SRTCP
    java.lang.String encode() -> encode
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
ch.imvs.sdes4j.srtp.PlainSrtpSessionParam -> ch.imvs.sdes4j.srtp.PlainSrtpSessionParam:
    java.lang.String UNENCRYPTED_SRTP -> UNENCRYPTED_SRTP
    java.lang.String encode() -> encode
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
ch.imvs.sdes4j.srtp.SrtpCryptoAttribute -> ch.imvs.sdes4j.srtp.SrtpCryptoAttribute:
    ch.imvs.sdes4j.srtp.SrtpCryptoAttribute create(java.lang.String) -> create
    ch.imvs.sdes4j.srtp.SrtpCryptoAttribute create(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> create
    ch.imvs.sdes4j.srtp.SrtpCryptoSuite getCryptoSuite() -> getCryptoSuite
    ch.imvs.sdes4j.srtp.SrtpKeyParam[] getKeyParams() -> getKeyParams
    ch.imvs.sdes4j.srtp.SrtpSessionParam[] getSessionParams() -> getSessionParams
    ch.imvs.sdes4j.SessionParam[] getSessionParams() -> getSessionParams
    ch.imvs.sdes4j.KeyParam[] getKeyParams() -> getKeyParams
    ch.imvs.sdes4j.CryptoSuite getCryptoSuite() -> getCryptoSuite
ch.imvs.sdes4j.srtp.SrtpCryptoSuite -> ch.imvs.sdes4j.srtp.SrtpCryptoSuite:
    java.lang.String AES_256_CM_HMAC_SHA1_32 -> AES_256_CM_HMAC_SHA1_32
    java.lang.String AES_256_CM_HMAC_SHA1_80 -> AES_256_CM_HMAC_SHA1_80
    java.lang.String AES_192_CM_HMAC_SHA1_32 -> AES_192_CM_HMAC_SHA1_32
    java.lang.String AES_192_CM_HMAC_SHA1_80 -> AES_192_CM_HMAC_SHA1_80
    java.lang.String SEED_128_GCM_96 -> SEED_128_GCM_96
    java.lang.String SEED_128_CCM_80 -> SEED_128_CCM_80
    java.lang.String SEED_CTR_128_HMAC_SHA1_80 -> SEED_CTR_128_HMAC_SHA1_80
    java.lang.String F8_128_HMAC_SHA1_80 -> F8_128_HMAC_SHA1_80
    java.lang.String AES_CM_128_HMAC_SHA1_32 -> AES_CM_128_HMAC_SHA1_32
    java.lang.String AES_CM_128_HMAC_SHA1_80 -> AES_CM_128_HMAC_SHA1_80
    int ENCRYPTION_AES128_CM -> ENCRYPTION_AES128_CM
    int ENCRYPTION_AES128_F8 -> ENCRYPTION_AES128_F8
    int ENCRYPTION_SEED128_CTR -> ENCRYPTION_SEED128_CTR
    int ENCRYPTION_SEED128_CCM_80 -> ENCRYPTION_SEED128_CCM_80
    int ENCRYPTION_SEED128_GCM_96 -> ENCRYPTION_SEED128_GCM_96
    int ENCRYPTION_AES192_CM -> ENCRYPTION_AES192_CM
    int ENCRYPTION_AES256_CM -> ENCRYPTION_AES256_CM
    int HASH_HMAC_SHA1 -> HASH_HMAC_SHA1
    int HASH_SEED128_CCM_80 -> HASH_SEED128_CCM_80
    int HASH_SEED128_GCM_96 -> HASH_SEED128_GCM_96
    java.lang.String suite -> suite
    int encryptionAlgorithm -> encryptionAlgorithm
    int hashAlgoritm -> hashAlgoritm
    int encKeyLength -> encKeyLength
    int saltKeyLength -> saltKeyLength
    int srtpAuthTagLength -> srtpAuthTagLength
    int srtcpAuthTagLength -> srtcpAuthTagLength
    int srtpAuthKeyLength -> srtpAuthKeyLength
    int srtcpAuthKeyLength -> srtcpAuthKeyLength
    long srtpLifetime -> srtpLifetime
    long srtcpLifetime -> srtcpLifetime
    int getEncryptionAlgorithm() -> getEncryptionAlgorithm
    int getHashAlgorithm() -> getHashAlgorithm
    int getEncKeyLength() -> getEncKeyLength
    int getSaltKeyLength() -> getSaltKeyLength
    int getSrtpAuthTagLength() -> getSrtpAuthTagLength
    int getSrtcpAuthTagLength() -> getSrtcpAuthTagLength
    int getSrtpAuthKeyLength() -> getSrtpAuthKeyLength
    int getSrtcpAuthKeyLength() -> getSrtcpAuthKeyLength
    long getSrtpLifetime() -> getSrtpLifetime
    long getSrtcpLifetime() -> getSrtcpLifetime
    java.lang.String encode() -> encode
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
ch.imvs.sdes4j.srtp.SrtpKeyParam -> ch.imvs.sdes4j.srtp.SrtpKeyParam:
    java.lang.String KEYMETHOD_INLINE -> KEYMETHOD_INLINE
    java.lang.String keyMethod -> keyMethod
    byte[] key -> key
    int lifetime -> lifetime
    int mki -> mki
    int mkiLength -> mkiLength
    java.lang.String getKeyMethod() -> getKeyMethod
    byte[] getKey() -> getKey
    int getLifetime() -> getLifetime
    int getMki() -> getMki
    int getMkiLength() -> getMkiLength
    java.lang.String encode() -> encode
ch.imvs.sdes4j.srtp.SrtpSDesFactory -> ch.imvs.sdes4j.srtp.SrtpSDesFactory:
    java.util.Random r -> r
    ch.imvs.sdes4j.srtp.SrtpCryptoAttribute createCryptoAttribute(int,java.lang.String) -> createCryptoAttribute
    ch.imvs.sdes4j.srtp.SrtpCryptoAttribute createCryptoAttribute(int,java.lang.String,ch.imvs.sdes4j.srtp.SrtpSessionParam[]) -> createCryptoAttribute
    java.util.Random getRandom() -> getRandom
    void setRandomGenerator(java.util.Random) -> setRandomGenerator
    ch.imvs.sdes4j.srtp.SrtpCryptoAttribute createCryptoAttribute() -> createCryptoAttribute
    ch.imvs.sdes4j.srtp.SrtpCryptoSuite createCryptoSuite(java.lang.String) -> createCryptoSuite
    ch.imvs.sdes4j.srtp.SrtpKeyParam createKeyParam(java.lang.String) -> createKeyParam
    ch.imvs.sdes4j.srtp.SrtpKeyParam[] createKeyParamArray(int) -> createKeyParamArray
    ch.imvs.sdes4j.srtp.SrtpSessionParam createSessionParam(java.lang.String) -> createSessionParam
    ch.imvs.sdes4j.srtp.SrtpSessionParam[] createSessionParamArray(int) -> createSessionParamArray
    ch.imvs.sdes4j.CryptoAttribute createCryptoAttribute() -> createCryptoAttribute
    ch.imvs.sdes4j.SessionParam[] createSessionParamArray(int) -> createSessionParamArray
    ch.imvs.sdes4j.SessionParam createSessionParam(java.lang.String) -> createSessionParam
    ch.imvs.sdes4j.KeyParam[] createKeyParamArray(int) -> createKeyParamArray
    ch.imvs.sdes4j.KeyParam createKeyParam(java.lang.String) -> createKeyParam
    ch.imvs.sdes4j.CryptoSuite createCryptoSuite(java.lang.String) -> createCryptoSuite
ch.imvs.sdes4j.srtp.SrtpSessionParam -> ch.imvs.sdes4j.srtp.SrtpSessionParam:
    ch.imvs.sdes4j.srtp.SrtpSessionParam create(java.lang.String) -> create
ch.imvs.sdes4j.srtp.WshSessionParam -> ch.imvs.sdes4j.srtp.WshSessionParam:
    int wsh -> wsh
    int getWindowSizeHint() -> getWindowSizeHint
    java.lang.String encode() -> encode
com.baidu.location.BDLocation -> com.baidu.location.BDLocation:
    int TypeNone -> TypeNone
    int TypeGpsLocation -> TypeGpsLocation
    int TypeCriteriaException -> TypeCriteriaException
    int TypeNetWorkException -> TypeNetWorkException
    int TypeOffLineLocation -> TypeOffLineLocation
    int TypeOffLineLocationFail -> TypeOffLineLocationFail
    int TypeOffLineLocationNetworkFail -> TypeOffLineLocationNetworkFail
    int TypeNetWorkLocation -> TypeNetWorkLocation
    int TypeCacheLocation -> TypeCacheLocation
    int TypeServerError -> TypeServerError
    int if -> if
    java.lang.String d -> d
    double else -> else
    double for -> for
    boolean c -> c
    double f -> f
    boolean int -> int
    float new -> new
    boolean try -> try
    float long -> long
    boolean b -> b
    int do -> do
    float char -> char
    java.lang.String goto -> goto
    java.lang.String byte -> byte
    boolean void -> void
    boolean case -> case
    java.lang.String a -> a
    java.lang.String mServerString -> mServerString
    boolean e -> e
    com.baidu.location.BDLocation$a mAddr -> mAddr
    java.lang.String toJsonString() -> toJsonString
    void a(java.lang.Boolean) -> a
    boolean isCellChangeFlag() -> isCellChangeFlag
    java.lang.String getTime() -> getTime
    void setTime(java.lang.String) -> setTime
    double getLatitude() -> getLatitude
    void setLatitude(double) -> setLatitude
    double getLongitude() -> getLongitude
    void setLongitude(double) -> setLongitude
    double getAltitude() -> getAltitude
    void setAltitude(double) -> setAltitude
    float getSpeed() -> getSpeed
    void setSpeed(float) -> setSpeed
    float getRadius() -> getRadius
    void setRadius(float) -> setRadius
    java.lang.String getCoorType() -> getCoorType
    void setCoorType(java.lang.String) -> setCoorType
    void setAddrStr(java.lang.String) -> setAddrStr
    boolean hasAltitude() -> hasAltitude
    boolean hasSpeed() -> hasSpeed
    boolean hasRadius() -> hasRadius
    com.baidu.location.BDLocation toNewLocation(java.lang.String) -> toNewLocation
    void setLocType(int) -> setLocType
    int getLocType() -> getLocType
    void setSatelliteNumber(int) -> setSatelliteNumber
    int getSatelliteNumber() -> getSatelliteNumber
    void setDerect(float) -> setDerect
    float getDerect() -> getDerect
    boolean hasSateNumber() -> hasSateNumber
    boolean hasPoi() -> hasPoi
    java.lang.String getPoi() -> getPoi
    boolean hasAddr() -> hasAddr
    java.lang.String getAddrStr() -> getAddrStr
    java.lang.String getProvince() -> getProvince
    java.lang.String getCity() -> getCity
    java.lang.String getCityCode() -> getCityCode
    java.lang.String getDistrict() -> getDistrict
    java.lang.String getStreet() -> getStreet
    java.lang.String getStreetNumber() -> getStreetNumber
com.baidu.location.BDLocation$a -> com.baidu.location.BDLocation$a:
    java.lang.String if -> if
    java.lang.String new -> new
    java.lang.String int -> int
    java.lang.String byte -> byte
    java.lang.String do -> do
    java.lang.String for -> for
    java.lang.String try -> try
    com.baidu.location.BDLocation a -> a
com.baidu.location.BDLocationListener -> com.baidu.location.BDLocationListener:
    void onReceiveLocation(com.baidu.location.BDLocation) -> onReceiveLocation
    void onReceivePoi(com.baidu.location.BDLocation) -> onReceivePoi
com.baidu.location.BDNotifyListener -> com.baidu.location.BDNotifyListener:
    double mLatitude -> mLatitude
    double mLongitude -> mLongitude
    float mRadius -> mRadius
    float differDistance -> differDistance
    java.lang.String mCoorType -> mCoorType
    double mLatitudeC -> mLatitudeC
    double mLongitudeC -> mLongitudeC
    int Notified -> Notified
    boolean isAdded -> isAdded
    com.baidu.location.i mNotifyCache -> mNotifyCache
    void SetNotifyLocation(double,double,float,java.lang.String) -> SetNotifyLocation
    void onNotify(com.baidu.location.BDLocation,float) -> onNotify
com.baidu.location.Jni -> com.baidu.location.Jni:
    int case -> case
    int try -> try
    int byte -> byte
    int for -> for
    int int -> int
    int if -> if
    int a -> a
    int do -> do
    boolean new -> new
    java.lang.String a(byte[],int) -> a
    java.lang.String b(double,double,int,int) -> b
    java.lang.String if(java.lang.String) -> if
    double[] if(double,double,java.lang.String) -> if
com.baidu.location.LocationClient -> com.baidu.location.LocationClient:
    java.lang.String for -> for
    int try -> try
    int p -> p
    int void -> void
    int B -> B
    int m -> m
    int o -> o
    int h -> h
    int b -> b
    int f -> f
    int if -> if
    int y -> y
    int n -> n
    int goto -> goto
    int s -> s
    java.lang.String e -> e
    long r -> r
    long char -> char
    java.lang.String A -> A
    com.baidu.location.LocationClientOption l -> l
    boolean q -> q
    android.content.Context j -> j
    android.os.Messenger k -> k
    com.baidu.location.LocationClient$a do -> do
    android.os.Messenger i -> i
    java.util.ArrayList C -> C
    com.baidu.location.BDLocation x -> x
    boolean d -> d
    boolean v -> v
    boolean g -> g
    com.baidu.location.LocationClient$b byte -> byte
    boolean a -> a
    boolean int -> int
    java.lang.Object new -> new
    com.baidu.location.i else -> else
    boolean w -> w
    com.baidu.location.BDLocationListener c -> c
    java.lang.String z -> z
    java.lang.String u -> u
    java.lang.Boolean long -> long
    java.lang.Boolean case -> case
    android.content.ServiceConnection t -> t
    com.baidu.location.LocationClientOption getLocOption() -> getLocOption
    void setLocOption(com.baidu.location.LocationClientOption) -> setLocOption
    boolean updateLocation(android.location.Location) -> updateLocation
    void requestNotifyLocation() -> requestNotifyLocation
    int requestOfflineLocation() -> requestOfflineLocation
    void try() -> try
    int requestLocation() -> requestLocation
    int requestPoi() -> requestPoi
    boolean isStarted() -> isStarted
    com.baidu.location.BDLocation getLastKnownLocation() -> getLastKnownLocation
    java.lang.String getVersion() -> getVersion
    void start() -> start
    void for() -> for
    void stop() -> stop
    void int() -> int
    void registerNotify(com.baidu.location.BDNotifyListener) -> registerNotify
    void a(android.os.Message) -> a
    void removeNotifyEvent(com.baidu.location.BDNotifyListener) -> removeNotifyEvent
    void int(android.os.Message) -> int
    void do(android.os.Message) -> do
    android.os.Bundle if() -> if
    android.os.Bundle a() -> a
    void registerNotifyLocationListener(com.baidu.location.BDLocationListener) -> registerNotifyLocationListener
    void try(android.os.Message) -> try
    void registerLocationListener(com.baidu.location.BDLocationListener) -> registerLocationListener
    void new(android.os.Message) -> new
    void unRegisterLocationListener(com.baidu.location.BDLocationListener) -> unRegisterLocationListener
    void if(android.os.Message) -> if
    void new() -> new
    void byte() -> byte
    void do() -> do
    void a(android.os.Message,int) -> a
    void for(android.os.Message) -> for
    void a(int) -> a
    void setForBaiduMap(boolean) -> setForBaiduMap
    android.os.Messenger a(com.baidu.location.LocationClient,android.os.Messenger) -> a
    android.os.Messenger char(com.baidu.location.LocationClient) -> char
    boolean a(com.baidu.location.LocationClient,boolean) -> a
    android.os.Messenger int(com.baidu.location.LocationClient) -> int
    android.os.Bundle long(com.baidu.location.LocationClient) -> long
    boolean do(com.baidu.location.LocationClient,boolean) -> do
    com.baidu.location.LocationClientOption byte(com.baidu.location.LocationClient) -> byte
    com.baidu.location.LocationClient$a try(com.baidu.location.LocationClient) -> try
    java.lang.Object do(com.baidu.location.LocationClient) -> do
    boolean for(com.baidu.location.LocationClient,boolean) -> for
    java.util.ArrayList else(com.baidu.location.LocationClient) -> else
    void do(com.baidu.location.LocationClient,android.os.Message) -> do
    void if(com.baidu.location.LocationClient,android.os.Message) -> if
    void a(com.baidu.location.LocationClient,android.os.Message) -> a
    void try(com.baidu.location.LocationClient,android.os.Message) -> try
    void new(com.baidu.location.LocationClient,android.os.Message) -> new
    void for(com.baidu.location.LocationClient,android.os.Message) -> for
    void if(com.baidu.location.LocationClient) -> if
    void new(com.baidu.location.LocationClient) -> new
    void case(com.baidu.location.LocationClient) -> case
    void a(com.baidu.location.LocationClient) -> a
    void for(com.baidu.location.LocationClient) -> for
    void goto(com.baidu.location.LocationClient) -> goto
    boolean if(com.baidu.location.LocationClient,boolean) -> if
    void a(com.baidu.location.LocationClient,android.os.Message,int) -> a
    void int(com.baidu.location.LocationClient,android.os.Message) -> int
com.baidu.location.LocationClient$1 -> com.baidu.location.LocationClient$1:
    com.baidu.location.LocationClient a -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.baidu.location.LocationClient$a -> com.baidu.location.LocationClient$a:
    com.baidu.location.LocationClient a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.baidu.location.LocationClient$b -> com.baidu.location.LocationClient$b:
    com.baidu.location.LocationClient a -> a
    void run() -> run
com.baidu.location.LocationClientOption -> com.baidu.location.LocationClientOption:
    int MIN_SCAN_SPAN -> MIN_SCAN_SPAN
    int GpsFirst -> GpsFirst
    int NetWorkFirst -> NetWorkFirst
    java.lang.String try -> try
    java.lang.String char -> char
    boolean case -> case
    int int -> int
    int long -> long
    java.lang.String new -> new
    int goto -> goto
    boolean void -> void
    boolean for -> for
    boolean else -> else
    boolean if -> if
    float do -> do
    int a -> a
    java.lang.String byte -> byte
    boolean equals(com.baidu.location.LocationClientOption) -> equals
    java.lang.String getCoorType() -> getCoorType
    void setCoorType(java.lang.String) -> setCoorType
    java.lang.String getAddrType() -> getAddrType
    void setAddrType(java.lang.String) -> setAddrType
    boolean isOpenGps() -> isOpenGps
    void setOpenGps(boolean) -> setOpenGps
    boolean isLocationNotify() -> isLocationNotify
    void setLocationNotify(boolean) -> setLocationNotify
    int getScanSpan() -> getScanSpan
    void setScanSpan(int) -> setScanSpan
    int getTimeOut() -> getTimeOut
    void setTimeOut(int) -> setTimeOut
    java.lang.String getProdName() -> getProdName
    void setProdName(java.lang.String) -> setProdName
    int getPriority() -> getPriority
    void setPriority(int) -> setPriority
    java.lang.String getServiceName() -> getServiceName
    void setServiceName(java.lang.String) -> setServiceName
    void setPoiDistance(float) -> setPoiDistance
    float getPoiDistance() -> getPoiDistance
    void setPoiNumber(int) -> setPoiNumber
    int getPoiNumber() -> getPoiNumber
    void setPoiExtraInfo(boolean) -> setPoiExtraInfo
    boolean getPoiExtranInfo() -> getPoiExtranInfo
    void disableCache(boolean) -> disableCache
    boolean isDisableCache() -> isDisableCache
com.baidu.location.a -> com.baidu.location.a:
    java.lang.String if -> if
    java.util.ArrayList do -> do
    android.os.Handler int -> int
    boolean for -> for
    boolean a -> a
    boolean for() -> for
    void int(android.os.Message) -> int
    void if(android.os.Message) -> if
    boolean for(android.os.Message) -> for
    java.lang.String a(android.os.Message) -> a
    void a(java.lang.String,int) -> a
    void a(java.lang.String) -> a
    void if(java.lang.String) -> if
    void a(java.lang.String,android.os.Message) -> a
    void if() -> if
    java.lang.String byte() -> byte
    int do(android.os.Message) -> do
    com.baidu.location.a$a a(android.os.Messenger) -> a
    void a(com.baidu.location.a$a) -> a
    void do() -> do
    void int() -> int
    void a() -> a
    void new() -> new
    java.lang.String try() -> try
com.baidu.location.a$a -> com.baidu.location.a$a:
    java.lang.String int -> int
    android.os.Messenger for -> for
    com.baidu.location.LocationClientOption do -> do
    int if -> if
    com.baidu.location.a a -> a
    void if(java.lang.String) -> if
    void a(java.lang.String,int) -> a
    void a(java.lang.String) -> a
    void a() -> a
    void if() -> if
    void a(int) -> a
    void a(int,java.lang.String,java.lang.String) -> a
    void a(com.baidu.location.a$a,int) -> a
com.baidu.location.b -> com.baidu.location.b:
    java.lang.String if -> if
    int s -> s
    long q -> q
    int z -> z
    int p -> p
    int goto -> goto
    double else -> else
    android.content.Context f -> f
    android.location.LocationManager do -> do
    android.location.Location F -> F
    com.baidu.location.b$b x -> x
    android.location.GpsStatus a -> a
    com.baidu.location.b$a new -> new
    int k -> k
    long d -> d
    long long -> long
    boolean int -> int
    android.os.Handler H -> H
    boolean t -> t
    java.lang.String D -> D
    boolean C -> C
    long E -> E
    int K -> K
    boolean w -> w
    boolean e -> e
    java.util.List u -> u
    java.lang.String g -> g
    java.lang.String try -> try
    java.lang.String n -> n
    java.lang.String r -> r
    com.baidu.location.b$d for -> for
    java.lang.String N -> N
    java.io.File A -> A
    int l -> l
    int h -> h
    int B -> B
    int v -> v
    int M -> M
    int i -> i
    int G -> G
    int void -> void
    java.lang.StringBuffer y -> y
    boolean char -> char
    int case -> case
    int c -> c
    long byte -> byte
    long J -> J
    long L -> L
    double o -> o
    double m -> m
    int j -> j
    int I -> I
    int b -> b
    void k() -> k
    void l() -> l
    java.lang.String char() -> char
    java.lang.String for(android.location.Location) -> for
    java.lang.String int() -> int
    android.location.Location try() -> try
    boolean case() -> case
    boolean new() -> new
    boolean a(android.location.Location,android.location.Location,boolean) -> a
    void a(android.location.Location) -> a
    void a(double,double,float) -> a
    void a(boolean) -> a
    java.lang.String do(android.location.Location) -> do
    java.lang.String if(android.location.Location) -> if
    boolean if(int,int,int) -> if
    boolean h() -> h
    void f() -> f
    java.lang.String j() -> j
    void goto() -> goto
    void a(com.baidu.location.b,android.location.Location) -> a
    boolean a(com.baidu.location.b,boolean) -> a
    boolean try(com.baidu.location.b) -> try
    void if(com.baidu.location.b,boolean) -> if
    long if(com.baidu.location.b,long) -> if
    android.location.LocationManager new(com.baidu.location.b) -> new
    android.location.GpsStatus do(com.baidu.location.b) -> do
    android.location.GpsStatus a(com.baidu.location.b,android.location.GpsStatus) -> a
    int void() -> void
    long do(com.baidu.location.b,long) -> do
    int a(int) -> a
    long a(com.baidu.location.b) -> a
    boolean int(com.baidu.location.b) -> int
    java.util.List case(com.baidu.location.b) -> case
    java.lang.String if(com.baidu.location.b) -> if
    java.lang.String for(com.baidu.location.b) -> for
    java.lang.String byte(com.baidu.location.b) -> byte
    java.lang.String a(java.lang.String) -> a
    java.lang.String if(com.baidu.location.b,java.lang.String) -> if
    java.lang.String do(com.baidu.location.b,java.lang.String) -> do
    java.lang.String a(com.baidu.location.b,java.lang.String) -> a
    boolean do(com.baidu.location.b,boolean) -> do
    long a(com.baidu.location.b,long) -> a
    boolean else() -> else
    int if(int) -> if
    java.lang.StringBuffer a(java.lang.StringBuffer) -> a
    java.lang.StringBuffer c() -> c
    int do(int) -> do
    long a(long) -> a
    double if(double) -> if
    double a(double) -> a
    long if(long) -> if
    long do(long) -> do
    boolean if(boolean) -> if
    double d() -> d
    double a() -> a
    long g() -> g
    int i() -> i
    int for(int) -> for
    int new(int) -> new
    long o() -> o
    int int(int) -> int
    long b() -> b
    int if() -> if
    int e() -> e
    int do() -> do
    int byte() -> byte
    int for() -> for
    java.io.File m() -> m
    void n() -> n
    boolean long() -> long
    boolean a(int,int,int) -> a
com.baidu.location.b$1 -> com.baidu.location.b$1:
com.baidu.location.b$a -> com.baidu.location.b$a:
    com.baidu.location.b a -> a
    void onGpsStatusChanged(int) -> onGpsStatusChanged
    void onNmeaReceived(long,java.lang.String) -> onNmeaReceived
com.baidu.location.b$b -> com.baidu.location.b$b:
    com.baidu.location.b a -> a
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
com.baidu.location.b$c -> com.baidu.location.b$c:
    boolean goto -> goto
    java.lang.String char -> char
    boolean h -> h
    java.lang.String int -> int
    int long -> long
    int d -> d
    java.lang.String f -> f
    boolean new -> new
    java.lang.String b -> b
    char case -> case
    java.lang.String g -> g
    boolean void -> void
    int if -> if
    double byte -> byte
    double for -> for
    java.util.List do -> do
    boolean try -> try
    java.util.List else -> else
    int e -> e
    int a -> a
    com.baidu.location.b c -> c
    void try() -> try
    boolean a(java.lang.String) -> a
    int case() -> case
    int a(boolean,boolean,boolean,boolean,boolean) -> a
    double[] a(java.util.List) -> a
    double[] if(double,double) -> if
    double[] a(double,double) -> a
    boolean if() -> if
    boolean for() -> for
    boolean long() -> long
    boolean goto() -> goto
    boolean new() -> new
    int else() -> else
    java.lang.String do() -> do
    double byte() -> byte
    double a() -> a
    java.lang.String void() -> void
    java.lang.String char() -> char
    java.util.List int() -> int
    boolean if(com.baidu.location.b$c) -> if
    int do(com.baidu.location.b$c) -> do
    double for(com.baidu.location.b$c) -> for
    double a(com.baidu.location.b$c) -> a
com.baidu.location.b$c$a -> com.baidu.location.b$c$a:
    int int -> int
    int a -> a
    int if -> if
    int do -> do
    com.baidu.location.b$c for -> for
    int a() -> a
    int if() -> if
    int do() -> do
com.baidu.location.b$d -> com.baidu.location.b$d:
    java.lang.String if -> if
    boolean a -> a
    boolean a(android.location.Location) -> a
    boolean a(android.location.Location,int,int) -> a
    boolean if() -> if
    boolean a(java.lang.String) -> a
    java.lang.String a(int) -> a
    void a() -> a
    void a(com.baidu.location.b$d) -> a
    boolean a(com.baidu.location.b$d,android.location.Location) -> a
com.baidu.location.c -> com.baidu.location.c:
    java.lang.String else -> else
    android.content.Context if -> if
    android.telephony.TelephonyManager try -> try
    com.baidu.location.c$a a -> a
    java.util.List new -> new
    java.lang.String byte -> byte
    java.lang.String goto -> goto
    android.os.Handler do -> do
    com.baidu.location.c$b int -> int
    boolean b -> b
    java.lang.reflect.Method long -> long
    java.lang.reflect.Method case -> case
    java.lang.reflect.Method for -> for
    java.lang.Class d -> d
    long void -> void
    int c -> c
    boolean char -> char
    void do() -> do
    void byte() -> byte
    int new() -> new
    java.lang.String int() -> int
    boolean if() -> if
    com.baidu.location.c$a a() -> a
    java.lang.String for() -> for
    void a(android.telephony.CellLocation) -> a
    java.lang.String a(boolean) -> a
    long try() -> try
    com.baidu.location.c$a for(com.baidu.location.c) -> for
    java.util.List do(com.baidu.location.c) -> do
    android.telephony.TelephonyManager if(com.baidu.location.c) -> if
    void a(com.baidu.location.c,android.telephony.CellLocation) -> a
    android.os.Handler a(com.baidu.location.c) -> a
com.baidu.location.c$a -> com.baidu.location.c$a:
    int for -> for
    int try -> try
    int do -> do
    int if -> if
    long byte -> byte
    int int -> int
    char new -> new
    com.baidu.location.c a -> a
    boolean a(com.baidu.location.c$a) -> a
    boolean do() -> do
    boolean for() -> for
    java.lang.String a() -> a
    java.lang.String toString() -> toString
    java.lang.String if() -> if
    java.lang.String int() -> int
com.baidu.location.c$b -> com.baidu.location.c$b:
    com.baidu.location.c a -> a
    void onCellLocationChanged(android.telephony.CellLocation) -> onCellLocationChanged
    void onSignalStrengthsChanged(android.telephony.SignalStrength) -> onSignalStrengthsChanged
com.baidu.location.d -> com.baidu.location.d:
    char[] if -> if
    char[] a -> a
    char[] a(byte[]) -> a
    char[] if(byte[]) -> if
    java.lang.String a(java.lang.String) -> a
com.baidu.location.e -> com.baidu.location.e:
    java.lang.String try -> try
    int byte -> byte
    long f -> f
    long new -> new
    long a -> a
    android.content.Context goto -> goto
    android.os.Handler if -> if
    android.net.wifi.WifiManager void -> void
    com.baidu.location.e$b char -> char
    com.baidu.location.e$a c -> c
    com.baidu.location.e$c case -> case
    long b -> b
    long long -> long
    boolean int -> int
    java.lang.Object g -> g
    java.lang.reflect.Method e -> e
    boolean for -> for
    boolean d -> d
    boolean else -> else
    boolean do -> do
    void try() -> try
    void case() -> case
    void else() -> else
    boolean a() -> a
    boolean new() -> new
    java.lang.String char() -> char
    com.baidu.location.e$c int() -> int
    com.baidu.location.e$c byte() -> byte
    void if() -> if
    void goto() -> goto
    void for() -> for
    boolean do(com.baidu.location.e) -> do
    android.os.Handler if(com.baidu.location.e) -> if
    boolean a(com.baidu.location.e,boolean) -> a
    void a(com.baidu.location.e) -> a
    void for(com.baidu.location.e) -> for
    java.lang.String do() -> do
com.baidu.location.e$1 -> com.baidu.location.e$1:
com.baidu.location.e$a -> com.baidu.location.e$a:
    com.baidu.location.e a -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.baidu.location.e$b -> com.baidu.location.e$b:
    com.baidu.location.e a -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.baidu.location.e$c -> com.baidu.location.e$c:
    java.util.List for -> for
    long if -> if
    long int -> int
    boolean do -> do
    com.baidu.location.e a -> a
    java.lang.String int() -> int
    int try() -> try
    java.lang.String char() -> char
    java.lang.String byte() -> byte
    java.lang.String a(int) -> a
    java.lang.String else() -> else
    void a() -> a
    java.lang.String if(int) -> if
    boolean if(com.baidu.location.e$c) -> if
    boolean do(com.baidu.location.e$c) -> do
    boolean a(com.baidu.location.e$c) -> a
    boolean a(com.baidu.location.e$c,com.baidu.location.e$c,float) -> a
    int do() -> do
    boolean case() -> case
    boolean for() -> for
    boolean new() -> new
    boolean if() -> if
com.baidu.location.e$d -> com.baidu.location.e$d:
    com.baidu.location.e a -> a
    void run() -> run
com.baidu.location.f -> com.baidu.location.f:
    java.lang.String v -> v
    float ap -> ap
    int l -> l
    int c -> c
    int long -> long
    int ah -> ah
    int g -> g
    int aa -> aa
    int for -> for
    int s -> s
    int w -> w
    int W -> W
    int I -> I
    int L -> L
    int do -> do
    int int -> int
    int p -> p
    int case -> case
    int ag -> ag
    int z -> z
    int G -> G
    int ar -> ar
    int U -> U
    int i -> i
    int ak -> ak
    int D -> D
    int aq -> aq
    int M -> M
    int b -> b
    int K -> K
    int e -> e
    int void -> void
    int V -> V
    int t -> t
    int B -> B
    int ao -> ao
    int S -> S
    int x -> x
    int else -> else
    int ai -> ai
    java.lang.String ac -> ac
    java.lang.String m -> m
    java.lang.String a -> a
    java.io.File j -> j
    java.io.File k -> k
    int at -> at
    int byte -> byte
    int af -> af
    android.os.Handler R -> R
    android.os.Messenger an -> an
    com.baidu.location.c r -> r
    com.baidu.location.b ab -> ab
    com.baidu.location.e F -> F
    com.baidu.location.a au -> au
    com.baidu.location.e$c C -> C
    com.baidu.location.e$c char -> char
    com.baidu.location.e$c ae -> ae
    com.baidu.location.c$a try -> try
    com.baidu.location.c$a al -> al
    com.baidu.location.c$a u -> u
    android.location.Location f -> f
    java.lang.String h -> h
    java.lang.String new -> new
    java.lang.String H -> H
    boolean ad -> ad
    boolean Y -> Y
    boolean O -> O
    boolean aj -> aj
    long P -> P
    long d -> d
    boolean N -> N
    com.baidu.location.f$c y -> y
    android.database.sqlite.SQLiteDatabase T -> T
    java.lang.String if -> if
    java.lang.String A -> A
    java.lang.String as -> as
    boolean Q -> Q
    boolean goto -> goto
    java.lang.String X -> X
    int Z -> Z
    boolean J -> J
    double o -> o
    double n -> n
    double q -> q
    long E -> E
    boolean am -> am
    void onCreate() -> onCreate
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onDestroy() -> onDestroy
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    void if(android.os.Message) -> if
    void new(android.os.Message) -> new
    void try(android.os.Message) -> try
    void if() -> if
    void a(android.os.Message) -> a
    void goto() -> goto
    void do() -> do
    void b() -> b
    void try() -> try
    java.lang.String a(java.lang.String) -> a
    void void() -> void
    boolean a(com.baidu.location.e$c) -> a
    boolean a(com.baidu.location.c$a) -> a
    void do(android.os.Message) -> do
    void for(android.os.Message) -> for
    void int(android.os.Message) -> int
    void do(java.lang.String) -> do
    java.lang.String if(boolean) -> if
    java.lang.String a(boolean) -> a
    void if(java.lang.String) -> if
    void d() -> d
    void byte() -> byte
    void a(android.os.Message,int) -> a
    void int() -> int
    void c() -> c
    void a(int) -> a
    void case() -> case
    void char() -> char
    void long() -> long
    java.lang.String new() -> new
    boolean else() -> else
    boolean int(com.baidu.location.f) -> int
    boolean a(com.baidu.location.f,boolean) -> a
    void else(com.baidu.location.f) -> else
    boolean if(com.baidu.location.f) -> if
    void do(com.baidu.location.f,android.os.Message) -> do
    void a(com.baidu.location.f,android.os.Message) -> a
    void new(com.baidu.location.f,android.os.Message) -> new
    void a(com.baidu.location.f,android.os.Message,int) -> a
    void for(com.baidu.location.f) -> for
    void char(com.baidu.location.f) -> char
    void int(com.baidu.location.f,android.os.Message) -> int
    void c(com.baidu.location.f) -> c
    void for(com.baidu.location.f,android.os.Message) -> for
    void if(com.baidu.location.f,android.os.Message) -> if
    void try(com.baidu.location.f,android.os.Message) -> try
    void case(com.baidu.location.f) -> case
    void a(com.baidu.location.f) -> a
    void try(com.baidu.location.f) -> try
    void b(com.baidu.location.f) -> b
    void a(com.baidu.location.f,int) -> a
    com.baidu.location.f$c do(com.baidu.location.f) -> do
    void void(com.baidu.location.f) -> void
    java.io.File a(java.io.File) -> a
    com.baidu.location.e goto(com.baidu.location.f) -> goto
    com.baidu.location.c long(com.baidu.location.f) -> long
    java.io.File for() -> for
    java.lang.String byte(com.baidu.location.f) -> byte
    java.io.File a() -> a
    com.baidu.location.a new(com.baidu.location.f) -> new
com.baidu.location.f$1 -> com.baidu.location.f$1:
com.baidu.location.f$a -> com.baidu.location.f$a:
    android.content.Context if -> if
    com.baidu.location.f a -> a
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
    void a(java.io.File,java.lang.String,java.lang.String) -> a
    void a() -> a
    java.lang.String a(java.lang.Throwable) -> a
    boolean a(java.lang.String,java.lang.String) -> a
com.baidu.location.f$b -> com.baidu.location.f$b:
    com.baidu.location.f a -> a
    void run() -> run
com.baidu.location.f$c -> com.baidu.location.f$c:
    long new -> new
    int char -> char
    android.app.AlarmManager try -> try
    com.baidu.location.f$c$a case -> case
    android.app.PendingIntent d -> d
    android.content.Context goto -> goto
    long void -> void
    long[] a -> a
    int int -> int
    com.baidu.location.c$a b -> b
    java.lang.String for -> for
    java.lang.String long -> long
    int byte -> byte
    boolean do -> do
    boolean if -> if
    boolean else -> else
    java.lang.String c -> c
    com.baidu.location.f e -> e
    void try() -> try
    void do() -> do
    void for() -> for
    void int() -> int
    void a() -> a
    void if() -> if
    void case() -> case
    void new() -> new
    void byte() -> byte
    java.lang.String a(com.baidu.location.f$c,java.lang.String) -> a
com.baidu.location.f$c$a -> com.baidu.location.f$c$a:
    com.baidu.location.f$c a -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.baidu.location.f$d -> com.baidu.location.f$d:
    com.baidu.location.f a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.baidu.location.g -> com.baidu.location.g:
    java.lang.String new -> new
    int d -> d
    int void -> void
    java.lang.String l -> l
    java.lang.String e -> e
    java.lang.String do -> do
    java.lang.String for -> for
    java.lang.String long -> long
    boolean j -> j
    boolean else -> else
    boolean b -> b
    boolean char -> char
    boolean h -> h
    java.util.ArrayList f -> f
    int a -> a
    int byte -> byte
    int case -> case
    int n -> n
    int i -> i
    android.net.Uri if -> if
    int try -> try
    java.lang.String k -> k
    int g -> g
    int goto -> goto
    android.os.Handler int -> int
    android.os.Handler m -> m
    android.os.Handler c -> c
    boolean a(java.lang.String,android.os.Handler) -> a
    boolean if(java.lang.String,android.os.Handler) -> if
    void f() -> f
    void a(java.lang.String,boolean) -> a
    boolean a(android.content.Context) -> a
    boolean for(android.content.Context) -> for
    int do(android.content.Context) -> do
    int if(android.content.Context) -> if
    boolean if(java.lang.String) -> if
    void c() -> c
    void for() -> for
    void for(android.os.Handler) -> for
    int a(android.content.Context,android.net.NetworkInfo) -> a
    int new() -> new
    java.lang.String else() -> else
    java.lang.String goto() -> goto
    int b() -> b
    java.lang.String long() -> long
    int e() -> e
    java.lang.String void() -> void
    int g() -> g
    android.os.Handler try() -> try
    java.lang.String do(java.lang.String) -> do
    android.os.Handler if(android.os.Handler) -> if
    boolean a(boolean) -> a
    java.lang.String if() -> if
    java.lang.String a() -> a
    android.os.Handler int() -> int
    android.os.Handler a(android.os.Handler) -> a
    boolean if(boolean) -> if
    java.util.ArrayList d() -> d
    int char() -> char
    java.util.ArrayList a(java.util.ArrayList) -> a
    boolean do(boolean) -> do
    boolean byte() -> byte
    java.lang.String do() -> do
    android.os.Handler case() -> case
    android.os.Handler do(android.os.Handler) -> do
    java.lang.String a(java.lang.String) -> a
    boolean for(boolean) -> for
com.baidu.location.g$1 -> com.baidu.location.g$1:
    void run() -> run
com.baidu.location.g$2 -> com.baidu.location.g$2:
    void run() -> run
com.baidu.location.g$3 -> com.baidu.location.g$3:
    void run() -> run
com.baidu.location.g$4 -> com.baidu.location.g$4:
    void run() -> run
com.baidu.location.h -> com.baidu.location.h:
    java.lang.String if -> if
    int a -> a
    long try -> try
    int new -> new
    float for -> for
    java.lang.String do -> do
    java.util.ArrayList int -> int
    void a(com.baidu.location.c$a,double,double,float) -> a
    java.lang.String a(int,int,int) -> a
    void if() -> if
    com.baidu.location.h$a if(int,int,int) -> if
    void a() -> a
    void do() -> do
com.baidu.location.h$a -> com.baidu.location.h$a:
    int do -> do
    int try -> try
    int if -> if
    int a -> a
    double new -> new
    double int -> int
    float for -> for
    boolean a(int,int,int) -> a
    double a(com.baidu.location.h$a,double) -> a
    double if(com.baidu.location.h$a,double) -> if
    float a(com.baidu.location.h$a,float) -> a
    double if(com.baidu.location.h$a) -> if
    double int(com.baidu.location.h$a) -> int
    float a(com.baidu.location.h$a) -> a
    int for(com.baidu.location.h$a) -> for
    int new(com.baidu.location.h$a) -> new
    int do(com.baidu.location.h$a) -> do
    int try(com.baidu.location.h$a) -> try
com.baidu.location.i -> com.baidu.location.i:
    java.lang.String do -> do
    java.util.ArrayList byte -> byte
    float goto -> goto
    com.baidu.location.BDLocation case -> case
    long b -> b
    com.baidu.location.LocationClient d -> d
    android.content.Context if -> if
    int a -> a
    long char -> char
    boolean void -> void
    boolean long -> long
    android.app.PendingIntent try -> try
    android.app.AlarmManager for -> for
    com.baidu.location.i$b else -> else
    java.lang.String new -> new
    com.baidu.location.i$a int -> int
    boolean c -> c
    void if() -> if
    int if(com.baidu.location.BDNotifyListener) -> if
    void a(com.baidu.location.BDNotifyListener) -> a
    int do(com.baidu.location.BDNotifyListener) -> do
    boolean do() -> do
    void a() -> a
    void a(long) -> a
    void a(com.baidu.location.BDLocation) -> a
    void a(com.baidu.location.i,com.baidu.location.BDLocation) -> a
    java.lang.String a(com.baidu.location.i) -> a
    java.util.ArrayList do(com.baidu.location.i) -> do
    com.baidu.location.LocationClient if(com.baidu.location.i) -> if
com.baidu.location.i$a -> com.baidu.location.i$a:
    com.baidu.location.i a -> a
    void onReceiveLocation(com.baidu.location.BDLocation) -> onReceiveLocation
    void onReceivePoi(com.baidu.location.BDLocation) -> onReceivePoi
com.baidu.location.i$b -> com.baidu.location.i$b:
    com.baidu.location.i a -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.baidu.location.j -> com.baidu.location.j:
    boolean case -> case
    boolean B -> B
    boolean H -> H
    boolean ab -> ab
    boolean d -> d
    int h -> h
    java.lang.String f -> f
    java.lang.String char -> char
    java.lang.String N -> N
    boolean y -> y
    boolean E -> E
    boolean k -> k
    java.lang.String else -> else
    java.lang.Process aj -> aj
    java.lang.String do -> do
    java.lang.String A -> A
    java.lang.String ah -> ah
    boolean R -> R
    boolean G -> G
    int l -> l
    double J -> J
    double Z -> Z
    double if -> if
    double o -> o
    int I -> I
    byte[] j -> j
    boolean ag -> ag
    int g -> g
    float am -> am
    float c -> c
    float F -> F
    float U -> U
    int p -> p
    int K -> K
    int X -> X
    int int -> int
    int for -> for
    int ad -> ad
    int long -> long
    float D -> D
    float C -> C
    float ai -> ai
    float Q -> Q
    int Y -> Y
    float byte -> byte
    int S -> S
    float a -> a
    float u -> u
    float s -> s
    int r -> r
    int q -> q
    boolean void -> void
    boolean try -> try
    int V -> V
    int aa -> aa
    int L -> L
    long M -> M
    long ac -> ac
    long al -> al
    int af -> af
    boolean O -> O
    boolean P -> P
    boolean n -> n
    boolean x -> x
    boolean z -> z
    boolean m -> m
    float w -> w
    float W -> W
    int v -> v
    int ae -> ae
    int goto -> goto
    int T -> T
    java.lang.String i -> i
    java.lang.String ak -> ak
    java.lang.String b -> b
    int new -> new
    int t -> t
    int e -> e
    int if(java.lang.String,java.lang.String,java.lang.String) -> if
    float a(java.lang.String,java.lang.String,java.lang.String) -> a
    double do(java.lang.String,java.lang.String,java.lang.String) -> do
    java.lang.String a(java.lang.String,java.lang.String,java.lang.String,double) -> a
    java.lang.String for() -> for
    java.lang.String a() -> a
    java.lang.String a(com.baidu.location.c$a,com.baidu.location.e$c,android.location.Location,java.lang.String,int) -> a
    void a(int) -> a
    void int() -> int
    void if() -> if
    void if(int) -> if
    void try() -> try
    void new() -> new
    void if(java.lang.String,java.lang.String) -> if
    void a(java.lang.String,java.lang.String) -> a
    void a(java.lang.String) -> a
    boolean do(java.lang.String) -> do
    void if(java.lang.String) -> if
    java.lang.String do() -> do
    java.lang.String a(byte[],boolean) -> a
    java.lang.String a(byte[],java.lang.String,boolean) -> a
com.baidu.location.j$a -> com.baidu.location.j$a:
    boolean a -> a
    java.lang.String if -> if
    java.lang.String if(android.content.Context) -> if
    java.lang.String a(android.content.Context) -> a
com.baidu.location.j$b -> com.baidu.location.j$b:
    java.lang.String if -> if
    java.lang.String do -> do
    java.lang.String for -> for
    java.lang.String a -> a
    java.lang.String a(android.content.Context) -> a
    java.lang.String do(android.content.Context) -> do
    java.lang.String if(android.content.Context) -> if
com.baidu.location.k -> com.baidu.location.k:
    java.lang.String do -> do
    java.util.ArrayList h -> h
    java.util.ArrayList long -> long
    java.util.ArrayList m -> m
    java.util.ArrayList x -> x
    java.util.ArrayList j -> j
    java.util.ArrayList r -> r
    java.lang.String y -> y
    java.lang.String u -> u
    java.lang.String t -> t
    java.lang.String k -> k
    java.lang.String p -> p
    int if -> if
    int for -> for
    int s -> s
    int d -> d
    int f -> f
    int goto -> goto
    java.io.File else -> else
    int case -> case
    int w -> w
    int byte -> byte
    int i -> i
    int b -> b
    int try -> try
    int o -> o
    int l -> l
    double new -> new
    double n -> n
    double void -> void
    double int -> int
    int c -> c
    int char -> char
    int v -> v
    android.location.Location e -> e
    android.location.Location q -> q
    android.location.Location a -> a
    com.baidu.location.e$c g -> g
    java.lang.String do() -> do
    void a(com.baidu.location.c$a,com.baidu.location.e$c,android.location.Location,java.lang.String) -> a
    void a(double,double,double,double) -> a
    boolean a(android.location.Location,boolean) -> a
    boolean a(android.location.Location) -> a
    boolean a(android.location.Location,com.baidu.location.e$c) -> a
    void for(java.lang.String) -> for
    void do(java.lang.String) -> do
    void int(java.lang.String) -> int
    int a(java.util.List,int) -> a
    boolean a(int,int,int,int,long) -> a
    void a(java.lang.String) -> a
    void if(java.lang.String) -> if
    void a(int,boolean) -> a
    boolean a(java.lang.String,java.util.List) -> a
    java.lang.String int() -> int
    void a() -> a
    java.lang.String a(int) -> a
    java.lang.String if() -> if
    void a(java.lang.String,int) -> a
    void a(java.lang.String,int,boolean) -> a
    void a(int,int) -> a
    void a(int,int,boolean) -> a
    void for() -> for
    void new() -> new
com.baidu.mapapi.BMapManager -> com.baidu.mapapi.a:
    com.baidu.platform.comapi.a b -> b
    android.content.Context c -> c
    android.os.Handler d -> d
    com.baidu.mapapi.MKGeneralListener a -> a
    java.lang.String e -> e
    java.lang.String f -> f
    com.baidu.mapapi.utils.f g -> g
    boolean h -> h
    boolean init(java.lang.String,com.baidu.mapapi.MKGeneralListener) -> a
    boolean start() -> a
    void destroy() -> b
    java.lang.String a(com.baidu.mapapi.BMapManager) -> a
    java.lang.String b(com.baidu.mapapi.BMapManager) -> b
    com.baidu.mapapi.utils.f c(com.baidu.mapapi.BMapManager) -> c
    boolean d(com.baidu.mapapi.BMapManager) -> d
    boolean a(com.baidu.mapapi.BMapManager,boolean) -> a
com.baidu.mapapi.MKGeneralListener -> com.baidu.mapapi.b:
    void onGetNetworkState(int) -> a
    void onGetPermissionState(int) -> b
com.baidu.mapapi.VersionInfo -> com.baidu.mapapi.c:
    java.lang.String getApiVersion() -> a
com.baidu.mapapi.a -> com.baidu.mapapi.d:
    com.baidu.mapapi.BMapManager a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.baidu.mapapi.map.Geometry -> com.baidu.mapapi.map.a:
    int a -> a
    java.util.ArrayList b -> b
    int c -> c
com.baidu.mapapi.map.Graphic -> com.baidu.mapapi.map.b:
    com.baidu.mapapi.map.Geometry a -> a
    com.baidu.mapapi.map.Symbol b -> b
    long c -> c
    com.baidu.mapapi.map.Geometry getGeometry() -> a
    com.baidu.mapapi.map.Symbol getSymbol() -> b
    long getID() -> c
com.baidu.mapapi.map.GraphicsOverlay -> com.baidu.mapapi.map.c:
    android.os.Bundle a -> a
    com.baidu.mapapi.map.MapView b -> d
    java.util.ArrayList c -> e
    boolean d -> f
    void a() -> a
    java.util.ArrayList getAllGraphics() -> b
    boolean b() -> c
    void a(boolean) -> a
com.baidu.mapapi.map.ItemizedOverlay -> com.baidu.mapapi.map.d:
    java.util.ArrayList a -> d
    java.util.ArrayList b -> e
    android.graphics.drawable.Drawable c -> f
    com.baidu.mapapi.map.MapView mMapView -> a
    boolean d -> g
    void addItem(com.baidu.mapapi.map.OverlayItem) -> a
    void addItem(java.util.List) -> a
    java.util.ArrayList getAllItem() -> a
    com.baidu.mapapi.map.OverlayItem getItem(int) -> a
    boolean onTap(int) -> b
    boolean onTap(com.baidu.platform.comapi.basestruct.GeoPoint,com.baidu.mapapi.map.MapView) -> a
    int compare(java.lang.Integer,java.lang.Integer) -> a
    boolean removeAll() -> b
    void reAddAll() -> c
    void a(boolean) -> a
    boolean a() -> d
    boolean a(com.baidu.mapapi.map.OverlayItem) -> b
    int compare(java.lang.Object,java.lang.Object) -> compare
com.baidu.mapapi.map.MKMapViewListener -> com.baidu.mapapi.map.e:
    void onMapMoveFinish() -> a
    void onClickMapPoi(com.baidu.mapapi.map.MapPoi) -> a
    void onGetCurrentMap(android.graphics.Bitmap) -> a
    void onMapAnimationFinish() -> b
com.baidu.mapapi.map.MapController -> com.baidu.mapapi.map.f:
    com.baidu.platform.comapi.map.t a -> a
    com.baidu.mapapi.map.MapView c -> c
    android.os.Message b -> b
    void animateTo(com.baidu.platform.comapi.basestruct.GeoPoint) -> a
    void enableClick(boolean) -> a
    void setCenter(com.baidu.platform.comapi.basestruct.GeoPoint) -> b
    int setZoom(int) -> a
    boolean zoomIn() -> a
    boolean zoomOut() -> b
com.baidu.mapapi.map.MapPoi -> com.baidu.mapapi.map.g:
    java.lang.String strText -> a
    com.baidu.platform.comapi.basestruct.GeoPoint geoPt -> b
    int offset -> c
com.baidu.mapapi.map.MapView -> com.baidu.mapapi.map.MapView:
    com.baidu.mapapi.map.MapController d -> d
    com.baidu.platform.comapi.map.y e -> e
    com.baidu.platform.comapi.map.v a -> a
    com.baidu.mapapi.map.MapView$b b -> b
    com.baidu.platform.comapi.map.c c -> c
    int f -> f
    int g -> g
    android.widget.ZoomControls h -> h
    float i -> i
    com.baidu.platform.comapi.map.Projection j -> j
    android.content.Context k -> k
    com.baidu.mapapi.map.MKMapViewListener l -> l
    boolean m -> m
    com.baidu.platform.comapi.map.x n -> n
    boolean o -> o
    boolean p -> p
    java.util.List q -> q
    void onPause() -> a
    void setVisibility(int) -> setVisibility
    void onResume() -> b
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    void setOnClickListener(android.view.View$OnClickListener) -> setOnClickListener
    void setOnLongClickListener(android.view.View$OnLongClickListener) -> setOnLongClickListener
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void setBuiltInZoomControls(boolean) -> setBuiltInZoomControls
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onMeasure(int,int) -> onMeasure
    void onRestoreInstanceState(android.os.Bundle) -> a
    void onSaveInstanceState(android.os.Bundle) -> b
    void onLayout(boolean,int,int,int,int) -> onLayout
    void a() -> c
    void a(android.view.View,android.view.ViewGroup$LayoutParams) -> a
    void a(android.content.Context) -> a
    boolean b() -> d
    boolean c() -> e
    int getLatitudeSpan() -> getLatitudeSpan
    int getLongitudeSpan() -> getLongitudeSpan
    com.baidu.platform.comapi.basestruct.GeoPoint getMapCenter() -> getMapCenter
    int getMapRotation() -> getMapRotation
    int getMapOverlooking() -> getMapOverlooking
    int getMaxZoomLevel() -> getMaxZoomLevel
    int getMinZoomLevel() -> getMinZoomLevel
    android.view.View getZoomControls() -> getZoomControls
    int getZoomLevel() -> getZoomLevel
    void a(boolean,boolean) -> a
    void setSatellite(boolean) -> setSatellite
    void setTraffic(boolean) -> setTraffic
    boolean isTraffic() -> f
    void setDoubleClickZooming(boolean) -> setDoubleClickZooming
    void d() -> i
    void e() -> j
    void f() -> k
    void a(com.baidu.platform.comapi.map.w,int) -> a
    void a(int) -> a
    void a(int,com.baidu.platform.comapi.basestruct.GeoPoint) -> a
    void b(int) -> b
    void regMapViewListener(com.baidu.mapapi.BMapManager,com.baidu.mapapi.map.MKMapViewListener) -> a
    com.baidu.mapapi.map.MapController getController() -> getController
    boolean getCurrentMap() -> getCurrentMap
    void g() -> l
    void refresh() -> g
    void h() -> m
    java.util.List getOverlays() -> getOverlays
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    com.baidu.platform.comapi.map.Projection getProjection() -> getProjection
    void destroy() -> h
    void finalize() -> finalize
    float a(com.baidu.mapapi.map.MapView) -> a
    float a(com.baidu.mapapi.map.MapView,float) -> a
    com.baidu.mapapi.map.MapController b(com.baidu.mapapi.map.MapView) -> b
    com.baidu.mapapi.map.MKMapViewListener c(com.baidu.mapapi.map.MapView) -> c
    void a(com.baidu.mapapi.map.MapView,com.baidu.platform.comapi.map.w,int) -> a
    void a(com.baidu.mapapi.map.MapView,int) -> a
    void b(com.baidu.mapapi.map.MapView,int) -> b
    void d(com.baidu.mapapi.map.MapView) -> d
    void a(com.baidu.mapapi.map.MapView,int,com.baidu.platform.comapi.basestruct.GeoPoint) -> a
com.baidu.mapapi.map.MapView$LayoutParams -> com.baidu.mapapi.map.h:
    int mode -> a
    com.baidu.platform.comapi.basestruct.GeoPoint point -> b
    int x -> c
    int y -> d
    int alignment -> e
com.baidu.mapapi.map.MapView$a -> com.baidu.mapapi.map.i:
    com.baidu.mapapi.map.MapView a -> a
    com.baidu.platform.comapi.basestruct.GeoPoint fromPixels(int,int) -> a
    android.graphics.Point toPixels(com.baidu.platform.comapi.basestruct.GeoPoint,android.graphics.Point) -> a
com.baidu.mapapi.map.MapView$b -> com.baidu.mapapi.map.j:
    com.baidu.mapapi.map.MapView a -> a
    void onDraw(android.graphics.Canvas) -> onDraw
com.baidu.mapapi.map.MyLocationOverlay -> com.baidu.mapapi.map.k:
    java.lang.String d -> a
    java.lang.String a() -> a
    boolean dispatchTap() -> b
com.baidu.mapapi.map.Overlay -> com.baidu.mapapi.map.l:
com.baidu.mapapi.map.OverlayItem -> com.baidu.mapapi.map.m:
    int a -> d
    com.baidu.platform.comapi.basestruct.GeoPoint mPoint -> a
    java.lang.String mTitle -> b
    java.lang.String mSnippet -> c
    android.graphics.drawable.Drawable b -> e
    java.lang.String c -> f
    android.graphics.drawable.Drawable getMarker() -> a
    com.baidu.platform.comapi.basestruct.GeoPoint getPoint() -> b
    void setMarker(android.graphics.drawable.Drawable) -> a
    int a() -> c
    void a(java.lang.String) -> a
    int b() -> d
    java.lang.String c() -> e
com.baidu.mapapi.map.PoiOverlay -> com.baidu.mapapi.map.n:
    com.baidu.mapapi.map.MapView a -> a
    android.content.Context b -> d
    java.util.ArrayList c -> e
    java.lang.String d -> f
    java.lang.String a() -> a
    boolean onTap(int) -> a
com.baidu.mapapi.map.PopupClickListener -> com.baidu.mapapi.map.o:
    void onClickedPopup(int) -> a
com.baidu.mapapi.map.PopupOverlay -> com.baidu.mapapi.map.p:
    com.baidu.mapapi.map.PopupClickListener a -> a
    int d -> d
com.baidu.mapapi.map.RouteOverlay -> com.baidu.mapapi.map.q:
    com.baidu.mapapi.map.MapView b -> d
    android.content.Context c -> e
    java.lang.String d -> f
    java.lang.String b() -> e
    boolean onTap(int) -> b
com.baidu.mapapi.map.Symbol -> com.baidu.mapapi.map.r:
    int a -> a
    com.baidu.mapapi.map.Symbol$Color b -> b
    int c -> c
com.baidu.mapapi.map.Symbol$Color -> com.baidu.mapapi.map.s:
    int red -> a
    int green -> b
    int blue -> c
    int alpha -> d
com.baidu.mapapi.map.TransitOverlay -> com.baidu.mapapi.map.t:
    com.baidu.mapapi.map.MapView b -> d
    android.content.Context c -> e
    java.lang.String e -> f
    java.lang.String b() -> e
    boolean onTap(int) -> b
com.baidu.mapapi.map.b -> com.baidu.mapapi.map.u:
    com.baidu.mapapi.map.MapView a -> a
    void onClick(android.view.View) -> onClick
com.baidu.mapapi.map.c -> com.baidu.mapapi.map.v:
    com.baidu.mapapi.map.MapView a -> a
    void onClick(android.view.View) -> onClick
com.baidu.mapapi.map.d -> com.baidu.mapapi.map.w:
    com.baidu.mapapi.map.MapView a -> a
    void a() -> a
    void b() -> b
    void a(java.util.List,int) -> a
    void a(int) -> a
    void a(java.util.List) -> a
    void b(java.util.List) -> b
    void c(java.util.List) -> c
    void d(java.util.List) -> d
    void a(int,com.baidu.platform.comapi.basestruct.GeoPoint) -> a
    void c() -> c
com.baidu.mapapi.map.e -> com.baidu.mapapi.map.x:
    com.baidu.mapapi.map.MapView a -> a
    void a(boolean) -> a
com.baidu.mapapi.search.MKPoiInfo -> com.baidu.mapapi.a.a:
    java.lang.String name -> a
    com.baidu.platform.comapi.basestruct.GeoPoint pt -> b
com.baidu.mapapi.search.a -> com.baidu.mapapi.a.b:
    android.content.Context a -> a
    java.util.HashMap b -> b
    boolean c -> c
    int d -> d
    boolean e -> e
    byte f -> f
    java.lang.String g -> g
    int h -> h
    void a(android.content.Context) -> a
    void a() -> a
com.baidu.mapapi.utils.CoordinateConvert -> com.baidu.mapapi.b.a:
    com.baidu.platform.comapi.basestruct.GeoPoint fromGcjToBaidu(com.baidu.platform.comapi.basestruct.GeoPoint) -> a
    com.baidu.platform.comapi.basestruct.GeoPoint a(com.baidu.platform.comapi.basestruct.GeoPoint,java.lang.String) -> a
com.baidu.mapapi.utils.a -> com.baidu.mapapi.b.b:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    int f -> f
    int g -> g
    int h -> h
    java.lang.String l -> l
    java.lang.String[] i -> i
    java.lang.String[] j -> j
    java.lang.String[] k -> k
    void a(android.content.Context) -> a
    void b(android.content.Context) -> b
    java.lang.String a() -> a
    java.lang.String j() -> j
    java.lang.String b() -> b
    java.lang.String c() -> c
    int d() -> d
    int e() -> e
    int f() -> f
    void c(android.content.Context) -> c
    java.io.File g() -> g
    java.lang.String h() -> h
    boolean i() -> i
    boolean a(java.lang.String) -> a
com.baidu.mapapi.utils.b -> com.baidu.mapapi.b.c:
    boolean a(java.lang.String) -> a
com.baidu.mapapi.utils.c -> com.baidu.mapapi.b.d:
    boolean accept(java.io.File,java.lang.String) -> accept
com.baidu.mapapi.utils.d -> com.baidu.mapapi.b.e:
    double[] a -> a
    double[] b -> b
    double[][] c -> c
    double[][] d -> d
    com.baidu.mapapi.utils.d$a a(com.baidu.mapapi.utils.d$a,double[]) -> a
    com.baidu.platform.comapi.basestruct.GeoPoint a(com.baidu.platform.comapi.basestruct.GeoPoint) -> a
    com.baidu.platform.comapi.basestruct.GeoPoint b(com.baidu.platform.comapi.basestruct.GeoPoint) -> b
com.baidu.mapapi.utils.d$a -> com.baidu.mapapi.b.f:
    double a -> a
    double b -> b
com.baidu.mapapi.utils.f -> com.baidu.mapapi.b.g:
    com.baidu.mapapi.MKGeneralListener a -> a
    android.os.Handler b -> b
    boolean a(java.lang.String,java.lang.String) -> a
    com.baidu.mapapi.MKGeneralListener a(com.baidu.mapapi.utils.f) -> a
com.baidu.mapapi.utils.g -> com.baidu.mapapi.b.h:
    com.baidu.mapapi.utils.f a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.baidu.mapapi.utils.h -> com.baidu.mapapi.b.i:
    java.lang.String e -> e
    java.util.ArrayList f -> f
    java.util.ArrayList g -> g
    java.lang.String[] a -> a
    java.lang.String[] b -> b
    java.lang.String[] c -> c
    int d -> d
    void a(android.content.Context) -> a
    void a() -> a
    void b() -> b
    void c() -> c
    void d() -> d
    void b(android.content.Context) -> b
    java.lang.String a(java.lang.String) -> a
    boolean c(android.content.Context) -> c
com.baidu.platform.comapi.a -> com.baidu.platform.comapi.a:
    boolean a -> a
    boolean a(android.content.Context) -> a
    boolean a() -> a
    boolean b() -> b
    void c() -> c
com.baidu.platform.comapi.a.a -> com.baidu.platform.comapi.a.a:
    com.baidu.platform.comapi.a.a a -> a
    com.baidu.platform.comjni.base.location.a b -> b
    com.baidu.platform.comapi.a.a a() -> a
    boolean b() -> b
    com.baidu.platform.comapi.basestruct.c a(float,float,java.lang.String) -> a
com.baidu.platform.comapi.b.d -> com.baidu.platform.comapi.b.a:
    com.baidu.platform.comapi.b.e c -> a
    void a() -> a
com.baidu.platform.comapi.b.e -> com.baidu.platform.comapi.b.b:
    com.baidu.platform.comjni.map.search.a a -> a
    com.baidu.platform.comapi.b.e b -> b
    com.baidu.platform.comapi.b.d c -> c
    android.os.Handler d -> d
    android.os.Bundle f -> e
    void b() -> a
com.baidu.platform.comapi.basestruct.GeoPoint -> com.baidu.platform.comapi.c.a:
    int a -> a
    int b -> b
    int getLatitudeE6() -> a
    int getLongitudeE6() -> b
    void setLatitudeE6(int) -> a
    void setLongitudeE6(int) -> b
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
com.baidu.platform.comapi.basestruct.c -> com.baidu.platform.comapi.c.b:
    int a -> a
    int b -> b
    int a() -> a
    void a(int) -> a
    int b() -> b
    void b(int) -> b
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.baidu.platform.comapi.c.a -> com.baidu.platform.comapi.d.a:
    org.json.JSONObject b -> b
    com.baidu.platform.comjni.base.userdatacollect.a c -> c
    com.baidu.platform.comapi.c.a a -> a
    com.baidu.platform.comapi.c.a a() -> a
    boolean e() -> b
    void a(java.lang.String) -> a
com.baidu.platform.comapi.d.a -> com.baidu.platform.comapi.e.a:
    int a -> a
    java.lang.String b -> b
    boolean c -> c
    java.lang.String d -> d
    int e -> e
    java.lang.String a(android.content.Context) -> a
com.baidu.platform.comapi.d.b -> com.baidu.platform.comapi.e.b:
    int a() -> a
com.baidu.platform.comapi.d.c -> com.baidu.platform.comapi.e.c:
    com.baidu.platform.comjni.map.commonmemcache.a a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    int g -> g
    int h -> h
    int i -> i
    int j -> j
    int k -> k
    int l -> l
    java.lang.String m -> m
    java.lang.String n -> n
    java.lang.String o -> o
    java.lang.String p -> p
    java.lang.String q -> q
    java.lang.String r -> r
    java.lang.String s -> s
    java.lang.String t -> t
    java.lang.String u -> u
    java.lang.String v -> v
    java.lang.String w -> w
    java.lang.String x -> x
    android.content.Context y -> y
    int z -> z
    float A -> A
    boolean B -> B
    int C -> C
    int D -> D
    void e(android.content.Context) -> e
    void f(android.content.Context) -> f
    void g(android.content.Context) -> g
    void h(android.content.Context) -> h
    void i(android.content.Context) -> i
    java.lang.String a(android.content.Context) -> a
    byte[] b(android.content.Context) -> b
    java.lang.String j(android.content.Context) -> j
    java.lang.String a() -> a
    java.lang.String k(android.content.Context) -> k
    void l(android.content.Context) -> l
    void c(android.content.Context) -> c
    void b() -> b
    void d(android.content.Context) -> d
    android.os.Bundle c() -> c
    void t() -> o
    void d() -> d
    void e() -> e
    void a(java.lang.String,java.lang.String) -> a
    java.lang.String f() -> f
    int g() -> g
    java.lang.String h() -> h
    int i() -> i
    java.lang.String j() -> j
    int m() -> k
    java.lang.String q() -> l
    java.lang.String r() -> m
    void a(java.lang.String) -> a
    java.lang.String s() -> n
    void b(java.lang.String) -> b
com.baidu.platform.comapi.map.A -> com.baidu.platform.comapi.map.a:
    android.util.SparseArray a -> a
    com.baidu.platform.comapi.map.t b -> b
    void a(int,com.baidu.platform.comapi.map.i) -> a
com.baidu.platform.comapi.map.B -> com.baidu.platform.comapi.map.b:
    java.lang.String a -> a
    com.baidu.platform.comapi.map.B b -> b
    com.baidu.platform.comapi.map.i a() -> a
    void a(java.lang.String) -> a
    void c() -> b
com.baidu.platform.comapi.map.C -> com.baidu.platform.comapi.map.c:
    java.lang.String a -> a
    com.baidu.platform.comapi.map.C b -> b
    int f -> c
    int g -> d
    int h -> e
    int i -> f
    com.baidu.platform.comapi.map.i a() -> a
    void a(java.lang.String) -> a
    void c() -> b
com.baidu.platform.comapi.map.D -> com.baidu.platform.comapi.map.d:
    com.baidu.platform.comapi.map.D a -> a
    java.lang.String b -> b
    int f -> c
    int g -> d
    com.baidu.platform.comapi.map.i a() -> a
    void a(java.lang.String) -> a
    void c() -> b
com.baidu.platform.comapi.map.E -> com.baidu.platform.comapi.map.e:
    java.lang.String a -> a
    com.baidu.platform.comapi.map.E f -> b
    com.baidu.platform.comapi.map.i a() -> a
    void a(java.lang.String) -> a
    void c() -> b
com.baidu.platform.comapi.map.F -> com.baidu.platform.comapi.map.f:
com.baidu.platform.comapi.map.G -> com.baidu.platform.comapi.map.g:
    java.lang.String a -> a
    com.baidu.platform.comapi.map.G f -> b
    com.baidu.platform.comapi.map.i a() -> a
    void a(java.lang.String) -> a
    void c() -> b
com.baidu.platform.comapi.map.MapRenderer -> com.baidu.platform.comapi.map.MapRenderer:
    int g -> g
    int a -> a
    int b -> b
    int c -> c
    int d -> d
    int e -> e
    int f -> f
    void nativeInit() -> nativeInit
    void nativeResize(int,int,int,int,int) -> nativeResize
    void nativeRender(int) -> nativeRender
    void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig) -> onSurfaceCreated
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> onSurfaceChanged
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
com.baidu.platform.comapi.map.Projection -> com.baidu.platform.comapi.map.h:
    com.baidu.platform.comapi.basestruct.GeoPoint fromPixels(int,int) -> a
    android.graphics.Point toPixels(com.baidu.platform.comapi.basestruct.GeoPoint,android.graphics.Point) -> a
com.baidu.platform.comapi.map.a -> com.baidu.platform.comapi.map.i:
    java.lang.String a -> a
    com.baidu.platform.comapi.map.a b -> b
    com.baidu.platform.comapi.map.i a() -> a
    void a(java.lang.String) -> a
    void c() -> b
com.baidu.platform.comapi.map.b -> com.baidu.platform.comapi.map.j:
    com.baidu.platform.comapi.map.b a -> a
    java.lang.String b -> b
    com.baidu.platform.comapi.map.i a() -> a
    void a(java.lang.String) -> a
    void c() -> b
com.baidu.platform.comapi.map.c -> com.baidu.platform.comapi.map.k:
    void a(boolean) -> a
com.baidu.platform.comapi.map.d -> com.baidu.platform.comapi.map.l:
    java.lang.String a -> a
    com.baidu.platform.comapi.map.d b -> b
    com.baidu.platform.comapi.map.i a() -> a
    void a(java.lang.String) -> a
    void c() -> b
com.baidu.platform.comapi.map.e -> com.baidu.platform.comapi.map.m:
    java.lang.String a -> a
    com.baidu.platform.comapi.map.e b -> b
    com.baidu.platform.comapi.map.i a() -> a
    void a(java.lang.String) -> a
    void c() -> b
com.baidu.platform.comapi.map.f -> com.baidu.platform.comapi.map.n:
    com.baidu.platform.comapi.map.f a -> a
    java.lang.String b -> b
    com.baidu.platform.comapi.map.i a() -> a
    void a(java.lang.String) -> a
    void c() -> b
com.baidu.platform.comapi.map.g -> com.baidu.platform.comapi.map.o:
com.baidu.platform.comapi.map.h -> com.baidu.platform.comapi.map.p:
    com.baidu.platform.comapi.map.h a -> a
    java.lang.String b -> b
    com.baidu.platform.comapi.map.i a() -> a
    void a(java.lang.String) -> a
    void c() -> b
com.baidu.platform.comapi.map.i -> com.baidu.platform.comapi.map.q:
    int c -> g
    int d -> h
    com.baidu.platform.comapi.map.t e -> i
    void a(int,com.baidu.platform.comapi.map.t) -> a
    void a(boolean) -> a
    void e() -> c
    void a(java.lang.String) -> a
    void c() -> b
com.baidu.platform.comapi.map.j -> com.baidu.platform.comapi.map.r:
    com.baidu.platform.comapi.map.t a -> a
    com.baidu.platform.comapi.basestruct.GeoPoint fromPixels(int,int) -> a
    android.graphics.Point toPixels(com.baidu.platform.comapi.basestruct.GeoPoint,android.graphics.Point) -> a
com.baidu.platform.comapi.map.k -> com.baidu.platform.comapi.map.s:
    com.baidu.platform.comapi.map.w a -> a
    long b -> b
    long c -> c
    java.lang.String d -> d
com.baidu.platform.comapi.map.s -> com.baidu.platform.comapi.map.t:
    com.baidu.platform.comapi.map.s a -> a
    java.lang.String b -> b
    com.baidu.platform.comapi.map.i a() -> a
    void a(java.lang.String) -> a
    void c() -> b
com.baidu.platform.comapi.map.t -> com.baidu.platform.comapi.map.u:
    com.baidu.platform.comjni.map.basemap.a j -> j
    android.content.Context k -> k
    com.baidu.platform.comapi.map.v l -> l
    int m -> m
    int a -> a
    int b -> b
    int c -> c
    int d -> d
    java.util.Map e -> e
    java.util.Map f -> f
    java.util.Map g -> g
    java.util.Map h -> h
    android.os.Bundle n -> n
    android.os.Handler o -> o
    int p -> p
    boolean q -> q
    boolean r -> r
    int s -> s
    int t -> t
    int u -> u
    int v -> v
    long w -> w
    int x -> x
    int y -> y
    boolean z -> z
    boolean A -> A
    com.baidu.platform.comapi.map.t$a B -> B
    int C -> C
    int D -> D
    boolean E -> E
    boolean F -> F
    boolean G -> G
    android.view.VelocityTracker H -> H
    long I -> I
    long J -> J
    long K -> K
    long L -> L
    int M -> M
    float N -> N
    float O -> O
    boolean P -> P
    long Q -> Q
    long R -> R
    boolean S -> S
    long T -> T
    long U -> U
    long V -> V
    boolean W -> W
    boolean i -> i
    boolean X -> X
    com.baidu.platform.comapi.basestruct.GeoPoint Y -> Y
    boolean Z -> Z
    int aa -> aa
    int ab -> ab
    boolean ac -> ac
    boolean ad -> ad
    int a(int,int,int,int) -> a
    void a(com.baidu.platform.comapi.map.v) -> a
    int a() -> a
    void a(java.lang.String) -> a
    com.baidu.platform.comjni.map.basemap.a b() -> b
    double c() -> c
    void a(int,int) -> a
    boolean g(int,int) -> e
    void a(com.baidu.platform.comapi.basestruct.GeoPoint) -> a
    int a(int,int,int) -> a
    boolean a(android.view.MotionEvent) -> a
    void e(android.view.MotionEvent) -> e
    boolean b(android.view.MotionEvent) -> b
    boolean c(android.view.MotionEvent) -> c
    void d(android.view.MotionEvent) -> d
    void a(boolean) -> a
    void e() -> d
    boolean a(android.view.MotionEvent,android.view.MotionEvent,float,float) -> a
    boolean f() -> e
    void m() -> l
    boolean g() -> f
    void n() -> m
    void d(int,int) -> b
    void b(boolean) -> b
    int h() -> g
    int i() -> h
    void a(com.baidu.platform.comapi.map.x) -> a
    void a(com.baidu.platform.comapi.map.x,int) -> a
    com.baidu.platform.comapi.map.x j() -> i
    float k() -> j
    void a(android.os.Bundle,com.baidu.platform.comapi.map.A) -> a
    void o() -> n
    void p() -> o
    void l() -> k
    void e(int,int) -> c
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
    boolean f(int,int) -> d
    boolean b(int,int,int) -> b
    com.baidu.platform.comapi.map.v a(com.baidu.platform.comapi.map.t) -> a
    boolean b(com.baidu.platform.comapi.map.t) -> b
    void c(com.baidu.platform.comapi.map.t) -> c
    boolean d(com.baidu.platform.comapi.map.t) -> d
    void e(com.baidu.platform.comapi.map.t) -> e
com.baidu.platform.comapi.map.t$a -> com.baidu.platform.comapi.map.v:
    int a -> a
    float b -> b
    float c -> c
    float d -> d
    float e -> e
    float f -> f
    float g -> g
    float h -> h
    float i -> i
    boolean j -> j
    float k -> k
    float l -> l
    double m -> m
com.baidu.platform.comapi.map.u -> com.baidu.platform.comapi.map.w:
    com.baidu.platform.comapi.map.t a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.baidu.platform.comapi.map.v -> com.baidu.platform.comapi.map.x:
    boolean l -> l
    boolean m -> m
    com.baidu.platform.comapi.map.t n -> n
    com.baidu.platform.comapi.map.A a -> a
    com.baidu.platform.comapi.map.j b -> b
    int o -> o
    com.baidu.platform.comapi.map.MapRenderer c -> c
    int d -> d
    com.baidu.platform.comapi.map.y e -> e
    com.baidu.platform.comapi.map.c f -> f
    com.baidu.platform.comapi.map.g g -> g
    com.baidu.platform.comapi.map.F h -> h
    android.view.GestureDetector i -> i
    java.util.List j -> j
    int p -> p
    int q -> q
    boolean k -> k
    void a(android.os.Bundle,android.content.Context) -> a
    void o() -> o
    void a() -> a
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void onResume() -> onResume
    void onPause() -> onPause
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean a(android.view.MotionEvent) -> a
    boolean onDown(android.view.MotionEvent) -> onDown
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    void onLongPress(android.view.MotionEvent) -> onLongPress
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onShowPress(android.view.MotionEvent) -> onShowPress
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    com.baidu.platform.comapi.map.t b() -> b
    int c() -> c
    int d() -> d
    java.util.List e() -> e
    com.baidu.platform.comapi.map.Projection f() -> f
    boolean g() -> g
    boolean h() -> h
    void a(boolean) -> a
    void b(boolean) -> b
    void a(com.baidu.platform.comapi.map.y) -> a
    void a(com.baidu.platform.comapi.basestruct.GeoPoint,android.os.Message,java.lang.Runnable) -> a
    void a(int,int) -> a
    double i() -> i
    com.baidu.platform.comapi.basestruct.GeoPoint j() -> j
    float k() -> k
    int l() -> l
    int m() -> m
    void a(com.baidu.platform.comapi.map.x) -> a
    com.baidu.platform.comapi.map.x n() -> n
    void a(com.baidu.platform.comapi.map.c) -> a
com.baidu.platform.comapi.map.w -> com.baidu.platform.comapi.map.y:
    java.lang.String a -> a
    int b -> b
    java.lang.String c -> c
    com.baidu.platform.comapi.basestruct.GeoPoint d -> d
    int e -> e
    int f -> f
com.baidu.platform.comapi.map.x -> com.baidu.platform.comapi.map.z:
    float a -> a
    int b -> b
    int c -> c
    int d -> d
    int e -> e
    com.baidu.platform.comapi.map.x$b f -> f
    com.baidu.platform.comapi.map.x$a g -> g
    long h -> h
    long i -> i
    boolean j -> j
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.baidu.platform.comapi.map.x$a -> com.baidu.platform.comapi.map.aa:
    long a -> a
    long b -> b
    long c -> c
    long d -> d
    com.baidu.platform.comapi.basestruct.c e -> e
    com.baidu.platform.comapi.basestruct.c f -> f
    com.baidu.platform.comapi.basestruct.c g -> g
    com.baidu.platform.comapi.basestruct.c h -> h
    com.baidu.platform.comapi.map.x i -> i
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.baidu.platform.comapi.map.x$b -> com.baidu.platform.comapi.map.ab:
    int a -> a
    int b -> b
    int c -> c
    int d -> d
    com.baidu.platform.comapi.map.x e -> e
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.baidu.platform.comapi.map.y -> com.baidu.platform.comapi.map.ac:
    void b(java.util.List) -> b
    void a(java.util.List) -> a
    void a(java.util.List,int) -> a
    void c(java.util.List) -> c
    void d(java.util.List) -> d
    void a() -> a
    void b() -> b
    void c() -> c
    void a(int) -> a
    void a(int,com.baidu.platform.comapi.basestruct.GeoPoint) -> a
com.baidu.platform.comapi.map.z -> com.baidu.platform.comapi.map.ad:
    int mType -> b
    int mLayerID -> c
com.baidu.platform.comjni.base.location.JNILocation -> com.baidu.platform.comjni.base.location.JNILocation:
    int Create() -> Create
    boolean CoordinateEncryptEx(int,float,float,android.os.Bundle,java.lang.String) -> CoordinateEncryptEx
com.baidu.platform.comjni.base.location.a -> com.baidu.platform.comjni.base.location.a:
    int a -> a
    com.baidu.platform.comjni.base.location.JNILocation b -> b
    int a() -> a
    boolean a(float,float,android.os.Bundle,java.lang.String) -> a
com.baidu.platform.comjni.base.userdatacollect.JNIUserdataCollect -> com.baidu.platform.comjni.base.userdatacollect.JNIUserdataCollect:
    int Create() -> Create
    void AppendRecord(int,java.lang.String,java.lang.String) -> AppendRecord
com.baidu.platform.comjni.base.userdatacollect.a -> com.baidu.platform.comjni.base.userdatacollect.a:
    int a -> a
    com.baidu.platform.comjni.base.userdatacollect.JNIUserdataCollect b -> b
    int a() -> a
    void a(java.lang.String,java.lang.String) -> a
com.baidu.platform.comjni.engine.AppEngine -> com.baidu.platform.comjni.engine.a:
    boolean InitEngine(android.os.Bundle) -> a
    boolean UnInitEngine() -> a
    boolean StartSocketProc() -> b
com.baidu.platform.comjni.engine.JNIEngine -> com.baidu.platform.comjni.engine.JNIEngine:
    int initClass(java.lang.Object,int) -> initClass
    boolean InitEngine(android.os.Bundle) -> InitEngine
    boolean UnInitEngine() -> UnInitEngine
    boolean StartSocketProc() -> StartSocketProc
com.baidu.platform.comjni.engine.a -> com.baidu.platform.comjni.engine.b:
    android.util.SparseArray a -> a
    void a(int,android.os.Handler) -> a
    void b(int,android.os.Handler) -> b
    void a() -> a
com.baidu.platform.comjni.map.basemap.BaseMapCallback -> com.baidu.platform.comjni.map.basemap.a:
    com.baidu.platform.comjni.map.basemap.BaseMapCallback a -> a
    boolean SetMapCallback(com.baidu.platform.comjni.map.basemap.BaseMapCallback) -> a
com.baidu.platform.comjni.map.basemap.JNIBaseMap -> com.baidu.platform.comjni.map.basemap.JNIBaseMap:
    int Create() -> Create
    int SetCallback(int,com.baidu.platform.comjni.map.basemap.BaseMapCallback) -> SetCallback
    int Release(int) -> Release
    boolean Init(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,int,int,int,int) -> Init
    void OnPause(int) -> OnPause
    void OnResume(int) -> OnResume
    void ResetImageRes(int) -> ResetImageRes
    void SetMapStatus(int,android.os.Bundle) -> SetMapStatus
    android.os.Bundle GetMapStatus(int) -> GetMapStatus
    void ShowSatelliteMap(int,boolean) -> ShowSatelliteMap
    void ShowTrafficMap(int,boolean) -> ShowTrafficMap
    void ShowLayers(int,int,boolean) -> ShowLayers
    void SetLayersClickable(int,int,boolean) -> SetLayersClickable
    void UpdateLayers(int,int) -> UpdateLayers
    int AddLayer(int,int,int,java.lang.String) -> AddLayer
    void ClearLayer(int,int) -> ClearLayer
    java.lang.String GetNearlyObjID(int,int,int,int,int) -> GetNearlyObjID
    java.lang.String ScrPtToGeoPoint(int,int,int) -> ScrPtToGeoPoint
    java.lang.String GeoPtToScrPoint(int,int,int) -> GeoPtToScrPoint
    void SaveScreenToLocal(int,java.lang.String) -> SaveScreenToLocal
    void MoveToScrPoint(int,int,int) -> MoveToScrPoint
    void AddItemData(int,android.os.Bundle) -> AddItemData
    void AddLogoData(int,android.os.Bundle) -> AddLogoData
    int AddGeometryData(int,android.os.Bundle) -> AddGeometryData
    int MapProc(int,int,int,int) -> MapProc
com.baidu.platform.comjni.map.basemap.a -> com.baidu.platform.comjni.map.basemap.b:
    int a -> a
    com.baidu.platform.comjni.map.basemap.JNIBaseMap b -> b
    com.baidu.platform.comjni.map.basemap.BaseMapCallback c -> c
    boolean a(com.baidu.platform.comjni.map.basemap.BaseMapCallback) -> a
    boolean a() -> a
    boolean b() -> b
    int c() -> c
    boolean a(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,int,int,int,int) -> a
    void d() -> d
    void e() -> e
    void f() -> f
    void a(android.os.Bundle) -> a
    android.os.Bundle g() -> g
    void a(boolean) -> a
    void b(boolean) -> b
    void a(int,boolean) -> a
    void b(int,boolean) -> b
    void a(int) -> a
    int a(int,int,java.lang.String) -> a
    void b(int) -> b
    java.lang.String a(int,int,int,int) -> a
    java.lang.String a(int,int) -> a
    java.lang.String b(int,int) -> b
    void a(java.lang.String) -> a
    void c(int,int) -> c
    void c(android.os.Bundle) -> b
    void e(android.os.Bundle) -> c
    int f(android.os.Bundle) -> d
    int b(int,int,int,int) -> b
com.baidu.platform.comjni.map.commonmemcache.JNICommonMemCache -> com.baidu.platform.comjni.map.commonmemcache.JNICommonMemCache:
    int Create() -> Create
    int Release(int) -> Release
    void Init(int,android.os.Bundle) -> Init
com.baidu.platform.comjni.map.commonmemcache.a -> com.baidu.platform.comjni.map.commonmemcache.a:
    int a -> a
    com.baidu.platform.comjni.map.commonmemcache.JNICommonMemCache b -> b
    int a() -> a
    int b() -> b
    void a(android.os.Bundle) -> a
com.baidu.platform.comjni.map.search.JNISearch -> com.baidu.platform.comjni.map.search.JNISearch:
    int Release(int) -> Release
com.baidu.platform.comjni.map.search.a -> com.baidu.platform.comjni.map.search.a:
    int a -> a
    com.baidu.platform.comjni.map.search.JNISearch b -> b
    int c() -> a
com.baidu.platform.comjni.permissioncheck.PermissionCheck -> com.baidu.platform.comjni.permissioncheck.PermissionCheck:
    boolean check(java.lang.String,java.lang.String) -> check
com.baidu.platform.comjni.tools.JNITools -> com.baidu.platform.comjni.tools.JNITools:
    void TransNodeStr2Pt(java.lang.Object) -> TransNodeStr2Pt
com.baidu.platform.comjni.tools.ParcelItem -> com.baidu.platform.comjni.tools.ParcelItem:
    android.os.Bundle b -> b
    android.os.Parcelable$Creator a -> a
    void setBundle(android.os.Bundle) -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    int describeContents() -> describeContents
com.baidu.platform.comjni.tools.b -> com.baidu.platform.comjni.tools.a:
    com.baidu.platform.comjni.tools.ParcelItem a(android.os.Parcel) -> a
    com.baidu.platform.comjni.tools.ParcelItem[] a(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.baidu.vi.VMsg -> com.baidu.vi.VMsg:
    android.os.Handler a -> a
    android.os.HandlerThread b -> b
    void init() -> a
    void destroy() -> b
    void OnUserCommand(int,int,int) -> OnUserCommand
    void a(int,int,int) -> a
com.baidu.vi.VMsg$a -> com.baidu.vi.a:
    void handleMessage(android.os.Message) -> handleMessage
com.baidu.vi.h -> com.baidu.vi.b:
    android.content.Context a -> a
    void a(android.content.Context) -> a
com.easemob.EMCallBack -> com.easemob.EMCallBack:
    int ERROR_EXCEPTION -> ERROR_EXCEPTION
    int ERROR_SEND -> ERROR_SEND
    int ERROR_FILE_NOT_FOUND -> ERROR_FILE_NOT_FOUND
    int ERROR_EXCEPTION_NO_ERROR -> ERROR_EXCEPTION_NO_ERROR
    int ERROR_EXCEPTION_UNKNOWN_SERVER_ERROR -> ERROR_EXCEPTION_UNKNOWN_SERVER_ERROR
    int ERROR_EXCEPTION_NONETWORK_ERROR -> ERROR_EXCEPTION_NONETWORK_ERROR
    int ERROR_EXCEPTION_DNS_ERROR -> ERROR_EXCEPTION_DNS_ERROR
    int ERROR_EXCEPTION_UNABLE_CONNECT_TO_SERVER -> ERROR_EXCEPTION_UNABLE_CONNECT_TO_SERVER
    int ERROR_EXCEPTION_CONNECT_TIMER_OUT -> ERROR_EXCEPTION_CONNECT_TIMER_OUT
    int ERROR_EXCEPTION_INVALID_PASSWORD_USERNAME -> ERROR_EXCEPTION_INVALID_PASSWORD_USERNAME
    int ERROR_EXCEPTION_INVALID_KEYSTORE -> ERROR_EXCEPTION_INVALID_KEYSTORE
    int ERROR_EXCEPTION_IO_EXCEPTION -> ERROR_EXCEPTION_IO_EXCEPTION
    int ERROR_EXCEPTION_INVALID_CERTIFICATE -> ERROR_EXCEPTION_INVALID_CERTIFICATE
    int ERROR_EXCEPTION_ENCRYPTION_ERROR -> ERROR_EXCEPTION_ENCRYPTION_ERROR
    int ERROR_EXCEPTION_LOGOFFINPROGRESS_ERROR -> ERROR_EXCEPTION_LOGOFFINPROGRESS_ERROR
    int ERROR_EXCEPTION_INVALID_FILE -> ERROR_EXCEPTION_INVALID_FILE
    int ERROR_EXCEPTION_FILE_NOT_FOUND -> ERROR_EXCEPTION_FILE_NOT_FOUND
    java.lang.Object data -> data
    void onSuccess() -> onSuccess
    void onError(int,java.lang.String) -> onError
    void onProgress(int,java.lang.String) -> onProgress
com.easemob.EMConnectionListener -> com.easemob.EMConnectionListener:
    void onConnected() -> onConnected
    void onDisconnected(int) -> onDisconnected
com.easemob.EMError -> com.easemob.EMError:
    int NO_ERROR -> NO_ERROR
    int GENERAL_ERROR -> GENERAL_ERROR
    int UNKNOW_ERROR -> UNKNOW_ERROR
    int UNKNOWN_SERVER_ERROR -> UNKNOWN_SERVER_ERROR
    int NONETWORK_ERROR -> NONETWORK_ERROR
    int DNS_ERROR -> DNS_ERROR
    int UNABLE_CONNECT_TO_SERVER -> UNABLE_CONNECT_TO_SERVER
    int CONNECT_TIMER_OUT -> CONNECT_TIMER_OUT
    int INVALID_PASSWORD_USERNAME -> INVALID_PASSWORD_USERNAME
    int INVALID_KEYSTORE -> INVALID_KEYSTORE
    int IO_EXCEPTION -> IO_EXCEPTION
    int INVALID_CERTIFICATE -> INVALID_CERTIFICATE
    int ENCRYPTION_ERROR -> ENCRYPTION_ERROR
    int LOGOFFINPROGRESS_ERROR -> LOGOFFINPROGRESS_ERROR
    int INVALID_FILE -> INVALID_FILE
    int FILE_NOT_FOUND -> FILE_NOT_FOUND
    int CONNECTION_CLOSED -> CONNECTION_CLOSED
    int CONNECTION_CONFLICT -> CONNECTION_CONFLICT
    int USER_ALREADY_EXISTS -> USER_ALREADY_EXISTS
    int GROUP_NOT_EXIST_LOCAL -> GROUP_NOT_EXIST_LOCAL
    int GROUP_NOT_EXIST -> GROUP_NOT_EXIST
    int GROUP_MEMBERS_FULL -> GROUP_MEMBERS_FULL
    int GROUP_ADD_MEMBERS_TOO_MUCH -> GROUP_ADD_MEMBERS_TOO_MUCH
    int GROUP_NO_PERMISSIONS -> GROUP_NO_PERMISSIONS
    int UNAUTHORIZED -> UNAUTHORIZED
    int CONNECTION_INIT_FAILED -> CONNECTION_INIT_FAILED
com.easemob.EMValueCallBack -> com.easemob.EMValueCallBack:
    void onSuccess(java.lang.Object) -> onSuccess
    void onError(int,java.lang.String) -> onError
com.easemob.a.a -> com.easemob.a.a:
    java.lang.String a -> a
    com.easemob.a.a b -> b
    long c -> c
    long d -> d
    long e -> e
    long f -> f
    long g -> g
    long h -> h
    long i -> i
    long j -> j
    long k -> k
    long l -> l
    long m -> m
    long n -> n
    long o -> o
    long p -> p
    long q -> q
    long r -> r
    int s -> s
    long t -> t
    long u -> u
    boolean v -> v
    void a() -> a
    void b() -> b
    void c() -> c
    void d() -> d
com.easemob.analytics.ActiveCollector -> com.easemob.analytics.ActiveCollector:
    java.lang.String perf_actived -> perf_actived
    java.lang.String collectActiveInfo(android.content.Context) -> collectActiveInfo
    void sendActivePacket(android.content.Context) -> sendActivePacket
    void sendUninstallPacket() -> sendUninstallPacket
com.easemob.analytics.ActiveCollector$1 -> com.easemob.analytics.ActiveCollector$1:
    android.content.Context val$context -> val$context
    void run() -> run
com.easemob.audio.AVNative -> com.easemob.audio.AVNative:
    java.lang.String TAG -> TAG
    int nativeVoeClient_Register(com.easemob.audio.IGxStatusCallback,android.content.Context,int,java.lang.String,int,java.lang.String,java.lang.String,short,java.lang.String) -> nativeVoeClient_Register
    int nativeVoeClient_FullDuplexSpeech(java.lang.String) -> nativeVoeClient_FullDuplexSpeech
    int nativeVoeClient_Stop(java.lang.String) -> nativeVoeClient_Stop
    int nativeVoeClient_Release(java.lang.String) -> nativeVoeClient_Release
    int nativeVoeClient_GetAudioLevel(java.lang.String) -> nativeVoeClient_GetAudioLevel
    int register(com.easemob.audio.IGxStatusCallback,android.content.Context,int,java.lang.String,int,java.lang.String,java.lang.String,short,java.lang.String) -> register
    int unregister(java.lang.String) -> unregister
    int stop(java.lang.String) -> stop
    int setFullDuplexSpeech(java.lang.String) -> setFullDuplexSpeech
    int GetAudioLevel(java.lang.String) -> GetAudioLevel
com.easemob.audio.IGxStatusCallback -> com.easemob.audio.IGxStatusCallback:
    void updateStatus(int) -> updateStatus
com.easemob.chat.ChatListener -> com.easemob.chat.ChatListener:
    java.lang.String TAG -> TAG
    java.lang.String previousFrom -> previousFrom
    java.lang.String previousBody -> previousBody
    long previousTime -> previousTime
    com.easemob.chat.EMChatManager chatManager -> chatManager
    java.util.concurrent.ExecutorService recvThreadPool -> recvThreadPool
    java.util.concurrent.ArrayBlockingQueue recentMsgIdQueue -> recentMsgIdQueue
    int RECENT_QUEUE_SIZE -> RECENT_QUEUE_SIZE
    java.util.Set offlineMsgUserSenders -> offlineMsgUserSenders
    java.util.Set offlineMsgGrpSenders -> offlineMsgGrpSenders
    long lastOfflineMsgTime -> lastOfflineMsgTime
    com.easemob.chat.EMMessage lastOfflineMsg -> lastOfflineMsg
    long OFFLINE_INTERVAL -> OFFLINE_INTERVAL
    boolean offlineMsgProcessed -> offlineMsgProcessed
    void ackMessage(org.jivesoftware.smack.packet.Message) -> ackMessage
    boolean isDuplicateMsg(org.jivesoftware.smack.packet.Message) -> isDuplicateMsg
    boolean processMessage(org.jivesoftware.smack.packet.Message) -> processMessage
    boolean processEMMessage(com.easemob.chat.EMMessage) -> processEMMessage
    void sendCmdMsgBroadcast(com.easemob.chat.EMMessage) -> sendCmdMsgBroadcast
    void sendOfflineMsgBroadcast() -> sendOfflineMsgBroadcast
    void setLocalUrl(com.easemob.chat.EMMessage) -> setLocalUrl
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    void clearRecentMsgIdQueue() -> clearRecentMsgIdQueue
    void resetOfflineFlags() -> resetOfflineFlags
    com.easemob.chat.EMMessage access$000(com.easemob.chat.ChatListener) -> access$000
    boolean access$102(com.easemob.chat.ChatListener,boolean) -> access$102
    long access$200(com.easemob.chat.ChatListener) -> access$200
    com.easemob.chat.EMMessage access$002(com.easemob.chat.ChatListener,com.easemob.chat.EMMessage) -> access$002
    long access$202(com.easemob.chat.ChatListener,long) -> access$202
com.easemob.chat.ChatListener$1 -> com.easemob.chat.ChatListener$1:
    com.easemob.chat.ChatListener this$0 -> this$0
    void run() -> run
    void sendBroadcast() -> sendBroadcast
com.easemob.chat.CmdMessageBody -> com.easemob.chat.CmdMessageBody:
    java.lang.String action -> action
    java.util.HashMap params -> params
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String toString() -> toString
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.easemob.chat.CmdMessageBody$1 -> com.easemob.chat.CmdMessageBody$1:
    com.easemob.chat.CmdMessageBody createFromParcel(android.os.Parcel) -> createFromParcel
    com.easemob.chat.CmdMessageBody[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.easemob.chat.CmdMsgProcessor -> com.easemob.chat.CmdMsgProcessor:
    java.lang.String getAction() -> getAction
    boolean processCmd(com.easemob.chat.EMMessage) -> processCmd
com.easemob.chat.ConnectionListener -> com.easemob.chat.ConnectionListener:
    void onConnected() -> onConnected
    void onDisConnected(java.lang.String) -> onDisConnected
    void onReConnected() -> onReConnected
    void onReConnecting() -> onReConnecting
    void onConnecting(java.lang.String) -> onConnecting
com.easemob.chat.EMCallDirection -> com.easemob.chat.EMCallDirection:
    com.easemob.chat.EMCallDirection OUTGOING -> OUTGOING
    com.easemob.chat.EMCallDirection INCOMING -> INCOMING
    com.easemob.chat.EMCallDirection NONE -> NONE
    java.lang.String direction -> direction
    com.easemob.chat.EMCallDirection[] $VALUES -> $VALUES
    com.easemob.chat.EMCallDirection[] values() -> values
    com.easemob.chat.EMCallDirection valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
com.easemob.chat.EMCallStateChangeListener -> com.easemob.chat.EMCallStateChangeListener:
    void onCallStateChanged(com.easemob.chat.EMCallStateChangeListener$CallState,com.easemob.chat.EMCallStateChangeListener$CallError) -> onCallStateChanged
com.easemob.chat.EMCallStateChangeListener$CallError -> com.easemob.chat.EMCallStateChangeListener$CallError:
    com.easemob.chat.EMCallStateChangeListener$CallError ERROR_NONE -> ERROR_NONE
    com.easemob.chat.EMCallStateChangeListener$CallError ERROR_TRANSPORT -> ERROR_TRANSPORT
    com.easemob.chat.EMCallStateChangeListener$CallError ERROR_INAVAILABLE -> ERROR_INAVAILABLE
    com.easemob.chat.EMCallStateChangeListener$CallError REJECTED -> REJECTED
    com.easemob.chat.EMCallStateChangeListener$CallError ERROR_NORESPONSE -> ERROR_NORESPONSE
    com.easemob.chat.EMCallStateChangeListener$CallError ERROR_BUSY -> ERROR_BUSY
    java.lang.String error -> error
    com.easemob.chat.EMCallStateChangeListener$CallError[] $VALUES -> $VALUES
    com.easemob.chat.EMCallStateChangeListener$CallError[] values() -> values
    com.easemob.chat.EMCallStateChangeListener$CallError valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
com.easemob.chat.EMCallStateChangeListener$CallState -> com.easemob.chat.EMCallStateChangeListener$CallState:
    com.easemob.chat.EMCallStateChangeListener$CallState IDLE -> IDLE
    com.easemob.chat.EMCallStateChangeListener$CallState RINGING -> RINGING
    com.easemob.chat.EMCallStateChangeListener$CallState ANSWERING -> ANSWERING
    com.easemob.chat.EMCallStateChangeListener$CallState PAUSING -> PAUSING
    com.easemob.chat.EMCallStateChangeListener$CallState CONNECTING -> CONNECTING
    com.easemob.chat.EMCallStateChangeListener$CallState CONNECTED -> CONNECTED
    com.easemob.chat.EMCallStateChangeListener$CallState ACCEPTED -> ACCEPTED
    com.easemob.chat.EMCallStateChangeListener$CallState DISCONNNECTED -> DISCONNNECTED
    java.lang.String state -> state
    com.easemob.chat.EMCallStateChangeListener$CallState[] $VALUES -> $VALUES
    com.easemob.chat.EMCallStateChangeListener$CallState[] values() -> values
    com.easemob.chat.EMCallStateChangeListener$CallState valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
com.easemob.chat.EMCallerJingleSession -> com.easemob.chat.EMCallerJingleSession:
    java.lang.String TAG -> TAG
    boolean callAccepted -> callAccepted
    com.easemob.chat.EMCallerJingleSession buildPeer(java.lang.String) -> buildPeer
    void makeCall() -> makeCall
    void closeSession(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason) -> closeSession
    void handleSessionInitiate(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleSessionInitiate
    void handleSessionAccept(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleSessionAccept
    void handleSessionTerminate(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleSessionTerminate
    void handleCallAccept(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleCallAccept
    void onConnectionConnected() -> onConnectionConnected
    void onRelayCandidateSelected() -> onRelayCandidateSelected
    void onLocalCandidateSelected() -> onLocalCandidateSelected
com.easemob.chat.EMChat -> com.easemob.chat.EMChat:
    java.lang.String TAG -> TAG
    com.easemob.chat.EMChat instance -> instance
    java.lang.String version -> version
    boolean appInited -> appInited
    boolean autoLogin -> autoLogin
    boolean initSingleProcess -> initSingleProcess
    boolean sdkInited -> sdkInited
    android.content.Context appContext -> appContext
    java.lang.String userName -> userName
    java.lang.String password -> password
    java.lang.String PID_FILE -> PID_FILE
    com.easemob.chat.EMChat getInstance() -> getInstance
    void setDebugMode(boolean) -> setDebugMode
    void setLogMode(com.easemob.util.EMLog$ELogMode) -> setLogMode
    void setAutoLogin(boolean) -> setAutoLogin
    void setAppInited() -> setAppInited
    void setInitSingleProcess(boolean) -> setInitSingleProcess
    void uploadLog(com.easemob.EMCallBack) -> uploadLog
    void setUserName(java.lang.String) -> setUserName
    void setPassword(java.lang.String) -> setPassword
    void init(android.content.Context) -> init
    java.lang.String getVersion() -> getVersion
    android.content.Context getAppContext() -> getAppContext
    void setEnv(com.easemob.chat.EMChatConfig$EMEnvMode) -> setEnv
    boolean checkSDKInited(android.content.Context) -> checkSDKInited
com.easemob.chat.EMChatConfig -> com.easemob.chat.EMChatConfig:
    java.lang.String TAG -> TAG
    java.lang.String CONFIG_EASEMOB_APPKEY -> CONFIG_EASEMOB_APPKEY
    java.lang.String CONFIG_EASEMOB_CHAT_ADDRESS -> CONFIG_EASEMOB_CHAT_ADDRESS
    java.lang.String CONFIG_EASEMOB_CHAT_DOMAIN -> CONFIG_EASEMOB_CHAT_DOMAIN
    java.lang.String CONFIG_EASEMOB_GROUP_DOMAIN -> CONFIG_EASEMOB_GROUP_DOMAIN
    java.lang.String CONFIG_EASEMOB_API_URL -> CONFIG_EASEMOB_API_URL
    java.lang.String DOMAIN -> DOMAIN
    java.lang.String DOMAIN_SUFFIX -> DOMAIN_SUFFIX
    java.lang.String MUC_DOMAIN -> MUC_DOMAIN
    java.lang.String MUC_DOMAIN_SUFFIX -> MUC_DOMAIN_SUFFIX
    java.lang.String STUN_SERVER -> STUN_SERVER
    int STUN_SERVER_PORT -> STUN_SERVER_PORT
    java.lang.String UUID -> UUID
    java.lang.String SHARE_SERCRET -> SHARE_SERCRET
    java.lang.String TOKEN_ENTITY -> TOKEN_ENTITY
    java.lang.String APPKEY -> APPKEY
    java.lang.String AccessToken -> AccessToken
    android.content.Context applicationContext -> applicationContext
    boolean isHttps -> isHttps
    com.easemob.chat.EMTransportAddress[] stunServerAddress -> stunServerAddress
    java.lang.String DEFAULT_CHAT_SERVER -> DEFAULT_CHAT_SERVER
    java.lang.String DEFAULT_REST_SERVER -> DEFAULT_REST_SERVER
    java.lang.String CHATSERVER -> CHATSERVER
    java.lang.String USER_SERVER -> USER_SERVER
    java.lang.String chatServer -> chatServer
    java.lang.String userServer -> userServer
    java.lang.String DEFAULT_SANDBOX_IM -> DEFAULT_SANDBOX_IM
    java.lang.String DEFAULT_SANDBOX_REST -> DEFAULT_SANDBOX_REST
    java.lang.String sandboxIM -> sandboxIM
    java.lang.String sandboxRest -> sandboxRest
    com.easemob.chat.EMChatConfig$EMEnvMode envMode -> envMode
    boolean debugMode -> debugMode
    boolean debugTrafficMode -> debugTrafficMode
    com.easemob.chat.EMChatConfig instance -> instance
    com.easemob.chat.EMChatConfig getInstance() -> getInstance
    boolean isDebugTrafficMode() -> isDebugTrafficMode
    boolean loadConfig(android.content.Context) -> loadConfig
    void printConfig() -> printConfig
    java.lang.String getDomain() -> getDomain
    android.content.Context getApplicationContext() -> getApplicationContext
    java.lang.String getStorageUrl() -> getStorageUrl
    boolean getIsHttps() -> getIsHttps
    java.lang.String getHttpHost() -> getHttpHost
    void setStunServerAddress(java.util.List) -> setStunServerAddress
    com.easemob.chat.EMTransportAddress[] getStunServerAddress() -> getStunServerAddress
    void setSandboxIMServer(java.lang.String) -> setSandboxIMServer
    void setSandboxRestServer(java.lang.String) -> setSandboxRestServer
    void setEnv(com.easemob.chat.EMChatConfig$EMEnvMode) -> setEnv
    com.easemob.chat.EMChatConfig$EMEnvMode getEnvMode() -> getEnvMode
com.easemob.chat.EMChatConfig$EMEnvMode -> com.easemob.chat.EMChatConfig$EMEnvMode:
    com.easemob.chat.EMChatConfig$EMEnvMode EMSandboxMode -> EMSandboxMode
    com.easemob.chat.EMChatConfig$EMEnvMode EMProductMode -> EMProductMode
    com.easemob.chat.EMChatConfig$EMEnvMode[] $VALUES -> $VALUES
    com.easemob.chat.EMChatConfig$EMEnvMode[] values() -> values
    com.easemob.chat.EMChatConfig$EMEnvMode valueOf(java.lang.String) -> valueOf
com.easemob.chat.EMChatDB -> com.easemob.chat.EMChatDB:
    java.lang.String TAG -> TAG
    com.easemob.chat.EMChatDB instance -> instance
    void initDB(java.lang.String) -> initDB
    com.easemob.chat.EMChatDB getInstance() -> getInstance
    void closeDatabase() -> closeDatabase
    boolean saveMessage(com.easemob.chat.EMMessage) -> saveMessage
    void deleteMessage(java.lang.String) -> deleteMessage
    java.util.List findAllParticipantsWithMsg() -> findAllParticipantsWithMsg
    java.util.List findAllGroupsWithMsg() -> findAllGroupsWithMsg
    java.util.List findGroupMessages(java.lang.String) -> findGroupMessages
    java.util.List findGroupMessages(java.lang.String,java.lang.String,int) -> findGroupMessages
    java.util.List findMessages(java.lang.String) -> findMessages
    java.util.List findMessages(java.lang.String,java.lang.String,int) -> findMessages
    void deleteConversions(java.lang.String) -> deleteConversions
    void updateMessageAck(java.lang.String,boolean) -> updateMessageAck
    void updateMessageDelivered(java.lang.String,boolean) -> updateMessageDelivered
    void updateMessage(java.lang.String,android.content.ContentValues) -> updateMessage
    java.util.Map loadAllGroups() -> loadAllGroups
    com.easemob.chat.EMGroup loadGroup(java.lang.String) -> loadGroup
    void updateGroup(com.easemob.chat.EMGroup) -> updateGroup
    void deleteGroup(java.lang.String) -> deleteGroup
    void deleteGroupConversions(java.lang.String) -> deleteGroupConversions
    boolean importMessage(com.easemob.chat.EMMessage) -> importMessage
    java.util.List getConversationsUnread() -> getConversationsUnread
    void saveToken(java.lang.String,com.easemob.chat.core.b$a) -> saveToken
    com.easemob.chat.core.b$a getToken(java.lang.String) -> getToken
com.easemob.chat.EMChatManager -> com.easemob.chat.EMChatManager:
    java.lang.String TAG -> TAG
    java.lang.String NEW_MSG_BROADCAST -> NEW_MSG_BROADCAST
    java.lang.String READ_ACK_MSG_BROADCAST -> READ_ACK_MSG_BROADCAST
    java.lang.String DELIVERY_ACK_MSG_BROADCAST -> DELIVERY_ACK_MSG_BROADCAST
    java.lang.String CONTACT_INVITE_EVENT_BROADCAST -> CONTACT_INVITE_EVENT_BROADCAST
    java.lang.String OFFLINE_MSG_BROADCAST -> OFFLINE_MSG_BROADCAST
    java.lang.String INCOMING_VOICE_CALL_BROADCAST -> INCOMING_VOICE_CALL_BROADCAST
    java.lang.String CMD_MSG_BROADCAST -> CMD_MSG_BROADCAST
    com.easemob.chat.EMChatManager instance -> instance
    org.jivesoftware.smack.ChatManager xmppChatManager -> xmppChatManager
    com.easemob.chat.core.XmppConnectionManager xmppConnectionManager -> xmppConnectionManager
    com.easemob.chat.EMChatManager$EMChatManagerListener chatManagerListener -> chatManagerListener
    com.easemob.chat.ChatListener chatListener -> chatListener
    com.easemob.chat.GroupChatListener groupChatListener -> groupChatListener
    com.easemob.chat.RecvAckListener recvAckListener -> recvAckListener
    java.util.Map chats -> chats
    java.util.List connectionListeners -> connectionListeners
    java.util.List newConnectionListeners -> newConnectionListeners
    android.os.Handler handler -> handler
    com.easemob.chat.EMChatManager$XmppConnectionListener xmppConnectionListener -> xmppConnectionListener
    android.content.Context applicationContext -> applicationContext
    com.easemob.chat.EMNotifier notifier -> notifier
    com.easemob.util.CryptoUtils cryptoUtils -> cryptoUtils
    com.easemob.chat.EncryptProvider encryptProvider -> encryptProvider
    java.util.concurrent.ExecutorService threadPool -> threadPool
    com.easemob.chat.EMChatOptions chatOptions -> chatOptions
    java.util.ArrayList offlineRosterPresenceList -> offlineRosterPresenceList
    java.util.ArrayList offlineMessagesList -> offlineMessagesList
    java.util.ArrayList offlineCmdMessagesList -> offlineCmdMessagesList
    java.util.concurrent.ExecutorService msgCountThreadPool -> msgCountThreadPool
    boolean stopService -> stopService
    void login(java.lang.String,java.lang.String,com.easemob.EMCallBack) -> login
    void logout() -> logout
    void logout(com.easemob.EMCallBack) -> logout
    void changePasswordOnServer(java.lang.String) -> changePasswordOnServer
    void createAccountOnServer(java.lang.String,java.lang.String) -> createAccountOnServer
    boolean isConnected() -> isConnected
    com.easemob.chat.EMChatManager getInstance() -> getInstance
    com.easemob.chat.EMChatManager onInit() -> onInit
    void onNewConnectionCreated(com.easemob.chat.core.XmppConnectionManager) -> onNewConnectionCreated
    void onAppInited() -> onAppInited
    void addPacketListeners(org.jivesoftware.smack.XMPPConnection) -> addPacketListeners
    void init(com.easemob.chat.core.XmppConnectionManager) -> init
    void processOfflinePresenceMessages() -> processOfflinePresenceMessages
    void processOfflineCmdMessages() -> processOfflineCmdMessages
    void processOfflineMessages() -> processOfflineMessages
    void processRosterPresence(org.jivesoftware.smack.packet.Presence) -> processRosterPresence
    void acceptInvitation(java.lang.String,boolean) -> acceptInvitation
    void acceptInvitation(java.lang.String) -> acceptInvitation
    void refuseInvitation(java.lang.String) -> refuseInvitation
    void sendMessage(com.easemob.chat.EMMessage) -> sendMessage
    void sendMessage(com.easemob.chat.EMMessage,com.easemob.EMCallBack) -> sendMessage
    void sendGroupMessage(com.easemob.chat.EMMessage,com.easemob.EMCallBack) -> sendGroupMessage
    void notifyMessage(com.easemob.chat.EMMessage) -> notifyMessage
    void broadcastMessage(com.easemob.chat.EMMessage) -> broadcastMessage
    void notifiyReadAckMessage(java.lang.String,java.lang.String) -> notifiyReadAckMessage
    void notifyDeliveryAckMessage(java.lang.String,java.lang.String) -> notifyDeliveryAckMessage
    void notifyIncomingCall(java.lang.String) -> notifyIncomingCall
    java.lang.String getNewMessageBroadcastAction() -> getNewMessageBroadcastAction
    java.lang.String getCmdMessageBroadcastAction() -> getCmdMessageBroadcastAction
    java.lang.String getAckMessageBroadcastAction() -> getAckMessageBroadcastAction
    java.lang.String getDeliveryAckMessageBroadcastAction() -> getDeliveryAckMessageBroadcastAction
    java.lang.String getContactInviteEventBroadcastAction() -> getContactInviteEventBroadcastAction
    java.lang.String getOfflineMessageBroadcastAction() -> getOfflineMessageBroadcastAction
    java.lang.String getIncomingVoiceCallBroadcastAction() -> getIncomingVoiceCallBroadcastAction
    java.lang.String getBroadcastSuffix() -> getBroadcastSuffix
    void ackMessageRead(java.lang.String,java.lang.String) -> ackMessageRead
    void setMessageListened(com.easemob.chat.EMMessage) -> setMessageListened
    void checkConnection() -> checkConnection
    void addConnectionListener(com.easemob.chat.ConnectionListener) -> addConnectionListener
    void addConnectionListener(com.easemob.EMConnectionListener) -> addConnectionListener
    void removeConnectionListener(com.easemob.chat.ConnectionListener) -> removeConnectionListener
    void removeConnectionListener(com.easemob.EMConnectionListener) -> removeConnectionListener
    com.easemob.chat.EMMessage getMessage(java.lang.String) -> getMessage
    void addMessage(com.easemob.chat.EMMessage) -> addMessage
    void addMessage(com.easemob.chat.EMMessage,boolean) -> addMessage
    com.easemob.chat.EMConversation getConversation(java.lang.String) -> getConversation
    com.easemob.chat.EMConversation getConversation(java.lang.String,boolean) -> getConversation
    boolean deleteConversation(java.lang.String) -> deleteConversation
    void deleteAllConversation() -> deleteAllConversation
    void resetAllUnreadMsgCount() -> resetAllUnreadMsgCount
    boolean deleteConversation(java.lang.String,boolean) -> deleteConversation
    boolean clearConversation(java.lang.String) -> clearConversation
    void loadAllConversations(com.easemob.EMCallBack) -> loadAllConversations
    void loadAllConversations(com.easemob.EMCallBack,int) -> loadAllConversations
    void loadAllConversations() -> loadAllConversations
    java.util.Hashtable getAllConversations() -> getAllConversations
    int getUnreadMsgsCount() -> getUnreadMsgsCount
    void activityResumed() -> activityResumed
    void saveMessage(com.easemob.chat.EMMessage) -> saveMessage
    void saveMessage(com.easemob.chat.EMMessage,boolean) -> saveMessage
    boolean updateMessageBody(com.easemob.chat.EMMessage) -> updateMessageBody
    java.util.List getContactUserNames() -> getContactUserNames
    java.lang.String getCurrentUser() -> getCurrentUser
    com.easemob.chat.EMChatOptions getChatOptions() -> getChatOptions
    void setChatOptions(com.easemob.chat.EMChatOptions) -> setChatOptions
    void setEncryptProvider(com.easemob.chat.EncryptProvider) -> setEncryptProvider
    com.easemob.chat.EncryptProvider getEncryptProvider() -> getEncryptProvider
    void addVoiceCallStateChangeListener(com.easemob.chat.EMCallStateChangeListener) -> addVoiceCallStateChangeListener
    void makeVoiceCall(java.lang.String) -> makeVoiceCall
    void answerCall() -> answerCall
    void rejectCall() -> rejectCall
    void endCall() -> endCall
    com.easemob.util.CryptoUtils getCryptoUtils() -> getCryptoUtils
    void doStartService() -> doStartService
    void doStopService() -> doStopService
    void onReconnectionSuccessful() -> onReconnectionSuccessful
    void asyncFetchMessage(com.easemob.chat.EMMessage) -> asyncFetchMessage
    java.lang.String importMessage(com.easemob.chat.EMMessage,boolean) -> importMessage
    boolean updateCurrentUserNick(java.lang.String) -> updateCurrentUserNick
    void initDB(java.lang.String) -> initDB
    void loadDB() -> loadDB
    java.lang.String getAccessToken() -> getAccessToken
    void notifySendMsgLocks() -> notifySendMsgLocks
    java.util.List getConversationsUnread() -> getConversationsUnread
    void access$100(com.easemob.chat.EMChatManager,org.jivesoftware.smack.packet.Presence) -> access$100
    java.util.ArrayList access$200(com.easemob.chat.EMChatManager) -> access$200
    java.util.List access$600(com.easemob.chat.EMChatManager) -> access$600
    com.easemob.util.CryptoUtils access$700(com.easemob.chat.EMChatManager) -> access$700
    java.util.Map access$800(com.easemob.chat.EMChatManager) -> access$800
    android.os.Handler access$900(com.easemob.chat.EMChatManager) -> access$900
    java.util.List access$1000(com.easemob.chat.EMChatManager) -> access$1000
    java.util.concurrent.ExecutorService access$1100(com.easemob.chat.EMChatManager) -> access$1100
    void access$1200(com.easemob.chat.EMChatManager) -> access$1200
    com.easemob.chat.EMChatOptions access$1300(com.easemob.chat.EMChatManager) -> access$1300
com.easemob.chat.EMChatManager$1 -> com.easemob.chat.EMChatManager$1:
    com.easemob.EMCallBack val$callback -> val$callback
    com.easemob.chat.EMChatManager this$0 -> this$0
    void onSuccess() -> onSuccess
    void onProgress(int,java.lang.String) -> onProgress
    void onError(int,java.lang.String) -> onError
com.easemob.chat.EMChatManager$10 -> com.easemob.chat.EMChatManager$10:
    com.easemob.chat.EMChatManager this$0 -> this$0
    void run() -> run
com.easemob.chat.EMChatManager$11 -> com.easemob.chat.EMChatManager$11:
    com.easemob.chat.EMChatManager this$0 -> this$0
    void run() -> run
com.easemob.chat.EMChatManager$2 -> com.easemob.chat.EMChatManager$2:
    com.easemob.EMCallBack val$callback -> val$callback
    com.easemob.chat.EMChatManager this$0 -> this$0
    void run() -> run
com.easemob.chat.EMChatManager$3 -> com.easemob.chat.EMChatManager$3:
    com.easemob.chat.EMChatManager this$0 -> this$0
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
com.easemob.chat.EMChatManager$4 -> com.easemob.chat.EMChatManager$4:
    com.easemob.chat.ConnectionListener val$listener -> val$listener
    com.easemob.chat.EMChatManager this$0 -> this$0
    void run() -> run
com.easemob.chat.EMChatManager$5 -> com.easemob.chat.EMChatManager$5:
    com.easemob.chat.ConnectionListener val$listener -> val$listener
    com.easemob.chat.EMChatManager this$0 -> this$0
    void run() -> run
com.easemob.chat.EMChatManager$6 -> com.easemob.chat.EMChatManager$6:
    com.easemob.EMConnectionListener val$listener -> val$listener
    com.easemob.chat.EMChatManager this$0 -> this$0
    void run() -> run
com.easemob.chat.EMChatManager$7 -> com.easemob.chat.EMChatManager$7:
    com.easemob.EMConnectionListener val$listener -> val$listener
    com.easemob.chat.EMChatManager this$0 -> this$0
    void run() -> run
com.easemob.chat.EMChatManager$8 -> com.easemob.chat.EMChatManager$8:
    com.easemob.chat.EMChatManager this$0 -> this$0
    byte[] encrypt(byte[],java.lang.String) -> encrypt
    byte[] decrypt(byte[],java.lang.String) -> decrypt
com.easemob.chat.EMChatManager$9 -> com.easemob.chat.EMChatManager$9:
    com.easemob.chat.EMChatManager this$0 -> this$0
    void run() -> run
com.easemob.chat.EMChatManager$ChatServiceConnection -> com.easemob.chat.EMChatManager$ChatServiceConnection:
    com.easemob.chat.EMChatManager this$0 -> this$0
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.easemob.chat.EMChatManager$EMChatManagerListener -> com.easemob.chat.EMChatManager$EMChatManagerListener:
    com.easemob.chat.EMChatManager this$0 -> this$0
    void chatCreated(org.jivesoftware.smack.Chat,boolean) -> chatCreated
com.easemob.chat.EMChatManager$SingleInvitationListener -> com.easemob.chat.EMChatManager$SingleInvitationListener:
    com.easemob.chat.EMChatManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
com.easemob.chat.EMChatManager$XmppConnectionListener -> com.easemob.chat.EMChatManager$XmppConnectionListener:
    com.easemob.chat.EMChatManager this$0 -> this$0
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectingIn(int) -> reconnectingIn
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
    void reconnectionSuccessful() -> reconnectionSuccessful
    void onConnectionSuccessful() -> onConnectionSuccessful
    void onConnecting() -> onConnecting
com.easemob.chat.EMChatManager$XmppConnectionListener$1 -> com.easemob.chat.EMChatManager$XmppConnectionListener$1:
    com.easemob.chat.EMChatManager$XmppConnectionListener this$1 -> this$1
    void run() -> run
com.easemob.chat.EMChatManager$XmppConnectionListener$2 -> com.easemob.chat.EMChatManager$XmppConnectionListener$2:
    com.easemob.chat.EMChatManager$XmppConnectionListener this$1 -> this$1
    void run() -> run
com.easemob.chat.EMChatManager$XmppConnectionListener$3 -> com.easemob.chat.EMChatManager$XmppConnectionListener$3:
    java.lang.Exception val$exception -> val$exception
    com.easemob.chat.EMChatManager$XmppConnectionListener this$1 -> this$1
    void run() -> run
com.easemob.chat.EMChatManager$XmppConnectionListener$4 -> com.easemob.chat.EMChatManager$XmppConnectionListener$4:
    java.lang.Exception val$exception -> val$exception
    com.easemob.chat.EMChatManager$XmppConnectionListener this$1 -> this$1
    void run() -> run
com.easemob.chat.EMChatManager$XmppConnectionListener$5 -> com.easemob.chat.EMChatManager$XmppConnectionListener$5:
    java.lang.Exception val$exception -> val$exception
    com.easemob.chat.EMChatManager$XmppConnectionListener this$1 -> this$1
    void run() -> run
com.easemob.chat.EMChatManager$XmppConnectionListener$6 -> com.easemob.chat.EMChatManager$XmppConnectionListener$6:
    java.lang.Exception val$exception -> val$exception
    com.easemob.chat.EMChatManager$XmppConnectionListener this$1 -> this$1
    void run() -> run
com.easemob.chat.EMChatManager$XmppConnectionListener$7 -> com.easemob.chat.EMChatManager$XmppConnectionListener$7:
    com.easemob.chat.EMChatManager$XmppConnectionListener this$1 -> this$1
    void run() -> run
com.easemob.chat.EMChatManager$XmppConnectionListener$8 -> com.easemob.chat.EMChatManager$XmppConnectionListener$8:
    com.easemob.chat.EMChatManager$XmppConnectionListener this$1 -> this$1
    void run() -> run
com.easemob.chat.EMChatOptions -> com.easemob.chat.EMChatOptions:
    boolean acceptInvitationAlways -> acceptInvitationAlways
    boolean useEncryption -> useEncryption
    boolean useRoster -> useRoster
    boolean noticedBySound -> noticedBySound
    boolean noticedByVibrate -> noticedByVibrate
    boolean notificationEnable -> notificationEnable
    boolean useSpeaker -> useSpeaker
    boolean requireReadAck -> requireReadAck
    boolean requireDeliveryAck -> requireDeliveryAck
    boolean requireServerAck -> requireServerAck
    boolean audioFileWithExt -> audioFileWithExt
    com.easemob.chat.OnMessageNotifyListener onMessageNotifyListener -> onMessageNotifyListener
    com.easemob.chat.OnNotificationClickListener onNotificationClickListener -> onNotificationClickListener
    boolean showNotification -> showNotification
    android.net.Uri ringUri -> ringUri
    java.util.List receiveNotNotifyGroupIds -> receiveNotNotifyGroupIds
    boolean autoConversationsLoaded -> autoConversationsLoaded
    boolean getRequireAck() -> getRequireAck
    void setRequireAck(boolean) -> setRequireAck
    boolean getRequireDeliveryAck() -> getRequireDeliveryAck
    void setRequireDeliveryAck(boolean) -> setRequireDeliveryAck
    boolean getNoticedBySound() -> getNoticedBySound
    void setNoticeBySound(boolean) -> setNoticeBySound
    boolean getNoticedByVibrate() -> getNoticedByVibrate
    void setNoticedByVibrate(boolean) -> setNoticedByVibrate
    boolean getNotificationEnable() -> getNotificationEnable
    void setNotificationEnable(boolean) -> setNotificationEnable
    boolean getNotifyBySoundAndVibrate() -> getNotifyBySoundAndVibrate
    void setNotifyBySoundAndVibrate(boolean) -> setNotifyBySoundAndVibrate
    boolean getUseSpeaker() -> getUseSpeaker
    void setUseSpeaker(boolean) -> setUseSpeaker
    void setUseEncryption(boolean) -> setUseEncryption
    boolean getUseEncryption() -> getUseEncryption
    boolean getUseRoster() -> getUseRoster
    void setUseRoster(boolean) -> setUseRoster
    boolean getAcceptInvitationAlways() -> getAcceptInvitationAlways
    void setAcceptInvitationAlways(boolean) -> setAcceptInvitationAlways
    boolean getRequireServerAck() -> getRequireServerAck
    boolean getAudioFileWithExt() -> getAudioFileWithExt
    void setAudioFileWithExt(boolean) -> setAudioFileWithExt
    void setRequireServerAck(boolean) -> setRequireServerAck
    void setNotifyText(com.easemob.chat.OnMessageNotifyListener) -> setNotifyText
    void setOnNotificationClickListener(com.easemob.chat.OnNotificationClickListener) -> setOnNotificationClickListener
    void setShowNotificationInBackgroud(boolean) -> setShowNotificationInBackgroud
    boolean isShowNotificationInBackgroud() -> isShowNotificationInBackgroud
    void setNotifyRingUri(android.net.Uri) -> setNotifyRingUri
    android.net.Uri getNotifyRingUri() -> getNotifyRingUri
    void setReceiveNotNoifyGroup(java.util.List) -> setReceiveNotNoifyGroup
    java.util.List getReceiveNoNotifyGroup() -> getReceiveNoNotifyGroup
    void setAutoConversatonsLoaded(boolean) -> setAutoConversatonsLoaded
    boolean getAutoConversationsLoaded() -> getAutoConversationsLoaded
com.easemob.chat.EMChatService -> com.easemob.chat.EMChatService:
    java.lang.String TAG -> TAG
    android.os.IBinder mBinder -> mBinder
    void onCreate() -> onCreate
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    void onDestroy() -> onDestroy
    android.os.IBinder onBind(android.content.Intent) -> onBind
    boolean onUnbind(android.content.Intent) -> onUnbind
com.easemob.chat.EMChatService$LocalBinder -> com.easemob.chat.EMChatService$LocalBinder:
    com.easemob.chat.EMChatService this$0 -> this$0
    com.easemob.chat.EMChatService getService() -> getService
com.easemob.chat.EMCmdManager -> com.easemob.chat.EMCmdManager:
    java.lang.String TAG -> TAG
    com.easemob.chat.EMCmdManager instance -> instance
    java.util.List cmdProcessors -> cmdProcessors
    com.easemob.chat.EMCmdManager getInstance() -> getInstance
    void addCmdProcessor(com.easemob.chat.CmdMsgProcessor) -> addCmdProcessor
    void processCmd(com.easemob.chat.EMMessage) -> processCmd
com.easemob.chat.EMContact -> com.easemob.chat.EMContact:
    java.lang.String eid -> eid
    java.lang.String username -> username
    java.lang.String nick -> nick
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void setUsername(java.lang.String) -> setUsername
    java.lang.String getUsername() -> getUsername
    void setNick(java.lang.String) -> setNick
    java.lang.String getNick() -> getNick
    int compare(com.easemob.chat.EMContact) -> compare
    java.lang.String toString() -> toString
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String getEid() -> getEid
    void setEid(java.lang.String) -> setEid
com.easemob.chat.EMContact$1 -> com.easemob.chat.EMContact$1:
    com.easemob.chat.EMContact createFromParcel(android.os.Parcel) -> createFromParcel
    com.easemob.chat.EMContact[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.easemob.chat.EMContactListener -> com.easemob.chat.EMContactListener:
    void onContactAdded(java.util.List) -> onContactAdded
    void onContactDeleted(java.util.List) -> onContactDeleted
    void onContactInvited(java.lang.String,java.lang.String) -> onContactInvited
    void onContactAgreed(java.lang.String) -> onContactAgreed
    void onContactRefused(java.lang.String) -> onContactRefused
com.easemob.chat.EMContactManager -> com.easemob.chat.EMContactManager:
    java.lang.String TAG -> TAG
    java.util.Map contactTable -> contactTable
    com.easemob.chat.EMRosterListener rosterListener -> rosterListener
    org.jivesoftware.smack.Roster roster -> roster
    com.easemob.chat.RosterStorageImpl rosterStorage -> rosterStorage
    com.easemob.chat.EMContactManager instance -> instance
    java.lang.String black_list_name -> black_list_name
    boolean enableRosterVersion -> enableRosterVersion
    com.easemob.chat.EMContactListener contactListener -> contactListener
    java.util.Set deleteContactsSet -> deleteContactsSet
    java.util.List blackList -> blackList
    boolean hasGetBlacklist -> hasGetBlacklist
    java.lang.String BROADCAST_CONTACT_CHANGED_ACTION -> BROADCAST_CONTACT_CHANGED_ACTION
    com.easemob.chat.core.XmppConnectionManager xmppConnectionManager -> xmppConnectionManager
    android.content.Context context -> context
    com.easemob.chat.EMContactManager getInstance() -> getInstance
    void init(android.content.Context,com.easemob.chat.core.XmppConnectionManager) -> init
    void addContact(java.lang.String,java.lang.String) -> addContact
    void deleteContact(java.lang.String) -> deleteContact
    void addContactInternal(com.easemob.chat.EMContact) -> addContactInternal
    void deleteContactInternal(java.lang.String) -> deleteContactInternal
    com.easemob.chat.EMContact getContactByUserName(java.lang.String) -> getContactByUserName
    void removeContactFromRoster(java.lang.String) -> removeContactFromRoster
    void removeContactByUsername(java.lang.String) -> removeContactByUsername
    void reset() -> reset
    org.jivesoftware.smack.RosterStorage getRosterStorage(android.content.Context) -> getRosterStorage
    java.util.List getRosterUserNames() -> getRosterUserNames
    void addContactToRosterThroughPresence(java.lang.String,java.lang.String) -> addContactToRosterThroughPresence
    java.lang.String getBareEidFromUserName(java.lang.String) -> getBareEidFromUserName
    java.lang.String getEidFromUserName(java.lang.String) -> getEidFromUserName
    java.lang.String getUserNameFromEid(java.lang.String) -> getUserNameFromEid
    java.lang.String getEidFromGroupId(java.lang.String) -> getEidFromGroupId
    java.lang.String getGroupIdFromEid(java.lang.String) -> getGroupIdFromEid
    java.lang.String getCurrentUserFullJid() -> getCurrentUserFullJid
    java.util.List getContactUserNames() -> getContactUserNames
    void setContactListener(com.easemob.chat.EMContactListener) -> setContactListener
    void removeContactListener() -> removeContactListener
    void addUserToBlackList(java.lang.String,boolean) -> addUserToBlackList
    void deleteUserFromBlackList(java.lang.String) -> deleteUserFromBlackList
    java.util.List getBlackListUsernames() -> getBlackListUsernames
    java.util.List getBlackListUsernamesFromServer() -> getBlackListUsernamesFromServer
    void saveBlackList(java.util.List) -> saveBlackList
    void addToPrivacyList(java.lang.String,boolean) -> addToPrivacyList
    void deleteFromPrivacyList(java.lang.String) -> deleteFromPrivacyList
    java.lang.String getContactChangeAction() -> getContactChangeAction
    void checkConnection() -> checkConnection
    void loadContacts() -> loadContacts
com.easemob.chat.EMConversation -> com.easemob.chat.EMConversation:
    java.lang.String TAG -> TAG
    java.util.List messages -> messages
    int unreadMsgCount -> unreadMsgCount
    java.lang.String username -> username
    boolean isGroup -> isGroup
    com.easemob.chat.EMContact opposite -> opposite
    void addMessage(com.easemob.chat.EMMessage) -> addMessage
    void addMessage(com.easemob.chat.EMMessage,boolean) -> addMessage
    void saveUnreadMsgCount(int) -> saveUnreadMsgCount
    void deleteUnreadMsgCountRecord() -> deleteUnreadMsgCountRecord
    int getUnreadMsgCount() -> getUnreadMsgCount
    void resetUnsetMsgCount() -> resetUnsetMsgCount
    void resetUnreadMsgCount() -> resetUnreadMsgCount
    int getMsgCount() -> getMsgCount
    com.easemob.chat.EMMessage getMessage(int) -> getMessage
    java.util.List loadMoreMsgFromDB(java.lang.String,int) -> loadMoreMsgFromDB
    java.util.List loadMoreGroupMsgFromDB(java.lang.String,int) -> loadMoreGroupMsgFromDB
    com.easemob.chat.EMMessage getMessage(java.lang.String) -> getMessage
    java.util.List getAllMessages() -> getAllMessages
    int getMessagePosition(com.easemob.chat.EMMessage) -> getMessagePosition
    java.lang.String getUserName() -> getUserName
    void removeMessage(java.lang.String) -> removeMessage
    boolean getIsGroup() -> getIsGroup
    boolean isGroup() -> isGroup
    void setGroup(boolean) -> setGroup
    com.easemob.chat.EMMessage getLastMessage() -> getLastMessage
    void clear() -> clear
    java.lang.String access$000(com.easemob.chat.EMConversation) -> access$000
com.easemob.chat.EMConversation$1 -> com.easemob.chat.EMConversation$1:
    int val$count -> val$count
    com.easemob.chat.EMConversation this$0 -> this$0
    void run() -> run
com.easemob.chat.EMConversation$2 -> com.easemob.chat.EMConversation$2:
    com.easemob.chat.EMConversation this$0 -> this$0
    void run() -> run
com.easemob.chat.EMConversationManager -> com.easemob.chat.EMConversationManager:
    java.lang.String TAG -> TAG
    int DEFAULT_LOAD_MESSAGE_COUNT -> DEFAULT_LOAD_MESSAGE_COUNT
    com.easemob.chat.EMConversationManager instance -> instance
    java.util.Hashtable allMessages -> allMessages
    java.util.Hashtable conversations -> conversations
    boolean allConversationsLoaded -> allConversationsLoaded
    com.easemob.chat.EMConversationManager getInstance() -> getInstance
    void loadAllConversations() -> loadAllConversations
    void syncLoadAllConversations(com.easemob.EMCallBack,int) -> syncLoadAllConversations
    void loadAllConversations(int) -> loadAllConversations
    void loadAllConversations(com.easemob.EMCallBack,int) -> loadAllConversations
    void loadAllConversations(com.easemob.EMCallBack) -> loadAllConversations
    com.easemob.chat.EMConversation getConversation(java.lang.String) -> getConversation
    com.easemob.chat.EMConversation getConversation(java.lang.String,boolean) -> getConversation
    boolean deleteConversation(java.lang.String) -> deleteConversation
    boolean deleteConversation(java.lang.String,boolean) -> deleteConversation
    void deleteAllConversations() -> deleteAllConversations
    void resetAllUnreadMsgCount() -> resetAllUnreadMsgCount
    boolean clearConversation(java.lang.String) -> clearConversation
    java.util.Hashtable getAllConversations() -> getAllConversations
    com.easemob.chat.EMMessage getMessage(java.lang.String) -> getMessage
    void addMessage(com.easemob.chat.EMMessage) -> addMessage
    void addMessage(com.easemob.chat.EMMessage,boolean) -> addMessage
    void saveMessage(com.easemob.chat.EMMessage) -> saveMessage
    void saveMessage(com.easemob.chat.EMMessage,boolean) -> saveMessage
    int getUnreadMsgsCount() -> getUnreadMsgsCount
    java.util.List getConversationsUnread() -> getConversationsUnread
    void clear() -> clear
com.easemob.chat.EMConversationManager$1 -> com.easemob.chat.EMConversationManager$1:
    com.easemob.EMCallBack val$callback -> val$callback
    int val$initMessagesToBeLoaded -> val$initMessagesToBeLoaded
    com.easemob.chat.EMConversationManager this$0 -> this$0
    void run() -> run
com.easemob.chat.EMEncryptUtils -> com.easemob.chat.EMEncryptUtils:
    java.lang.String TAG -> TAG
    java.lang.String encryptMessage(java.lang.String,java.lang.String) -> encryptMessage
    java.lang.String decryptMessage(java.lang.String,java.lang.String) -> decryptMessage
    java.lang.String encryptFile(java.lang.String,java.lang.String) -> encryptFile
    void decryptFile(java.lang.String,java.lang.String) -> decryptFile
com.easemob.chat.EMGroup -> com.easemob.chat.EMGroup:
    java.lang.String description -> description
    java.lang.String owner -> owner
    java.util.ArrayList members -> members
    long lastModifiedTime -> lastModifiedTime
    boolean isPublic -> isPublic
    boolean allowInvites -> allowInvites
    boolean membersOnly -> membersOnly
    int maxUsers -> maxUsers
    int affiliationsCount -> affiliationsCount
    boolean isMsgBlocked -> isMsgBlocked
    java.lang.String getDescription() -> getDescription
    void setDescription(java.lang.String) -> setDescription
    java.lang.String getOwner() -> getOwner
    void setOwner(java.lang.String) -> setOwner
    void addMember(java.lang.String) -> addMember
    void removeMember(java.lang.String) -> removeMember
    java.util.List getMembers() -> getMembers
    void setMembers(java.util.List) -> setMembers
    java.lang.String getGroupId() -> getGroupId
    void setGroupId(java.lang.String) -> setGroupId
    java.lang.String getGroupName() -> getGroupName
    void setGroupName(java.lang.String) -> setGroupName
    boolean isPublic() -> isPublic
    void setIsPublic(boolean) -> setIsPublic
    boolean isAllowInvites() -> isAllowInvites
    boolean isMembersOnly() -> isMembersOnly
    int getMaxUsers() -> getMaxUsers
    void setMaxUsers(int) -> setMaxUsers
    int getAffiliationsCount() -> getAffiliationsCount
    void setAffiliationsCount(int) -> setAffiliationsCount
    boolean getMsgBlocked() -> getMsgBlocked
    java.lang.String toString() -> toString
    android.graphics.Bitmap getGroupAvator() -> getGroupAvator
    void copyGroup(com.easemob.chat.EMGroup) -> copyGroup
    long getLastModifiedTime() -> getLastModifiedTime
    void setLastModifiedTime(long) -> setLastModifiedTime
    void setPublic(boolean) -> setPublic
com.easemob.chat.EMGroupInfo -> com.easemob.chat.EMGroupInfo:
    long serialVersionUID -> serialVersionUID
    java.lang.String groupId -> groupId
    java.lang.String groupName -> groupName
    java.lang.String getGroupId() -> getGroupId
    void setGroupId(java.lang.String) -> setGroupId
    java.lang.String getGroupName() -> getGroupName
    void setGroupName(java.lang.String) -> setGroupName
    java.lang.String toString() -> toString
com.easemob.chat.EMGroupManager -> com.easemob.chat.EMGroupManager:
    java.lang.String MUC_NS_USER -> MUC_NS_USER
    java.lang.String TAG -> TAG
    java.lang.String PERMISSION_ERROR_ADD -> PERMISSION_ERROR_ADD
    java.lang.String PERMISSION_ERROR_REMOVE -> PERMISSION_ERROR_REMOVE
    java.lang.String PERMISSION_ERROR_DELETE -> PERMISSION_ERROR_DELETE
    java.lang.String PERMISSION_ERROR -> PERMISSION_ERROR
    int DEFAULT_MAX_USERS -> DEFAULT_MAX_USERS
    java.util.Map allGroups -> allGroups
    com.easemob.chat.core.XmppConnectionManager xmppConnectionManager -> xmppConnectionManager
    java.util.Map multiUserChats -> multiUserChats
    com.easemob.chat.EMGroupManager instance -> instance
    android.content.Context appContext -> appContext
    java.util.ArrayList groupChangeListeners -> groupChangeListeners
    boolean autoAcceptInvitation -> autoAcceptInvitation
    java.util.ArrayList offlineGroupEvents -> offlineGroupEvents
    com.easemob.chat.EMGroupManager$MucApplyListener applyListener -> applyListener
    boolean allGroupLoaded -> allGroupLoaded
    java.util.concurrent.ExecutorService threadPool -> threadPool
    java.lang.Object mutex -> mutex
    boolean receivedQuery -> receivedQuery
    com.easemob.chat.EMGroupManager$MUCInvitationListener invitationListener -> invitationListener
    com.easemob.chat.EMGroupManager getInstance() -> getInstance
    void init(com.easemob.chat.core.XmppConnectionManager) -> init
    void syncLoadGroups(com.easemob.EMCallBack) -> syncLoadGroups
    void loadAllGroups(com.easemob.EMCallBack) -> loadAllGroups
    java.util.List getAllGroups() -> getAllGroups
    com.easemob.chat.EMGroup getGroup(java.lang.String) -> getGroup
    void loadAllGroups() -> loadAllGroups
    void loadGroups() -> loadGroups
    void joinGroupsAfterLogin() -> joinGroupsAfterLogin
    java.lang.String generateGroupId() -> generateGroupId
    com.easemob.chat.EMGroup createPublicGroup(java.lang.String,java.lang.String,java.lang.String[],boolean) -> createPublicGroup
    java.lang.String[] filterOwnerFromMembers(java.lang.String,java.lang.String[]) -> filterOwnerFromMembers
    com.easemob.chat.EMGroup createPublicGroup(java.lang.String,java.lang.String,java.lang.String[],boolean,int) -> createPublicGroup
    com.easemob.chat.EMGroup createPrivateGroup(java.lang.String,java.lang.String,java.lang.String[]) -> createPrivateGroup
    com.easemob.chat.EMGroup createPrivateGroup(java.lang.String,java.lang.String,java.lang.String[],boolean) -> createPrivateGroup
    com.easemob.chat.EMGroup createPrivateGroup(java.lang.String,java.lang.String,java.lang.String[],boolean,int) -> createPrivateGroup
    java.util.Map getAllGroup() -> getAllGroup
    com.easemob.chat.EMGroup createGroup(java.lang.String,java.lang.String,java.lang.String[]) -> createGroup
    void createPrivateXmppMUC(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,int) -> createPrivateXmppMUC
    void createPublicXmppMUC(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,int) -> createPublicXmppMUC
    void exitAndDeleteGroup(java.lang.String) -> exitAndDeleteGroup
    org.jivesoftware.smackx.muc.MultiUserChat getMUC(java.lang.String) -> getMUC
    org.jivesoftware.smackx.muc.MultiUserChat getMUCWithoutJoin(java.lang.String) -> getMUCWithoutJoin
    void deleteMUC(java.lang.String) -> deleteMUC
    void leaveMUC(java.lang.String,java.lang.String) -> leaveMUC
    void leaveMUCRemoveMember(java.lang.String,java.lang.String) -> leaveMUCRemoveMember
    void deleteLocalGroup(java.lang.String) -> deleteLocalGroup
    void checkGroupOwner(com.easemob.chat.EMGroup,java.lang.String) -> checkGroupOwner
    void addUsersToGroup(java.lang.String,java.lang.String[]) -> addUsersToGroup
    void addUserToMUC(java.lang.String,java.lang.String,boolean) -> addUserToMUC
    void removeUserFromGroup(java.lang.String,java.lang.String) -> removeUserFromGroup
    void removeUserFromMUC(java.lang.String,java.lang.String) -> removeUserFromMUC
    void joinMUC(java.lang.String,java.lang.String) -> joinMUC
    void exitFromGroup(java.lang.String) -> exitFromGroup
    com.easemob.chat.EMGroup getGroupFromServer(java.lang.String) -> getGroupFromServer
    com.easemob.chat.EMGroup createOrUpdateLocalGroup(com.easemob.chat.EMGroup) -> createOrUpdateLocalGroup
    com.easemob.chat.EMGroup getMUC(java.lang.String,java.lang.String,boolean,boolean) -> getMUC
    java.util.List getGroupsFromServer() -> getGroupsFromServer
    void asyncGetGroupsFromServer(com.easemob.EMValueCallBack) -> asyncGetGroupsFromServer
    java.util.List getAllPublicGroupsFromServer() -> getAllPublicGroupsFromServer
    void asyncGetAllPublicGroupsFromServer(com.easemob.EMValueCallBack) -> asyncGetAllPublicGroupsFromServer
    void syncGroupsWithRemoteGroupList(java.util.List) -> syncGroupsWithRemoteGroupList
    void deleteAllLocalGroups() -> deleteAllLocalGroups
    java.util.List getJoinedMUCs(java.lang.String) -> getJoinedMUCs
    java.util.List getPublicMUCs(java.lang.String,java.lang.String) -> getPublicMUCs
    java.lang.String formatGroupName(java.lang.String) -> formatGroupName
    void logout() -> logout
    void clear() -> clear
    void removeMucs() -> removeMucs
    void retrieveUserMucsOnServer(java.lang.String) -> retrieveUserMucsOnServer
    void joinGroup(java.lang.String) -> joinGroup
    void changeGroupName(java.lang.String,java.lang.String) -> changeGroupName
    void addGroupChangeListener(com.easemob.chat.GroupChangeListener) -> addGroupChangeListener
    void removeGroupChangeListener(com.easemob.chat.GroupChangeListener) -> removeGroupChangeListener
    void acceptInvitation(java.lang.String) -> acceptInvitation
    void declineInvitation(java.lang.String,java.lang.String,java.lang.String) -> declineInvitation
    void acceptApplication(java.lang.String,java.lang.String) -> acceptApplication
    void declineApplication(java.lang.String,java.lang.String,java.lang.String) -> declineApplication
    void addMuc(java.lang.String,org.jivesoftware.smackx.muc.MultiUserChat) -> addMuc
    void removeMuc(java.lang.String) -> removeMuc
    void setAutoAcceptInvitation(boolean) -> setAutoAcceptInvitation
    void inviteUser(java.lang.String,java.lang.String[],java.lang.String) -> inviteUser
    void inviteUserMUC(java.lang.String,java.util.List,java.lang.String) -> inviteUserMUC
    void applyJoinToGroup(java.lang.String,java.lang.String) -> applyJoinToGroup
    void blockGroupMessage(java.lang.String) -> blockGroupMessage
    void unblockGroupMessage(java.lang.String) -> unblockGroupMessage
    void blockUser(java.lang.String,java.lang.String) -> blockUser
    void blockUserMuc(java.lang.String,java.lang.String) -> blockUserMuc
    void unblockUser(java.lang.String,java.lang.String) -> unblockUser
    void unblockUserMuc(java.lang.String,java.lang.String) -> unblockUserMuc
    java.util.List getBlockedUsers(java.lang.String) -> getBlockedUsers
    java.util.List getBlockedUsersMuc(java.lang.String) -> getBlockedUsersMuc
    void processOfflineMessages() -> processOfflineMessages
    void apply(org.jivesoftware.smack.packet.Message,java.lang.String,java.lang.String,java.lang.String) -> apply
    void decline(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> decline
    void accept(java.lang.String,java.lang.String,java.lang.String) -> accept
    void access$100(com.easemob.chat.EMGroupManager,com.easemob.EMCallBack) -> access$100
    java.lang.String access$200() -> access$200
    boolean access$400(com.easemob.chat.EMGroupManager) -> access$400
    java.lang.Object access$500(com.easemob.chat.EMGroupManager) -> access$500
    boolean access$602(com.easemob.chat.EMGroupManager,boolean) -> access$602
com.easemob.chat.EMGroupManager$1 -> com.easemob.chat.EMGroupManager$1:
    com.easemob.EMCallBack val$callback -> val$callback
    com.easemob.chat.EMGroupManager this$0 -> this$0
    void run() -> run
com.easemob.chat.EMGroupManager$2 -> com.easemob.chat.EMGroupManager$2:
    com.easemob.chat.EMGroupManager this$0 -> this$0
    void run() -> run
com.easemob.chat.EMGroupManager$3 -> com.easemob.chat.EMGroupManager$3:
    com.easemob.EMValueCallBack val$callback -> val$callback
    com.easemob.chat.EMGroupManager this$0 -> this$0
    void run() -> run
com.easemob.chat.EMGroupManager$4 -> com.easemob.chat.EMGroupManager$4:
    com.easemob.EMValueCallBack val$callback -> val$callback
    com.easemob.chat.EMGroupManager this$0 -> this$0
    void run() -> run
com.easemob.chat.EMGroupManager$5 -> com.easemob.chat.EMGroupManager$5:
    com.easemob.chat.EMGroupManager this$0 -> this$0
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
com.easemob.chat.EMGroupManager$6 -> com.easemob.chat.EMGroupManager$6:
    int[] $SwitchMap$com$easemob$chat$EMGroupManager$GroupEventType -> $SwitchMap$com$easemob$chat$EMGroupManager$GroupEventType
com.easemob.chat.EMGroupManager$GroupChangeEvent -> com.easemob.chat.EMGroupManager$GroupChangeEvent:
    java.lang.String groupId -> groupId
    java.lang.String groupName -> groupName
    java.lang.String inviterUserName -> inviterUserName
    java.lang.String reason -> reason
    com.easemob.chat.EMGroupManager$GroupEventType type -> type
    com.easemob.chat.EMGroupManager this$0 -> this$0
com.easemob.chat.EMGroupManager$GroupEventType -> com.easemob.chat.EMGroupManager$GroupEventType:
    com.easemob.chat.EMGroupManager$GroupEventType Invitate -> Invitate
    com.easemob.chat.EMGroupManager$GroupEventType Apply -> Apply
    com.easemob.chat.EMGroupManager$GroupEventType ApplicationAccept -> ApplicationAccept
    com.easemob.chat.EMGroupManager$GroupEventType ApplicationDeclind -> ApplicationDeclind
    com.easemob.chat.EMGroupManager$GroupEventType[] $VALUES -> $VALUES
    com.easemob.chat.EMGroupManager$GroupEventType[] values() -> values
    com.easemob.chat.EMGroupManager$GroupEventType valueOf(java.lang.String) -> valueOf
com.easemob.chat.EMGroupManager$MUCInvitationListener -> com.easemob.chat.EMGroupManager$MUCInvitationListener:
    com.easemob.chat.EMGroupManager this$0 -> this$0
    void invitationReceived(org.jivesoftware.smack.Connection,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.jivesoftware.smack.packet.Message) -> invitationReceived
com.easemob.chat.EMGroupManager$MUCPresenceListener -> com.easemob.chat.EMGroupManager$MUCPresenceListener:
    java.lang.String MUC_ELEMENT_NAME -> MUC_ELEMENT_NAME
    java.lang.String ITEM_DESTROY -> ITEM_DESTROY
    java.lang.String ITEM_EXITMUC -> ITEM_EXITMUC
    com.easemob.chat.EMGroupManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    void handleRoomDestroy(java.lang.String) -> handleRoomDestroy
    void handleUserRemove(java.lang.String) -> handleUserRemove
com.easemob.chat.EMGroupManager$MUCSearchIQ -> com.easemob.chat.EMGroupManager$MUCSearchIQ:
    com.easemob.chat.EMGroupManager this$0 -> this$0
    java.lang.String getChildElementXML() -> getChildElementXML
com.easemob.chat.EMGroupManager$MucApplyListener -> com.easemob.chat.EMGroupManager$MucApplyListener:
    java.lang.String TAG -> TAG
    com.easemob.chat.EMGroupManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
com.easemob.chat.EMGroupManager$MucUserStatusListener -> com.easemob.chat.EMGroupManager$MucUserStatusListener:
    java.lang.String roomJid -> roomJid
    com.easemob.chat.EMGroupManager this$0 -> this$0
    void adminGranted() -> adminGranted
    void adminRevoked() -> adminRevoked
    void banned(java.lang.String,java.lang.String) -> banned
    void kicked(java.lang.String,java.lang.String) -> kicked
    void membershipGranted() -> membershipGranted
    void membershipRevoked() -> membershipRevoked
    void moderatorGranted() -> moderatorGranted
    void moderatorRevoked() -> moderatorRevoked
    void ownershipGranted() -> ownershipGranted
    void ownershipRevoked() -> ownershipRevoked
    void voiceGranted() -> voiceGranted
    void voiceRevoked() -> voiceRevoked
com.easemob.chat.EMGroupManager$RoomQueryIQ -> com.easemob.chat.EMGroupManager$RoomQueryIQ:
    com.easemob.chat.EMGroupManager this$0 -> this$0
    java.lang.String getChildElementXML() -> getChildElementXML
com.easemob.chat.EMGroupManager$SearchPacketListener -> com.easemob.chat.EMGroupManager$SearchPacketListener:
    com.easemob.chat.EMGroupManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
com.easemob.chat.EMJingleStreamManager -> com.easemob.chat.EMJingleStreamManager:
    java.lang.String MEDIA_AUDIO -> MEDIA_AUDIO
    java.lang.String MEDIA_VIDIO -> MEDIA_VIDIO
    java.lang.String TAG -> TAG
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$CreatorEnum creator -> creator
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$SendersEnum senders -> senders
    java.util.List mediaNames -> mediaNames
    com.easemob.audio.AVNative avNative -> avNative
    java.util.List getMediaNames() -> getMediaNames
    boolean addDefaultMedia(com.xonami.javaBells.MediaType,java.lang.String) -> addDefaultMedia
    java.util.List createContentList(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$SendersEnum) -> createContentList
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension createContentPacketExtention(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$SendersEnum,java.lang.String) -> createContentPacketExtention
    java.util.List parseIncomingAndBuildMedia(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ,net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$SendersEnum) -> parseIncomingAndBuildMedia
    java.util.List parseIncomingAndBuildMedia(java.util.List,net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$SendersEnum) -> parseIncomingAndBuildMedia
    void startStream(com.easemob.chat.EMStreamParams) -> startStream
    void stopStream() -> stopStream
    boolean streamStarted() -> streamStarted
    java.lang.String access$000() -> access$000
com.easemob.chat.EMJingleStreamManager$1 -> com.easemob.chat.EMJingleStreamManager$1:
    com.easemob.chat.EMJingleStreamManager this$0 -> this$0
    void updateStatus(int) -> updateStatus
com.easemob.chat.EMMessage -> com.easemob.chat.EMMessage:
    java.lang.String TAG -> TAG
    com.easemob.chat.EMMessage$Type type -> type
    com.easemob.chat.EMMessage$Direct direct -> direct
    com.easemob.chat.EMMessage$Status status -> status
    com.easemob.chat.EMContact from -> from
    com.easemob.chat.EMContact to -> to
    com.easemob.chat.MessageBody body -> body
    java.lang.String msgId -> msgId
    boolean isAcked -> isAcked
    boolean isDelivered -> isDelivered
    long msgTime -> msgTime
    com.easemob.chat.EMMessage$ChatType chatType -> chatType
    int progress -> progress
    java.util.Hashtable attributes -> attributes
    boolean unread -> unread
    boolean offline -> offline
    boolean isListened -> isListened
    java.lang.String ATTR_ENCRYPTED -> ATTR_ENCRYPTED
    android.os.Parcelable$Creator CREATOR -> CREATOR
    com.easemob.chat.EMMessage$Type getType() -> getType
    com.easemob.chat.MessageBody getBody() -> getBody
    long getMsgTime() -> getMsgTime
    void setMsgTime(long) -> setMsgTime
    com.easemob.chat.EMMessage createSendMessage(com.easemob.chat.EMMessage$Type) -> createSendMessage
    com.easemob.chat.EMMessage createReceiveMessage(com.easemob.chat.EMMessage$Type) -> createReceiveMessage
    void addBody(com.easemob.chat.MessageBody) -> addBody
    java.lang.String getFrom() -> getFrom
    void setFrom(java.lang.String) -> setFrom
    void setTo(java.lang.String) -> setTo
    java.lang.String getTo() -> getTo
    java.lang.String getMsgId() -> getMsgId
    void setMsgId(java.lang.String) -> setMsgId
    void setReceipt(java.lang.String) -> setReceipt
    java.lang.String toString() -> toString
    void setAttribute(java.lang.String,boolean) -> setAttribute
    void setAttribute(java.lang.String,int) -> setAttribute
    void setAttribute(java.lang.String,java.lang.String) -> setAttribute
    boolean getBooleanAttribute(java.lang.String) -> getBooleanAttribute
    boolean getBooleanAttribute(java.lang.String,boolean) -> getBooleanAttribute
    int getIntAttribute(java.lang.String,int) -> getIntAttribute
    int getIntAttribute(java.lang.String) -> getIntAttribute
    java.lang.String getStringAttribute(java.lang.String) -> getStringAttribute
    java.lang.String getStringAttribute(java.lang.String,java.lang.String) -> getStringAttribute
    com.easemob.chat.EMMessage$ChatType getChatType() -> getChatType
    void setChatType(com.easemob.chat.EMMessage$ChatType) -> setChatType
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.Object clone() -> clone
    boolean isAcked() -> isAcked
    void setAcked(boolean) -> setAcked
    boolean isDelivered() -> isDelivered
    void setDelivered(boolean) -> setDelivered
    boolean isUnread() -> isUnread
    void setUnread(boolean) -> setUnread
    void setType(com.easemob.chat.EMMessage$Type) -> setType
    boolean isListened() -> isListened
    void setListened(boolean) -> setListened
com.easemob.chat.EMMessage$1 -> com.easemob.chat.EMMessage$1:
    com.easemob.chat.EMMessage createFromParcel(android.os.Parcel) -> createFromParcel
    com.easemob.chat.EMMessage[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.easemob.chat.EMMessage$ChatType -> com.easemob.chat.EMMessage$ChatType:
    com.easemob.chat.EMMessage$ChatType Chat -> Chat
    com.easemob.chat.EMMessage$ChatType GroupChat -> GroupChat
    com.easemob.chat.EMMessage$ChatType[] $VALUES -> $VALUES
    com.easemob.chat.EMMessage$ChatType[] values() -> values
    com.easemob.chat.EMMessage$ChatType valueOf(java.lang.String) -> valueOf
com.easemob.chat.EMMessage$Direct -> com.easemob.chat.EMMessage$Direct:
    com.easemob.chat.EMMessage$Direct SEND -> SEND
    com.easemob.chat.EMMessage$Direct RECEIVE -> RECEIVE
    com.easemob.chat.EMMessage$Direct[] $VALUES -> $VALUES
    com.easemob.chat.EMMessage$Direct[] values() -> values
    com.easemob.chat.EMMessage$Direct valueOf(java.lang.String) -> valueOf
com.easemob.chat.EMMessage$Status -> com.easemob.chat.EMMessage$Status:
    com.easemob.chat.EMMessage$Status SUCCESS -> SUCCESS
    com.easemob.chat.EMMessage$Status FAIL -> FAIL
    com.easemob.chat.EMMessage$Status INPROGRESS -> INPROGRESS
    com.easemob.chat.EMMessage$Status CREATE -> CREATE
    com.easemob.chat.EMMessage$Status[] $VALUES -> $VALUES
    com.easemob.chat.EMMessage$Status[] values() -> values
    com.easemob.chat.EMMessage$Status valueOf(java.lang.String) -> valueOf
com.easemob.chat.EMMessage$Type -> com.easemob.chat.EMMessage$Type:
    com.easemob.chat.EMMessage$Type TXT -> TXT
    com.easemob.chat.EMMessage$Type IMAGE -> IMAGE
    com.easemob.chat.EMMessage$Type VIDEO -> VIDEO
    com.easemob.chat.EMMessage$Type LOCATION -> LOCATION
    com.easemob.chat.EMMessage$Type VOICE -> VOICE
    com.easemob.chat.EMMessage$Type FILE -> FILE
    com.easemob.chat.EMMessage$Type CMD -> CMD
    com.easemob.chat.EMMessage$Type[] $VALUES -> $VALUES
    com.easemob.chat.EMMessage$Type[] values() -> values
    com.easemob.chat.EMMessage$Type valueOf(java.lang.String) -> valueOf
com.easemob.chat.EMMessageHandler -> com.easemob.chat.EMMessageHandler:
    java.lang.String TAG -> TAG
    com.easemob.chat.EMMessageHandler me -> me
    java.util.concurrent.ExecutorService sendThreadPool -> sendThreadPool
    com.easemob.chat.EMMessageHandler getInstance() -> getInstance
    void clear() -> clear
    void sendGroupMessage(com.easemob.chat.EMMessage,com.easemob.EMCallBack) -> sendGroupMessage
    void sendMessage(org.jivesoftware.smack.Chat,com.easemob.chat.EMMessage) -> sendMessage
    void sendMessage(org.jivesoftware.smack.Chat,com.easemob.chat.EMMessage,com.easemob.EMCallBack) -> sendMessage
    void asyncFetchMessage(com.easemob.chat.EMMessage) -> asyncFetchMessage
    void ackMessageRead(java.lang.String,java.lang.String,java.lang.String) -> ackMessageRead
    void updateMsgState(com.easemob.chat.EMMessage) -> updateMsgState
    void updateMsgBody(com.easemob.chat.EMMessage) -> updateMsgBody
    void notifySendMsgLocks() -> notifySendMsgLocks
    java.lang.String access$000() -> access$000
    void access$100(com.easemob.chat.EMMessageHandler,com.easemob.chat.EMMessage) -> access$100
    void access$200(com.easemob.chat.EMMessageHandler,com.easemob.chat.EMMessage) -> access$200
com.easemob.chat.EMMessageHandler$1 -> com.easemob.chat.EMMessageHandler$1:
    java.lang.String val$localThumbnailFilePath -> val$localThumbnailFilePath
    com.easemob.chat.EMMessage val$msg -> val$msg
    com.easemob.chat.FileMessageBody val$msgbody -> val$msgbody
    java.lang.String val$path -> val$path
    com.easemob.chat.EMMessageHandler this$0 -> this$0
    void onSuccess(java.lang.String) -> onSuccess
    void onError(java.lang.String) -> onError
    void onProgress(int) -> onProgress
com.easemob.chat.EMMessageUtils -> com.easemob.chat.EMMessageUtils:
    java.lang.String TAG -> TAG
    int checkMessageError(com.easemob.chat.EMMessage) -> checkMessageError
    void asyncCallback(com.easemob.EMCallBack,int,java.lang.String) -> asyncCallback
    java.lang.String getUniqueMessageId() -> getUniqueMessageId
com.easemob.chat.EMMessageUtils$1 -> com.easemob.chat.EMMessageUtils$1:
    com.easemob.EMCallBack val$callback -> val$callback
    int val$error -> val$error
    java.lang.String val$errorMsg -> val$errorMsg
    void run() -> run
com.easemob.chat.EMNotifier -> com.easemob.chat.EMNotifier:
    java.lang.String TAG -> TAG
    android.media.Ringtone ringtone -> ringtone
    java.lang.String[] msg_eng -> msg_eng
    java.lang.String[] msg_ch -> msg_ch
    int notifyID -> notifyID
    android.app.NotificationManager notificationManager -> notificationManager
    java.util.HashSet fromUsers -> fromUsers
    int notificationNum -> notificationNum
    android.content.Context appContext -> appContext
    java.lang.String appName -> appName
    java.lang.String packageName -> packageName
    java.lang.String[] msgs -> msgs
    long lastNotifiyTime -> lastNotifiyTime
    com.easemob.chat.EMNotifier instance -> instance
    com.easemob.chat.OnMessageNotifyListener onMessageNotifyListener -> onMessageNotifyListener
    com.easemob.chat.EMNotifier getInstance(android.content.Context) -> getInstance
    void stop() -> stop
    void resetNotificationCount() -> resetNotificationCount
    void notifyChatMsg(com.easemob.chat.EMMessage) -> notifyChatMsg
    void sendReadAckMsgBroadcast(java.lang.String,java.lang.String) -> sendReadAckMsgBroadcast
    void sendDeliveryAckMsgBroadcast(java.lang.String,java.lang.String) -> sendDeliveryAckMsgBroadcast
    void sendBroadcast(com.easemob.chat.EMMessage) -> sendBroadcast
    void sendNotification(com.easemob.chat.EMMessage) -> sendNotification
    void notifyOnNewMsg() -> notifyOnNewMsg
    void cancelNotificaton() -> cancelNotificaton
    void sendIncomingVoiceCallBroadcast(java.lang.String) -> sendIncomingVoiceCallBroadcast
com.easemob.chat.EMNotifier$1 -> com.easemob.chat.EMNotifier$1:
    com.easemob.chat.EMNotifier this$0 -> this$0
    void run() -> run
com.easemob.chat.EMNotifier$2 -> com.easemob.chat.EMNotifier$2:
    int[] $SwitchMap$com$easemob$chat$EMMessage$Type -> $SwitchMap$com$easemob$chat$EMMessage$Type
com.easemob.chat.EMPresenceHandler -> com.easemob.chat.EMPresenceHandler:
    java.lang.String TAG -> TAG
    com.easemob.chat.EMPresenceHandler me -> me
    com.easemob.chat.EMPresenceHandler getInstance() -> getInstance
    void acceptInvitation(java.lang.String,boolean) -> acceptInvitation
    void refuseInvitation(java.lang.String) -> refuseInvitation
    void processRosterPresence(org.jivesoftware.smack.packet.Presence) -> processRosterPresence
com.easemob.chat.EMReceiverJingleSession -> com.easemob.chat.EMReceiverJingleSession:
    java.lang.String TAG -> TAG
    java.util.List acceptedContent -> acceptedContent
    boolean isCallerUsingRelay -> isCallerUsingRelay
    boolean peerSendCallerRelay -> peerSendCallerRelay
    void closeSession(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason) -> closeSession
    void handleCallerRelay(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleCallerRelay
    void handleSessionAccept(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleSessionAccept
    void answerCall() -> answerCall
    void acceptContent() -> acceptContent
    void rejectCall() -> rejectCall
    void rejectSessionInitiate() -> rejectSessionInitiate
    void acceptSessionInitiate() -> acceptSessionInitiate
    void handleSessionInitiate(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleSessionInitiate
    void handleSessionTerminate(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleSessionTerminate
    void onConnectionConnected() -> onConnectionConnected
    boolean acceptCallFrom(java.lang.String) -> acceptCallFrom
    void onRelayCandidateSelected() -> onRelayCandidateSelected
    void onLocalCandidateSelected() -> onLocalCandidateSelected
com.easemob.chat.EMRosterListener -> com.easemob.chat.EMRosterListener:
    java.lang.String TAG -> TAG
    com.easemob.chat.EMContactManager contactManager -> contactManager
    org.jivesoftware.smack.Roster roster -> roster
    void entriesAdded(java.util.Collection) -> entriesAdded
    void entriesDeleted(java.util.Collection) -> entriesDeleted
    void entriesUpdated(java.util.Collection) -> entriesUpdated
    void presenceChanged(org.jivesoftware.smack.packet.Presence) -> presenceChanged
com.easemob.chat.EMSDKLocalTest -> com.easemob.chat.EMSDKLocalTest:
    long previousMsgTime -> previousMsgTime
    void addMsgs(java.lang.String,int) -> addMsgs
    void addConversations(int,int) -> addConversations
    com.easemob.chat.EMMessage createSentTextMsg(java.lang.String) -> createSentTextMsg
    com.easemob.chat.EMMessage createReceivedTextMsg(java.lang.String) -> createReceivedTextMsg
    long getNextMsgTime() -> getNextMsgTime
com.easemob.chat.EMSessionHandler -> com.easemob.chat.EMSessionHandler:
    com.easemob.chat.EMVoiceCallSession activeSession -> activeSession
    java.lang.String TAG -> TAG
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    com.easemob.chat.EMVoiceCallSession getActiveSession() -> getActiveSession
    void setActiveSession(com.easemob.chat.EMVoiceCallSession) -> setActiveSession
    boolean isGeneralJiq(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> isGeneralJiq
    boolean jiqAccepted(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> jiqAccepted
com.easemob.chat.EMSessionManager -> com.easemob.chat.EMSessionManager:
    java.lang.String TAG -> TAG
    com.easemob.chat.core.XmppConnectionManager xmppConnectionManager -> xmppConnectionManager
    android.content.Context appContext -> appContext
    java.lang.String PREF_KEY_LOGIN_USER -> PREF_KEY_LOGIN_USER
    java.lang.String PREF_KEY_LOGIN_PWD -> PREF_KEY_LOGIN_PWD
    com.easemob.chat.EMContact currentUser -> currentUser
    com.easemob.chat.EMSessionManager instance -> instance
    java.lang.String lastLoginUser -> lastLoginUser
    java.lang.String lastLoginPwd -> lastLoginPwd
    com.easemob.chat.core.HeartBeatReceiver heartbeatReceiver -> heartbeatReceiver
    android.app.PendingIntent heartbeatIntent -> heartbeatIntent
    int HEARTBEAT_INTERVAL -> HEARTBEAT_INTERVAL
    int WIFI_HEARTBEAT_INTERVAL -> WIFI_HEARTBEAT_INTERVAL
    boolean loginOngoing -> loginOngoing
    java.lang.Object loginLock -> loginLock
    com.easemob.chat.EMSessionManager getInstance(android.content.Context) -> getInstance
    com.easemob.chat.EMSessionManager getInstance() -> getInstance
    com.easemob.chat.EMSessionManager onInit() -> onInit
    void initXmppConnection(java.lang.String,java.lang.String) -> initXmppConnection
    void checkConnection() -> checkConnection
    void loadDB() -> loadDB
    void loginSync(java.lang.String,java.lang.String,boolean,com.easemob.EMCallBack) -> loginSync
    void login(java.lang.String,java.lang.String,boolean,com.easemob.EMCallBack) -> login
    void logout() -> logout
    void syncLogout() -> syncLogout
    void scheduleNextHeartBeat() -> scheduleNextHeartBeat
    void stopHeartbeatTimer() -> stopHeartbeatTimer
    java.lang.String getLastLoginUser() -> getLastLoginUser
    void setLastLoginUser(java.lang.String) -> setLastLoginUser
    java.lang.String getLastLoginPwd() -> getLastLoginPwd
    void clearLastLoginUser() -> clearLastLoginUser
    void clearLastLoginPwd() -> clearLastLoginPwd
    void setLastLoginPwd(java.lang.String) -> setLastLoginPwd
    boolean isConnected() -> isConnected
    com.easemob.chat.core.XmppConnectionManager getXmppConnectionManager() -> getXmppConnectionManager
    java.lang.String getLoginUserName() -> getLoginUserName
    void changePasswordXMPP(java.lang.String) -> changePasswordXMPP
    void createAccountXMPP(java.lang.String,java.lang.String) -> createAccountXMPP
    void createAccountRest(java.lang.String,java.lang.String) -> createAccountRest
    void access$000(com.easemob.chat.EMSessionManager,java.lang.String,java.lang.String,boolean,com.easemob.EMCallBack) -> access$000
com.easemob.chat.EMSessionManager$1 -> com.easemob.chat.EMSessionManager$1:
    java.lang.String val$username -> val$username
    java.lang.String val$password -> val$password
    boolean val$fromLoginLayout -> val$fromLoginLayout
    com.easemob.EMCallBack val$callback -> val$callback
    com.easemob.chat.EMSessionManager this$0 -> this$0
    void run() -> run
com.easemob.chat.EMSessionManager$2 -> com.easemob.chat.EMSessionManager$2:
    com.easemob.chat.EMSessionManager this$0 -> this$0
    void run() -> run
com.easemob.chat.EMStreamParams -> com.easemob.chat.EMStreamParams:
    java.lang.String remoteAddress -> remoteAddress
    java.lang.String localAddress -> localAddress
    int remotePort -> remotePort
    int localPort -> localPort
    short channelNumber -> channelNumber
com.easemob.chat.EMTransportAddress -> com.easemob.chat.EMTransportAddress:
    java.lang.String address -> address
    int port -> port
    com.easemob.chat.EMTransportAddress$EMTransportType type -> type
com.easemob.chat.EMTransportAddress$EMTransportType -> com.easemob.chat.EMTransportAddress$EMTransportType:
    com.easemob.chat.EMTransportAddress$EMTransportType EUdp -> EUdp
    com.easemob.chat.EMTransportAddress$EMTransportType ETcp -> ETcp
    com.easemob.chat.EMTransportAddress$EMTransportType[] $VALUES -> $VALUES
    com.easemob.chat.EMTransportAddress$EMTransportType[] values() -> values
    com.easemob.chat.EMTransportAddress$EMTransportType valueOf(java.lang.String) -> valueOf
com.easemob.chat.EMVoiceCallManager -> com.easemob.chat.EMVoiceCallManager:
    java.lang.String TAG -> TAG
    com.easemob.chat.EMVoiceCallManager instance -> instance
    org.ice4j.TransportAddress[] serverAddress -> serverAddress
    com.easemob.chat.EMSessionHandler incomingCallListener -> incomingCallListener
    com.easemob.chat.EMSessionHandler outgoingCallHandler -> outgoingCallHandler
    com.easemob.chat.EMCallStateChangeListener stateChangeListener -> stateChangeListener
    com.easemob.chat.EMVoiceCallManager$CallStateChangeListenerDelegate stateChangeListenerDelegate -> stateChangeListenerDelegate
    boolean inited -> inited
    com.easemob.chat.EMVoiceCallSession activeSession -> activeSession
    java.lang.Thread makingCallThread -> makingCallThread
    java.util.Timer callingTimer -> callingTimer
    boolean callWasEnded -> callWasEnded
    long CALLING_TIMEROUT -> CALLING_TIMEROUT
    void init() -> init
    com.easemob.chat.EMVoiceCallManager getInstance() -> getInstance
    boolean isActiveCallOngoing() -> isActiveCallOngoing
    com.easemob.chat.EMVoiceCallSession getActiveSession() -> getActiveSession
    com.easemob.chat.EMCallDirection getCallDirection() -> getCallDirection
    void addStateChangeListener(com.easemob.chat.EMCallStateChangeListener) -> addStateChangeListener
    org.ice4j.TransportAddress[] getStunServerAddresses() -> getStunServerAddresses
    void startListeningCall() -> startListeningCall
    void makeVoiceCall(java.lang.String) -> makeVoiceCall
    void syncMakeCall(java.lang.String) -> syncMakeCall
    void startCallingTimer() -> startCallingTimer
    void answerCall() -> answerCall
    void rejectCall() -> rejectCall
    void endCall() -> endCall
    void onCallRinging(com.easemob.chat.EMVoiceCallSession) -> onCallRinging
    void onJingleInitiateAction(com.easemob.chat.EMVoiceCallSession) -> onJingleInitiateAction
    void registerConnectionListener() -> registerConnectionListener
    void checkConnection() -> checkConnection
    com.easemob.chat.EMVoiceCallManager$CallStateChangeListenerDelegate access$100(com.easemob.chat.EMVoiceCallManager) -> access$100
    org.ice4j.TransportAddress[] access$200(com.easemob.chat.EMVoiceCallManager) -> access$200
    void access$300(com.easemob.chat.EMVoiceCallManager,java.lang.String) -> access$300
    com.easemob.chat.EMVoiceCallSession access$400(com.easemob.chat.EMVoiceCallManager) -> access$400
    com.easemob.chat.EMSessionHandler access$500(com.easemob.chat.EMVoiceCallManager) -> access$500
    com.easemob.chat.EMSessionHandler access$502(com.easemob.chat.EMVoiceCallManager,com.easemob.chat.EMSessionHandler) -> access$502
    void access$600(com.easemob.chat.EMVoiceCallManager) -> access$600
    java.lang.String access$700() -> access$700
    java.util.Timer access$800(com.easemob.chat.EMVoiceCallManager) -> access$800
    com.easemob.chat.EMVoiceCallSession access$402(com.easemob.chat.EMVoiceCallManager,com.easemob.chat.EMVoiceCallSession) -> access$402
    com.easemob.chat.EMCallStateChangeListener access$900(com.easemob.chat.EMVoiceCallManager) -> access$900
com.easemob.chat.EMVoiceCallManager$1 -> com.easemob.chat.EMVoiceCallManager$1:
    com.easemob.chat.EMVoiceCallManager this$0 -> this$0
    boolean jiqAccepted(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> jiqAccepted
    com.xonami.javaBells.JingleSession createJingleSession(java.lang.String,net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> createJingleSession
com.easemob.chat.EMVoiceCallManager$2 -> com.easemob.chat.EMVoiceCallManager$2:
    java.lang.String val$user -> val$user
    com.easemob.chat.EMVoiceCallManager this$0 -> this$0
    void run() -> run
com.easemob.chat.EMVoiceCallManager$3 -> com.easemob.chat.EMVoiceCallManager$3:
    java.lang.String val$tojid -> val$tojid
    com.easemob.chat.EMJingleStreamManager val$jsm -> val$jsm
    com.xonami.javaBells.IceAgent val$iceAgent -> val$iceAgent
    com.easemob.chat.EMVoiceCallManager this$0 -> this$0
    boolean jiqAccepted(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> jiqAccepted
    com.xonami.javaBells.JingleSession createJingleSession(java.lang.String,net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> createJingleSession
com.easemob.chat.EMVoiceCallManager$4 -> com.easemob.chat.EMVoiceCallManager$4:
    com.easemob.chat.EMVoiceCallManager this$0 -> this$0
    void run() -> run
com.easemob.chat.EMVoiceCallManager$5 -> com.easemob.chat.EMVoiceCallManager$5:
    com.easemob.chat.EMReceiverJingleSession val$receiver -> val$receiver
    com.easemob.chat.EMVoiceCallManager this$0 -> this$0
    void run() -> run
com.easemob.chat.EMVoiceCallManager$6 -> com.easemob.chat.EMVoiceCallManager$6:
    com.easemob.chat.EMReceiverJingleSession val$receiver -> val$receiver
    com.easemob.chat.EMVoiceCallManager this$0 -> this$0
    void run() -> run
com.easemob.chat.EMVoiceCallManager$7 -> com.easemob.chat.EMVoiceCallManager$7:
    com.easemob.chat.EMVoiceCallManager this$0 -> this$0
    void run() -> run
com.easemob.chat.EMVoiceCallManager$8 -> com.easemob.chat.EMVoiceCallManager$8:
    com.easemob.chat.EMVoiceCallManager this$0 -> this$0
    void run() -> run
com.easemob.chat.EMVoiceCallManager$9 -> com.easemob.chat.EMVoiceCallManager$9:
    com.easemob.chat.EMVoiceCallManager this$0 -> this$0
    void onConnected() -> onConnected
    void onDisconnected(int) -> onDisconnected
com.easemob.chat.EMVoiceCallManager$CallStateChangeListenerDelegate -> com.easemob.chat.EMVoiceCallManager$CallStateChangeListenerDelegate:
    com.easemob.chat.EMVoiceCallManager this$0 -> this$0
    void onCallStateChanged(com.easemob.chat.EMCallStateChangeListener$CallState,com.easemob.chat.EMCallStateChangeListener$CallError) -> onCallStateChanged
com.easemob.chat.EMVoiceCallSession -> com.easemob.chat.EMVoiceCallSession:
    java.lang.String TAG -> TAG
    com.xonami.javaBells.IceAgent iceAgent -> iceAgent
    com.easemob.chat.EMJingleStreamManager jingleStreamManager -> jingleStreamManager
    org.ice4j.TransportAddress[] serverAddress -> serverAddress
    com.easemob.chat.EMCallStateChangeListener stateChangeListener -> stateChangeListener
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ jingleIQ -> jingleIQ
    com.easemob.chat.EMCallStateChangeListener$CallState callState -> callState
    com.easemob.chat.EMStreamParams streamParams -> streamParams
    boolean isLocalHostCandiate -> isLocalHostCandiate
    boolean selectionDone -> selectionDone
    boolean noNeedToCloseSesson -> noNeedToCloseSesson
    com.easemob.chat.EMCallDirection callDirection -> callDirection
    java.lang.String getPeerJid() -> getPeerJid
    com.easemob.chat.EMVoiceCallSession build(com.xonami.javaBells.IceAgent) -> build
    com.easemob.chat.EMVoiceCallSession build(com.easemob.chat.EMJingleStreamManager) -> build
    com.easemob.chat.EMVoiceCallSession build(org.ice4j.TransportAddress[]) -> build
    com.easemob.chat.EMVoiceCallSession registerCallStateListener(com.easemob.chat.EMCallStateChangeListener) -> registerCallStateListener
    com.easemob.chat.EMCallDirection getCallDirection() -> getCallDirection
    com.easemob.chat.EMCallStateChangeListener$CallState getCallState() -> getCallState
    void handleCallAccept(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleCallAccept
    void handleCallerRelay(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleCallerRelay
    void onBusy() -> onBusy
    void endCall() -> endCall
    void propertyChange(java.beans.PropertyChangeEvent) -> propertyChange
    void onCandiateCollectionStateCompleted(java.beans.PropertyChangeEvent) -> onCandiateCollectionStateCompleted
    void onCandiateCollectionStateFailed(java.beans.PropertyChangeEvent) -> onCandiateCollectionStateFailed
    void onCandiateCollectionStateTerminated(java.beans.PropertyChangeEvent) -> onCandiateCollectionStateTerminated
    void onRelayCandidateSelected() -> onRelayCandidateSelected
    void onLocalCandidateSelected() -> onLocalCandidateSelected
    void connectRelayServer() -> connectRelayServer
    void connectPeer() -> connectPeer
    void connectPeerRelay() -> connectPeerRelay
    void onConnectionConnected() -> onConnectionConnected
    void closeSession(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason) -> closeSession
    void changeState(com.easemob.chat.EMCallStateChangeListener$CallState,com.easemob.chat.EMCallStateChangeListener$CallError) -> changeState
    void free() -> free
    void onTimerOut() -> onTimerOut
    void printCandidateCollectionInfo(java.beans.PropertyChangeEvent) -> printCandidateCollectionInfo
    java.lang.String access$000() -> access$000
com.easemob.chat.EMVoiceCallSession$1 -> com.easemob.chat.EMVoiceCallSession$1:
    org.ice4j.socket.RelayedCandidateDatagramSocket$Channel val$myChannel -> val$myChannel
    org.ice4j.socket.RelayedCandidateDatagramSocket val$socket -> val$socket
    org.ice4j.ice.Agent val$fAgent -> val$fAgent
    com.easemob.chat.EMVoiceCallSession this$0 -> this$0
    void channelBound(org.ice4j.socket.RelayedCandidateDatagramSocket$Channel) -> channelBound
    void channelSetConfirmed(org.ice4j.socket.RelayedCandidateDatagramSocket$Channel) -> channelSetConfirmed
com.easemob.chat.EncryptProvider -> com.easemob.chat.EncryptProvider:
    byte[] encrypt(byte[],java.lang.String) -> encrypt
    byte[] decrypt(byte[],java.lang.String) -> decrypt
com.easemob.chat.FileMessageBody -> com.easemob.chat.FileMessageBody:
    com.easemob.EMCallBack downloadCallback -> downloadCallback
    boolean downloaded -> downloaded
    java.lang.String fileName -> fileName
    java.lang.String localUrl -> localUrl
    java.lang.String remoteUrl -> remoteUrl
    java.lang.String secret -> secret
    void setDownloadCallback(com.easemob.EMCallBack) -> setDownloadCallback
    java.lang.String getFileName() -> getFileName
    void setFileName(java.lang.String) -> setFileName
    java.lang.String getLocalUrl() -> getLocalUrl
    void setLocalUrl(java.lang.String) -> setLocalUrl
    java.lang.String getRemoteUrl() -> getRemoteUrl
    void setRemoteUrl(java.lang.String) -> setRemoteUrl
    void setSecret(java.lang.String) -> setSecret
    java.lang.String getSecret() -> getSecret
com.easemob.chat.GroupChangeListener -> com.easemob.chat.GroupChangeListener:
    void onInvitationReceived(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> onInvitationReceived
    void onApplicationReceived(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> onApplicationReceived
    void onApplicationAccept(java.lang.String,java.lang.String,java.lang.String) -> onApplicationAccept
    void onApplicationDeclined(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> onApplicationDeclined
    void onInvitationAccpted(java.lang.String,java.lang.String,java.lang.String) -> onInvitationAccpted
    void onInvitationDeclined(java.lang.String,java.lang.String,java.lang.String) -> onInvitationDeclined
    void onUserRemoved(java.lang.String,java.lang.String) -> onUserRemoved
    void onGroupDestroy(java.lang.String,java.lang.String) -> onGroupDestroy
com.easemob.chat.GroupChatListener -> com.easemob.chat.GroupChatListener:
    java.lang.String TAG -> TAG
    boolean processMessage(org.jivesoftware.smack.packet.Message) -> processMessage
    void processGroupMessage(org.jivesoftware.smack.packet.Message,com.easemob.chat.EMMessage) -> processGroupMessage
com.easemob.chat.GroupReomveListener -> com.easemob.chat.GroupReomveListener:
    void onInvitationReceived(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> onInvitationReceived
    void onApplicationReceived(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> onApplicationReceived
    void onApplicationAccept(java.lang.String,java.lang.String,java.lang.String) -> onApplicationAccept
    void onApplicationDeclined(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> onApplicationDeclined
    void onInvitationAccpted(java.lang.String,java.lang.String,java.lang.String) -> onInvitationAccpted
    void onInvitationDeclined(java.lang.String,java.lang.String,java.lang.String) -> onInvitationDeclined
com.easemob.chat.ImageMessageBody -> com.easemob.chat.ImageMessageBody:
    java.lang.String thumbnailUrl -> thumbnailUrl
    java.lang.String thumbnailSecret -> thumbnailSecret
    int width -> width
    int height -> height
    boolean sendOriginalImage -> sendOriginalImage
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String getThumbnailUrl() -> getThumbnailUrl
    void setThumbnailUrl(java.lang.String) -> setThumbnailUrl
    java.lang.String toString() -> toString
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void setThumbnailSecret(java.lang.String) -> setThumbnailSecret
    java.lang.String getThumbnailSecret() -> getThumbnailSecret
    void setSendOriginalImage(boolean) -> setSendOriginalImage
    boolean isSendOriginalImage() -> isSendOriginalImage
    int getWidth() -> getWidth
    int getHeight() -> getHeight
com.easemob.chat.ImageMessageBody$1 -> com.easemob.chat.ImageMessageBody$1:
    com.easemob.chat.ImageMessageBody createFromParcel(android.os.Parcel) -> createFromParcel
    com.easemob.chat.ImageMessageBody[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.easemob.chat.InitSmackStaticCode -> com.easemob.chat.InitSmackStaticCode:
    void initStaticCode(android.content.Context) -> initStaticCode
com.easemob.chat.LocationMessageBody -> com.easemob.chat.LocationMessageBody:
    java.lang.String address -> address
    double latitude -> latitude
    double longitude -> longitude
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String getAddress() -> getAddress
    double getLatitude() -> getLatitude
    double getLongitude() -> getLongitude
    java.lang.String toString() -> toString
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.easemob.chat.LocationMessageBody$1 -> com.easemob.chat.LocationMessageBody$1:
    com.easemob.chat.LocationMessageBody createFromParcel(android.os.Parcel) -> createFromParcel
    com.easemob.chat.LocationMessageBody[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.easemob.chat.MessageBody -> com.easemob.chat.MessageBody:
com.easemob.chat.MessageEncoder -> com.easemob.chat.MessageEncoder:
    java.lang.String TAG -> TAG
    java.lang.String ATTR_TYPE -> ATTR_TYPE
    java.lang.String ATTR_TO -> ATTR_TO
    java.lang.String ATTR_FROM -> ATTR_FROM
    java.lang.String ATTR_MSG -> ATTR_MSG
    java.lang.String ATTR_URL -> ATTR_URL
    java.lang.String ATTR_LOCALURL -> ATTR_LOCALURL
    java.lang.String ATTR_THUMB_LOCALURL -> ATTR_THUMB_LOCALURL
    java.lang.String ATTR_FILENAME -> ATTR_FILENAME
    java.lang.String ATTR_THUMBNAIL -> ATTR_THUMBNAIL
    java.lang.String ATTR_SECRET -> ATTR_SECRET
    java.lang.String ATTR_SIZE -> ATTR_SIZE
    java.lang.String ATTR_IMG_WIDTH -> ATTR_IMG_WIDTH
    java.lang.String ATTR_IMG_HEIGHT -> ATTR_IMG_HEIGHT
    java.lang.String ATTR_THUMBNAIL_SECRET -> ATTR_THUMBNAIL_SECRET
    java.lang.String ATTR_LENGTH -> ATTR_LENGTH
    java.lang.String ATTR_ADDRESS -> ATTR_ADDRESS
    java.lang.String ATTR_LATITUDE -> ATTR_LATITUDE
    java.lang.String ATTR_LONGITUDE -> ATTR_LONGITUDE
    java.lang.String ATTR_ACTION -> ATTR_ACTION
    java.lang.String ATTR_PARAM -> ATTR_PARAM
    java.lang.String ATTR_FILE_LENGTH -> ATTR_FILE_LENGTH
    java.lang.String ATTR_EXT -> ATTR_EXT
    java.lang.String ATTR_TYPE_TXT -> ATTR_TYPE_TXT
    java.lang.String ATTR_TYPE_IMG -> ATTR_TYPE_IMG
    java.lang.String ATTR_TYPE_VOICE -> ATTR_TYPE_VOICE
    java.lang.String ATTR_TYPE_VIDEO -> ATTR_TYPE_VIDEO
    java.lang.String ATTR_TYPE_LOCATION -> ATTR_TYPE_LOCATION
    java.lang.String ATTR_TYPE_CMD -> ATTR_TYPE_CMD
    java.lang.String ATTR_TYPE_file -> ATTR_TYPE_file
    java.lang.String getJSONMsg(com.easemob.chat.EMMessage,boolean) -> getJSONMsg
    void addExtAttr(java.lang.StringBuffer,com.easemob.chat.EMMessage) -> addExtAttr
    void addImageBody(java.lang.StringBuffer,com.easemob.chat.EMMessage,boolean) -> addImageBody
    void addVideoBody(java.lang.StringBuffer,com.easemob.chat.EMMessage,boolean) -> addVideoBody
    void addTxtBody(java.lang.StringBuffer,com.easemob.chat.EMMessage) -> addTxtBody
    void addCmdBody(java.lang.StringBuffer,com.easemob.chat.EMMessage) -> addCmdBody
    void addVoiceBody(java.lang.StringBuffer,com.easemob.chat.EMMessage,boolean) -> addVoiceBody
    void addFileBody(java.lang.StringBuffer,com.easemob.chat.EMMessage,boolean) -> addFileBody
    void addLocationBody(java.lang.StringBuffer,com.easemob.chat.EMMessage) -> addLocationBody
    com.easemob.chat.EMMessage parseXmppMsg(org.jivesoftware.smack.packet.Message) -> parseXmppMsg
    com.easemob.chat.EMMessage getMsgFromJson(java.lang.String) -> getMsgFromJson
com.easemob.chat.NormalFileMessageBody -> com.easemob.chat.NormalFileMessageBody:
    long fileSize -> fileSize
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
    long getFileSize() -> getFileSize
com.easemob.chat.NormalFileMessageBody$1 -> com.easemob.chat.NormalFileMessageBody$1:
    com.easemob.chat.NormalFileMessageBody createFromParcel(android.os.Parcel) -> createFromParcel
    com.easemob.chat.NormalFileMessageBody[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.easemob.chat.NotificationCompat -> com.easemob.chat.NotificationCompat:
    int FLAG_HIGH_PRIORITY -> FLAG_HIGH_PRIORITY
    int PRIORITY_DEFAULT -> PRIORITY_DEFAULT
    int PRIORITY_LOW -> PRIORITY_LOW
    int PRIORITY_MIN -> PRIORITY_MIN
    int PRIORITY_HIGH -> PRIORITY_HIGH
    int PRIORITY_MAX -> PRIORITY_MAX
    com.easemob.chat.NotificationCompat$NotificationCompatImpl IMPL -> IMPL
    com.easemob.chat.NotificationCompat$NotificationCompatImpl access$000() -> access$000
com.easemob.chat.NotificationCompat$Action -> com.easemob.chat.NotificationCompat$Action:
    int icon -> icon
    java.lang.CharSequence title -> title
    android.app.PendingIntent actionIntent -> actionIntent
com.easemob.chat.NotificationCompat$BigPictureStyle -> com.easemob.chat.NotificationCompat$BigPictureStyle:
    android.graphics.Bitmap mPicture -> mPicture
    android.graphics.Bitmap mBigLargeIcon -> mBigLargeIcon
    boolean mBigLargeIconSet -> mBigLargeIconSet
    com.easemob.chat.NotificationCompat$BigPictureStyle setBigContentTitle(java.lang.CharSequence) -> setBigContentTitle
    com.easemob.chat.NotificationCompat$BigPictureStyle setSummaryText(java.lang.CharSequence) -> setSummaryText
    com.easemob.chat.NotificationCompat$BigPictureStyle bigPicture(android.graphics.Bitmap) -> bigPicture
    com.easemob.chat.NotificationCompat$BigPictureStyle bigLargeIcon(android.graphics.Bitmap) -> bigLargeIcon
com.easemob.chat.NotificationCompat$BigTextStyle -> com.easemob.chat.NotificationCompat$BigTextStyle:
    java.lang.CharSequence mBigText -> mBigText
    com.easemob.chat.NotificationCompat$BigTextStyle setBigContentTitle(java.lang.CharSequence) -> setBigContentTitle
    com.easemob.chat.NotificationCompat$BigTextStyle setSummaryText(java.lang.CharSequence) -> setSummaryText
    com.easemob.chat.NotificationCompat$BigTextStyle bigText(java.lang.CharSequence) -> bigText
com.easemob.chat.NotificationCompat$Builder -> com.easemob.chat.NotificationCompat$Builder:
    android.content.Context mContext -> mContext
    java.lang.CharSequence mContentTitle -> mContentTitle
    java.lang.CharSequence mContentText -> mContentText
    android.app.PendingIntent mContentIntent -> mContentIntent
    android.app.PendingIntent mFullScreenIntent -> mFullScreenIntent
    android.widget.RemoteViews mTickerView -> mTickerView
    android.graphics.Bitmap mLargeIcon -> mLargeIcon
    java.lang.CharSequence mContentInfo -> mContentInfo
    int mNumber -> mNumber
    int mPriority -> mPriority
    boolean mUseChronometer -> mUseChronometer
    com.easemob.chat.NotificationCompat$Style mStyle -> mStyle
    java.lang.CharSequence mSubText -> mSubText
    int mProgressMax -> mProgressMax
    int mProgress -> mProgress
    boolean mProgressIndeterminate -> mProgressIndeterminate
    java.util.ArrayList mActions -> mActions
    android.app.Notification mNotification -> mNotification
    com.easemob.chat.NotificationCompat$Builder setWhen(long) -> setWhen
    com.easemob.chat.NotificationCompat$Builder setUsesChronometer(boolean) -> setUsesChronometer
    com.easemob.chat.NotificationCompat$Builder setSmallIcon(int) -> setSmallIcon
    com.easemob.chat.NotificationCompat$Builder setSmallIcon(int,int) -> setSmallIcon
    com.easemob.chat.NotificationCompat$Builder setContentTitle(java.lang.CharSequence) -> setContentTitle
    com.easemob.chat.NotificationCompat$Builder setContentText(java.lang.CharSequence) -> setContentText
    com.easemob.chat.NotificationCompat$Builder setSubText(java.lang.CharSequence) -> setSubText
    com.easemob.chat.NotificationCompat$Builder setNumber(int) -> setNumber
    com.easemob.chat.NotificationCompat$Builder setContentInfo(java.lang.CharSequence) -> setContentInfo
    com.easemob.chat.NotificationCompat$Builder setProgress(int,int,boolean) -> setProgress
    com.easemob.chat.NotificationCompat$Builder setContent(android.widget.RemoteViews) -> setContent
    com.easemob.chat.NotificationCompat$Builder setContentIntent(android.app.PendingIntent) -> setContentIntent
    com.easemob.chat.NotificationCompat$Builder setDeleteIntent(android.app.PendingIntent) -> setDeleteIntent
    com.easemob.chat.NotificationCompat$Builder setFullScreenIntent(android.app.PendingIntent,boolean) -> setFullScreenIntent
    com.easemob.chat.NotificationCompat$Builder setTicker(java.lang.CharSequence) -> setTicker
    com.easemob.chat.NotificationCompat$Builder setTicker(java.lang.CharSequence,android.widget.RemoteViews) -> setTicker
    com.easemob.chat.NotificationCompat$Builder setLargeIcon(android.graphics.Bitmap) -> setLargeIcon
    com.easemob.chat.NotificationCompat$Builder setSound(android.net.Uri) -> setSound
    com.easemob.chat.NotificationCompat$Builder setSound(android.net.Uri,int) -> setSound
    com.easemob.chat.NotificationCompat$Builder setVibrate(long[]) -> setVibrate
    com.easemob.chat.NotificationCompat$Builder setLights(int,int,int) -> setLights
    com.easemob.chat.NotificationCompat$Builder setOngoing(boolean) -> setOngoing
    com.easemob.chat.NotificationCompat$Builder setOnlyAlertOnce(boolean) -> setOnlyAlertOnce
    com.easemob.chat.NotificationCompat$Builder setAutoCancel(boolean) -> setAutoCancel
    com.easemob.chat.NotificationCompat$Builder setDefaults(int) -> setDefaults
    void setFlag(int,boolean) -> setFlag
    com.easemob.chat.NotificationCompat$Builder setPriority(int) -> setPriority
    com.easemob.chat.NotificationCompat$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent) -> addAction
    com.easemob.chat.NotificationCompat$Builder setStyle(com.easemob.chat.NotificationCompat$Style) -> setStyle
    android.app.Notification getNotification() -> getNotification
    android.app.Notification build() -> build
com.easemob.chat.NotificationCompat$InboxStyle -> com.easemob.chat.NotificationCompat$InboxStyle:
    java.util.ArrayList mTexts -> mTexts
    com.easemob.chat.NotificationCompat$InboxStyle setBigContentTitle(java.lang.CharSequence) -> setBigContentTitle
    com.easemob.chat.NotificationCompat$InboxStyle setSummaryText(java.lang.CharSequence) -> setSummaryText
    com.easemob.chat.NotificationCompat$InboxStyle addLine(java.lang.CharSequence) -> addLine
com.easemob.chat.NotificationCompat$NotificationCompatImpl -> com.easemob.chat.NotificationCompat$NotificationCompatImpl:
    android.app.Notification build(com.easemob.chat.NotificationCompat$Builder) -> build
com.easemob.chat.NotificationCompat$NotificationCompatImplBase -> com.easemob.chat.NotificationCompat$NotificationCompatImplBase:
    android.app.Notification build(com.easemob.chat.NotificationCompat$Builder) -> build
com.easemob.chat.NotificationCompat$NotificationCompatImplGingerbread -> com.easemob.chat.NotificationCompat$NotificationCompatImplGingerbread:
    android.app.Notification build(com.easemob.chat.NotificationCompat$Builder) -> build
com.easemob.chat.NotificationCompat$NotificationCompatImplHoneycomb -> com.easemob.chat.NotificationCompat$NotificationCompatImplHoneycomb:
    android.app.Notification build(com.easemob.chat.NotificationCompat$Builder) -> build
com.easemob.chat.NotificationCompat$NotificationCompatImplIceCreamSandwich -> com.easemob.chat.NotificationCompat$NotificationCompatImplIceCreamSandwich:
    android.app.Notification build(com.easemob.chat.NotificationCompat$Builder) -> build
com.easemob.chat.NotificationCompat$NotificationCompatImplJellybean -> com.easemob.chat.NotificationCompat$NotificationCompatImplJellybean:
    android.app.Notification build(com.easemob.chat.NotificationCompat$Builder) -> build
com.easemob.chat.NotificationCompat$Style -> com.easemob.chat.NotificationCompat$Style:
    com.easemob.chat.NotificationCompat$Builder mBuilder -> mBuilder
    java.lang.CharSequence mBigContentTitle -> mBigContentTitle
    java.lang.CharSequence mSummaryText -> mSummaryText
    boolean mSummaryTextSet -> mSummaryTextSet
    void setBuilder(com.easemob.chat.NotificationCompat$Builder) -> setBuilder
    android.app.Notification build() -> build
com.easemob.chat.NotificationCompatGingerbread -> com.easemob.chat.NotificationCompatGingerbread:
    android.app.Notification add(android.app.Notification,android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent,android.app.PendingIntent) -> add
com.easemob.chat.NotificationCompatHoneycomb -> com.easemob.chat.NotificationCompatHoneycomb:
    android.app.Notification add(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap) -> add
com.easemob.chat.NotificationCompatIceCreamSandwich -> com.easemob.chat.NotificationCompatIceCreamSandwich:
    android.app.Notification add(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap,int,int,boolean) -> add
com.easemob.chat.NotificationCompatJellybean -> com.easemob.chat.NotificationCompatJellybean:
    android.app.Notification$Builder b -> b
    void addAction(int,java.lang.CharSequence,android.app.PendingIntent) -> addAction
    void addBigTextStyle(java.lang.CharSequence,boolean,java.lang.CharSequence,java.lang.CharSequence) -> addBigTextStyle
    void addBigPictureStyle(java.lang.CharSequence,boolean,java.lang.CharSequence,android.graphics.Bitmap,android.graphics.Bitmap,boolean) -> addBigPictureStyle
    void addInboxStyle(java.lang.CharSequence,boolean,java.lang.CharSequence,java.util.ArrayList) -> addInboxStyle
    android.app.Notification build() -> build
com.easemob.chat.OnMessageNotifyListener -> com.easemob.chat.OnMessageNotifyListener:
    java.lang.String onNewMessageNotify(com.easemob.chat.EMMessage) -> onNewMessageNotify
    java.lang.String onLatestMessageNotify(com.easemob.chat.EMMessage,int,int) -> onLatestMessageNotify
    java.lang.String onSetNotificationTitle(com.easemob.chat.EMMessage) -> onSetNotificationTitle
    int onSetSmallIcon(com.easemob.chat.EMMessage) -> onSetSmallIcon
com.easemob.chat.OnNotificationClickListener -> com.easemob.chat.OnNotificationClickListener:
    android.content.Intent onNotificationClick(com.easemob.chat.EMMessage) -> onNotificationClick
com.easemob.chat.ReceiveMessageThread -> com.easemob.chat.ReceiveMessageThread:
    java.lang.String TAG -> TAG
    com.easemob.chat.EMMessage msg -> msg
    com.easemob.chat.FileMessageBody msgbody -> msgbody
    boolean encrypted -> encrypted
    void run() -> run
    void updateMsgState() -> updateMsgState
    void updateMsgBody(com.easemob.chat.EMMessage) -> updateMsgBody
    boolean access$000(com.easemob.chat.ReceiveMessageThread) -> access$000
    com.easemob.chat.EMMessage access$100(com.easemob.chat.ReceiveMessageThread) -> access$100
    com.easemob.chat.FileMessageBody access$200(com.easemob.chat.ReceiveMessageThread) -> access$200
com.easemob.chat.ReceiveMessageThread$1 -> com.easemob.chat.ReceiveMessageThread$1:
    java.lang.String val$localThumbnailFilePath -> val$localThumbnailFilePath
    java.lang.String val$path -> val$path
    com.easemob.chat.ReceiveMessageThread this$0 -> this$0
    void onSuccess(java.lang.String) -> onSuccess
    void onError(java.lang.String) -> onError
    void onProgress(int) -> onProgress
com.easemob.chat.RecvAckListener -> com.easemob.chat.RecvAckListener:
    java.lang.String TAG -> TAG
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    boolean processClientAckMessage(org.jivesoftware.smack.packet.Message) -> processClientAckMessage
    void onReadAckReceived(org.jivesoftware.smack.packet.Message) -> onReadAckReceived
    void onDeliveryAckReceived(org.jivesoftware.smack.packet.Message) -> onDeliveryAckReceived
com.easemob.chat.RosterStorageImpl -> com.easemob.chat.RosterStorageImpl:
    java.lang.String TAG -> TAG
    java.lang.String PERF_KEY_ROSTERVER -> PERF_KEY_ROSTERVER
    java.lang.String version -> version
    com.easemob.chat.EMContactManager contactManager -> contactManager
    android.content.Context appContext -> appContext
    java.util.ArrayList rosterItems -> rosterItems
    void loadEntries() -> loadEntries
    void addEntry(org.jivesoftware.smack.packet.RosterPacket$Item,java.lang.String) -> addEntry
    java.util.List getEntries() -> getEntries
    org.jivesoftware.smack.packet.RosterPacket$Item getEntry(java.lang.String) -> getEntry
    int getEntryCount() -> getEntryCount
    java.lang.String getRosterVersion() -> getRosterVersion
    void updateRosterVersion(java.lang.String) -> updateRosterVersion
    void removeEntry(java.lang.String,java.lang.String) -> removeEntry
    void updateLocalEntry(org.jivesoftware.smack.packet.RosterPacket$Item) -> updateLocalEntry
com.easemob.chat.SendMessageThread -> com.easemob.chat.SendMessageThread:
    java.lang.String TAG -> TAG
    java.lang.String PERF -> PERF
    org.jivesoftware.smack.Chat chat -> chat
    org.jivesoftware.smackx.muc.MultiUserChat muc -> muc
    com.easemob.chat.EMMessage msg -> msg
    com.easemob.EMCallBack callback -> callback
    int WAIT_TIME_OUT -> WAIT_TIME_OUT
    java.util.Hashtable sendLocks -> sendLocks
    java.lang.Object mutex -> mutex
    int WAIT_SEND_TIME_OUT -> WAIT_SEND_TIME_OUT
    java.util.Hashtable sendMsgLocks -> sendMsgLocks
    java.lang.Object sendMutex -> sendMutex
    java.lang.String groupId -> groupId
    void addSendLock(java.lang.String,java.lang.Object) -> addSendLock
    void notifySendLock(java.lang.String) -> notifySendLock
    void run() -> run
    void sendMessageXmpp(com.easemob.chat.EMMessage) -> sendMessageXmpp
    void sendImageMessage(com.easemob.chat.EMMessage,com.easemob.EMCallBack) -> sendImageMessage
    void sendVideoMessage(com.easemob.chat.EMMessage,com.easemob.EMCallBack) -> sendVideoMessage
    java.util.Map uploadEncryptedThumbnailImage(java.io.File,com.easemob.chat.EMMessage) -> uploadEncryptedThumbnailImage
    void sendFileMessage(com.easemob.chat.EMMessage,com.easemob.EMCallBack) -> sendFileMessage
    void updateMsgState(com.easemob.chat.EMMessage) -> updateMsgState
    java.lang.String getThumbnailImagePath(java.lang.String) -> getThumbnailImagePath
    void checkConnection() -> checkConnection
    void addSendMsgLock(java.lang.String,java.lang.Object) -> addSendMsgLock
    void notifySendMsgLocks() -> notifySendMsgLocks
    void access$000(com.easemob.chat.SendMessageThread,com.easemob.chat.EMMessage) -> access$000
    java.util.Map access$100(com.easemob.chat.SendMessageThread,java.io.File,com.easemob.chat.EMMessage) -> access$100
    void access$200(com.easemob.chat.SendMessageThread,com.easemob.chat.EMMessage) -> access$200
com.easemob.chat.SendMessageThread$1 -> com.easemob.chat.SendMessageThread$1:
    com.easemob.chat.EMMessage val$msg -> val$msg
    long val$startTime -> val$startTime
    long val$fileLength -> val$fileLength
    com.easemob.EMCallBack val$callback -> val$callback
    boolean val$needToDeleteFile -> val$needToDeleteFile
    java.io.File val$fileToSend -> val$fileToSend
    java.lang.String val$remoteFilePath -> val$remoteFilePath
    com.easemob.chat.ImageMessageBody val$imgMsgBody -> val$imgMsgBody
    com.easemob.chat.SendMessageThread this$0 -> this$0
    void onProgress(int) -> onProgress
    void onError(java.lang.String) -> onError
    void onSuccess(java.lang.String) -> onSuccess
com.easemob.chat.SendMessageThread$2 -> com.easemob.chat.SendMessageThread$2:
    java.lang.String val$remoteFilePath -> val$remoteFilePath
    java.lang.String val$thumFilePath -> val$thumFilePath
    com.easemob.chat.EMMessage val$msg -> val$msg
    com.easemob.EMCallBack val$callback -> val$callback
    com.easemob.chat.VideoMessageBody val$videoMsgBody -> val$videoMsgBody
    com.easemob.chat.SendMessageThread this$0 -> this$0
    void onSuccess(java.lang.String) -> onSuccess
    void onProgress(int) -> onProgress
    void onError(java.lang.String) -> onError
com.easemob.chat.SendMessageThread$3 -> com.easemob.chat.SendMessageThread$3:
    java.util.Map val$maps -> val$maps
    com.easemob.chat.SendMessageThread this$0 -> this$0
    void onSuccess(java.lang.String) -> onSuccess
    void onError(java.lang.String) -> onError
    void onProgress(int) -> onProgress
com.easemob.chat.SendMessageThread$4 -> com.easemob.chat.SendMessageThread$4:
    com.easemob.chat.EMMessage val$msg -> val$msg
    long val$startTime -> val$startTime
    long val$fileLength -> val$fileLength
    com.easemob.EMCallBack val$callback -> val$callback
    java.lang.String val$remoteFilePath -> val$remoteFilePath
    com.easemob.chat.FileMessageBody val$fileMsgBody -> val$fileMsgBody
    com.easemob.chat.SendMessageThread this$0 -> this$0
    void onProgress(int) -> onProgress
    void onError(java.lang.String) -> onError
    void onSuccess(java.lang.String) -> onSuccess
com.easemob.chat.SendMessageThread$5 -> com.easemob.chat.SendMessageThread$5:
    int[] $SwitchMap$com$easemob$chat$EMMessage$Type -> $SwitchMap$com$easemob$chat$EMMessage$Type
com.easemob.chat.StartServiceReceiver -> com.easemob.chat.StartServiceReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void schduleNextHeartbeat(android.content.Context) -> schduleNextHeartbeat
com.easemob.chat.SwipeCmdProcessor -> com.easemob.chat.SwipeCmdProcessor:
    java.lang.String TAG -> TAG
    java.lang.String action -> action
    java.lang.String getAction() -> getAction
    boolean processCmd(com.easemob.chat.EMMessage) -> processCmd
    void deleteDir(java.io.File) -> deleteDir
com.easemob.chat.TextMessageBody -> com.easemob.chat.TextMessageBody:
    java.lang.String message -> message
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String getMessage() -> getMessage
    java.lang.String toString() -> toString
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.easemob.chat.TextMessageBody$1 -> com.easemob.chat.TextMessageBody$1:
    com.easemob.chat.TextMessageBody createFromParcel(android.os.Parcel) -> createFromParcel
    com.easemob.chat.TextMessageBody[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.easemob.chat.VideoMessageBody -> com.easemob.chat.VideoMessageBody:
    int length -> length
    java.lang.String thumbnailUrl -> thumbnailUrl
    java.lang.String localThumb -> localThumb
    java.lang.String thumbnailSecret -> thumbnailSecret
    long file_length -> file_length
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String getThumbnailUrl() -> getThumbnailUrl
    void setThumbnailUrl(java.lang.String) -> setThumbnailUrl
    long getVideoFileLength() -> getVideoFileLength
    void setVideoFileLength(long) -> setVideoFileLength
    void setLocalThumb(java.lang.String) -> setLocalThumb
    java.lang.String getLocalThumb() -> getLocalThumb
    int getLength() -> getLength
    java.lang.String toString() -> toString
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void setThumbnailSecret(java.lang.String) -> setThumbnailSecret
    java.lang.String getThumbnailSecret() -> getThumbnailSecret
com.easemob.chat.VideoMessageBody$1 -> com.easemob.chat.VideoMessageBody$1:
    com.easemob.chat.VideoMessageBody[] newArray(int) -> newArray
    com.easemob.chat.VideoMessageBody createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.easemob.chat.VoiceMessageBody -> com.easemob.chat.VoiceMessageBody:
    int length -> length
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int getLength() -> getLength
    java.lang.String toString() -> toString
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.easemob.chat.VoiceMessageBody$1 -> com.easemob.chat.VoiceMessageBody$1:
    com.easemob.chat.VoiceMessageBody createFromParcel(android.os.Parcel) -> createFromParcel
    com.easemob.chat.VoiceMessageBody[] newArray(int) -> newArray
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
com.easemob.chat.a.a.a -> com.easemob.chat.a.a.a:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String getChildElementXML() -> getChildElementXML
com.easemob.chat.a.a.b -> com.easemob.chat.a.a.b:
com.easemob.chat.core.EMDBManager -> com.easemob.chat.core.EMDBManager:
    java.lang.String d -> d
    java.lang.String a -> a
    int e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    java.lang.String j -> j
    java.lang.String b -> b
    java.lang.String k -> k
    java.lang.String l -> l
    java.lang.String m -> m
    java.lang.String c -> c
    java.lang.String n -> n
    java.lang.String o -> o
    java.lang.String p -> p
    java.lang.String q -> q
    java.lang.String r -> r
    java.lang.String s -> s
    java.lang.String t -> t
    java.lang.String u -> u
    java.lang.String v -> v
    java.lang.String w -> w
    java.lang.String x -> x
    java.lang.String y -> y
    java.lang.String z -> z
    java.lang.String A -> A
    java.lang.String B -> B
    java.lang.String C -> C
    java.lang.String D -> D
    java.lang.String E -> E
    java.lang.String F -> F
    java.lang.String G -> G
    java.lang.String H -> H
    java.lang.String I -> I
    java.lang.String J -> J
    java.lang.String K -> K
    java.lang.String L -> L
    java.lang.String M -> M
    java.lang.String N -> N
    java.lang.String O -> O
    java.lang.String P -> P
    java.lang.String Q -> Q
    com.easemob.chat.core.EMDBManager R -> R
    java.lang.String S -> S
    android.content.Context T -> T
    void a(java.lang.String) -> a
    com.easemob.chat.core.EMDBManager a() -> a
    void b() -> b
    boolean a(com.easemob.chat.EMMessage) -> a
    boolean b(com.easemob.chat.EMMessage) -> b
    void b(java.lang.String) -> b
    java.util.List c() -> c
    java.util.List d() -> d
    java.util.List c(java.lang.String) -> c
    java.util.List a(java.lang.String,java.lang.String,int) -> a
    java.util.List d(java.lang.String) -> d
    java.util.List b(java.lang.String,java.lang.String,int) -> b
    com.easemob.chat.EMMessage a(android.database.Cursor) -> a
    void e(java.lang.String) -> e
    void a(java.lang.String,boolean) -> a
    void b(java.lang.String,boolean) -> b
    void c(java.lang.String,boolean) -> c
    void a(java.lang.String,android.content.ContentValues) -> a
    java.lang.String b(java.util.List) -> b
    void a(com.easemob.chat.EMGroup) -> a
    java.util.Map e() -> e
    com.easemob.chat.EMGroup f(java.lang.String) -> f
    com.easemob.chat.EMGroup b(android.database.Cursor) -> b
    void b(com.easemob.chat.EMGroup) -> b
    void g(java.lang.String) -> g
    void h(java.lang.String) -> h
    boolean c(com.easemob.chat.EMMessage) -> c
    int i(java.lang.String) -> i
    void a(java.lang.String,int) -> a
    void j(java.lang.String) -> j
    java.util.List f() -> f
    void a(java.lang.String,com.easemob.chat.core.b$a) -> a
    com.easemob.chat.core.b$a k(java.lang.String) -> k
    void a(java.lang.String,java.lang.String) -> a
    void l(java.lang.String) -> l
    java.util.List g() -> g
    java.util.List h() -> h
    void a(java.util.List) -> a
    void m(java.lang.String) -> m
    void n(java.lang.String) -> n
    java.lang.String i() -> i
com.easemob.chat.core.EMDBManager$EMChatDBOpenHelper -> com.easemob.chat.core.EMDBManager$EMChatDBOpenHelper:
    com.easemob.chat.core.EMDBManager$EMChatDBOpenHelper instance -> instance
    java.lang.String username -> username
    com.easemob.chat.core.EMDBManager$EMChatDBOpenHelper getInstance(android.content.Context,java.lang.String) -> getInstance
    void closeDB() -> closeDB
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.easemob.chat.core.HeartBeatReceiver -> com.easemob.chat.core.HeartBeatReceiver:
    java.lang.String TAG -> TAG
    long previousTime -> previousTime
    com.easemob.chat.core.f pingPacket -> pingPacket
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.easemob.chat.core.XmppConnectionManager -> com.easemob.chat.core.XmppConnectionManager:
    java.lang.String TAG -> TAG
    java.lang.String PERF -> PERF
    java.lang.String RESOURCE -> RESOURCE
    java.lang.String xmppResource -> xmppResource
    java.lang.String bareJid -> bareJid
    java.lang.String password -> password
    android.content.Context context -> context
    com.easemob.chat.core.XmppConnectionManager$PingListener pingListener -> pingListener
    org.jivesoftware.smack.XMPPConnection connection -> connection
    org.jivesoftware.smack.ConnectionConfiguration connectionConfig -> connectionConfig
    com.easemob.chat.core.XmppConnectionManager$XmppConnectionListener connectionListener -> connectionListener
    com.easemob.chat.core.c chatConnectionListener -> chatConnectionListener
    com.easemob.chat.core.XmppConnectionManager instance -> instance
    int randomBase -> randomBase
    int attempts -> attempts
    java.lang.Thread reconnectionThread -> reconnectionThread
    java.lang.String host -> host
    int XMPP_PORT -> XMPP_PORT
    int[] ports -> ports
    boolean enableWakeLock -> enableWakeLock
    android.os.PowerManager$WakeLock wakeLock -> wakeLock
    java.lang.String LOCK -> LOCK
    boolean isDone -> isDone
    boolean isConnectivityRegistered -> isConnectivityRegistered
    android.content.BroadcastReceiver connectivityBroadcastReceiver -> connectivityBroadcastReceiver
    com.easemob.chat.core.XmppConnectionManager getInstance() -> getInstance
    void resetInstance() -> resetInstance
    void initConnectionConfig() -> initConnectionConfig
    void setChatConnectionListener(com.easemob.chat.core.c) -> setChatConnectionListener
    void connect() -> connect
    void initConnection() -> initConnection
    void login() -> login
    void reuse() -> reuse
    void connectSync(boolean) -> connectSync
    void reConnect() -> reConnect
    void reconnectSync() -> reconnectSync
    void reconnectASync() -> reconnectASync
    boolean disconnect() -> disconnect
    org.jivesoftware.smack.XMPPConnection getConnection() -> getConnection
    boolean isAuthentificated() -> isAuthentificated
    boolean isConnected() -> isConnected
    void initFeatures() -> initFeatures
    void discoverServerFeatures() -> discoverServerFeatures
    void configure(org.jivesoftware.smack.provider.ProviderManager) -> configure
    void resetAttempts() -> resetAttempts
    int timeDelay() -> timeDelay
    void startReconnectionThread() -> startReconnectionThread
    void onDisconnected() -> onDisconnected
    java.lang.String getXmppResource(android.content.Context) -> getXmppResource
    void setBlackListActive() -> setBlackListActive
    void registerConnectivityReceiver() -> registerConnectivityReceiver
    void unregisterConnectivityReceiver() -> unregisterConnectivityReceiver
    java.lang.String access$200() -> access$200
    org.jivesoftware.smack.XMPPConnection access$300(com.easemob.chat.core.XmppConnectionManager) -> access$300
    android.content.Context access$400(com.easemob.chat.core.XmppConnectionManager) -> access$400
    int access$500(com.easemob.chat.core.XmppConnectionManager) -> access$500
    com.easemob.chat.core.XmppConnectionManager$XmppConnectionListener access$600(com.easemob.chat.core.XmppConnectionManager) -> access$600
    void access$700(com.easemob.chat.core.XmppConnectionManager) -> access$700
    void access$800(com.easemob.chat.core.XmppConnectionManager) -> access$800
    void access$900(com.easemob.chat.core.XmppConnectionManager) -> access$900
    com.easemob.chat.core.c access$1000(com.easemob.chat.core.XmppConnectionManager) -> access$1000
    void access$1100(com.easemob.chat.core.XmppConnectionManager) -> access$1100
    void access$1200(com.easemob.chat.core.XmppConnectionManager) -> access$1200
    java.lang.Thread access$1300(com.easemob.chat.core.XmppConnectionManager) -> access$1300
com.easemob.chat.core.XmppConnectionManager$1 -> com.easemob.chat.core.XmppConnectionManager$1:
    com.easemob.chat.core.XmppConnectionManager this$0 -> this$0
    void run() -> run
com.easemob.chat.core.XmppConnectionManager$2 -> com.easemob.chat.core.XmppConnectionManager$2:
    com.easemob.chat.core.XmppConnectionManager this$0 -> this$0
    void run() -> run
com.easemob.chat.core.XmppConnectionManager$3 -> com.easemob.chat.core.XmppConnectionManager$3:
    com.easemob.chat.core.XmppConnectionManager this$0 -> this$0
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.easemob.chat.core.XmppConnectionManager$PingListener -> com.easemob.chat.core.XmppConnectionManager$PingListener:
    com.easemob.chat.core.XmppConnectionManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
com.easemob.chat.core.XmppConnectionManager$XmppConnectionListener -> com.easemob.chat.core.XmppConnectionManager$XmppConnectionListener:
    com.easemob.chat.core.XmppConnectionManager this$0 -> this$0
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectingIn(int) -> reconnectingIn
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
    void reconnectionSuccessful() -> reconnectionSuccessful
com.easemob.chat.core.a -> com.easemob.chat.core.a:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String toXML() -> toXML
com.easemob.chat.core.b -> com.easemob.chat.core.b:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    long f -> f
    com.easemob.chat.core.b g -> g
    com.easemob.chat.core.b a() -> a
    java.lang.String a(java.lang.String,java.lang.String) -> a
    java.lang.String b() -> b
    long c() -> c
    void d() -> d
com.easemob.chat.core.b$a -> com.easemob.chat.core.b$a:
    java.lang.String a -> a
    long b -> b
    java.lang.String a() -> a
    com.easemob.chat.core.b$a a(java.lang.String) -> a
    long b() -> b
    com.easemob.chat.core.b$a a(long) -> a
com.easemob.chat.core.c -> com.easemob.chat.core.c:
    void onConnectionSuccessful() -> onConnectionSuccessful
    void onConnecting() -> onConnecting
com.easemob.chat.core.d -> com.easemob.chat.core.d:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
com.easemob.chat.core.e -> com.easemob.chat.core.e:
    java.lang.String b -> b
    java.lang.String a -> a
    java.lang.String getChildElementXML() -> getChildElementXML
com.easemob.chat.core.f -> com.easemob.chat.core.f:
    java.lang.String toXML() -> toXML
com.easemob.chat.testConnectionCheck -> com.easemob.chat.testConnectionCheck:
    void testConnection() -> testConnection
com.easemob.chat.testConnectionCheck$1 -> com.easemob.chat.testConnectionCheck$1:
    com.easemob.chat.testConnectionCheck this$0 -> this$0
    void run() -> run
com.easemob.cloud.CloudFileManager -> com.easemob.cloud.CloudFileManager:
    java.util.Properties sessionContext -> sessionContext
    java.lang.String TAG -> TAG
    com.easemob.cloud.CloudFileManager instance -> instance
    boolean authorization() -> authorization
    java.lang.String getRemoteFileName(java.lang.String,java.lang.String) -> getRemoteFileName
    void uploadFileInBackground(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map,com.easemob.cloud.CloudOperationCallback) -> uploadFileInBackground
    void downloadFile(java.lang.String,java.lang.String,java.lang.String,java.util.Map,com.easemob.cloud.CloudOperationCallback) -> downloadFile
    void deleteFileInBackground(java.lang.String,java.lang.String,java.lang.String,com.easemob.cloud.CloudOperationCallback) -> deleteFileInBackground
com.easemob.cloud.CloudFileMetaData -> com.easemob.cloud.CloudFileMetaData:
    java.lang.String name -> name
    java.lang.String lastModified -> lastModified
    java.lang.String size -> size
    java.lang.String path -> path
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getLastModified() -> getLastModified
    void setLastModified(java.lang.String) -> setLastModified
    java.lang.String getSize() -> getSize
    void setSize(java.lang.String) -> setSize
    java.lang.String toString() -> toString
com.easemob.cloud.CloudOperationCallback -> com.easemob.cloud.CloudOperationCallback:
    void onSuccess(java.lang.String) -> onSuccess
    void onError(java.lang.String) -> onError
    void onProgress(int) -> onProgress
com.easemob.cloud.CustomMultiPartEntity -> com.easemob.cloud.CustomMultiPartEntity:
    com.easemob.cloud.CustomMultiPartEntity$ProgressListener a -> a
    void writeTo(java.io.OutputStream) -> writeTo
com.easemob.cloud.CustomMultiPartEntity$CountingOutputStream -> com.easemob.cloud.CustomMultiPartEntity$CountingOutputStream:
    com.easemob.cloud.CustomMultiPartEntity$ProgressListener listener -> listener
    long transferred -> transferred
    void write(byte[],int,int) -> write
    void write(int) -> write
com.easemob.cloud.CustomMultiPartEntity$ProgressListener -> com.easemob.cloud.CustomMultiPartEntity$ProgressListener:
    void transferred(long) -> transferred
com.easemob.cloud.HttpClientConfig -> com.easemob.cloud.HttpClientConfig:
    java.lang.String EASEMOB_USERSERVER_DOMAIN_ID -> EASEMOB_USERSERVER_DOMAIN_ID
    java.lang.String EASEMOB_PLATFORM -> EASEMOB_PLATFORM
    java.lang.String getEaseMobUserServerDomainId() -> getEaseMobUserServerDomainId
    java.lang.String getDefaultUserAgent() -> getDefaultUserAgent
    org.apache.http.impl.client.DefaultHttpClient getDefaultHttpClient() -> getDefaultHttpClient
    java.lang.String getFileRemoteUrl(java.lang.String) -> getFileRemoteUrl
    java.lang.String getFileDirRemoteUrl() -> getFileDirRemoteUrl
    java.lang.String getBaseUrlByAppKey() -> getBaseUrlByAppKey
com.easemob.cloud.HttpClientManager -> com.easemob.cloud.HttpClientManager:
    java.lang.String Method_GET -> Method_GET
    java.lang.String Method_POST -> Method_POST
    java.lang.String Method_PUT -> Method_PUT
    java.lang.String Method_DELETE -> Method_DELETE
    java.lang.String sendHttpRequest(java.lang.String,java.util.Map,java.lang.String,java.lang.String) -> sendHttpRequest
com.easemob.cloud.HttpFileManager -> com.easemob.cloud.HttpFileManager:
    java.lang.String PERF -> PERF
    long MAX_ALLOWED_FILE_SIZE -> MAX_ALLOWED_FILE_SIZE
    long totalSize -> totalSize
    android.content.Context appContext -> appContext
    boolean tokenRetrieved -> tokenRetrieved
    boolean authorization() -> authorization
    boolean sendFiletoServerHttp(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map,com.easemob.cloud.CloudOperationCallback) -> sendFiletoServerHttp
    java.lang.String getMimeType(java.io.File) -> getMimeType
    void uploadFileInBackground(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map,com.easemob.cloud.CloudOperationCallback) -> uploadFileInBackground
    void uploadFile(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map,com.easemob.cloud.CloudOperationCallback) -> uploadFile
    void downloadFile(java.lang.String,java.lang.String,java.lang.String,java.util.Map,com.easemob.cloud.CloudOperationCallback) -> downloadFile
    void downloadFile(java.lang.String,java.lang.String,java.util.Map,com.easemob.cloud.CloudOperationCallback) -> downloadFile
    java.lang.String retryToGetToken() -> retryToGetToken
    void deleteFileInBackground(java.lang.String,java.lang.String,java.lang.String,com.easemob.cloud.CloudOperationCallback) -> deleteFileInBackground
    long access$000(com.easemob.cloud.HttpFileManager) -> access$000
    boolean access$100(com.easemob.cloud.HttpFileManager,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map,com.easemob.cloud.CloudOperationCallback) -> access$100
    java.lang.String access$200(com.easemob.cloud.HttpFileManager) -> access$200
com.easemob.cloud.HttpFileManager$1 -> com.easemob.cloud.HttpFileManager$1:
    com.easemob.cloud.CloudOperationCallback a -> a
    com.easemob.cloud.HttpFileManager b -> b
    void transferred(long) -> transferred
com.easemob.cloud.HttpFileManager$2 -> com.easemob.cloud.HttpFileManager$2:
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.util.Map e -> e
    com.easemob.cloud.CloudOperationCallback f -> f
    com.easemob.cloud.HttpFileManager g -> g
    void run() -> run
com.easemob.cloud.HttpFileManager$3 -> com.easemob.cloud.HttpFileManager$3:
    com.easemob.cloud.CloudOperationCallback a -> a
    java.util.Map b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    com.easemob.cloud.HttpFileManager e -> e
    void run() -> run
com.easemob.cloud.HttpFileManager$4 -> com.easemob.cloud.HttpFileManager$4:
    java.lang.String a -> a
    java.lang.String b -> b
    com.easemob.cloud.CloudOperationCallback c -> c
    com.easemob.cloud.HttpFileManager d -> d
    void run() -> run
com.easemob.cloud.MySSLSocketFactory -> com.easemob.cloud.MySSLSocketFactory:
    javax.net.ssl.SSLContext sslContext -> sslContext
    javax.net.ssl.TrustManager tm -> tm
    java.net.Socket createSocket() -> createSocket
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> createSocket
com.easemob.cloud.MySSLSocketFactory$1 -> com.easemob.cloud.MySSLSocketFactory$1:
    com.easemob.cloud.MySSLSocketFactory this$0 -> this$0
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
com.easemob.debug.DebugHelper -> com.easemob.debug.DebugHelper:
    java.lang.String UUID -> UUID
    java.lang.String TOKEN_ENTITY -> TOKEN_ENTITY
    java.lang.String TAG -> TAG
    void uploadLog(android.content.Context,java.lang.String,com.easemob.EMCallBack) -> uploadLog
com.easemob.debug.DebugHelper$1 -> com.easemob.debug.DebugHelper$1:
    com.easemob.EMCallBack val$callback -> val$callback
    android.content.Context val$applicationContext -> val$applicationContext
    java.lang.String val$remoteServer -> val$remoteServer
    void run() -> run
com.easemob.debug.DebugHelper$1$1 -> com.easemob.debug.DebugHelper$1$1:
    com.easemob.debug.DebugHelper$1 this$0 -> this$0
    void onSuccess(java.lang.String) -> onSuccess
    void onError(java.lang.String) -> onError
    void onProgress(int) -> onProgress
com.easemob.exceptions.EMAuthenticationException -> com.easemob.exceptions.EMAuthenticationException:
    long serialVersionUID -> serialVersionUID
com.easemob.exceptions.EMDuplicateResourceException -> com.easemob.exceptions.EMDuplicateResourceException:
    long serialVersionUID -> serialVersionUID
com.easemob.exceptions.EMExceptionUtils -> com.easemob.exceptions.EMExceptionUtils:
    int fromExceptionToErrorCode(java.lang.Exception) -> fromExceptionToErrorCode
com.easemob.exceptions.EMNetworkUnconnectedException -> com.easemob.exceptions.EMNetworkUnconnectedException:
    long serialVersionUID -> serialVersionUID
com.easemob.exceptions.EMNoActiveCallException -> com.easemob.exceptions.EMNoActiveCallException:
    long serialVersionUID -> serialVersionUID
com.easemob.exceptions.EMPermissionException -> com.easemob.exceptions.EMPermissionException:
    long serialVersionUID -> serialVersionUID
com.easemob.exceptions.EMResourceNotExistException -> com.easemob.exceptions.EMResourceNotExistException:
    long serialVersionUID -> serialVersionUID
com.easemob.exceptions.EMServiceNotReadyException -> com.easemob.exceptions.EMServiceNotReadyException:
    long serialVersionUID -> serialVersionUID
com.easemob.exceptions.EaseMobException -> com.easemob.exceptions.EaseMobException:
    int errorCode -> errorCode
    long serialVersionUID -> serialVersionUID
    int getErrorCode() -> getErrorCode
    void setErrorCode(int) -> setErrorCode
com.easemob.util.CryptoUtils -> com.easemob.util.CryptoUtils:
    javax.crypto.Cipher cipher -> cipher
    javax.crypto.Cipher decipher -> decipher
    int ALGORIGHM_DES -> ALGORIGHM_DES
    int ALGORIGHM_AES -> ALGORIGHM_AES
    byte[] keyBytes -> keyBytes
    java.lang.String key -> key
    java.lang.String HEXES -> HEXES
    void init(int) -> init
    void initDES() -> initDES
    void initAES() -> initAES
    java.lang.String encryptBase64String(java.lang.String) -> encryptBase64String
    java.lang.String decryptBase64String(java.lang.String) -> decryptBase64String
    byte[] encrypt(java.lang.String) -> encrypt
    byte[] encrypt(byte[]) -> encrypt
    byte[] decrypt(byte[]) -> decrypt
    java.lang.String getHex(byte[]) -> getHex
com.easemob.util.DateUtils -> com.easemob.util.DateUtils:
    long INTERVAL_IN_MILLISECONDS -> INTERVAL_IN_MILLISECONDS
    java.lang.String getTimestampString(java.util.Date) -> getTimestampString
    boolean isCloseEnough(long,long) -> isCloseEnough
    boolean isSameDay(long) -> isSameDay
    boolean isYesterday(long) -> isYesterday
    java.util.Date StringToDate(java.lang.String,java.lang.String) -> StringToDate
    java.lang.String toTime(int) -> toTime
    java.lang.String toTimeBySecond(int) -> toTimeBySecond
    com.easemob.util.TimeInfo getYesterdayStartAndEndTime() -> getYesterdayStartAndEndTime
    com.easemob.util.TimeInfo getTodayStartAndEndTime() -> getTodayStartAndEndTime
    com.easemob.util.TimeInfo getBeforeYesterdayStartAndEndTime() -> getBeforeYesterdayStartAndEndTime
    com.easemob.util.TimeInfo getCurrentMonthStartAndEndTime() -> getCurrentMonthStartAndEndTime
    com.easemob.util.TimeInfo getLastMonthStartAndEndTime() -> getLastMonthStartAndEndTime
    java.lang.String getTimestampStr() -> getTimestampStr
com.easemob.util.DensityUtil -> com.easemob.util.DensityUtil:
    int dip2px(android.content.Context,float) -> dip2px
    int px2dip(android.content.Context,float) -> px2dip
    int sp2px(android.content.Context,float) -> sp2px
    int px2sp(android.content.Context,float) -> px2sp
com.easemob.util.DeviceUuidFactory -> com.easemob.util.DeviceUuidFactory:
    java.lang.String PREFS_FILE -> PREFS_FILE
    java.lang.String PREFS_DEVICE_ID -> PREFS_DEVICE_ID
    java.util.UUID uuid -> uuid
    java.util.UUID generateDeviceUuid(android.content.Context) -> generateDeviceUuid
    java.util.UUID getDeviceUuid() -> getDeviceUuid
    boolean isEmpty(java.lang.Object) -> isEmpty
com.easemob.util.EMLog -> com.easemob.util.EMLog:
    boolean debugMode -> debugMode
    com.easemob.util.EMLog$ELogMode logMode -> logMode
    com.easemob.util.FileLogger fileLog -> fileLog
    void d(java.lang.String,java.lang.String) -> d
    void d(java.lang.String,java.lang.String,java.lang.Throwable) -> d
    void e(java.lang.String,java.lang.String) -> e
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> e
    void i(java.lang.String,java.lang.String) -> i
    void v(java.lang.String,java.lang.String) -> v
    void w(java.lang.String,java.lang.String) -> w
    void w(java.lang.String,java.lang.String,java.lang.Throwable) -> w
    void setLogMode(com.easemob.util.EMLog$ELogMode) -> setLogMode
    java.io.File getLogRoot() -> getLogRoot
    void freeLogFiles() -> freeLogFiles
com.easemob.util.EMLog$1 -> com.easemob.util.EMLog$1:
    int[] $SwitchMap$com$easemob$util$EMLog$ELogMode -> $SwitchMap$com$easemob$util$EMLog$ELogMode
com.easemob.util.EMLog$ELogMode -> com.easemob.util.EMLog$ELogMode:
    com.easemob.util.EMLog$ELogMode KLogConsoleOnly -> KLogConsoleOnly
    com.easemob.util.EMLog$ELogMode KLogFileOnly -> KLogFileOnly
    com.easemob.util.EMLog$ELogMode KLogConsoleFile -> KLogConsoleFile
    com.easemob.util.EMLog$ELogMode[] $VALUES -> $VALUES
    com.easemob.util.EMLog$ELogMode[] values() -> values
    com.easemob.util.EMLog$ELogMode valueOf(java.lang.String) -> valueOf
com.easemob.util.EasyUtils -> com.easemob.util.EasyUtils:
    java.util.Hashtable resourceTable -> resourceTable
    boolean isAppRunningForeground(android.content.Context) -> isAppRunningForeground
    java.lang.String getTopActivityName(android.content.Context) -> getTopActivityName
    java.lang.String getTimeStamp() -> getTimeStamp
    boolean writeToZipFile(byte[],java.lang.String) -> writeToZipFile
    java.lang.String getAppResourceString(android.content.Context,java.lang.String) -> getAppResourceString
    java.lang.String convertByteArrayToString(byte[]) -> convertByteArrayToString
com.easemob.util.FileLogger -> com.easemob.util.FileLogger:
    java.lang.String TAG -> TAG
    long MB -> MB
    long LOG_LIMIT -> LOG_LIMIT
    long FREE_SPACE_LIMIT -> FREE_SPACE_LIMIT
    long FREE_SPACE_TIMER -> FREE_SPACE_TIMER
    java.lang.String INFO_COLOR -> INFO_COLOR
    java.lang.String ERROR_COLOR -> ERROR_COLOR
    java.lang.String WARN_COLOR -> WARN_COLOR
    java.lang.String DEBUG_COLOR -> DEBUG_COLOR
    java.util.concurrent.ExecutorService singleThreadService -> singleThreadService
    java.io.File logRoot -> logRoot
    java.util.Timer timer -> timer
    boolean spaceAvailable -> spaceAvailable
    void d(java.lang.String,java.lang.String) -> d
    void e(java.lang.String,java.lang.String) -> e
    void i(java.lang.String,java.lang.String) -> i
    void w(java.lang.String,java.lang.String) -> w
    void v(java.lang.String,java.lang.String) -> v
    void startThreadService(java.lang.String,java.lang.String) -> startThreadService
    java.lang.Runnable getWriterRunnable(java.lang.String,java.lang.String) -> getWriterRunnable
    java.io.File getAvailableFile() -> getAvailableFile
    java.lang.String getLogFileName(int) -> getLogFileName
    java.io.File getLogFolder() -> getLogFolder
    void removeFolderBeforeDay(java.lang.String,int) -> removeFolderBeforeDay
    void removeOldFolders() -> removeOldFolders
    void deleteFile(java.io.File) -> deleteFile
    long getDirSize(java.io.File) -> getDirSize
    java.lang.String getSpecifiedDayBefore(java.lang.String,int) -> getSpecifiedDayBefore
    java.io.File getStorageDir() -> getStorageDir
    void getSortedFileListByName(java.util.List) -> getSortedFileListByName
    boolean spaceIsAlearting() -> spaceIsAlearting
    boolean logSizeAlearting() -> logSizeAlearting
    boolean freeSpace() -> freeSpace
    void freeLogFolder() -> freeLogFolder
    void freeOldFolders() -> freeOldFolders
    void freeOldFiles() -> freeOldFiles
    long getCurrentAvailabeSpace() -> getCurrentAvailabeSpace
    java.io.File getLogRoot() -> getLogRoot
    void checkAndFreeLogFiles() -> checkAndFreeLogFiles
    void startCleanUpTimer() -> startCleanUpTimer
    java.util.Timer access$000(com.easemob.util.FileLogger) -> access$000
    void access$100(com.easemob.util.FileLogger) -> access$100
    java.io.File access$200(com.easemob.util.FileLogger) -> access$200
    boolean access$302(com.easemob.util.FileLogger,boolean) -> access$302
    java.util.concurrent.ExecutorService access$400(com.easemob.util.FileLogger) -> access$400
com.easemob.util.FileLogger$1 -> com.easemob.util.FileLogger$1:
    java.lang.String val$msg -> val$msg
    java.lang.String val$color -> val$color
    com.easemob.util.FileLogger this$0 -> this$0
    void run() -> run
com.easemob.util.FileLogger$2 -> com.easemob.util.FileLogger$2:
    int compare(java.io.File,java.io.File) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.easemob.util.FileLogger$3 -> com.easemob.util.FileLogger$3:
    com.easemob.util.FileLogger this$0 -> this$0
    void run() -> run
com.easemob.util.FileLogger$3$1 -> com.easemob.util.FileLogger$3$1:
    com.easemob.util.FileLogger$3 this$1 -> this$1
    void run() -> run
com.easemob.util.FileUtils -> com.easemob.util.FileUtils:
    java.lang.String[] fileTypes -> fileTypes
    java.io.File[] loadFiles(java.io.File) -> loadFiles
    java.lang.String getMIMEType(java.io.File) -> getMIMEType
    java.lang.String getMIMEType(java.lang.String) -> getMIMEType
    void openFile(java.io.File,android.app.Activity) -> openFile
    void openFile(android.net.Uri,java.lang.String,android.app.Activity) -> openFile
    void saveObjectToFile(java.lang.Object,java.io.File) -> saveObjectToFile
    java.lang.Object readObjectFromFile(java.io.File) -> readObjectFromFile
com.easemob.util.FileUtils$MyComparator -> com.easemob.util.FileUtils$MyComparator:
    int compare(java.io.File,java.io.File) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
com.easemob.util.HanziToPinyin -> com.easemob.util.HanziToPinyin:
    java.lang.String TAG -> TAG
    boolean DEBUG -> DEBUG
    char[] UNIHANS -> UNIHANS
    byte[][] PINYINS -> PINYINS
    java.lang.String FIRST_PINYIN_UNIHAN -> FIRST_PINYIN_UNIHAN
    java.lang.String LAST_PINYIN_UNIHAN -> LAST_PINYIN_UNIHAN
    java.text.Collator COLLATOR -> COLLATOR
    com.easemob.util.HanziToPinyin sInstance -> sInstance
    boolean mHasChinaCollator -> mHasChinaCollator
    com.easemob.util.HanziToPinyin getInstance() -> getInstance
    boolean doSelfValidation() -> doSelfValidation
    com.easemob.util.HanziToPinyin$Token getToken(char) -> getToken
    java.util.ArrayList get(java.lang.String) -> get
    void addToken(java.lang.StringBuilder,java.util.ArrayList,int) -> addToken
com.easemob.util.HanziToPinyin$Token -> com.easemob.util.HanziToPinyin$Token:
    java.lang.String SEPARATOR -> SEPARATOR
    int LATIN -> LATIN
    int PINYIN -> PINYIN
    int UNKNOWN -> UNKNOWN
    int type -> type
    java.lang.String source -> source
    java.lang.String target -> target
com.easemob.util.ImageUtils -> com.easemob.util.ImageUtils:
    int SCALE_IMAGE_WIDTH -> SCALE_IMAGE_WIDTH
    int SCALE_IMAGE_HEIGHT -> SCALE_IMAGE_HEIGHT
    android.graphics.Bitmap getRoundedCornerBitmap(android.graphics.Bitmap) -> getRoundedCornerBitmap
    android.graphics.Bitmap getRoundedCornerBitmap(android.graphics.Bitmap,float) -> getRoundedCornerBitmap
    android.graphics.Bitmap getVideoThumbnail(java.lang.String,int,int,int) -> getVideoThumbnail
    java.lang.String saveVideoThumb(java.io.File,int,int,int) -> saveVideoThumb
    android.graphics.Bitmap decodeScaleImage(java.lang.String,int,int) -> decodeScaleImage
    android.graphics.Bitmap decodeScaleImage(android.content.Context,int,int,int) -> decodeScaleImage
    int calculateInSampleSize(android.graphics.BitmapFactory$Options,int,int) -> calculateInSampleSize
    java.lang.String getThumbnailImage(java.lang.String,int) -> getThumbnailImage
    java.lang.String getScaledImage(android.content.Context,java.lang.String) -> getScaledImage
    java.lang.String getScaledImage(android.content.Context,java.lang.String,int) -> getScaledImage
    android.graphics.Bitmap mergeImages(int,int,java.util.List) -> mergeImages
    int readPictureDegree(java.lang.String) -> readPictureDegree
    android.graphics.Bitmap rotaingImageView(int,android.graphics.Bitmap) -> rotaingImageView
    android.graphics.BitmapFactory$Options getBitmapOptions(java.lang.String) -> getBitmapOptions
com.easemob.util.LatLng -> com.easemob.util.LatLng:
    double latitude -> latitude
    double longitude -> longitude
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.easemob.util.NetUtils -> com.easemob.util.NetUtils:
    java.lang.String TAG -> TAG
    int LOW_SPEED_UPLOAD_BUF_SIZE -> LOW_SPEED_UPLOAD_BUF_SIZE
    int HIGH_SPEED_UPLOAD_BUF_SIZE -> HIGH_SPEED_UPLOAD_BUF_SIZE
    int MAX_SPEED_UPLOAD_BUF_SIZE -> MAX_SPEED_UPLOAD_BUF_SIZE
    int LOW_SPEED_DOWNLOAD_BUF_SIZE -> LOW_SPEED_DOWNLOAD_BUF_SIZE
    int HIGH_SPEED_DOWNLOAD_BUF_SIZE -> HIGH_SPEED_DOWNLOAD_BUF_SIZE
    int MAX_SPEED_DOWNLOAD_BUF_SIZE -> MAX_SPEED_DOWNLOAD_BUF_SIZE
    boolean hasNetwork(android.content.Context) -> hasNetwork
    boolean hasDataConnection(android.content.Context) -> hasDataConnection
    boolean isWifiConnection(android.content.Context) -> isWifiConnection
    int getUploadBufSize(android.content.Context) -> getUploadBufSize
    int getDownloadBufSize(android.content.Context) -> getDownloadBufSize
    boolean isConnectionFast(int,int) -> isConnectionFast
com.easemob.util.PathUtil -> com.easemob.util.PathUtil:
    java.lang.String pathPrefix -> pathPrefix
    java.lang.String historyPathName -> historyPathName
    java.lang.String imagePathName -> imagePathName
    java.lang.String voicePathName -> voicePathName
    java.lang.String filePathName -> filePathName
    java.lang.String videoPathName -> videoPathName
    java.lang.String netdiskDownloadPathName -> netdiskDownloadPathName
    java.lang.String meetingPathName -> meetingPathName
    java.io.File storageDir -> storageDir
    com.easemob.util.PathUtil instance -> instance
    java.io.File voicePath -> voicePath
    java.io.File imagePath -> imagePath
    java.io.File historyPath -> historyPath
    java.io.File videoPath -> videoPath
    java.io.File filePath -> filePath
    com.easemob.util.PathUtil getInstance() -> getInstance
    void initDirs(java.lang.String,java.lang.String,android.content.Context) -> initDirs
    java.io.File getImagePath() -> getImagePath
    java.io.File getVoicePath() -> getVoicePath
    java.io.File getFilePath() -> getFilePath
    java.io.File getVideoPath() -> getVideoPath
    java.io.File getHistoryPath() -> getHistoryPath
    java.io.File getStorageDir(android.content.Context) -> getStorageDir
    java.io.File generateImagePath(java.lang.String,java.lang.String,android.content.Context) -> generateImagePath
    java.io.File generateVoicePath(java.lang.String,java.lang.String,android.content.Context) -> generateVoicePath
    java.io.File generateFiePath(java.lang.String,java.lang.String,android.content.Context) -> generateFiePath
    java.io.File generateVideoPath(java.lang.String,java.lang.String,android.content.Context) -> generateVideoPath
    java.io.File generateHistoryPath(java.lang.String,java.lang.String,android.content.Context) -> generateHistoryPath
    java.io.File generateMessagePath(java.lang.String,java.lang.String,android.content.Context) -> generateMessagePath
    java.io.File getTempPath(java.io.File) -> getTempPath
com.easemob.util.PerfUtils -> com.easemob.util.PerfUtils:
    int getTimeSpendSecond(long) -> getTimeSpendSecond
    int getSpeed(long,long) -> getSpeed
com.easemob.util.TextFormater -> com.easemob.util.TextFormater:
    int GB_SP_DIFF -> GB_SP_DIFF
    int[] secPosvalueList -> secPosvalueList
    char[] firstLetter -> firstLetter
    java.lang.String getDataSize(long) -> getDataSize
    java.lang.String getKBDataSize(long) -> getKBDataSize
    java.lang.String formatStr(android.content.Context,int,java.lang.String) -> formatStr
    java.lang.String getFirstLetter(java.lang.String) -> getFirstLetter
    char convert(byte[]) -> convert
com.easemob.util.TimeInfo -> com.easemob.util.TimeInfo:
    long startTime -> startTime
    long endTime -> endTime
    long getStartTime() -> getStartTime
    void setStartTime(long) -> setStartTime
    long getEndTime() -> getEndTime
    void setEndTime(long) -> setEndTime
com.easemob.util.VoiceRecorder -> com.easemob.util.VoiceRecorder:
    android.media.MediaRecorder recorder -> recorder
    java.lang.String PREFIX -> PREFIX
    java.lang.String EXTENSION -> EXTENSION
    boolean isRecording -> isRecording
    long startTime -> startTime
    java.lang.String voiceFilePath -> voiceFilePath
    java.lang.String voiceFileName -> voiceFileName
    java.io.File file -> file
    android.os.Handler handler -> handler
    java.lang.String startRecording(java.lang.String,java.lang.String,android.content.Context) -> startRecording
    void discardRecording() -> discardRecording
    int stopRecoding() -> stopRecoding
    void finalize() -> finalize
    java.lang.String getVoiceFileName(java.lang.String) -> getVoiceFileName
    boolean isRecording() -> isRecording
    java.lang.String getVoiceFilePath() -> getVoiceFilePath
    boolean access$000(com.easemob.util.VoiceRecorder) -> access$000
    android.os.Handler access$100(com.easemob.util.VoiceRecorder) -> access$100
com.easemob.util.VoiceRecorder$1 -> com.easemob.util.VoiceRecorder$1:
    com.easemob.util.VoiceRecorder this$0 -> this$0
    void run() -> run
com.easemob.util.ZipUtils -> com.easemob.util.ZipUtils:
    int BUFF_SIZE -> BUFF_SIZE
    void zip(java.io.File,java.io.File) -> zip
    void zipFiles(java.io.File,java.util.zip.ZipOutputStream,java.lang.String) -> zipFiles
    void zipFile(java.io.File,java.util.zip.ZipOutputStream,java.lang.String) -> zipFile
com.google.gson.ExclusionStrategy -> com.google.gson.a:
    boolean shouldSkipField(com.google.gson.FieldAttributes) -> a
    boolean shouldSkipClass(java.lang.Class) -> a
com.google.gson.FieldAttributes -> com.google.gson.b:
    java.lang.reflect.Field field -> a
com.google.gson.FieldNamingPolicy -> com.google.gson.c:
    com.google.gson.FieldNamingPolicy IDENTITY -> a
    com.google.gson.FieldNamingPolicy UPPER_CAMEL_CASE -> b
    com.google.gson.FieldNamingPolicy UPPER_CAMEL_CASE_WITH_SPACES -> c
    com.google.gson.FieldNamingPolicy LOWER_CASE_WITH_UNDERSCORES -> d
    com.google.gson.FieldNamingPolicy LOWER_CASE_WITH_DASHES -> e
    com.google.gson.FieldNamingPolicy[] $VALUES -> f
    com.google.gson.FieldNamingPolicy[] values() -> values
    com.google.gson.FieldNamingPolicy valueOf(java.lang.String) -> valueOf
    java.lang.String separateCamelCase(java.lang.String,java.lang.String) -> b
    java.lang.String upperCaseFirstLetter(java.lang.String) -> b
    java.lang.String modifyString(char,java.lang.String,int) -> a
    java.lang.String access$100(java.lang.String) -> a
    java.lang.String access$200(java.lang.String,java.lang.String) -> a
com.google.gson.FieldNamingPolicy$1 -> com.google.gson.d:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$2 -> com.google.gson.e:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$3 -> com.google.gson.f:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$4 -> com.google.gson.g:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingPolicy$5 -> com.google.gson.h:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.FieldNamingStrategy -> com.google.gson.i:
    java.lang.String translateName(java.lang.reflect.Field) -> a
com.google.gson.Gson -> com.google.gson.j:
    java.lang.ThreadLocal calls -> c
    java.util.Map typeTokenCache -> d
    java.util.List factories -> e
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> f
    boolean serializeNulls -> g
    boolean htmlSafe -> h
    boolean generateNonExecutableJson -> i
    boolean prettyPrinting -> j
    com.google.gson.JsonDeserializationContext deserializationContext -> a
    com.google.gson.JsonSerializationContext serializationContext -> b
    com.google.gson.TypeAdapter doubleAdapter(boolean) -> a
    com.google.gson.TypeAdapter floatAdapter(boolean) -> b
    void checkValidFloatingPoint(double) -> a
    com.google.gson.TypeAdapter longAdapter(com.google.gson.LongSerializationPolicy) -> a
    com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken) -> a
    com.google.gson.TypeAdapter getDelegateAdapter(com.google.gson.TypeAdapterFactory,com.google.gson.reflect.TypeToken) -> a
    com.google.gson.TypeAdapter getAdapter(java.lang.Class) -> a
    java.lang.Object fromJson(com.google.gson.stream.JsonReader,java.lang.reflect.Type) -> a
    java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.Class) -> a
    java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.reflect.Type) -> a
    java.lang.String toString() -> toString
    void access$000(com.google.gson.Gson,double) -> a
com.google.gson.Gson$1 -> com.google.gson.k:
    com.google.gson.Gson this$0 -> a
com.google.gson.Gson$2 -> com.google.gson.l:
    com.google.gson.Gson this$0 -> a
com.google.gson.Gson$3 -> com.google.gson.m:
    com.google.gson.Gson this$0 -> a
    java.lang.Double read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.Gson$4 -> com.google.gson.n:
    com.google.gson.Gson this$0 -> a
    java.lang.Float read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.Gson$5 -> com.google.gson.o:
    com.google.gson.Gson this$0 -> a
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.Gson$FutureTypeAdapter -> com.google.gson.p:
    com.google.gson.TypeAdapter delegate -> a
    void setDelegate(com.google.gson.TypeAdapter) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.InstanceCreator -> com.google.gson.q:
    java.lang.Object createInstance(java.lang.reflect.Type) -> a
com.google.gson.JsonArray -> com.google.gson.r:
    java.util.List elements -> a
    void add(com.google.gson.JsonElement) -> a
    java.util.Iterator iterator() -> iterator
    java.lang.Number getAsNumber() -> a
    java.lang.String getAsString() -> b
    double getAsDouble() -> c
    long getAsLong() -> d
    int getAsInt() -> e
    boolean getAsBoolean() -> f
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.gson.JsonDeserializationContext -> com.google.gson.s:
com.google.gson.JsonElement -> com.google.gson.t:
    boolean isJsonArray() -> g
    boolean isJsonObject() -> h
    boolean isJsonPrimitive() -> i
    boolean isJsonNull() -> j
    com.google.gson.JsonObject getAsJsonObject() -> k
    com.google.gson.JsonArray getAsJsonArray() -> l
    com.google.gson.JsonPrimitive getAsJsonPrimitive() -> m
    boolean getAsBoolean() -> f
    java.lang.Boolean getAsBooleanWrapper() -> n
    java.lang.Number getAsNumber() -> a
    java.lang.String getAsString() -> b
    double getAsDouble() -> c
    long getAsLong() -> d
    int getAsInt() -> e
    java.lang.String toString() -> toString
com.google.gson.JsonIOException -> com.google.gson.u:
com.google.gson.JsonNull -> com.google.gson.v:
    com.google.gson.JsonNull INSTANCE -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.gson.JsonObject -> com.google.gson.w:
    com.google.gson.internal.LinkedTreeMap members -> a
    void add(java.lang.String,com.google.gson.JsonElement) -> a
    java.util.Set entrySet() -> o
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.gson.JsonParseException -> com.google.gson.x:
com.google.gson.JsonParser -> com.google.gson.y:
    com.google.gson.JsonElement parse(java.lang.String) -> a
    com.google.gson.JsonElement parse(java.io.Reader) -> a
    com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader) -> a
com.google.gson.JsonPrimitive -> com.google.gson.z:
    java.lang.Class[] PRIMITIVE_TYPES -> a
    java.lang.Object value -> b
    void setValue(java.lang.Object) -> a
    boolean isBoolean() -> o
    java.lang.Boolean getAsBooleanWrapper() -> n
    boolean getAsBoolean() -> f
    boolean isNumber() -> p
    java.lang.Number getAsNumber() -> a
    boolean isString() -> q
    java.lang.String getAsString() -> b
    double getAsDouble() -> c
    long getAsLong() -> d
    int getAsInt() -> e
    boolean isPrimitiveOrString(java.lang.Object) -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean isIntegral(com.google.gson.JsonPrimitive) -> a
com.google.gson.JsonSerializationContext -> com.google.gson.aa:
com.google.gson.JsonSyntaxException -> com.google.gson.ab:
com.google.gson.LongSerializationPolicy -> com.google.gson.ac:
    com.google.gson.LongSerializationPolicy DEFAULT -> a
    com.google.gson.LongSerializationPolicy STRING -> b
    com.google.gson.LongSerializationPolicy[] $VALUES -> c
    com.google.gson.LongSerializationPolicy[] values() -> values
    com.google.gson.LongSerializationPolicy valueOf(java.lang.String) -> valueOf
com.google.gson.LongSerializationPolicy$1 -> com.google.gson.ad:
com.google.gson.LongSerializationPolicy$2 -> com.google.gson.ae:
com.google.gson.TypeAdapter -> com.google.gson.af:
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    com.google.gson.JsonElement toJsonTree(java.lang.Object) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
com.google.gson.TypeAdapterFactory -> com.google.gson.ag:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.annotations.Expose -> com.google.gson.a.a:
    boolean serialize() -> a
    boolean deserialize() -> b
com.google.gson.annotations.SerializedName -> com.google.gson.a.b:
    java.lang.String value() -> a
com.google.gson.annotations.Since -> com.google.gson.a.c:
    double value() -> a
com.google.gson.annotations.Until -> com.google.gson.a.d:
    double value() -> a
com.google.gson.internal.$Gson$Preconditions -> com.google.gson.b.a:
    java.lang.Object checkNotNull(java.lang.Object) -> a
    void checkArgument(boolean) -> a
com.google.gson.internal.$Gson$Types -> com.google.gson.b.b:
    java.lang.reflect.Type[] EMPTY_TYPE_ARRAY -> a
    java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[]) -> a
    java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type) -> a
    java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type) -> b
    java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type) -> c
    java.lang.reflect.Type canonicalize(java.lang.reflect.Type) -> d
    java.lang.Class getRawType(java.lang.reflect.Type) -> e
    boolean equal(java.lang.Object,java.lang.Object) -> a
    boolean equals(java.lang.reflect.Type,java.lang.reflect.Type) -> a
    int hashCodeOrZero(java.lang.Object) -> b
    java.lang.String typeToString(java.lang.reflect.Type) -> f
    java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> a
    java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class) -> b
    java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type) -> g
    java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type,java.lang.Class) -> a
    java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type,java.lang.Class) -> b
    java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type) -> a
    java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.TypeVariable) -> a
    int indexOf(java.lang.Object[],java.lang.Object) -> a
    java.lang.Class declaringClassOf(java.lang.reflect.TypeVariable) -> a
    void checkNotPrimitive(java.lang.reflect.Type) -> i
    void access$000(java.lang.reflect.Type) -> h
    int access$100(java.lang.Object) -> a
com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl -> com.google.gson.b.c:
    java.lang.reflect.Type componentType -> a
    java.lang.reflect.Type getGenericComponentType() -> getGenericComponentType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl -> com.google.gson.b.d:
    java.lang.reflect.Type ownerType -> a
    java.lang.reflect.Type rawType -> b
    java.lang.reflect.Type[] typeArguments -> c
    java.lang.reflect.Type[] getActualTypeArguments() -> getActualTypeArguments
    java.lang.reflect.Type getRawType() -> getRawType
    java.lang.reflect.Type getOwnerType() -> getOwnerType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.gson.internal.$Gson$Types$WildcardTypeImpl -> com.google.gson.b.e:
    java.lang.reflect.Type upperBound -> a
    java.lang.reflect.Type lowerBound -> b
    java.lang.reflect.Type[] getUpperBounds() -> getUpperBounds
    java.lang.reflect.Type[] getLowerBounds() -> getLowerBounds
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.gson.internal.ConstructorConstructor -> com.google.gson.b.f:
    java.util.Map instanceCreators -> a
    com.google.gson.internal.ObjectConstructor get(com.google.gson.reflect.TypeToken) -> a
    com.google.gson.internal.ObjectConstructor newDefaultConstructor(java.lang.Class) -> a
    com.google.gson.internal.ObjectConstructor newDefaultImplementationConstructor(java.lang.reflect.Type,java.lang.Class) -> a
    com.google.gson.internal.ObjectConstructor newUnsafeAllocator(java.lang.reflect.Type,java.lang.Class) -> b
    java.lang.String toString() -> toString
com.google.gson.internal.ConstructorConstructor$1 -> com.google.gson.b.g:
    com.google.gson.InstanceCreator val$typeCreator -> a
    java.lang.reflect.Type val$type -> b
    com.google.gson.internal.ConstructorConstructor this$0 -> c
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$10 -> com.google.gson.b.h:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$11 -> com.google.gson.b.i:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$12 -> com.google.gson.b.j:
    com.google.gson.internal.UnsafeAllocator unsafeAllocator -> d
    java.lang.Class val$rawType -> a
    java.lang.reflect.Type val$type -> b
    com.google.gson.internal.ConstructorConstructor this$0 -> c
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$2 -> com.google.gson.b.k:
    com.google.gson.InstanceCreator val$rawTypeCreator -> a
    java.lang.reflect.Type val$type -> b
    com.google.gson.internal.ConstructorConstructor this$0 -> c
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$3 -> com.google.gson.b.l:
    java.lang.reflect.Constructor val$constructor -> a
    com.google.gson.internal.ConstructorConstructor this$0 -> b
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$4 -> com.google.gson.b.m:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$5 -> com.google.gson.b.n:
    java.lang.reflect.Type val$type -> a
    com.google.gson.internal.ConstructorConstructor this$0 -> b
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$6 -> com.google.gson.b.o:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$7 -> com.google.gson.b.p:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$8 -> com.google.gson.b.q:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.ConstructorConstructor$9 -> com.google.gson.b.r:
    com.google.gson.internal.ConstructorConstructor this$0 -> a
    java.lang.Object construct() -> a
com.google.gson.internal.Excluder -> com.google.gson.b.s:
    com.google.gson.internal.Excluder DEFAULT -> a
    double version -> b
    int modifiers -> c
    boolean serializeInnerClasses -> d
    boolean requireExpose -> e
    java.util.List serializationStrategies -> f
    java.util.List deserializationStrategies -> g
    com.google.gson.internal.Excluder clone() -> a
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    boolean excludeField(java.lang.reflect.Field,boolean) -> a
    boolean excludeClass(java.lang.Class,boolean) -> a
    boolean isAnonymousOrLocal(java.lang.Class) -> a
    boolean isInnerClass(java.lang.Class) -> b
    boolean isStatic(java.lang.Class) -> c
    boolean isValidVersion(com.google.gson.annotations.Since,com.google.gson.annotations.Until) -> a
    boolean isValidSince(com.google.gson.annotations.Since) -> a
    boolean isValidUntil(com.google.gson.annotations.Until) -> a
    java.lang.Object clone() -> clone
com.google.gson.internal.Excluder$1 -> com.google.gson.b.t:
    com.google.gson.TypeAdapter delegate -> f
    boolean val$skipDeserialize -> a
    boolean val$skipSerialize -> b
    com.google.gson.Gson val$gson -> c
    com.google.gson.reflect.TypeToken val$type -> d
    com.google.gson.internal.Excluder this$0 -> e
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    com.google.gson.TypeAdapter delegate() -> a
com.google.gson.internal.JsonReaderInternalAccess -> com.google.gson.b.u:
    com.google.gson.internal.JsonReaderInternalAccess INSTANCE -> INSTANCE
    void promoteNameToValue(com.google.gson.stream.JsonReader) -> promoteNameToValue
com.google.gson.internal.LazilyParsedNumber -> com.google.gson.b.v:
    java.lang.String value -> a
    int intValue() -> intValue
    long longValue() -> longValue
    float floatValue() -> floatValue
    double doubleValue() -> doubleValue
    java.lang.String toString() -> toString
com.google.gson.internal.LinkedTreeMap -> com.google.gson.b.w:
    java.util.Comparator NATURAL_ORDER -> g
    java.util.Comparator comparator -> a
    com.google.gson.internal.LinkedTreeMap$Node root -> b
    int size -> c
    int modCount -> d
    com.google.gson.internal.LinkedTreeMap$Node header -> e
    com.google.gson.internal.LinkedTreeMap$EntrySet entrySet -> h
    com.google.gson.internal.LinkedTreeMap$KeySet keySet -> i
    boolean $assertionsDisabled -> f
    int size() -> size
    java.lang.Object get(java.lang.Object) -> get
    boolean containsKey(java.lang.Object) -> containsKey
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void clear() -> clear
    java.lang.Object remove(java.lang.Object) -> remove
    com.google.gson.internal.LinkedTreeMap$Node find(java.lang.Object,boolean) -> a
    com.google.gson.internal.LinkedTreeMap$Node findByObject(java.lang.Object) -> a
    com.google.gson.internal.LinkedTreeMap$Node findByEntry(java.util.Map$Entry) -> a
    boolean equal(java.lang.Object,java.lang.Object) -> a
    void removeInternal(com.google.gson.internal.LinkedTreeMap$Node,boolean) -> a
    com.google.gson.internal.LinkedTreeMap$Node removeInternalByKey(java.lang.Object) -> b
    void replaceInParent(com.google.gson.internal.LinkedTreeMap$Node,com.google.gson.internal.LinkedTreeMap$Node) -> a
    void rebalance(com.google.gson.internal.LinkedTreeMap$Node,boolean) -> b
    void rotateLeft(com.google.gson.internal.LinkedTreeMap$Node) -> a
    void rotateRight(com.google.gson.internal.LinkedTreeMap$Node) -> b
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
com.google.gson.internal.LinkedTreeMap$1 -> com.google.gson.b.x:
    int compare(java.lang.Comparable,java.lang.Comparable) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.gson.internal.LinkedTreeMap$EntrySet -> com.google.gson.b.y:
    com.google.gson.internal.LinkedTreeMap this$0 -> a
    int size() -> size
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.gson.internal.LinkedTreeMap$EntrySet$1 -> com.google.gson.b.z:
    com.google.gson.internal.LinkedTreeMap$EntrySet this$1 -> a
    java.util.Map$Entry next() -> a
    java.lang.Object next() -> next
com.google.gson.internal.LinkedTreeMap$KeySet -> com.google.gson.b.aa:
    com.google.gson.internal.LinkedTreeMap this$0 -> a
    int size() -> size
    java.util.Iterator iterator() -> iterator
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    void clear() -> clear
com.google.gson.internal.LinkedTreeMap$KeySet$1 -> com.google.gson.b.ab:
    com.google.gson.internal.LinkedTreeMap$KeySet this$1 -> a
    java.lang.Object next() -> next
com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator -> com.google.gson.b.ac:
    com.google.gson.internal.LinkedTreeMap$Node next -> b
    com.google.gson.internal.LinkedTreeMap$Node lastReturned -> c
    int expectedModCount -> d
    com.google.gson.internal.LinkedTreeMap this$0 -> e
    boolean hasNext() -> hasNext
    com.google.gson.internal.LinkedTreeMap$Node nextNode() -> b
    void remove() -> remove
com.google.gson.internal.LinkedTreeMap$Node -> com.google.gson.b.ad:
    com.google.gson.internal.LinkedTreeMap$Node parent -> a
    com.google.gson.internal.LinkedTreeMap$Node left -> b
    com.google.gson.internal.LinkedTreeMap$Node right -> c
    com.google.gson.internal.LinkedTreeMap$Node next -> d
    com.google.gson.internal.LinkedTreeMap$Node prev -> e
    java.lang.Object key -> f
    java.lang.Object value -> g
    int height -> h
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    com.google.gson.internal.LinkedTreeMap$Node first() -> a
    com.google.gson.internal.LinkedTreeMap$Node last() -> b
com.google.gson.internal.ObjectConstructor -> com.google.gson.b.ae:
    java.lang.Object construct() -> a
com.google.gson.internal.Primitives -> com.google.gson.b.af:
    java.util.Map PRIMITIVE_TO_WRAPPER_TYPE -> a
    java.util.Map WRAPPER_TO_PRIMITIVE_TYPE -> b
    void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class) -> a
    boolean isPrimitive(java.lang.reflect.Type) -> a
    java.lang.Class wrap(java.lang.Class) -> a
com.google.gson.internal.Streams -> com.google.gson.b.ag:
    com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter) -> a
com.google.gson.internal.UnsafeAllocator -> com.google.gson.b.ah:
    java.lang.Object newInstance(java.lang.Class) -> a
    com.google.gson.internal.UnsafeAllocator create() -> a
com.google.gson.internal.UnsafeAllocator$1 -> com.google.gson.b.ai:
    java.lang.reflect.Method val$allocateInstance -> a
    java.lang.Object val$unsafe -> b
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.UnsafeAllocator$2 -> com.google.gson.b.aj:
    java.lang.reflect.Method val$newInstance -> a
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.UnsafeAllocator$3 -> com.google.gson.b.ak:
    java.lang.reflect.Method val$newInstance -> a
    int val$constructorId -> b
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.UnsafeAllocator$4 -> com.google.gson.b.al:
    java.lang.Object newInstance(java.lang.Class) -> a
com.google.gson.internal.bind.ArrayTypeAdapter -> com.google.gson.b.a.a:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.lang.Class componentType -> b
    com.google.gson.TypeAdapter componentTypeAdapter -> c
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.ArrayTypeAdapter$1 -> com.google.gson.b.a.b:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.CollectionTypeAdapterFactory -> com.google.gson.b.a.c:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> a
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter -> com.google.gson.b.a.d:
    com.google.gson.TypeAdapter elementTypeAdapter -> a
    com.google.gson.internal.ObjectConstructor constructor -> b
    java.util.Collection read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Collection) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.DateTypeAdapter -> com.google.gson.b.a.e:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.text.DateFormat enUsFormat -> b
    java.text.DateFormat localFormat -> c
    java.text.DateFormat iso8601Format -> d
    java.text.DateFormat buildIso8601Format() -> a
    java.util.Date read(com.google.gson.stream.JsonReader) -> a
    java.util.Date deserializeToDate(java.lang.String) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Date) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.DateTypeAdapter$1 -> com.google.gson.b.a.f:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.JsonTreeReader -> com.google.gson.b.a.g:
    java.io.Reader UNREADABLE_READER -> a
    java.lang.Object SENTINEL_CLOSED -> b
    java.util.List stack -> c
    void beginArray() -> beginArray
    void endArray() -> endArray
    void beginObject() -> beginObject
    void endObject() -> endObject
    boolean hasNext() -> hasNext
    com.google.gson.stream.JsonToken peek() -> peek
    java.lang.Object peekStack() -> b
    java.lang.Object popStack() -> c
    void expect(com.google.gson.stream.JsonToken) -> a
    java.lang.String nextName() -> nextName
    java.lang.String nextString() -> nextString
    boolean nextBoolean() -> nextBoolean
    void nextNull() -> nextNull
    double nextDouble() -> nextDouble
    long nextLong() -> nextLong
    int nextInt() -> nextInt
    void close() -> close
    void skipValue() -> skipValue
    java.lang.String toString() -> toString
    void promoteNameToValue() -> a
com.google.gson.internal.bind.JsonTreeReader$1 -> com.google.gson.b.a.h:
    int read(char[],int,int) -> read
    void close() -> close
com.google.gson.internal.bind.JsonTreeWriter -> com.google.gson.b.a.i:
    java.io.Writer UNWRITABLE_WRITER -> a
    com.google.gson.JsonPrimitive SENTINEL_CLOSED -> b
    java.util.List stack -> c
    java.lang.String pendingName -> d
    com.google.gson.JsonElement product -> e
    com.google.gson.JsonElement get() -> a
    com.google.gson.JsonElement peek() -> b
    void put(com.google.gson.JsonElement) -> a
    com.google.gson.stream.JsonWriter beginArray() -> beginArray
    com.google.gson.stream.JsonWriter endArray() -> endArray
    com.google.gson.stream.JsonWriter beginObject() -> beginObject
    com.google.gson.stream.JsonWriter endObject() -> endObject
    com.google.gson.stream.JsonWriter name(java.lang.String) -> name
    com.google.gson.stream.JsonWriter value(java.lang.String) -> value
    com.google.gson.stream.JsonWriter nullValue() -> nullValue
    com.google.gson.stream.JsonWriter value(boolean) -> value
    com.google.gson.stream.JsonWriter value(double) -> value
    com.google.gson.stream.JsonWriter value(long) -> value
    com.google.gson.stream.JsonWriter value(java.lang.Number) -> value
    void flush() -> flush
    void close() -> close
com.google.gson.internal.bind.JsonTreeWriter$1 -> com.google.gson.b.a.j:
    void write(char[],int,int) -> write
    void flush() -> flush
    void close() -> close
com.google.gson.internal.bind.MapTypeAdapterFactory -> com.google.gson.b.a.k:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> a
    boolean complexMapKeySerialization -> b
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    com.google.gson.TypeAdapter getKeyAdapter(com.google.gson.Gson,java.lang.reflect.Type) -> a
    boolean access$000(com.google.gson.internal.bind.MapTypeAdapterFactory) -> a
com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter -> com.google.gson.b.a.l:
    com.google.gson.TypeAdapter keyTypeAdapter -> b
    com.google.gson.TypeAdapter valueTypeAdapter -> c
    com.google.gson.internal.ObjectConstructor constructor -> d
    com.google.gson.internal.bind.MapTypeAdapterFactory this$0 -> a
    java.util.Map read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Map) -> a
    java.lang.String keyToString(com.google.gson.JsonElement) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.ObjectTypeAdapter -> com.google.gson.b.a.m:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    com.google.gson.Gson gson -> b
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.ObjectTypeAdapter$1 -> com.google.gson.b.a.n:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.ObjectTypeAdapter$2 -> com.google.gson.b.a.o:
    int[] $SwitchMap$com$google$gson$stream$JsonToken -> a
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory -> com.google.gson.b.a.p:
    com.google.gson.internal.ConstructorConstructor constructorConstructor -> a
    com.google.gson.FieldNamingStrategy fieldNamingPolicy -> b
    com.google.gson.internal.Excluder excluder -> c
    boolean excludeField(java.lang.reflect.Field,boolean) -> a
    java.lang.String getFieldName(java.lang.reflect.Field) -> a
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField createBoundField(com.google.gson.Gson,java.lang.reflect.Field,java.lang.String,com.google.gson.reflect.TypeToken,boolean,boolean) -> a
    java.util.Map getBoundFields(com.google.gson.Gson,com.google.gson.reflect.TypeToken,java.lang.Class) -> a
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1 -> com.google.gson.b.a.q:
    com.google.gson.TypeAdapter typeAdapter -> a
    com.google.gson.Gson val$context -> b
    com.google.gson.reflect.TypeToken val$fieldType -> c
    java.lang.reflect.Field val$field -> d
    boolean val$isPrimitive -> e
    com.google.gson.internal.bind.ReflectiveTypeAdapterFactory this$0 -> f
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    void read(com.google.gson.stream.JsonReader,java.lang.Object) -> a
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter -> com.google.gson.b.a.r:
    com.google.gson.internal.ObjectConstructor constructor -> a
    java.util.Map boundFields -> b
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField -> com.google.gson.b.a.s:
    java.lang.String name -> g
    boolean serialized -> h
    boolean deserialized -> i
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    void read(com.google.gson.stream.JsonReader,java.lang.Object) -> a
com.google.gson.internal.bind.SqlDateTypeAdapter -> com.google.gson.b.a.t:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.text.DateFormat format -> b
    java.sql.Date read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.sql.Date) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.SqlDateTypeAdapter$1 -> com.google.gson.b.a.u:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TimeTypeAdapter -> com.google.gson.b.a.v:
    com.google.gson.TypeAdapterFactory FACTORY -> a
    java.text.DateFormat format -> b
    java.sql.Time read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.sql.Time) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TimeTypeAdapter$1 -> com.google.gson.b.a.w:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper -> com.google.gson.b.a.x:
    com.google.gson.Gson context -> a
    com.google.gson.TypeAdapter delegate -> b
    java.lang.reflect.Type type -> c
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
    java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters -> com.google.gson.b.a.y:
    com.google.gson.TypeAdapter CLASS -> a
    com.google.gson.TypeAdapterFactory CLASS_FACTORY -> b
    com.google.gson.TypeAdapter BIT_SET -> c
    com.google.gson.TypeAdapterFactory BIT_SET_FACTORY -> d
    com.google.gson.TypeAdapter BOOLEAN -> e
    com.google.gson.TypeAdapter BOOLEAN_AS_STRING -> f
    com.google.gson.TypeAdapterFactory BOOLEAN_FACTORY -> g
    com.google.gson.TypeAdapter BYTE -> h
    com.google.gson.TypeAdapterFactory BYTE_FACTORY -> i
    com.google.gson.TypeAdapter SHORT -> j
    com.google.gson.TypeAdapterFactory SHORT_FACTORY -> k
    com.google.gson.TypeAdapter INTEGER -> l
    com.google.gson.TypeAdapterFactory INTEGER_FACTORY -> m
    com.google.gson.TypeAdapter LONG -> n
    com.google.gson.TypeAdapter FLOAT -> o
    com.google.gson.TypeAdapter DOUBLE -> p
    com.google.gson.TypeAdapter NUMBER -> q
    com.google.gson.TypeAdapterFactory NUMBER_FACTORY -> r
    com.google.gson.TypeAdapter CHARACTER -> s
    com.google.gson.TypeAdapterFactory CHARACTER_FACTORY -> t
    com.google.gson.TypeAdapter STRING -> u
    com.google.gson.TypeAdapter BIG_DECIMAL -> v
    com.google.gson.TypeAdapter BIG_INTEGER -> w
    com.google.gson.TypeAdapterFactory STRING_FACTORY -> x
    com.google.gson.TypeAdapter STRING_BUILDER -> y
    com.google.gson.TypeAdapterFactory STRING_BUILDER_FACTORY -> z
    com.google.gson.TypeAdapter STRING_BUFFER -> A
    com.google.gson.TypeAdapterFactory STRING_BUFFER_FACTORY -> B
    com.google.gson.TypeAdapter URL -> C
    com.google.gson.TypeAdapterFactory URL_FACTORY -> D
    com.google.gson.TypeAdapter URI -> E
    com.google.gson.TypeAdapterFactory URI_FACTORY -> F
    com.google.gson.TypeAdapter INET_ADDRESS -> G
    com.google.gson.TypeAdapterFactory INET_ADDRESS_FACTORY -> H
    com.google.gson.TypeAdapter UUID -> I
    com.google.gson.TypeAdapterFactory UUID_FACTORY -> J
    com.google.gson.TypeAdapterFactory TIMESTAMP_FACTORY -> K
    com.google.gson.TypeAdapter CALENDAR -> L
    com.google.gson.TypeAdapterFactory CALENDAR_FACTORY -> M
    com.google.gson.TypeAdapter LOCALE -> N
    com.google.gson.TypeAdapterFactory LOCALE_FACTORY -> O
    com.google.gson.TypeAdapter JSON_ELEMENT -> P
    com.google.gson.TypeAdapterFactory JSON_ELEMENT_FACTORY -> Q
    com.google.gson.TypeAdapterFactory ENUM_FACTORY -> R
    com.google.gson.TypeAdapterFactory newEnumTypeHierarchyFactory() -> a
    com.google.gson.TypeAdapterFactory newFactory(java.lang.Class,com.google.gson.TypeAdapter) -> a
    com.google.gson.TypeAdapterFactory newFactory(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter) -> a
    com.google.gson.TypeAdapterFactory newFactoryForMultipleTypes(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter) -> b
    com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class,com.google.gson.TypeAdapter) -> b
com.google.gson.internal.bind.TypeAdapters$1 -> com.google.gson.b.a.z:
    void write(com.google.gson.stream.JsonWriter,java.lang.Class) -> a
    java.lang.Class read(com.google.gson.stream.JsonReader) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$10 -> com.google.gson.b.a.aa:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$11 -> com.google.gson.b.a.ab:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$12 -> com.google.gson.b.a.ac:
    java.lang.Character read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Character) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$13 -> com.google.gson.b.a.ad:
    java.lang.String read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.String) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$14 -> com.google.gson.b.a.ae:
    java.math.BigDecimal read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.math.BigDecimal) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$15 -> com.google.gson.b.a.af:
    java.math.BigInteger read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.math.BigInteger) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$16 -> com.google.gson.b.a.ag:
    java.lang.StringBuilder read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.StringBuilder) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$17 -> com.google.gson.b.a.ah:
    java.lang.StringBuffer read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.StringBuffer) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$18 -> com.google.gson.b.a.ai:
    java.net.URL read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.net.URL) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$19 -> com.google.gson.b.a.aj:
    java.net.URI read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.net.URI) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$2 -> com.google.gson.b.a.ak:
    java.util.BitSet read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.BitSet) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$20 -> com.google.gson.b.a.al:
    java.net.InetAddress read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.net.InetAddress) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$21 -> com.google.gson.b.a.am:
    java.util.UUID read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.UUID) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$22 -> com.google.gson.b.a.an:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TypeAdapters$22$1 -> com.google.gson.b.a.ao:
    com.google.gson.TypeAdapter val$dateTypeAdapter -> a
    com.google.gson.internal.bind.TypeAdapters$22 this$0 -> b
    java.sql.Timestamp read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.sql.Timestamp) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$23 -> com.google.gson.b.a.ap:
    java.util.Calendar read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Calendar) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$24 -> com.google.gson.b.a.aq:
    java.util.Locale read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.util.Locale) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$25 -> com.google.gson.b.a.ar:
    com.google.gson.JsonElement read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,com.google.gson.JsonElement) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$26 -> com.google.gson.b.a.as:
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
com.google.gson.internal.bind.TypeAdapters$28 -> com.google.gson.b.a.at:
    java.lang.Class val$type -> a
    com.google.gson.TypeAdapter val$typeAdapter -> b
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$29 -> com.google.gson.b.a.au:
    java.lang.Class val$unboxed -> a
    java.lang.Class val$boxed -> b
    com.google.gson.TypeAdapter val$typeAdapter -> c
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$3 -> com.google.gson.b.a.av:
    java.lang.Boolean read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Boolean) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$30 -> com.google.gson.b.a.aw:
    java.lang.Class val$base -> a
    java.lang.Class val$sub -> b
    com.google.gson.TypeAdapter val$typeAdapter -> c
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$31 -> com.google.gson.b.a.ax:
    java.lang.Class val$clazz -> a
    com.google.gson.TypeAdapter val$typeAdapter -> b
    com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken) -> a
    java.lang.String toString() -> toString
com.google.gson.internal.bind.TypeAdapters$32 -> com.google.gson.b.a.ay:
    int[] $SwitchMap$com$google$gson$stream$JsonToken -> a
com.google.gson.internal.bind.TypeAdapters$4 -> com.google.gson.b.a.az:
    java.lang.Boolean read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Boolean) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$5 -> com.google.gson.b.a.ba:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$6 -> com.google.gson.b.a.bb:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$7 -> com.google.gson.b.a.bc:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$8 -> com.google.gson.b.a.bd:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$9 -> com.google.gson.b.a.be:
    java.lang.Number read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Number) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter -> com.google.gson.b.a.bf:
    java.util.Map nameToConstant -> a
    java.util.Map constantToName -> b
    java.lang.Enum read(com.google.gson.stream.JsonReader) -> a
    void write(com.google.gson.stream.JsonWriter,java.lang.Enum) -> a
    java.lang.Object read(com.google.gson.stream.JsonReader) -> b
    void write(com.google.gson.stream.JsonWriter,java.lang.Object) -> a
com.google.gson.reflect.TypeToken -> com.google.gson.c.a:
    java.lang.Class rawType -> a
    java.lang.reflect.Type type -> b
    int hashCode -> c
    java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class) -> a
    java.lang.Class getRawType() -> a
    java.lang.reflect.Type getType() -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    com.google.gson.reflect.TypeToken get(java.lang.reflect.Type) -> a
    com.google.gson.reflect.TypeToken get(java.lang.Class) -> b
com.google.gson.stream.JsonReader -> com.google.gson.stream.JsonReader:
    char[] NON_EXECUTE_PREFIX -> NON_EXECUTE_PREFIX
    long MIN_INCOMPLETE_INTEGER -> MIN_INCOMPLETE_INTEGER
    int PEEKED_NONE -> PEEKED_NONE
    int PEEKED_BEGIN_OBJECT -> PEEKED_BEGIN_OBJECT
    int PEEKED_END_OBJECT -> PEEKED_END_OBJECT
    int PEEKED_BEGIN_ARRAY -> PEEKED_BEGIN_ARRAY
    int PEEKED_END_ARRAY -> PEEKED_END_ARRAY
    int PEEKED_TRUE -> PEEKED_TRUE
    int PEEKED_FALSE -> PEEKED_FALSE
    int PEEKED_NULL -> PEEKED_NULL
    int PEEKED_SINGLE_QUOTED -> PEEKED_SINGLE_QUOTED
    int PEEKED_DOUBLE_QUOTED -> PEEKED_DOUBLE_QUOTED
    int PEEKED_UNQUOTED -> PEEKED_UNQUOTED
    int PEEKED_BUFFERED -> PEEKED_BUFFERED
    int PEEKED_SINGLE_QUOTED_NAME -> PEEKED_SINGLE_QUOTED_NAME
    int PEEKED_DOUBLE_QUOTED_NAME -> PEEKED_DOUBLE_QUOTED_NAME
    int PEEKED_UNQUOTED_NAME -> PEEKED_UNQUOTED_NAME
    int PEEKED_LONG -> PEEKED_LONG
    int PEEKED_NUMBER -> PEEKED_NUMBER
    int PEEKED_EOF -> PEEKED_EOF
    int NUMBER_CHAR_NONE -> NUMBER_CHAR_NONE
    int NUMBER_CHAR_SIGN -> NUMBER_CHAR_SIGN
    int NUMBER_CHAR_DIGIT -> NUMBER_CHAR_DIGIT
    int NUMBER_CHAR_DECIMAL -> NUMBER_CHAR_DECIMAL
    int NUMBER_CHAR_FRACTION_DIGIT -> NUMBER_CHAR_FRACTION_DIGIT
    int NUMBER_CHAR_EXP_E -> NUMBER_CHAR_EXP_E
    int NUMBER_CHAR_EXP_SIGN -> NUMBER_CHAR_EXP_SIGN
    int NUMBER_CHAR_EXP_DIGIT -> NUMBER_CHAR_EXP_DIGIT
    java.io.Reader in -> in
    boolean lenient -> lenient
    char[] buffer -> buffer
    int pos -> pos
    int limit -> limit
    int lineNumber -> lineNumber
    int lineStart -> lineStart
    int peeked -> peeked
    long peekedLong -> peekedLong
    int peekedNumberLength -> peekedNumberLength
    java.lang.String peekedString -> peekedString
    int[] stack -> stack
    int stackSize -> stackSize
    void setLenient(boolean) -> setLenient
    boolean isLenient() -> isLenient
    void beginArray() -> beginArray
    void endArray() -> endArray
    void beginObject() -> beginObject
    void endObject() -> endObject
    boolean hasNext() -> hasNext
    com.google.gson.stream.JsonToken peek() -> peek
    int doPeek() -> doPeek
    int peekKeyword() -> peekKeyword
    int peekNumber() -> peekNumber
    boolean isLiteral(char) -> isLiteral
    java.lang.String nextName() -> nextName
    java.lang.String nextString() -> nextString
    boolean nextBoolean() -> nextBoolean
    void nextNull() -> nextNull
    double nextDouble() -> nextDouble
    long nextLong() -> nextLong
    java.lang.String nextQuotedValue(char) -> nextQuotedValue
    java.lang.String nextUnquotedValue() -> nextUnquotedValue
    void skipQuotedValue(char) -> skipQuotedValue
    void skipUnquotedValue() -> skipUnquotedValue
    int nextInt() -> nextInt
    void close() -> close
    void skipValue() -> skipValue
    void push(int) -> push
    boolean fillBuffer(int) -> fillBuffer
    int getLineNumber() -> getLineNumber
    int getColumnNumber() -> getColumnNumber
    int nextNonWhitespace(boolean) -> nextNonWhitespace
    void checkLenient() -> checkLenient
    void skipToEndOfLine() -> skipToEndOfLine
    boolean skipTo(java.lang.String) -> skipTo
    java.lang.String toString() -> toString
    char readEscapeCharacter() -> readEscapeCharacter
    java.io.IOException syntaxError(java.lang.String) -> syntaxError
    void consumeNonExecutePrefix() -> consumeNonExecutePrefix
    int access$000(com.google.gson.stream.JsonReader) -> access$000
    int access$100(com.google.gson.stream.JsonReader) -> access$100
    int access$002(com.google.gson.stream.JsonReader,int) -> access$002
    int access$200(com.google.gson.stream.JsonReader) -> access$200
    int access$300(com.google.gson.stream.JsonReader) -> access$300
com.google.gson.stream.JsonReader$1 -> com.google.gson.stream.JsonReader$1:
    void promoteNameToValue(com.google.gson.stream.JsonReader) -> promoteNameToValue
com.google.gson.stream.JsonScope -> com.google.gson.stream.JsonScope:
    int EMPTY_ARRAY -> EMPTY_ARRAY
    int NONEMPTY_ARRAY -> NONEMPTY_ARRAY
    int EMPTY_OBJECT -> EMPTY_OBJECT
    int DANGLING_NAME -> DANGLING_NAME
    int NONEMPTY_OBJECT -> NONEMPTY_OBJECT
    int EMPTY_DOCUMENT -> EMPTY_DOCUMENT
    int NONEMPTY_DOCUMENT -> NONEMPTY_DOCUMENT
    int CLOSED -> CLOSED
com.google.gson.stream.JsonToken -> com.google.gson.stream.JsonToken:
    com.google.gson.stream.JsonToken BEGIN_ARRAY -> BEGIN_ARRAY
    com.google.gson.stream.JsonToken END_ARRAY -> END_ARRAY
    com.google.gson.stream.JsonToken BEGIN_OBJECT -> BEGIN_OBJECT
    com.google.gson.stream.JsonToken END_OBJECT -> END_OBJECT
    com.google.gson.stream.JsonToken NAME -> NAME
    com.google.gson.stream.JsonToken STRING -> STRING
    com.google.gson.stream.JsonToken NUMBER -> NUMBER
    com.google.gson.stream.JsonToken BOOLEAN -> BOOLEAN
    com.google.gson.stream.JsonToken NULL -> NULL
    com.google.gson.stream.JsonToken END_DOCUMENT -> END_DOCUMENT
    com.google.gson.stream.JsonToken[] $VALUES -> $VALUES
    com.google.gson.stream.JsonToken[] values() -> values
    com.google.gson.stream.JsonToken valueOf(java.lang.String) -> valueOf
com.google.gson.stream.JsonWriter -> com.google.gson.stream.JsonWriter:
    java.lang.String[] REPLACEMENT_CHARS -> REPLACEMENT_CHARS
    java.lang.String[] HTML_SAFE_REPLACEMENT_CHARS -> HTML_SAFE_REPLACEMENT_CHARS
    java.io.Writer out -> out
    int[] stack -> stack
    int stackSize -> stackSize
    java.lang.String indent -> indent
    java.lang.String separator -> separator
    boolean lenient -> lenient
    boolean htmlSafe -> htmlSafe
    java.lang.String deferredName -> deferredName
    boolean serializeNulls -> serializeNulls
    void setIndent(java.lang.String) -> setIndent
    void setLenient(boolean) -> setLenient
    boolean isLenient() -> isLenient
    void setHtmlSafe(boolean) -> setHtmlSafe
    boolean isHtmlSafe() -> isHtmlSafe
    void setSerializeNulls(boolean) -> setSerializeNulls
    boolean getSerializeNulls() -> getSerializeNulls
    com.google.gson.stream.JsonWriter beginArray() -> beginArray
    com.google.gson.stream.JsonWriter endArray() -> endArray
    com.google.gson.stream.JsonWriter beginObject() -> beginObject
    com.google.gson.stream.JsonWriter endObject() -> endObject
    com.google.gson.stream.JsonWriter open(int,java.lang.String) -> open
    com.google.gson.stream.JsonWriter close(int,int,java.lang.String) -> close
    void push(int) -> push
    int peek() -> peek
    void replaceTop(int) -> replaceTop
    com.google.gson.stream.JsonWriter name(java.lang.String) -> name
    void writeDeferredName() -> writeDeferredName
    com.google.gson.stream.JsonWriter value(java.lang.String) -> value
    com.google.gson.stream.JsonWriter nullValue() -> nullValue
    com.google.gson.stream.JsonWriter value(boolean) -> value
    com.google.gson.stream.JsonWriter value(double) -> value
    com.google.gson.stream.JsonWriter value(long) -> value
    com.google.gson.stream.JsonWriter value(java.lang.Number) -> value
    void flush() -> flush
    void close() -> close
    void string(java.lang.String) -> string
    void newline() -> newline
    void beforeName() -> beforeName
    void beforeValue(boolean) -> beforeValue
com.google.gson.stream.MalformedJsonException -> com.google.gson.stream.MalformedJsonException:
    long serialVersionUID -> serialVersionUID
com.loopj.android.http.AsyncHttpClient -> com.a.a.a.a:
    int maxConnections -> a
    int timeout -> b
    org.apache.http.impl.client.DefaultHttpClient httpClient -> c
    org.apache.http.protocol.HttpContext httpContext -> d
    java.util.concurrent.ExecutorService threadPool -> e
    java.util.Map requestMap -> f
    java.util.Map clientHeaderMap -> g
    boolean isUrlEncodingEnabled -> h
    org.apache.http.conn.scheme.SchemeRegistry getDefaultSchemeRegistry(boolean,int,int) -> a
    java.util.concurrent.ExecutorService getDefaultThreadPool() -> a
    void setTimeout(int) -> a
    com.loopj.android.http.RequestHandle post(java.lang.String,com.loopj.android.http.RequestParams,com.loopj.android.http.ResponseHandlerInterface) -> a
    com.loopj.android.http.RequestHandle post(android.content.Context,java.lang.String,com.loopj.android.http.RequestParams,com.loopj.android.http.ResponseHandlerInterface) -> a
    com.loopj.android.http.RequestHandle post(android.content.Context,java.lang.String,org.apache.http.HttpEntity,java.lang.String,com.loopj.android.http.ResponseHandlerInterface) -> a
    com.loopj.android.http.RequestHandle delete(java.lang.String,com.loopj.android.http.ResponseHandlerInterface) -> delete
    com.loopj.android.http.RequestHandle delete(android.content.Context,java.lang.String,com.loopj.android.http.ResponseHandlerInterface) -> delete
    com.loopj.android.http.RequestHandle delete(android.content.Context,java.lang.String,org.apache.http.Header[],com.loopj.android.http.ResponseHandlerInterface) -> delete
    com.loopj.android.http.RequestHandle delete(android.content.Context,java.lang.String,org.apache.http.Header[],com.loopj.android.http.RequestParams,com.loopj.android.http.ResponseHandlerInterface) -> delete
    com.loopj.android.http.AsyncHttpRequest newAsyncHttpRequest(org.apache.http.impl.client.DefaultHttpClient,org.apache.http.protocol.HttpContext,org.apache.http.client.methods.HttpUriRequest,java.lang.String,com.loopj.android.http.ResponseHandlerInterface,android.content.Context) -> a
    com.loopj.android.http.RequestHandle sendRequest(org.apache.http.impl.client.DefaultHttpClient,org.apache.http.protocol.HttpContext,org.apache.http.client.methods.HttpUriRequest,java.lang.String,com.loopj.android.http.ResponseHandlerInterface,android.content.Context) -> b
    java.lang.String getUrlWithQueryString(boolean,java.lang.String,com.loopj.android.http.RequestParams) -> a
    boolean isInputStreamGZIPCompressed(java.io.PushbackInputStream) -> a
    void silentCloseInputStream(java.io.InputStream) -> a
    void silentCloseOutputStream(java.io.OutputStream) -> a
    org.apache.http.HttpEntity paramsToEntity(com.loopj.android.http.RequestParams,com.loopj.android.http.ResponseHandlerInterface) -> a
    org.apache.http.client.methods.HttpEntityEnclosingRequestBase addEntityToRequestBase(org.apache.http.client.methods.HttpEntityEnclosingRequestBase,org.apache.http.HttpEntity) -> a
    void endEntityViaReflection(org.apache.http.HttpEntity) -> a
    java.util.Map access$000(com.loopj.android.http.AsyncHttpClient) -> a
com.loopj.android.http.AsyncHttpClient$1 -> com.a.a.a.b:
    com.loopj.android.http.AsyncHttpClient this$0 -> a
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
com.loopj.android.http.AsyncHttpClient$2 -> com.a.a.a.c:
    com.loopj.android.http.AsyncHttpClient this$0 -> a
    void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext) -> process
com.loopj.android.http.AsyncHttpClient$3 -> com.a.a.a.d:
    com.loopj.android.http.AsyncHttpClient this$0 -> a
    void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext) -> process
com.loopj.android.http.AsyncHttpClient$InflatingEntity -> com.a.a.a.e:
    java.io.InputStream wrappedStream -> a
    java.io.PushbackInputStream pushbackStream -> b
    java.util.zip.GZIPInputStream gzippedStream -> c
    java.io.InputStream getContent() -> getContent
    long getContentLength() -> getContentLength
    void consumeContent() -> consumeContent
com.loopj.android.http.AsyncHttpRequest -> com.a.a.a.f:
    org.apache.http.impl.client.AbstractHttpClient client -> a
    org.apache.http.protocol.HttpContext context -> b
    org.apache.http.client.methods.HttpUriRequest request -> c
    com.loopj.android.http.ResponseHandlerInterface responseHandler -> d
    int executionCount -> e
    boolean isCancelled -> f
    boolean cancelIsNotified -> g
    boolean isFinished -> h
    void run() -> run
    void makeRequest() -> c
    void makeRequestWithRetries() -> d
    boolean isCancelled() -> a
    void sendCancelNotification() -> e
    boolean isDone() -> b
    boolean cancel(boolean) -> cancel
com.loopj.android.http.AsyncHttpResponseHandler -> com.a.a.a.g:
    java.lang.String responseCharset -> a
    android.os.Handler handler -> b
    boolean useSynchronousMode -> c
    java.net.URI requestURI -> d
    org.apache.http.Header[] requestHeaders -> e
    void setRequestURI(java.net.URI) -> a
    void setRequestHeaders(org.apache.http.Header[]) -> a
    boolean getUseSynchronousMode() -> a
    void setUseSynchronousMode(boolean) -> a
    void onProgress(int,int) -> a
    void onStart() -> b
    void onFinish() -> c
    void onSuccess(int,org.apache.http.Header[],byte[]) -> a
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> a
    void onRetry(int) -> a
    void onCancel() -> d
    void sendProgressMessage(int,int) -> b
    void sendSuccessMessage(int,org.apache.http.Header[],byte[]) -> b
    void sendFailureMessage(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> b
    void sendStartMessage() -> e
    void sendFinishMessage() -> f
    void sendRetryMessage(int) -> b
    void sendCancelMessage() -> g
    void handleMessage(android.os.Message) -> a
    void sendMessage(android.os.Message) -> b
    android.os.Message obtainMessage(int,java.lang.Object) -> a
    void sendResponseMessage(org.apache.http.HttpResponse) -> a
    byte[] getResponseData(org.apache.http.HttpEntity) -> a
com.loopj.android.http.AsyncHttpResponseHandler$ResponderHandler -> com.a.a.a.h:
    com.loopj.android.http.AsyncHttpResponseHandler mResponder -> a
    void handleMessage(android.os.Message) -> handleMessage
com.loopj.android.http.Base64 -> com.a.a.a.i:
com.loopj.android.http.Base64$Coder -> com.a.a.a.j:
    byte[] output -> a
    int op -> b
    boolean process(byte[],int,int,boolean) -> a
    int maxOutputSize(int) -> a
com.loopj.android.http.Base64$Decoder -> com.a.a.a.k:
    int[] DECODE -> c
    int[] DECODE_WEBSAFE -> d
    int state -> e
    int value -> f
    int[] alphabet -> g
    int maxOutputSize(int) -> a
    boolean process(byte[],int,int,boolean) -> a
com.loopj.android.http.Base64$Encoder -> com.a.a.a.l:
    byte[] ENCODE -> g
    byte[] ENCODE_WEBSAFE -> h
    byte[] tail -> i
    int tailLen -> c
    int count -> j
    boolean do_padding -> d
    boolean do_newline -> e
    boolean do_cr -> f
    byte[] alphabet -> k
    int maxOutputSize(int) -> a
    boolean process(byte[],int,int,boolean) -> a
com.loopj.android.http.Base64DataException -> com.a.a.a.m:
com.loopj.android.http.Base64OutputStream -> com.a.a.a.n:
    com.loopj.android.http.Base64$Coder coder -> a
    int flags -> b
    byte[] buffer -> c
    int bpos -> d
    byte[] EMPTY -> e
    void write(int) -> write
    void flushBuffer() -> a
    void write(byte[],int,int) -> write
    void close() -> close
    void internalWrite(byte[],int,int,boolean) -> a
    byte[] embiggen(byte[],int) -> a
com.loopj.android.http.FileAsyncHttpResponseHandler -> com.a.a.a.o:
    java.io.File mFile -> a
    boolean $assertionsDisabled -> b
com.loopj.android.http.JsonStreamerEntity -> com.a.a.a.p:
    java.lang.UnsupportedOperationException ERR_UNSUPPORTED -> a
    byte[] buffer -> b
    java.lang.StringBuilder BUILDER -> c
    byte[] JSON_TRUE -> d
    byte[] JSON_FALSE -> e
    byte[] JSON_NULL -> f
    byte[] STREAM_NAME -> g
    byte[] STREAM_TYPE -> h
    byte[] STREAM_CONTENTS -> i
    byte[] STREAM_ELAPSED -> j
    org.apache.http.Header HEADER_JSON_CONTENT -> k
    org.apache.http.Header HEADER_GZIP_ENCODING -> l
    java.util.Map jsonParams -> m
    org.apache.http.Header contentEncoding -> n
    com.loopj.android.http.ResponseHandlerInterface progressHandler -> o
    void addPart(java.lang.String,java.lang.Object) -> a
    boolean isRepeatable() -> isRepeatable
    boolean isChunked() -> isChunked
    boolean isStreaming() -> isStreaming
    long getContentLength() -> getContentLength
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    org.apache.http.Header getContentType() -> getContentType
    void consumeContent() -> consumeContent
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    void writeToFromStream(java.io.OutputStream,com.loopj.android.http.RequestParams$StreamWrapper) -> a
    void writeToFromFile(java.io.OutputStream,com.loopj.android.http.RequestParams$FileWrapper) -> a
    void writeMetaData(java.io.OutputStream,java.lang.String,java.lang.String) -> a
    void endMetaData(java.io.OutputStream) -> a
    byte[] escape(java.lang.String) -> a
com.loopj.android.http.MySSLSocketFactory -> com.a.a.a.q:
    javax.net.ssl.SSLContext sslContext -> a
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> createSocket
    java.net.Socket createSocket() -> createSocket
    java.security.KeyStore getKeystore() -> a
    org.apache.http.conn.ssl.SSLSocketFactory getFixedSocketFactory() -> b
com.loopj.android.http.MySSLSocketFactory$1 -> com.a.a.a.r:
    com.loopj.android.http.MySSLSocketFactory this$0 -> a
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
com.loopj.android.http.RangeFileAsyncHttpResponseHandler -> com.a.a.a.s:
    long current -> c
    boolean append -> d
    void updateRequestHeaders(org.apache.http.client.methods.HttpUriRequest) -> a
com.loopj.android.http.RequestHandle -> com.a.a.a.t:
    java.lang.ref.WeakReference request -> a
    boolean cancel(boolean) -> cancel
    boolean isFinished() -> a
    boolean isCancelled() -> b
    boolean shouldBeGarbageCollected() -> c
com.loopj.android.http.RequestParams -> com.a.a.a.u:
    boolean isRepeatable -> a
    boolean useJsonStreamer -> b
    java.util.concurrent.ConcurrentHashMap urlParams -> c
    java.util.concurrent.ConcurrentHashMap streamParams -> d
    java.util.concurrent.ConcurrentHashMap fileParams -> e
    java.util.concurrent.ConcurrentHashMap urlParamsWithObjects -> f
    java.lang.String contentEncoding -> g
    void put(java.lang.String,java.lang.String) -> a
    void put(java.lang.String,int) -> a
    java.lang.String toString() -> toString
    org.apache.http.HttpEntity getEntity(com.loopj.android.http.ResponseHandlerInterface) -> a
    org.apache.http.HttpEntity createJsonStreamerEntity(com.loopj.android.http.ResponseHandlerInterface) -> b
    org.apache.http.HttpEntity createFormEntity() -> c
    org.apache.http.HttpEntity createMultipartEntity(com.loopj.android.http.ResponseHandlerInterface) -> c
    java.util.List getParamsList() -> a
    java.util.List getParamsList(java.lang.String,java.lang.Object) -> a
    java.lang.String getParamString() -> b
com.loopj.android.http.RequestParams$FileWrapper -> com.a.a.a.v:
    java.io.File file -> a
    java.lang.String contentType -> b
com.loopj.android.http.RequestParams$StreamWrapper -> com.a.a.a.w:
    java.io.InputStream inputStream -> a
    java.lang.String name -> b
    java.lang.String contentType -> c
    boolean autoClose -> d
    com.loopj.android.http.RequestParams$StreamWrapper newInstance(java.io.InputStream,java.lang.String,java.lang.String,boolean) -> a
com.loopj.android.http.ResponseHandlerInterface -> com.a.a.a.x:
    void sendResponseMessage(org.apache.http.HttpResponse) -> a
    void sendStartMessage() -> e
    void sendFinishMessage() -> f
    void sendProgressMessage(int,int) -> b
    void sendCancelMessage() -> g
    void sendFailureMessage(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> b
    void sendRetryMessage(int) -> b
    void setRequestURI(java.net.URI) -> a
    void setRequestHeaders(org.apache.http.Header[]) -> a
    boolean getUseSynchronousMode() -> a
com.loopj.android.http.RetryHandler -> com.a.a.a.y:
    java.util.HashSet exceptionWhitelist -> a
    java.util.HashSet exceptionBlacklist -> b
    int maxRetries -> c
    int retrySleepTimeMS -> d
    boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext) -> retryRequest
    boolean isInList(java.util.HashSet,java.lang.Throwable) -> a
com.loopj.android.http.SimpleMultipartEntity -> com.a.a.a.z:
    byte[] CR_LF -> a
    byte[] TRANSFER_ENCODING_BINARY -> b
    char[] MULTIPART_CHARS -> c
    java.lang.String boundary -> d
    byte[] boundaryLine -> e
    byte[] boundaryEnd -> f
    boolean isRepeatable -> g
    java.util.List fileParts -> h
    java.io.ByteArrayOutputStream out -> i
    com.loopj.android.http.ResponseHandlerInterface progressHandler -> j
    int bytesWritten -> k
    int totalSize -> l
    void addPart(java.lang.String,java.lang.String,java.lang.String) -> a
    void addPartWithCharset(java.lang.String,java.lang.String,java.lang.String) -> b
    void addPart(java.lang.String,java.io.File,java.lang.String) -> a
    void addPart(java.lang.String,java.lang.String,java.io.InputStream,java.lang.String) -> a
    java.lang.String normalizeContentType(java.lang.String) -> a
    byte[] createContentType(java.lang.String) -> b
    byte[] createContentDisposition(java.lang.String) -> c
    byte[] createContentDisposition(java.lang.String,java.lang.String) -> a
    void updateProgress(int) -> a
    long getContentLength() -> getContentLength
    org.apache.http.Header getContentType() -> getContentType
    boolean isChunked() -> isChunked
    void setIsRepeatable(boolean) -> a
    boolean isRepeatable() -> isRepeatable
    boolean isStreaming() -> isStreaming
    void writeTo(java.io.OutputStream) -> writeTo
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    void consumeContent() -> consumeContent
    java.io.InputStream getContent() -> getContent
    byte[] access$000(com.loopj.android.http.SimpleMultipartEntity) -> a
    byte[] access$100(com.loopj.android.http.SimpleMultipartEntity,java.lang.String,java.lang.String) -> a
    byte[] access$200(com.loopj.android.http.SimpleMultipartEntity,java.lang.String) -> a
    byte[] access$300() -> a
    byte[] access$400() -> b
    void access$500(com.loopj.android.http.SimpleMultipartEntity,int) -> a
com.loopj.android.http.SimpleMultipartEntity$FilePart -> com.a.a.a.aa:
    java.io.File file -> a
    byte[] header -> b
    com.loopj.android.http.SimpleMultipartEntity this$0 -> c
    byte[] createHeader(java.lang.String,java.lang.String,java.lang.String) -> a
    long getTotalLength() -> a
    void writeTo(java.io.OutputStream) -> a
com.novell.sasl.client.DigestChallenge -> com.b.a.a.a:
    java.util.ArrayList m_realms -> a
    java.lang.String m_nonce -> b
    int m_qop -> c
    boolean m_staleFlag -> d
    int m_maxBuf -> e
    java.lang.String m_characterSet -> f
    java.lang.String m_algorithm -> g
    int m_cipherOptions -> h
    void checkSemantics(com.novell.sasl.client.DirectiveList) -> a
    void handleNonce(com.novell.sasl.client.ParsedDirective) -> a
    void handleRealm(com.novell.sasl.client.ParsedDirective) -> b
    void handleQop(com.novell.sasl.client.ParsedDirective) -> c
    void handleMaxbuf(com.novell.sasl.client.ParsedDirective) -> d
    void handleCharset(com.novell.sasl.client.ParsedDirective) -> e
    void handleAlgorithm(com.novell.sasl.client.ParsedDirective) -> f
    void handleCipher(com.novell.sasl.client.ParsedDirective) -> g
    void handleStale(com.novell.sasl.client.ParsedDirective) -> h
    java.util.ArrayList getRealms() -> a
    java.lang.String getNonce() -> b
    int getQop() -> c
    java.lang.String getAlgorithm() -> d
com.novell.sasl.client.DigestMD5SaslClient -> com.b.a.a.b:
    java.lang.String m_authorizationId -> a
    java.lang.String m_protocol -> b
    java.lang.String m_serverName -> c
    java.util.Map m_props -> d
    org.apache.harmony.javax.security.auth.callback.CallbackHandler m_cbh -> e
    int m_state -> f
    java.lang.String m_qopValue -> g
    char[] m_HA1 -> h
    java.lang.String m_digestURI -> i
    com.novell.sasl.client.DigestChallenge m_dc -> j
    java.lang.String m_clientNonce -> k
    java.lang.String m_realm -> l
    java.lang.String m_name -> m
    org.apache.harmony.javax.security.sasl.SaslClient getClient(java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> a
    boolean hasInitialResponse() -> hasInitialResponse
    boolean isComplete() -> isComplete
    byte[] unwrap(byte[],int,int) -> unwrap
    byte[] wrap(byte[],int,int) -> wrap
    java.lang.Object getNegotiatedProperty(java.lang.String) -> getNegotiatedProperty
    void dispose() -> dispose
    byte[] evaluateChallenge(byte[]) -> evaluateChallenge
    char[] convertToHex(byte[]) -> a
    char[] DigestCalcHA1(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    char[] DigestCalcResponse(char[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    java.lang.String createDigestResponse(byte[]) -> c
    boolean checkServerResponseAuth(byte[]) -> b
    char getHexChar(byte) -> a
    java.lang.String getClientNonce() -> a
    java.lang.String getMechanismName() -> getMechanismName
com.novell.sasl.client.DirectiveList -> com.b.a.a.c:
    int m_curPos -> a
    int m_errorPos -> b
    java.lang.String m_directives -> c
    int m_state -> d
    java.util.ArrayList m_directiveList -> e
    int m_scanStart -> f
    void parseDirectives() -> a
    boolean isValidTokenChar(char) -> a
    boolean isWhiteSpace(char) -> b
    void addDirective(java.lang.String,boolean) -> a
    java.util.Iterator getIterator() -> b
com.novell.sasl.client.ExternalSaslClient -> com.b.a.a.d:
    java.lang.String m_authorizationId -> a
    java.lang.String m_protocol -> b
    java.lang.String m_serverName -> c
    java.util.Map m_props -> d
    org.apache.harmony.javax.security.auth.callback.CallbackHandler m_cbh -> e
    int m_state -> f
    org.apache.harmony.javax.security.sasl.SaslClient getClient(java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> a
    boolean hasInitialResponse() -> hasInitialResponse
    boolean isComplete() -> isComplete
    byte[] unwrap(byte[],int,int) -> unwrap
    byte[] wrap(byte[],int,int) -> wrap
    java.lang.Object getNegotiatedProperty(java.lang.String) -> getNegotiatedProperty
    void dispose() -> dispose
    byte[] evaluateChallenge(byte[]) -> evaluateChallenge
    java.lang.String getMechanismName() -> getMechanismName
com.novell.sasl.client.ParsedDirective -> com.b.a.a.e:
    int m_valueType -> a
    java.lang.String m_name -> b
    java.lang.String m_value -> c
    java.lang.String getValue() -> a
    java.lang.String getName() -> b
com.novell.sasl.client.ResponseAuth -> com.b.a.a.f:
    java.lang.String m_responseValue -> a
    void checkSemantics(com.novell.sasl.client.DirectiveList) -> a
    java.lang.String getResponseValue() -> a
com.novell.sasl.client.TokenParser -> com.b.a.a.g:
    int m_curPos -> a
    int m_scanStart -> b
    int m_state -> c
    java.lang.String m_tokens -> d
    java.lang.String parseToken() -> a
    boolean isValidTokenChar(char) -> a
    boolean isWhiteSpace(char) -> b
com.umeng.analytics.AnalyticsConfig -> com.c.a.a:
    java.lang.String a -> o
    java.lang.String b -> p
    java.lang.String mWrapperType -> a
    java.lang.String mWrapperVersion -> b
    int mVerticalType -> c
    java.lang.String GPU_VENDER -> d
    java.lang.String GPU_RENDERER -> e
    com.umeng.analytics.Gender sGender -> f
    int sAge -> g
    java.lang.String sId -> h
    java.lang.String sSource -> i
    double[] c -> q
    int[] d -> r
    boolean ACTIVITY_DURATION_OPEN -> j
    boolean COMPRESS_DATA -> k
    boolean ENABLE_MEMORY_BUFFER -> l
    boolean CATCH_EXCEPTION -> m
    long kContinueSessionMillis -> n
    java.lang.String getAppkey(android.content.Context) -> a
    java.lang.String getChannel(android.content.Context) -> b
    double[] getLocation() -> a
    void setReportPolicy(int,int) -> a
    int[] getReportPolicy(android.content.Context) -> c
com.umeng.analytics.Gender -> com.c.a.b:
    com.umeng.analytics.Gender Male -> a
    com.umeng.analytics.Gender Female -> b
    com.umeng.analytics.Gender Unknown -> c
    int value -> d
    com.umeng.analytics.Gender[] a -> e
    com.umeng.analytics.Gender[] values() -> values
    com.umeng.analytics.Gender valueOf(java.lang.String) -> valueOf
    u.aly.ap transGender(com.umeng.analytics.Gender) -> a
com.umeng.analytics.Gender$1 -> com.c.a.c:
    java.lang.String toString() -> toString
com.umeng.analytics.Gender$2 -> com.c.a.d:
    java.lang.String toString() -> toString
com.umeng.analytics.Gender$3 -> com.c.a.e:
    java.lang.String toString() -> toString
com.umeng.analytics.Gender$4 -> com.c.a.f:
    int[] a -> a
com.umeng.analytics.MobclickAgent -> com.c.a.g:
    com.umeng.analytics.c b -> a
    void setDebugMode(boolean) -> a
    void onPause(android.content.Context) -> a
    void onResume(android.content.Context) -> b
    void onEventDuration(android.content.Context,java.lang.String,long) -> a
    void onEventValue(android.content.Context,java.lang.String,java.util.Map,int) -> a
    void updateOnlineConfig(android.content.Context) -> c
com.umeng.analytics.ReportPolicy -> com.c.a.h:
com.umeng.analytics.ReportPolicy$a -> com.c.a.i:
    boolean a(boolean) -> a
com.umeng.analytics.ReportPolicy$b -> com.c.a.j:
    long a -> a
    long b -> b
    u.aly.w c -> c
    boolean a(boolean) -> a
com.umeng.analytics.ReportPolicy$c -> com.c.a.k:
    int a -> a
    u.aly.q b -> b
    boolean a(boolean) -> a
com.umeng.analytics.ReportPolicy$d -> com.c.a.l:
    long a -> a
    u.aly.w b -> b
    boolean a(boolean) -> a
com.umeng.analytics.ReportPolicy$e -> com.c.a.m:
    boolean a(boolean) -> a
com.umeng.analytics.ReportPolicy$f -> com.c.a.n:
    android.content.Context a -> a
    boolean a(boolean) -> a
com.umeng.analytics.a -> com.c.a.o:
    java.lang.String[] f -> a
    java.lang.String[] g -> b
com.umeng.analytics.b -> com.c.a.p:
    void a() -> a
    void b() -> b
com.umeng.analytics.c -> com.c.a.q:
    com.umeng.analytics.onlineconfig.a a -> a
    android.content.Context b -> b
    com.umeng.analytics.b c -> c
    u.aly.m d -> d
    u.aly.z e -> e
    u.aly.v f -> f
    u.aly.n g -> g
    u.aly.k h -> h
    boolean i -> i
    void f(android.content.Context) -> d
    void a(android.content.Context) -> a
    void b(android.content.Context) -> b
    void c(android.content.Context) -> c
    void g(android.content.Context) -> e
    void h(android.content.Context) -> f
    void a(android.content.Context,java.lang.String,java.lang.String,long,int) -> a
    void a(android.content.Context,java.lang.String,java.util.Map,long) -> a
    void a(java.lang.Throwable) -> a
    void a(com.umeng.analytics.c,android.content.Context) -> a
    void b(com.umeng.analytics.c,android.content.Context) -> b
com.umeng.analytics.c$1 -> com.c.a.r:
    android.content.Context a -> a
    com.umeng.analytics.c b -> b
    void a() -> a
com.umeng.analytics.c$2 -> com.c.a.s:
    android.content.Context a -> a
    com.umeng.analytics.c b -> b
    void a() -> a
com.umeng.analytics.d -> com.c.a.t:
    java.util.concurrent.ExecutorService a -> a
    long b -> b
    java.util.concurrent.ExecutorService c -> c
    void a(java.lang.Runnable) -> a
    void a() -> a
    void b(java.lang.Runnable) -> b
com.umeng.analytics.e -> com.c.a.u:
    void run() -> run
    void a() -> a
com.umeng.analytics.f -> com.c.a.v:
    com.umeng.analytics.f a -> a
    android.content.Context b -> b
    java.lang.String c -> c
    long d -> d
    long e -> e
    com.umeng.analytics.f a(android.content.Context) -> a
    boolean a(java.io.File) -> a
    int[] a() -> a
    void a(int,int) -> a
    byte[] b() -> b
    void a(byte[]) -> a
    void c() -> c
    byte[] d() -> d
    void b(byte[]) -> b
    void e() -> e
    boolean f() -> f
    android.content.SharedPreferences g() -> g
    java.lang.String l() -> h
    java.lang.String m() -> i
    java.lang.String n() -> j
com.umeng.analytics.onlineconfig.UmengOnlineConfigureListener -> com.c.a.a.a:
    void onDataReceived(org.json.JSONObject) -> a
com.umeng.analytics.onlineconfig.a -> com.c.a.a.b:
    java.lang.String h -> a
    java.lang.String i -> b
    java.lang.String j -> c
    com.umeng.analytics.onlineconfig.UmengOnlineConfigureListener k -> d
    com.umeng.analytics.onlineconfig.c l -> e
    long m -> f
    void a(android.content.Context) -> a
    void a(com.umeng.analytics.onlineconfig.c) -> a
    void a(org.json.JSONObject) -> a
    org.json.JSONObject b(android.content.Context) -> b
    java.lang.String c(android.content.Context) -> c
    void a(android.content.Context,com.umeng.analytics.onlineconfig.b) -> a
    void b(android.content.Context,com.umeng.analytics.onlineconfig.b) -> b
    void a(com.umeng.analytics.onlineconfig.a,org.json.JSONObject) -> a
    org.json.JSONObject a(com.umeng.analytics.onlineconfig.a,android.content.Context) -> a
    com.umeng.analytics.onlineconfig.c a(com.umeng.analytics.onlineconfig.a) -> a
    void a(com.umeng.analytics.onlineconfig.a,android.content.Context,com.umeng.analytics.onlineconfig.b) -> a
    void b(com.umeng.analytics.onlineconfig.a,android.content.Context,com.umeng.analytics.onlineconfig.b) -> b
com.umeng.analytics.onlineconfig.a$a -> com.c.a.a.c:
    org.json.JSONObject e -> e
    com.umeng.analytics.onlineconfig.a a -> a
    org.json.JSONObject a() -> a
    java.lang.String b() -> b
com.umeng.analytics.onlineconfig.a$b -> com.c.a.a.d:
    android.content.Context a -> a
    com.umeng.analytics.onlineconfig.a b -> b
    void run() -> run
    boolean a() -> a
    void b() -> b
com.umeng.analytics.onlineconfig.b -> com.c.a.a.e:
    org.json.JSONObject a -> a
    boolean b -> b
    int c -> c
    int d -> d
    java.lang.String e -> e
com.umeng.analytics.onlineconfig.c -> com.c.a.a.f:
    void a(int,long) -> a
com.umeng.analytics.social.e -> com.c.a.b.a:
    java.lang.String e -> a
    boolean v -> b
com.wenwen.applib.controller.HXSDKHelper -> com.wenwen.a.a.a:
    android.content.Context appContext -> a
    com.wenwen.applib.model.HXSDKModel hxModel -> b
    com.easemob.EMConnectionListener connectionListener -> c
    java.lang.String hxId -> d
    java.lang.String password -> e
    boolean sdkInited -> f
    com.wenwen.applib.controller.HXSDKHelper me -> g
    boolean onInit(android.content.Context) -> a
    com.wenwen.applib.controller.HXSDKHelper getInstance() -> a
    com.wenwen.applib.model.HXSDKModel getModel() -> b
    java.lang.String getHXId() -> c
    void setHXId(java.lang.String) -> a
    void setPassword(java.lang.String) -> b
    com.wenwen.applib.model.HXSDKModel createModel() -> d
    void initHXOptions() -> e
    void logout(com.easemob.EMCallBack) -> logout
    boolean isLogined() -> f
    com.easemob.chat.OnMessageNotifyListener getMessageNotifyListener() -> g
    com.easemob.chat.OnNotificationClickListener getNotificationClickListener() -> h
    void initListener() -> i
    void onConnectionConflict() -> j
    void onConnectionConnected() -> k
    void onConnectionDisconnected(int) -> a
    java.lang.String getAppName(int) -> b
com.wenwen.applib.controller.HXSDKHelper$1 -> com.wenwen.a.a.b:
    com.wenwen.applib.controller.HXSDKHelper this$0 -> a
    com.easemob.EMCallBack val$callback -> b
    void onSuccess() -> onSuccess
    void onError(int,java.lang.String) -> onError
    void onProgress(int,java.lang.String) -> onProgress
com.wenwen.applib.controller.HXSDKHelper$2 -> com.wenwen.a.a.c:
    com.wenwen.applib.controller.HXSDKHelper this$0 -> a
    void onDisconnected(int) -> onDisconnected
    void onConnected() -> onConnected
com.wenwen.applib.model.DefaultHXSDKModel -> com.wenwen.a.b.a:
    com.wenwen.chatuidemo.db.UserDao dao -> a
    android.content.Context context -> b
    void setSettingMsgNotification(boolean) -> a
    boolean getSettingMsgNotification() -> a
    void setSettingMsgSound(boolean) -> b
    boolean getSettingMsgSound() -> b
    void setSettingMsgVibrate(boolean) -> c
    boolean getSettingMsgVibrate() -> c
    void setSettingMsgSpeaker(boolean) -> d
    boolean getSettingMsgSpeaker() -> d
    boolean getUseHXRoster() -> e
    boolean saveHXId(java.lang.String) -> a
    java.lang.String getHXId() -> f
    boolean savePassword(java.lang.String) -> b
    java.lang.String getPwd() -> g
com.wenwen.applib.model.HXSDKModel -> com.wenwen.a.b.b:
    void setSettingMsgNotification(boolean) -> a
    boolean getSettingMsgNotification() -> a
    void setSettingMsgSound(boolean) -> b
    boolean getSettingMsgSound() -> b
    void setSettingMsgVibrate(boolean) -> c
    boolean getSettingMsgVibrate() -> c
    void setSettingMsgSpeaker(boolean) -> d
    boolean getSettingMsgSpeaker() -> d
    boolean saveHXId(java.lang.String) -> a
    java.lang.String getHXId() -> f
    boolean savePassword(java.lang.String) -> b
    java.lang.String getPwd() -> g
    boolean getAcceptInvitationAlways() -> h
    boolean getUseHXRoster() -> e
    boolean getRequireReadAck() -> i
    boolean getRequireDeliveryAck() -> j
    boolean isSandboxMode() -> k
    boolean isDebugMode() -> l
com.wenwen.applib.utils.HXPreferenceUtils -> com.wenwen.a.c.a:
    android.content.SharedPreferences mSharedPreferences -> a
    com.wenwen.applib.utils.HXPreferenceUtils mPreferenceUtils -> b
    android.content.SharedPreferences$Editor editor -> c
    java.lang.String SHARED_KEY_SETTING_NOTIFICATION -> d
    java.lang.String SHARED_KEY_SETTING_SOUND -> e
    java.lang.String SHARED_KEY_SETTING_VIBRATE -> f
    java.lang.String SHARED_KEY_SETTING_SPEAKER -> g
    void init(android.content.Context) -> a
    com.wenwen.applib.utils.HXPreferenceUtils getInstance() -> a
    void setSettingMsgNotification(boolean) -> a
    boolean getSettingMsgNotification() -> b
    void setSettingMsgSound(boolean) -> b
    boolean getSettingMsgSound() -> c
    void setSettingMsgVibrate(boolean) -> c
    boolean getSettingMsgVibrate() -> d
    void setSettingMsgSpeaker(boolean) -> d
    boolean getSettingMsgSpeaker() -> e
com.wenwen.chatui.adv.Adv -> com.wenwen.chatui.adv.a:
    java.lang.String imageUrl -> a
    java.lang.String message -> b
    int defaultDrawable -> c
    int getDefaultDrawable() -> a
    void setDefaultDrawable(int) -> a
    java.lang.String getMessage() -> b
    void setMessage(java.lang.String) -> a
    java.lang.String getImageUrl() -> c
com.wenwen.chatui.adv.AdvClient -> com.wenwen.chatui.adv.b:
    android.app.Activity context -> a
    com.wenwen.chatui.adv.AdvGallery gallery -> b
    com.wenwen.chatui.adv.AdvIndex advIndex -> c
    com.wenwen.chatui.adv.AdvTitle advTitle -> d
    java.util.List data -> e
    com.wenwen.chatui.adv.AsyncAdvImageLoader loader -> f
    com.wenwen.chatui.adv.AdvClient$ClientAdapter adapter -> g
    void initClientById(int,int,int) -> a
    void setData(java.util.List) -> a
    void start() -> a
    void cancel() -> cancel
    java.util.List access$0(com.wenwen.chatui.adv.AdvClient) -> a
    android.app.Activity access$1(com.wenwen.chatui.adv.AdvClient) -> b
    com.wenwen.chatui.adv.AsyncAdvImageLoader access$2(com.wenwen.chatui.adv.AdvClient) -> c
    com.wenwen.chatui.adv.AdvGallery access$3(com.wenwen.chatui.adv.AdvClient) -> d
    com.wenwen.chatui.adv.AdvIndex access$4(com.wenwen.chatui.adv.AdvClient) -> e
    com.wenwen.chatui.adv.AdvTitle access$5(com.wenwen.chatui.adv.AdvClient) -> f
com.wenwen.chatui.adv.AdvClient$1 -> com.wenwen.chatui.adv.c:
    com.wenwen.chatui.adv.AdvClient this$0 -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
com.wenwen.chatui.adv.AdvClient$2 -> com.wenwen.chatui.adv.d:
    com.wenwen.chatui.adv.AdvClient this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.wenwen.chatui.adv.AdvClient$ClientAdapter -> com.wenwen.chatui.adv.e:
    com.wenwen.chatui.adv.AdvClient this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.wenwen.chatui.adv.AdvClient$ClientAdapter$1 -> com.wenwen.chatui.adv.f:
    com.wenwen.chatui.adv.AdvClient$ClientAdapter this$1 -> a
    android.widget.ImageView val$imgView -> b
    void imageLoaded(android.graphics.drawable.Drawable,java.lang.String) -> a
com.wenwen.chatui.adv.AdvGallery -> com.wenwen.chatui.adv.AdvGallery:
    android.os.Handler mHandler -> a
    java.util.Timer timer -> b
    java.util.TimerTask task -> c
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    boolean isScrollingLeft(android.view.MotionEvent,android.view.MotionEvent) -> a
    void start() -> a
    void cancel() -> cancel
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    android.os.Handler access$0(com.wenwen.chatui.adv.AdvGallery) -> a
com.wenwen.chatui.adv.AdvGallery$1 -> com.wenwen.chatui.adv.g:
    com.wenwen.chatui.adv.AdvGallery this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.wenwen.chatui.adv.AdvGallery$2 -> com.wenwen.chatui.adv.h:
    com.wenwen.chatui.adv.AdvGallery this$0 -> a
    void run() -> run
com.wenwen.chatui.adv.AdvIndex -> com.wenwen.chatui.adv.AdvIndex:
    void generatePageControl(int,int,java.util.List) -> a
com.wenwen.chatui.adv.AdvTitle -> com.wenwen.chatui.adv.AdvTitle:
    void generatePageControl(int,int,java.util.List) -> a
com.wenwen.chatui.adv.AsyncAdvImageLoader -> com.wenwen.chatui.adv.i:
    java.util.HashMap imageCache -> a
    android.graphics.drawable.Drawable loadDrawable(java.lang.String,com.wenwen.chatui.adv.AsyncAdvImageLoader$ImageCallback) -> a
    android.graphics.drawable.Drawable loadImageFromUrl(java.lang.String) -> a
    java.util.HashMap access$0(com.wenwen.chatui.adv.AsyncAdvImageLoader) -> a
com.wenwen.chatui.adv.AsyncAdvImageLoader$1 -> com.wenwen.chatui.adv.j:
    com.wenwen.chatui.adv.AsyncAdvImageLoader this$0 -> a
    com.wenwen.chatui.adv.AsyncAdvImageLoader$ImageCallback val$imageCallback -> b
    java.lang.String val$imageUrl -> c
    void handleMessage(android.os.Message) -> handleMessage
com.wenwen.chatui.adv.AsyncAdvImageLoader$2 -> com.wenwen.chatui.adv.k:
    com.wenwen.chatui.adv.AsyncAdvImageLoader this$0 -> a
    java.lang.String val$imageUrl -> b
    android.os.Handler val$handler -> c
    void run() -> run
com.wenwen.chatui.adv.AsyncAdvImageLoader$3 -> com.wenwen.chatui.adv.l:
    com.wenwen.chatui.adv.AsyncAdvImageLoader this$0 -> a
    java.lang.String val$imageUrl -> b
    android.os.Handler val$handler -> c
    void run() -> run
com.wenwen.chatui.adv.AsyncAdvImageLoader$ImageCallback -> com.wenwen.chatui.adv.m:
    void imageLoaded(android.graphics.drawable.Drawable,java.lang.String) -> a
com.wenwen.chatui.debug.DebugLog -> com.wenwen.chatui.a.a:
    void i(java.lang.String,java.lang.String) -> a
com.wenwen.chatuidemo.DemoApplication -> com.wenwen.chatuidemo.DemoApplication:
    android.content.Context applicationContext -> a
    com.wenwen.chatuidemo.DemoApplication instance -> g
    java.lang.String PREF_USERNAME -> b
    java.lang.String useruid -> c
    java.lang.String account_id -> d
    java.lang.String currentUserNick -> e
    com.wenwen.chatuidemo.DemoHXSDKHelper hxSDKHelper -> f
    void onCreate() -> onCreate
    com.wenwen.chatuidemo.DemoApplication getInstance() -> a
    java.lang.String getUserUid() -> b
    void setUserUid(java.lang.String) -> a
    java.lang.String getUserName() -> c
    void setUserName(java.lang.String) -> b
    void setPassword(java.lang.String) -> c
    void logout(com.easemob.EMCallBack) -> logout
    java.lang.String getaccount_id() -> d
    void setaccount_id(java.lang.String) -> d
com.wenwen.chatuidemo.DemoHXSDKHelper -> com.wenwen.chatuidemo.a:
    java.util.Map contactList -> f
    void initHXOptions() -> e
    com.easemob.chat.OnMessageNotifyListener getMessageNotifyListener() -> g
    void onConnectionConflict() -> j
    void initListener() -> i
    com.wenwen.applib.model.HXSDKModel createModel() -> d
    com.wenwen.chatuidemo.DemoHXSDKModel getModel() -> l
    void setContactList(java.util.Map) -> a
    void logout(com.easemob.EMCallBack) -> logout
    com.wenwen.applib.model.HXSDKModel getModel() -> b
    android.content.Context access$1(com.wenwen.chatuidemo.DemoHXSDKHelper) -> a
com.wenwen.chatuidemo.DemoHXSDKHelper$1 -> com.wenwen.chatuidemo.b:
    com.wenwen.chatuidemo.DemoHXSDKHelper this$0 -> a
    java.lang.String onNewMessageNotify(com.easemob.chat.EMMessage) -> onNewMessageNotify
    java.lang.String onLatestMessageNotify(com.easemob.chat.EMMessage,int,int) -> onLatestMessageNotify
    java.lang.String onSetNotificationTitle(com.easemob.chat.EMMessage) -> onSetNotificationTitle
    int onSetSmallIcon(com.easemob.chat.EMMessage) -> onSetSmallIcon
com.wenwen.chatuidemo.DemoHXSDKHelper$2 -> com.wenwen.chatuidemo.c:
    com.wenwen.chatuidemo.DemoHXSDKHelper this$0 -> a
    com.easemob.EMCallBack val$callback -> b
    void onSuccess() -> onSuccess
    void onError(int,java.lang.String) -> onError
    void onProgress(int,java.lang.String) -> onProgress
com.wenwen.chatuidemo.DemoHXSDKModel -> com.wenwen.chatuidemo.d:
    boolean getUseHXRoster() -> e
    boolean isDebugMode() -> l
    void closeDB() -> m
com.wenwen.chatuidemo.activity.AddContactActivity -> com.wenwen.chatuidemo.activity.AddContactActivity:
    java.lang.String TAG -> a
    android.widget.EditText editText -> b
    android.widget.LinearLayout searchedUserLayout -> c
    android.widget.TextView nameText -> d
    android.widget.Button searchBtn -> e
    android.widget.ImageView avatar -> f
    android.view.inputmethod.InputMethodManager inputMethodManager -> g
    java.lang.String toAddUsername -> h
    void onCreate(android.os.Bundle) -> onCreate
    void searchContact(android.view.View) -> searchContact
    void addContact(android.view.View) -> addContact
    void back(android.view.View) -> back
    android.widget.LinearLayout access$0(com.wenwen.chatuidemo.activity.AddContactActivity) -> a
    android.widget.TextView access$1(com.wenwen.chatuidemo.activity.AddContactActivity) -> b
    java.lang.String access$2(com.wenwen.chatuidemo.activity.AddContactActivity) -> c
com.wenwen.chatuidemo.activity.AddContactActivity$1 -> com.wenwen.chatuidemo.activity.a:
    com.wenwen.chatuidemo.activity.AddContactActivity this$0 -> a
    android.app.ProgressDialog val$pd -> b
    void onStart() -> b
    void onSuccess(int,org.apache.http.Header[],byte[]) -> a
    void onFinish() -> c
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> a
com.wenwen.chatuidemo.activity.AddContactActivity$2 -> com.wenwen.chatuidemo.activity.b:
    com.wenwen.chatuidemo.activity.AddContactActivity this$0 -> a
    android.app.ProgressDialog val$pd -> b
    void onStart() -> b
    void onSuccess(int,org.apache.http.Header[],byte[]) -> a
    void onFinish() -> c
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> a
com.wenwen.chatuidemo.activity.AlertDialog -> com.wenwen.chatuidemo.activity.AlertDialog:
    android.widget.TextView mTextView -> a
    android.widget.Button mButton -> b
    int position -> c
    android.widget.ImageView imageView -> d
    android.widget.EditText editText -> e
    boolean isEditextShow -> f
    void onCreate(android.os.Bundle) -> onCreate
    void ok(android.view.View) -> ok
    void cancel(android.view.View) -> cancel
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
com.wenwen.chatuidemo.activity.AlterPersonalData -> com.wenwen.chatuidemo.activity.AlterPersonalData:
    java.lang.String TAG -> a
    android.widget.RelativeLayout layout_laboratory -> b
    android.widget.RelativeLayout layout_hospital -> c
    android.widget.TextView hospital -> d
    android.widget.TextView laboratory -> e
    android.widget.EditText username -> f
    android.widget.EditText thesis -> g
    android.widget.EditText skilled -> h
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void sub(android.view.View) -> sub
    void back(android.view.View) -> back
com.wenwen.chatuidemo.activity.AlterPersonalData$1 -> com.wenwen.chatuidemo.activity.c:
    com.wenwen.chatuidemo.activity.AlterPersonalData this$0 -> a
    android.app.ProgressDialog val$pd -> b
    void onStart() -> b
    void onSuccess(int,org.apache.http.Header[],byte[]) -> a
    void onFinish() -> c
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> a
com.wenwen.chatuidemo.activity.BaiduMapActivity -> com.wenwen.chatuidemo.activity.BaiduMapActivity:
    com.baidu.mapapi.map.MapView mMapView -> a
    com.baidu.mapapi.map.MapController mMapController -> p
    com.baidu.mapapi.map.MKMapViewListener mMapListener -> b
    android.widget.FrameLayout mMapViewContainer -> c
    com.baidu.location.LocationClient mLocClient -> d
    com.wenwen.chatuidemo.activity.BaiduMapActivity$MyLocationListenner myListener -> e
    com.wenwen.chatuidemo.activity.BaiduMapActivity$NotifyLister mNotifyer -> f
    android.widget.Button sendButton -> g
    android.widget.EditText indexText -> h
    int index -> i
    com.baidu.location.BDLocation lastLocation -> j
    com.wenwen.chatuidemo.activity.BaiduMapActivity instance -> k
    android.app.ProgressDialog progressDialog -> l
    com.baidu.mapapi.map.ItemizedOverlay mAddrOverlay -> m
    com.baidu.mapapi.BMapManager mBMapManager -> n
    void onCreate(android.os.Bundle) -> onCreate
    void showMap(double,double,java.lang.String) -> a
    void showMapWithLocationClient() -> a
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Bundle) -> onRestoreInstanceState
    void initMapView() -> b
    void back(android.view.View) -> back
    void sendLocation(android.view.View) -> sendLocation
    void initEngineManager(android.content.Context) -> a
    com.baidu.mapapi.map.MapController access$0(com.wenwen.chatuidemo.activity.BaiduMapActivity) -> a
com.wenwen.chatuidemo.activity.BaiduMapActivity$1 -> com.wenwen.chatuidemo.activity.d:
    com.wenwen.chatuidemo.activity.BaiduMapActivity this$0 -> a
    void onCancel(android.content.DialogInterface) -> onCancel
com.wenwen.chatuidemo.activity.BaiduMapActivity$2 -> com.wenwen.chatuidemo.activity.e:
    com.wenwen.chatuidemo.activity.BaiduMapActivity this$0 -> a
    void onMapMoveFinish() -> a
    void onClickMapPoi(com.baidu.mapapi.map.MapPoi) -> a
    void onGetCurrentMap(android.graphics.Bitmap) -> a
    void onMapAnimationFinish() -> b
com.wenwen.chatuidemo.activity.BaiduMapActivity$MyGeneralListener -> com.wenwen.chatuidemo.activity.f:
    com.wenwen.chatuidemo.activity.BaiduMapActivity this$0 -> a
    void onGetNetworkState(int) -> a
    void onGetPermissionState(int) -> b
com.wenwen.chatuidemo.activity.BaiduMapActivity$MyLocationListenner -> com.wenwen.chatuidemo.activity.g:
    com.wenwen.chatuidemo.activity.BaiduMapActivity this$0 -> a
    void onReceiveLocation(com.baidu.location.BDLocation) -> onReceiveLocation
    void onReceivePoi(com.baidu.location.BDLocation) -> onReceivePoi
com.wenwen.chatuidemo.activity.BaiduMapActivity$NotifyLister -> com.wenwen.chatuidemo.activity.h:
    void onNotify(com.baidu.location.BDLocation,float) -> onNotify
com.wenwen.chatuidemo.activity.BaseActivity -> com.wenwen.chatuidemo.activity.BaseActivity:
    android.app.NotificationManager notificationManager -> o
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onStart() -> onStart
    void notifyNewMessage(com.easemob.chat.EMMessage) -> a
    void startActivityForRet(java.lang.Class,android.os.Bundle,int) -> a
    void back(android.view.View) -> back
com.wenwen.chatuidemo.activity.BlacklistActivity -> com.wenwen.chatuidemo.activity.BlacklistActivity:
    android.widget.ListView listView -> a
    com.wenwen.chatuidemo.activity.BlacklistActivity$BlacklistAdapater adapter -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void removeOutBlacklist(java.lang.String) -> a
    void back(android.view.View) -> back
com.wenwen.chatuidemo.activity.BlacklistActivity$1 -> com.wenwen.chatuidemo.activity.i:
    com.wenwen.chatuidemo.activity.BlacklistActivity this$0 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.BlacklistActivity$BlacklistAdapater -> com.wenwen.chatuidemo.activity.j:
    com.wenwen.chatuidemo.activity.BlacklistActivity this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.wenwen.chatuidemo.activity.ChatActivity -> com.wenwen.chatuidemo.activity.ChatActivity:
    android.view.View recordingContainer -> d
    android.widget.ImageView micImage -> e
    android.widget.TextView recordingHint -> f
    android.widget.ListView listView -> g
    com.wenwen.chatuidemo.widget.PasteEditText mEditTextContent -> h
    android.view.View buttonSetModeKeyboard -> i
    android.view.View buttonSetModeVoice -> j
    android.view.View buttonSend -> k
    android.view.View buttonPressToSpeak -> l
    android.widget.LinearLayout emojiIconContainer -> m
    android.widget.LinearLayout btnContainer -> n
    android.widget.ImageView locationImgview -> p
    android.view.View more -> q
    android.text.ClipboardManager clipboard -> r
    android.support.v4.view.ViewPager expressionViewpager -> s
    android.view.inputmethod.InputMethodManager manager -> t
    java.util.List reslist -> u
    android.graphics.drawable.Drawable[] micImages -> v
    int chatType -> w
    com.easemob.chat.EMConversation conversation -> x
    com.wenwen.chatuidemo.activity.ChatActivity$NewMessageBroadcastReceiver receiver -> y
    com.wenwen.chatuidemo.activity.ChatActivity activityInstance -> a
    java.lang.String toChatUsername -> z
    com.easemob.util.VoiceRecorder voiceRecorder -> A
    com.wenwen.chatuidemo.adapter.MessageAdapter adapter -> B
    java.io.File cameraFile -> C
    int resendPos -> b
    com.wenwen.chatuidemo.activity.ChatActivity$GroupListener groupListener -> D
    android.widget.ImageView iv_emoticons_normal -> E
    android.widget.ImageView iv_emoticons_checked -> F
    android.widget.RelativeLayout edittext_layout -> G
    android.widget.ProgressBar loadmorePB -> H
    boolean isloading -> I
    int pagesize -> J
    boolean haveMoreData -> K
    android.widget.Button btnMore -> L
    java.lang.String playMsgId -> c
    android.os.Handler micImageHandler -> M
    com.easemob.chat.EMGroup group -> N
    android.content.BroadcastReceiver ackMessageReceiver -> O
    android.content.BroadcastReceiver deliveryAckMessageReceiver -> P
    android.os.PowerManager$WakeLock wakeLock -> Q
    int[] $SWITCH_TABLE$com$easemob$chat$EMMessage$Type -> R
    void onCreate(android.os.Bundle) -> onCreate
    void initView() -> a
    void setUpView() -> f
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onClick(android.view.View) -> onClick
    void selectPicFromCamera() -> b
    void selectFileFromLocal() -> g
    void selectPicFromLocal() -> c
    void sendText(java.lang.String) -> b
    void sendVoice(java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    void sendPicture(java.lang.String) -> c
    void sendVideo(java.lang.String,java.lang.String,int) -> a
    void sendPicByUri(android.net.Uri) -> a
    void sendLocationMsg(double,double,java.lang.String,java.lang.String) -> a
    void sendFile(android.net.Uri) -> b
    void resendMessage() -> h
    void setModeVoice(android.view.View) -> setModeVoice
    void setModeKeyboard(android.view.View) -> setModeKeyboard
    void emptyHistory(android.view.View) -> emptyHistory
    void toGroupDetails(android.view.View) -> toGroupDetails
    void more(android.view.View) -> more
    void editClick(android.view.View) -> editClick
    android.view.View getGridChildView(int) -> b
    java.util.List getExpressionRes(int) -> a
    void onDestroy() -> onDestroy
    void onResume() -> onResume
    void onPause() -> onPause
    void hideKeyboard() -> i
    void addUserToBlacklist(java.lang.String) -> d
    void back(android.view.View) -> back
    void onBackPressed() -> onBackPressed
    void onNewIntent(android.content.Intent) -> onNewIntent
    void forwardMessage(java.lang.String) -> a
    java.lang.String getToChatUsername() -> d
    android.widget.ImageView access$0(com.wenwen.chatuidemo.activity.ChatActivity) -> a
    android.graphics.drawable.Drawable[] access$1(com.wenwen.chatuidemo.activity.ChatActivity) -> b
    com.wenwen.chatuidemo.adapter.MessageAdapter access$2(com.wenwen.chatuidemo.activity.ChatActivity) -> c
    java.lang.String access$3(com.wenwen.chatuidemo.activity.ChatActivity) -> d
    android.widget.ListView access$4(com.wenwen.chatuidemo.activity.ChatActivity) -> e
    android.os.PowerManager$WakeLock access$5(com.wenwen.chatuidemo.activity.ChatActivity) -> f
    android.view.View access$6(com.wenwen.chatuidemo.activity.ChatActivity) -> g
    android.widget.TextView access$7(com.wenwen.chatuidemo.activity.ChatActivity) -> h
    com.easemob.util.VoiceRecorder access$8(com.wenwen.chatuidemo.activity.ChatActivity) -> i
    void access$9(com.wenwen.chatuidemo.activity.ChatActivity,java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    boolean access$10(com.wenwen.chatuidemo.activity.ChatActivity) -> j
    boolean access$11(com.wenwen.chatuidemo.activity.ChatActivity) -> k
    android.widget.ProgressBar access$12(com.wenwen.chatuidemo.activity.ChatActivity) -> l
    int access$13(com.wenwen.chatuidemo.activity.ChatActivity) -> m
    com.easemob.chat.EMConversation access$14(com.wenwen.chatuidemo.activity.ChatActivity) -> n
    void access$15(com.wenwen.chatuidemo.activity.ChatActivity,boolean) -> a
    void access$16(com.wenwen.chatuidemo.activity.ChatActivity,boolean) -> b
    android.widget.RelativeLayout access$17(com.wenwen.chatuidemo.activity.ChatActivity) -> o
    android.view.View access$18(com.wenwen.chatuidemo.activity.ChatActivity) -> p
    android.widget.ImageView access$19(com.wenwen.chatuidemo.activity.ChatActivity) -> q
    android.widget.ImageView access$20(com.wenwen.chatuidemo.activity.ChatActivity) -> r
    android.widget.LinearLayout access$21(com.wenwen.chatuidemo.activity.ChatActivity) -> s
    android.widget.LinearLayout access$22(com.wenwen.chatuidemo.activity.ChatActivity) -> t
    android.widget.Button access$23(com.wenwen.chatuidemo.activity.ChatActivity) -> u
    android.view.View access$24(com.wenwen.chatuidemo.activity.ChatActivity) -> v
    void access$25(com.wenwen.chatuidemo.activity.ChatActivity) -> w
    android.view.View access$26(com.wenwen.chatuidemo.activity.ChatActivity) -> x
    com.wenwen.chatuidemo.widget.PasteEditText access$27(com.wenwen.chatuidemo.activity.ChatActivity) -> y
    int[] $SWITCH_TABLE$com$easemob$chat$EMMessage$Type() -> e
com.wenwen.chatuidemo.activity.ChatActivity$1 -> com.wenwen.chatuidemo.activity.k:
    com.wenwen.chatuidemo.activity.ChatActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.wenwen.chatuidemo.activity.ChatActivity$2 -> com.wenwen.chatuidemo.activity.l:
    com.wenwen.chatuidemo.activity.ChatActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.wenwen.chatuidemo.activity.ChatActivity$3 -> com.wenwen.chatuidemo.activity.m:
    com.wenwen.chatuidemo.activity.ChatActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.wenwen.chatuidemo.activity.ChatActivity$4 -> com.wenwen.chatuidemo.activity.n:
    com.wenwen.chatuidemo.activity.ChatActivity this$0 -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.wenwen.chatuidemo.activity.ChatActivity$5 -> com.wenwen.chatuidemo.activity.o:
    com.wenwen.chatuidemo.activity.ChatActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.activity.ChatActivity$6 -> com.wenwen.chatuidemo.activity.p:
    com.wenwen.chatuidemo.activity.ChatActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.wenwen.chatuidemo.activity.ChatActivity$7 -> com.wenwen.chatuidemo.activity.q:
    com.wenwen.chatuidemo.activity.ChatActivity this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.wenwen.chatuidemo.activity.ChatActivity$8 -> com.wenwen.chatuidemo.activity.r:
    com.wenwen.chatuidemo.activity.ChatActivity this$0 -> a
    com.wenwen.chatuidemo.adapter.ExpressionAdapter val$expressionAdapter -> b
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.wenwen.chatuidemo.activity.ChatActivity$GroupListener -> com.wenwen.chatuidemo.activity.s:
    com.wenwen.chatuidemo.activity.ChatActivity this$0 -> a
    void onUserRemoved(java.lang.String,java.lang.String) -> onUserRemoved
    void onGroupDestroy(java.lang.String,java.lang.String) -> onGroupDestroy
    com.wenwen.chatuidemo.activity.ChatActivity access$0(com.wenwen.chatuidemo.activity.ChatActivity$GroupListener) -> a
com.wenwen.chatuidemo.activity.ChatActivity$GroupListener$1 -> com.wenwen.chatuidemo.activity.t:
    com.wenwen.chatuidemo.activity.ChatActivity$GroupListener this$1 -> a
    java.lang.String val$groupId -> b
    void run() -> run
com.wenwen.chatuidemo.activity.ChatActivity$GroupListener$2 -> com.wenwen.chatuidemo.activity.u:
    com.wenwen.chatuidemo.activity.ChatActivity$GroupListener this$1 -> a
    java.lang.String val$groupId -> b
    void run() -> run
com.wenwen.chatuidemo.activity.ChatActivity$ListScrollListener -> com.wenwen.chatuidemo.activity.v:
    com.wenwen.chatuidemo.activity.ChatActivity this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.wenwen.chatuidemo.activity.ChatActivity$NewMessageBroadcastReceiver -> com.wenwen.chatuidemo.activity.w:
    com.wenwen.chatuidemo.activity.ChatActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.wenwen.chatuidemo.activity.ChatActivity$PressToSpeakListen -> com.wenwen.chatuidemo.activity.x:
    com.wenwen.chatuidemo.activity.ChatActivity this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.wenwen.chatuidemo.activity.ChatAllHistory -> com.wenwen.chatuidemo.activity.ChatAllHistory:
    android.view.inputmethod.InputMethodManager inputMethodManager -> c
    android.widget.ListView listView -> d
    com.wenwen.chatuidemo.adapter.ChatAllHistoryAdapter adapter -> e
    android.widget.EditText query -> f
    android.widget.ImageButton clearSearch -> g
    android.widget.RelativeLayout errorItem -> a
    android.widget.TextView errorText -> b
    boolean hidden -> h
    java.util.List groups -> i
    java.util.List conversationList -> j
    void onCreate(android.os.Bundle) -> onCreate
    void init() -> c
    void hideSoftKeyboard() -> a
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void refresh() -> b
    java.util.List loadConversationsWithRecentChat() -> d
    void sortConversationByLastChatTime(java.util.List) -> a
    void onResume() -> onResume
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    com.wenwen.chatuidemo.adapter.ChatAllHistoryAdapter access$0(com.wenwen.chatuidemo.activity.ChatAllHistory) -> a
    void access$1(com.wenwen.chatuidemo.activity.ChatAllHistory,java.util.List) -> a
    java.util.List access$2(com.wenwen.chatuidemo.activity.ChatAllHistory) -> b
    android.widget.ImageButton access$3(com.wenwen.chatuidemo.activity.ChatAllHistory) -> c
    android.widget.EditText access$4(com.wenwen.chatuidemo.activity.ChatAllHistory) -> d
com.wenwen.chatuidemo.activity.ChatAllHistory$1 -> com.wenwen.chatuidemo.activity.y:
    com.wenwen.chatuidemo.activity.ChatAllHistory this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.wenwen.chatuidemo.activity.ChatAllHistory$2 -> com.wenwen.chatuidemo.activity.z:
    com.wenwen.chatuidemo.activity.ChatAllHistory this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.wenwen.chatuidemo.activity.ChatAllHistory$3 -> com.wenwen.chatuidemo.activity.aa:
    com.wenwen.chatuidemo.activity.ChatAllHistory this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.wenwen.chatuidemo.activity.ChatAllHistory$4 -> com.wenwen.chatuidemo.activity.ab:
    com.wenwen.chatuidemo.activity.ChatAllHistory this$0 -> a
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.activity.ChatAllHistory$5 -> com.wenwen.chatuidemo.activity.ac:
    com.wenwen.chatuidemo.activity.ChatAllHistory this$0 -> a
    int compare(com.easemob.chat.EMConversation,com.easemob.chat.EMConversation) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.wenwen.chatuidemo.activity.ChatAllHistoryFragment -> com.wenwen.chatuidemo.activity.ChatAllHistoryFragment:
    android.view.inputmethod.InputMethodManager inputMethodManager -> c
    android.widget.ListView listView -> d
    com.wenwen.chatuidemo.adapter.ChatAllHistoryAdapter adapter -> e
    android.widget.EditText query -> f
    android.widget.ImageButton clearSearch -> g
    android.widget.RelativeLayout errorItem -> a
    android.widget.TextView errorText -> b
    boolean hidden -> h
    java.util.List groups -> i
    java.util.List conversationList -> j
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
    void onActivityCreated(android.os.Bundle) -> onActivityCreated
    void hideSoftKeyboard() -> a
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void refresh() -> b
    java.util.List loadConversationsWithRecentChat() -> c
    void sortConversationByLastChatTime(java.util.List) -> a
    void onHiddenChanged(boolean) -> onHiddenChanged
    void onResume() -> onResume
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    com.wenwen.chatuidemo.adapter.ChatAllHistoryAdapter access$0(com.wenwen.chatuidemo.activity.ChatAllHistoryFragment) -> a
    void access$1(com.wenwen.chatuidemo.activity.ChatAllHistoryFragment,java.util.List) -> a
    java.util.List access$2(com.wenwen.chatuidemo.activity.ChatAllHistoryFragment) -> b
    android.widget.ImageButton access$3(com.wenwen.chatuidemo.activity.ChatAllHistoryFragment) -> c
    android.widget.EditText access$4(com.wenwen.chatuidemo.activity.ChatAllHistoryFragment) -> d
com.wenwen.chatuidemo.activity.ChatAllHistoryFragment$1 -> com.wenwen.chatuidemo.activity.ad:
    com.wenwen.chatuidemo.activity.ChatAllHistoryFragment this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.wenwen.chatuidemo.activity.ChatAllHistoryFragment$2 -> com.wenwen.chatuidemo.activity.ae:
    com.wenwen.chatuidemo.activity.ChatAllHistoryFragment this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.wenwen.chatuidemo.activity.ChatAllHistoryFragment$3 -> com.wenwen.chatuidemo.activity.af:
    com.wenwen.chatuidemo.activity.ChatAllHistoryFragment this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.wenwen.chatuidemo.activity.ChatAllHistoryFragment$4 -> com.wenwen.chatuidemo.activity.ag:
    com.wenwen.chatuidemo.activity.ChatAllHistoryFragment this$0 -> a
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.activity.ChatAllHistoryFragment$5 -> com.wenwen.chatuidemo.activity.ah:
    com.wenwen.chatuidemo.activity.ChatAllHistoryFragment this$0 -> a
    int compare(com.easemob.chat.EMConversation,com.easemob.chat.EMConversation) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.wenwen.chatuidemo.activity.ChatHistoryFragment -> com.wenwen.chatuidemo.activity.ChatHistoryFragment:
    android.view.inputmethod.InputMethodManager inputMethodManager -> c
    android.widget.ListView listView -> d
    java.util.Map contactList -> e
    com.wenwen.chatuidemo.adapter.ChatHistoryAdapter adapter -> f
    android.widget.EditText query -> g
    android.widget.ImageButton clearSearch -> h
    android.widget.RelativeLayout errorItem -> a
    android.widget.TextView errorText -> b
    boolean hidden -> i
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
    void onActivityCreated(android.os.Bundle) -> onActivityCreated
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void refresh() -> a
    java.util.List loadUsersWithRecentChat() -> b
    void sortUserByLastChatTime(java.util.List) -> a
    void onHiddenChanged(boolean) -> onHiddenChanged
    void onResume() -> onResume
    com.wenwen.chatuidemo.adapter.ChatHistoryAdapter access$0(com.wenwen.chatuidemo.activity.ChatHistoryFragment) -> a
    android.view.inputmethod.InputMethodManager access$1(com.wenwen.chatuidemo.activity.ChatHistoryFragment) -> b
    android.widget.ImageButton access$2(com.wenwen.chatuidemo.activity.ChatHistoryFragment) -> c
    android.widget.EditText access$3(com.wenwen.chatuidemo.activity.ChatHistoryFragment) -> d
com.wenwen.chatuidemo.activity.ChatHistoryFragment$1 -> com.wenwen.chatuidemo.activity.ai:
    com.wenwen.chatuidemo.activity.ChatHistoryFragment this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.wenwen.chatuidemo.activity.ChatHistoryFragment$2 -> com.wenwen.chatuidemo.activity.aj:
    com.wenwen.chatuidemo.activity.ChatHistoryFragment this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.wenwen.chatuidemo.activity.ChatHistoryFragment$3 -> com.wenwen.chatuidemo.activity.ak:
    com.wenwen.chatuidemo.activity.ChatHistoryFragment this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.wenwen.chatuidemo.activity.ChatHistoryFragment$4 -> com.wenwen.chatuidemo.activity.al:
    com.wenwen.chatuidemo.activity.ChatHistoryFragment this$0 -> a
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.activity.ChatHistoryFragment$5 -> com.wenwen.chatuidemo.activity.am:
    com.wenwen.chatuidemo.activity.ChatHistoryFragment this$0 -> a
    int compare(com.wenwen.chatuidemo.domain.MyUser,com.wenwen.chatuidemo.domain.MyUser) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.wenwen.chatuidemo.activity.ChatOldActivity -> com.wenwen.chatuidemo.activity.ChatOldActivity:
    android.view.View recordingContainer -> c
    android.widget.ImageView micImage -> d
    android.widget.TextView recordingHint -> e
    android.widget.ListView listView -> f
    com.wenwen.chatuidemo.widget.PasteEditText mEditTextContent -> g
    android.view.View buttonSetModeKeyboard -> h
    android.view.View buttonSetModeVoice -> i
    android.view.View buttonSend -> j
    android.view.View buttonPressToSpeak -> k
    android.support.v4.view.ViewPager expressionViewpager -> l
    android.widget.LinearLayout expressionContainer -> m
    android.widget.LinearLayout btnContainer -> n
    android.widget.ImageView locationImgview -> p
    android.view.View more -> q
    android.text.ClipboardManager clipboard -> r
    android.view.inputmethod.InputMethodManager manager -> s
    java.util.List reslist -> t
    android.graphics.drawable.Drawable[] micImages -> u
    int chatType -> v
    com.easemob.chat.EMConversation conversation -> w
    com.wenwen.chatuidemo.activity.ChatOldActivity$NewMessageBroadcastReceiver receiver -> x
    com.wenwen.chatuidemo.activity.ChatOldActivity activityInstance -> a
    java.lang.String toChatUsername -> y
    com.easemob.util.VoiceRecorder voiceRecorder -> z
    com.wenwen.chatuidemo.adapter.MessageAdapter adapter -> A
    java.io.File cameraFile -> B
    int resendPos -> b
    com.wenwen.chatuidemo.activity.ChatOldActivity$GroupListener groupListener -> C
    android.widget.ImageView iv_emoticons_normal -> D
    android.widget.ImageView iv_emoticons_checked -> E
    android.widget.RelativeLayout edittext_layout -> F
    android.widget.ProgressBar loadmorePB -> G
    boolean isloading -> H
    int pagesize -> I
    boolean haveMoreData -> J
    android.widget.Button btnMore -> K
    android.os.Handler micImageHandler -> L
    com.easemob.chat.EMGroup group -> M
    android.content.BroadcastReceiver ackMessageReceiver -> N
    android.content.BroadcastReceiver deliveryAckMessageReceiver -> O
    android.os.PowerManager$WakeLock wakeLock -> P
    int[] $SWITCH_TABLE$com$easemob$chat$EMMessage$Type -> Q
    void onCreate(android.os.Bundle) -> onCreate
    void initView() -> a
    void setUpView() -> e
    void forwardMessage(java.lang.String) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onClick(android.view.View) -> onClick
    void selectPicFromCamera() -> b
    void selectFileFromLocal() -> f
    void selectPicFromLocal() -> c
    void sendText(java.lang.String) -> b
    void sendVoice(java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    void sendPicture(java.lang.String) -> c
    void sendVideo(java.lang.String,java.lang.String,int) -> a
    void sendPicByUri(android.net.Uri) -> a
    void sendLocationMsg(double,double,java.lang.String,java.lang.String) -> a
    void sendFile(android.net.Uri) -> b
    void resendMessage() -> g
    void setModeVoice(android.view.View) -> setModeVoice
    void setModeKeyboard(android.view.View) -> setModeKeyboard
    void emptyHistory(android.view.View) -> emptyHistory
    void toGroupDetails(android.view.View) -> toGroupDetails
    void more(android.view.View) -> more
    void editClick(android.view.View) -> editClick
    android.view.View getGridChildView(int) -> b
    java.util.List getExpressionRes(int) -> a
    void onDestroy() -> onDestroy
    void onResume() -> onResume
    void onPause() -> onPause
    void hideKeyboard() -> h
    void addUserToBlacklist(java.lang.String) -> d
    void back(android.view.View) -> back
    void onBackPressed() -> onBackPressed
    void onNewIntent(android.content.Intent) -> onNewIntent
    android.widget.ImageView access$0(com.wenwen.chatuidemo.activity.ChatOldActivity) -> a
    android.graphics.drawable.Drawable[] access$1(com.wenwen.chatuidemo.activity.ChatOldActivity) -> b
    com.wenwen.chatuidemo.adapter.MessageAdapter access$2(com.wenwen.chatuidemo.activity.ChatOldActivity) -> c
    java.lang.String access$3(com.wenwen.chatuidemo.activity.ChatOldActivity) -> d
    android.widget.ListView access$4(com.wenwen.chatuidemo.activity.ChatOldActivity) -> e
    android.os.PowerManager$WakeLock access$5(com.wenwen.chatuidemo.activity.ChatOldActivity) -> f
    android.view.View access$6(com.wenwen.chatuidemo.activity.ChatOldActivity) -> g
    android.widget.TextView access$7(com.wenwen.chatuidemo.activity.ChatOldActivity) -> h
    com.easemob.util.VoiceRecorder access$8(com.wenwen.chatuidemo.activity.ChatOldActivity) -> i
    void access$9(com.wenwen.chatuidemo.activity.ChatOldActivity,java.lang.String,java.lang.String,java.lang.String,boolean) -> a
    boolean access$10(com.wenwen.chatuidemo.activity.ChatOldActivity) -> j
    boolean access$11(com.wenwen.chatuidemo.activity.ChatOldActivity) -> k
    android.widget.ProgressBar access$12(com.wenwen.chatuidemo.activity.ChatOldActivity) -> l
    int access$13(com.wenwen.chatuidemo.activity.ChatOldActivity) -> m
    com.easemob.chat.EMConversation access$14(com.wenwen.chatuidemo.activity.ChatOldActivity) -> n
    void access$15(com.wenwen.chatuidemo.activity.ChatOldActivity,boolean) -> a
    void access$16(com.wenwen.chatuidemo.activity.ChatOldActivity,boolean) -> b
    android.widget.RelativeLayout access$17(com.wenwen.chatuidemo.activity.ChatOldActivity) -> o
    android.view.View access$18(com.wenwen.chatuidemo.activity.ChatOldActivity) -> p
    android.widget.ImageView access$19(com.wenwen.chatuidemo.activity.ChatOldActivity) -> q
    android.widget.ImageView access$20(com.wenwen.chatuidemo.activity.ChatOldActivity) -> r
    android.widget.LinearLayout access$21(com.wenwen.chatuidemo.activity.ChatOldActivity) -> s
    android.widget.LinearLayout access$22(com.wenwen.chatuidemo.activity.ChatOldActivity) -> t
    android.widget.Button access$23(com.wenwen.chatuidemo.activity.ChatOldActivity) -> u
    android.view.View access$24(com.wenwen.chatuidemo.activity.ChatOldActivity) -> v
    void access$25(com.wenwen.chatuidemo.activity.ChatOldActivity) -> w
    int[] $SWITCH_TABLE$com$easemob$chat$EMMessage$Type() -> d
    android.view.View access$27(com.wenwen.chatuidemo.activity.ChatOldActivity) -> x
    com.wenwen.chatuidemo.widget.PasteEditText access$28(com.wenwen.chatuidemo.activity.ChatOldActivity) -> y
com.wenwen.chatuidemo.activity.ChatOldActivity$1 -> com.wenwen.chatuidemo.activity.an:
    com.wenwen.chatuidemo.activity.ChatOldActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.wenwen.chatuidemo.activity.ChatOldActivity$2 -> com.wenwen.chatuidemo.activity.ao:
    com.wenwen.chatuidemo.activity.ChatOldActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.wenwen.chatuidemo.activity.ChatOldActivity$3 -> com.wenwen.chatuidemo.activity.ap:
    com.wenwen.chatuidemo.activity.ChatOldActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.wenwen.chatuidemo.activity.ChatOldActivity$4 -> com.wenwen.chatuidemo.activity.aq:
    com.wenwen.chatuidemo.activity.ChatOldActivity this$0 -> a
    void onFocusChange(android.view.View,boolean) -> onFocusChange
com.wenwen.chatuidemo.activity.ChatOldActivity$5 -> com.wenwen.chatuidemo.activity.ar:
    com.wenwen.chatuidemo.activity.ChatOldActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.activity.ChatOldActivity$6 -> com.wenwen.chatuidemo.activity.as:
    com.wenwen.chatuidemo.activity.ChatOldActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.wenwen.chatuidemo.activity.ChatOldActivity$7 -> com.wenwen.chatuidemo.activity.at:
    com.wenwen.chatuidemo.activity.ChatOldActivity this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.wenwen.chatuidemo.activity.ChatOldActivity$8 -> com.wenwen.chatuidemo.activity.au:
    com.wenwen.chatuidemo.activity.ChatOldActivity this$0 -> a
    com.wenwen.chatuidemo.adapter.ExpressionAdapter val$expressionAdapter -> b
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.wenwen.chatuidemo.activity.ChatOldActivity$GroupListener -> com.wenwen.chatuidemo.activity.av:
    com.wenwen.chatuidemo.activity.ChatOldActivity this$0 -> a
    void onUserRemoved(java.lang.String,java.lang.String) -> onUserRemoved
    void onGroupDestroy(java.lang.String,java.lang.String) -> onGroupDestroy
    com.wenwen.chatuidemo.activity.ChatOldActivity access$0(com.wenwen.chatuidemo.activity.ChatOldActivity$GroupListener) -> a
com.wenwen.chatuidemo.activity.ChatOldActivity$GroupListener$1 -> com.wenwen.chatuidemo.activity.aw:
    com.wenwen.chatuidemo.activity.ChatOldActivity$GroupListener this$1 -> a
    java.lang.String val$groupId -> b
    void run() -> run
com.wenwen.chatuidemo.activity.ChatOldActivity$GroupListener$2 -> com.wenwen.chatuidemo.activity.ax:
    com.wenwen.chatuidemo.activity.ChatOldActivity$GroupListener this$1 -> a
    java.lang.String val$groupId -> b
    void run() -> run
com.wenwen.chatuidemo.activity.ChatOldActivity$ListScrollListener -> com.wenwen.chatuidemo.activity.ay:
    com.wenwen.chatuidemo.activity.ChatOldActivity this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.wenwen.chatuidemo.activity.ChatOldActivity$NewMessageBroadcastReceiver -> com.wenwen.chatuidemo.activity.az:
    com.wenwen.chatuidemo.activity.ChatOldActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.wenwen.chatuidemo.activity.ChatOldActivity$PressToSpeakListen -> com.wenwen.chatuidemo.activity.ba:
    com.wenwen.chatuidemo.activity.ChatOldActivity this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.wenwen.chatuidemo.activity.ClinicOrderSetting -> com.wenwen.chatuidemo.activity.ClinicOrderSetting:
    java.lang.String TAG -> a
    android.widget.TextView time_tv -> b
    android.widget.TextView time_sw -> c
    android.widget.TextView time_xw -> d
    android.widget.RelativeLayout time_sw1_layout -> e
    android.widget.RelativeLayout time_xw1_layout -> f
    android.widget.TextView time_tv1 -> g
    android.widget.TextView time_sw1 -> h
    android.widget.TextView time_xw1 -> i
    android.widget.TextView time_sw11 -> j
    android.widget.TextView time_xw11 -> k
    android.widget.RelativeLayout time_sw2_layout -> l
    android.widget.RelativeLayout time_xw2_layout -> m
    android.widget.TextView time_tv2 -> n
    android.widget.TextView time_sw2 -> p
    android.widget.TextView time_xw2 -> q
    android.widget.TextView time_sw21 -> r
    android.widget.TextView time_xw21 -> s
    android.widget.RelativeLayout time_sw3_layout -> t
    android.widget.RelativeLayout time_xw3_layout -> u
    android.widget.TextView time_tv3 -> v
    android.widget.TextView time_sw3 -> w
    android.widget.TextView time_xw3 -> x
    android.widget.TextView time_sw31 -> y
    android.widget.TextView time_xw31 -> z
    android.widget.RelativeLayout time_sw4_layout -> A
    android.widget.RelativeLayout time_xw4_layout -> B
    android.widget.TextView time_tv4 -> C
    android.widget.TextView time_sw4 -> D
    android.widget.TextView time_xw4 -> E
    android.widget.TextView time_sw41 -> F
    android.widget.TextView time_xw41 -> G
    android.widget.RelativeLayout time_sw5_layout -> H
    android.widget.RelativeLayout time_xw5_layout -> I
    android.widget.TextView time_tv5 -> J
    android.widget.TextView time_sw5 -> K
    android.widget.TextView time_xw5 -> L
    android.widget.TextView time_sw51 -> M
    android.widget.TextView time_xw51 -> N
    android.widget.RelativeLayout time_sw6_layout -> O
    android.widget.RelativeLayout time_xw6_layout -> P
    android.widget.TextView time_tv6 -> Q
    android.widget.TextView time_sw6 -> R
    android.widget.TextView time_xw6 -> S
    android.widget.TextView time_sw61 -> T
    android.widget.TextView time_xw61 -> U
    android.widget.RelativeLayout time_sw7_layout -> V
    android.widget.RelativeLayout time_xw7_layout -> W
    android.widget.TextView time_tv7 -> X
    android.widget.TextView time_sw7 -> Y
    android.widget.TextView time_xw7 -> Z
    android.widget.TextView time_sw71 -> aa
    android.widget.TextView time_xw71 -> ab
    int width -> ac
    android.widget.Button save -> ad
    android.widget.EditText et_points_every_num -> ae
    android.widget.ImageView iv_switch_open_vip -> af
    android.widget.ImageView iv_switch_close_vip -> ag
    android.widget.RelativeLayout rl_switch_vip -> ah
    int isvip -> ai
    android.widget.TextView tv -> aj
    java.lang.String week1 -> ak
    java.lang.String week2 -> al
    java.lang.String week3 -> am
    java.lang.String week4 -> an
    java.lang.String week5 -> ao
    java.lang.String week6 -> ap
    java.lang.String week7 -> aq
    java.lang.StringBuffer weekBuilder -> ar
    java.lang.String time1 -> as
    java.lang.String time2 -> at
    java.lang.String time3 -> au
    java.lang.String time4 -> av
    java.lang.String time5 -> aw
    java.lang.String time6 -> ax
    java.lang.String time7 -> ay
    java.lang.StringBuffer timeBuilder -> az
    android.os.Handler handler -> aA
    java.lang.String order_isneed_coin -> aB
    java.lang.String order_coin_once -> aC
    java.lang.String order_coin_week -> aD
    java.lang.String order_replay_24hours -> aE
    java.lang.String order_set_week -> aF
    java.lang.String order_set_morning_afternoon -> aG
    java.lang.String order_set_time -> aH
    void onCreate(android.os.Bundle) -> onCreate
    void getset() -> a
    void setWith() -> b
    void init() -> c
    void onClick(android.view.View) -> onClick
    void setweek() -> d
    android.widget.EditText access$0(com.wenwen.chatuidemo.activity.ClinicOrderSetting) -> a
    java.lang.String access$1(com.wenwen.chatuidemo.activity.ClinicOrderSetting) -> b
    java.lang.String access$2(com.wenwen.chatuidemo.activity.ClinicOrderSetting) -> c
    android.widget.ImageView access$3(com.wenwen.chatuidemo.activity.ClinicOrderSetting) -> d
    android.widget.ImageView access$4(com.wenwen.chatuidemo.activity.ClinicOrderSetting) -> e
    java.lang.String access$5(com.wenwen.chatuidemo.activity.ClinicOrderSetting) -> f
    void access$6(com.wenwen.chatuidemo.activity.ClinicOrderSetting,java.lang.String) -> a
    void access$7(com.wenwen.chatuidemo.activity.ClinicOrderSetting,java.lang.String) -> b
    void access$8(com.wenwen.chatuidemo.activity.ClinicOrderSetting,java.lang.String) -> c
    void access$9(com.wenwen.chatuidemo.activity.ClinicOrderSetting,java.lang.String) -> d
    void access$10(com.wenwen.chatuidemo.activity.ClinicOrderSetting,java.lang.String) -> e
    void access$11(com.wenwen.chatuidemo.activity.ClinicOrderSetting,java.lang.String) -> f
    void access$12(com.wenwen.chatuidemo.activity.ClinicOrderSetting,java.lang.String) -> g
    java.lang.String access$13(com.wenwen.chatuidemo.activity.ClinicOrderSetting) -> g
    void access$14(com.wenwen.chatuidemo.activity.ClinicOrderSetting,java.lang.String) -> h
    void access$15(com.wenwen.chatuidemo.activity.ClinicOrderSetting,java.lang.String) -> i
    void access$16(com.wenwen.chatuidemo.activity.ClinicOrderSetting,java.lang.String) -> j
    void access$17(com.wenwen.chatuidemo.activity.ClinicOrderSetting,java.lang.String) -> k
    void access$18(com.wenwen.chatuidemo.activity.ClinicOrderSetting,java.lang.String) -> l
    void access$19(com.wenwen.chatuidemo.activity.ClinicOrderSetting,java.lang.String) -> m
    void access$20(com.wenwen.chatuidemo.activity.ClinicOrderSetting,java.lang.String) -> n
    void access$21(com.wenwen.chatuidemo.activity.ClinicOrderSetting,java.lang.String) -> o
    void access$22(com.wenwen.chatuidemo.activity.ClinicOrderSetting,java.lang.String) -> p
    void access$23(com.wenwen.chatuidemo.activity.ClinicOrderSetting,java.lang.String) -> q
    void access$24(com.wenwen.chatuidemo.activity.ClinicOrderSetting,java.lang.String) -> r
    void access$25(com.wenwen.chatuidemo.activity.ClinicOrderSetting,java.lang.String) -> s
    void access$26(com.wenwen.chatuidemo.activity.ClinicOrderSetting,java.lang.String) -> t
    void access$27(com.wenwen.chatuidemo.activity.ClinicOrderSetting,java.lang.String) -> u
    android.os.Handler access$28(com.wenwen.chatuidemo.activity.ClinicOrderSetting) -> h
com.wenwen.chatuidemo.activity.ClinicOrderSetting$1 -> com.wenwen.chatuidemo.activity.bb:
    com.wenwen.chatuidemo.activity.ClinicOrderSetting this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.wenwen.chatuidemo.activity.ClinicOrderSetting$2 -> com.wenwen.chatuidemo.activity.bc:
    com.wenwen.chatuidemo.activity.ClinicOrderSetting this$0 -> a
    android.app.ProgressDialog val$pd -> b
    void onStart() -> b
    void onSuccess(int,org.apache.http.Header[],byte[]) -> a
    void onFinish() -> c
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> a
com.wenwen.chatuidemo.activity.ClinicOrderSetting$3 -> com.wenwen.chatuidemo.activity.bd:
    com.wenwen.chatuidemo.activity.ClinicOrderSetting this$0 -> a
    android.app.ProgressDialog val$pd -> b
    void onStart() -> b
    void onSuccess(int,org.apache.http.Header[],byte[]) -> a
    void onFinish() -> c
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> a
com.wenwen.chatuidemo.activity.ContactSickFragment -> com.wenwen.chatuidemo.activity.ContactSickFragment:
    com.wenwen.chatuidemo.adapter.SickContactAdapter adapter -> a
    java.util.List contactList -> b
    android.widget.ListView listView -> c
    boolean hidden -> d
    com.wenwen.chatuidemo.widget.Sidebar sidebar -> e
    android.view.inputmethod.InputMethodManager inputMethodManager -> f
    java.util.List blackList -> g
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
    void onActivityCreated(android.os.Bundle) -> onActivityCreated
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onHiddenChanged(boolean) -> onHiddenChanged
    void onResume() -> onResume
    void deleteContact(com.wenwen.chatuidemo.domain.MyUser1) -> a
    void moveToBlacklist(java.lang.String) -> a
    void refresh() -> a
    void getContactList() -> b
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    com.wenwen.chatuidemo.adapter.SickContactAdapter access$0(com.wenwen.chatuidemo.activity.ContactSickFragment) -> a
    android.view.inputmethod.InputMethodManager access$1(com.wenwen.chatuidemo.activity.ContactSickFragment) -> b
    void access$2(com.wenwen.chatuidemo.activity.ContactSickFragment) -> c
com.wenwen.chatuidemo.activity.ContactSickFragment$1 -> com.wenwen.chatuidemo.activity.be:
    com.wenwen.chatuidemo.activity.ContactSickFragment this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.wenwen.chatuidemo.activity.ContactSickFragment$2 -> com.wenwen.chatuidemo.activity.bf:
    com.wenwen.chatuidemo.activity.ContactSickFragment this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.wenwen.chatuidemo.activity.ContactSickFragment$3 -> com.wenwen.chatuidemo.activity.bg:
    com.wenwen.chatuidemo.activity.ContactSickFragment this$0 -> a
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.activity.ContactSickFragment$4 -> com.wenwen.chatuidemo.activity.bh:
    com.wenwen.chatuidemo.activity.ContactSickFragment this$0 -> a
    com.wenwen.chatuidemo.domain.MyUser1 val$tobeDeleteUser -> b
    android.app.ProgressDialog val$pd -> c
    void run() -> run
    com.wenwen.chatuidemo.activity.ContactSickFragment access$0(com.wenwen.chatuidemo.activity.ContactSickFragment$4) -> a
com.wenwen.chatuidemo.activity.ContactSickFragment$4$1 -> com.wenwen.chatuidemo.activity.bi:
    com.wenwen.chatuidemo.activity.ContactSickFragment$4 this$1 -> a
    android.app.ProgressDialog val$pd -> b
    com.wenwen.chatuidemo.domain.MyUser1 val$tobeDeleteUser -> c
    void run() -> run
com.wenwen.chatuidemo.activity.ContactSickFragment$4$2 -> com.wenwen.chatuidemo.activity.bj:
    com.wenwen.chatuidemo.activity.ContactSickFragment$4 this$1 -> a
    android.app.ProgressDialog val$pd -> b
    java.lang.Exception val$e -> c
    void run() -> run
com.wenwen.chatuidemo.activity.ContactSickFragment$5 -> com.wenwen.chatuidemo.activity.bk:
    com.wenwen.chatuidemo.activity.ContactSickFragment this$0 -> a
    java.lang.String val$username -> b
    android.app.ProgressDialog val$pd -> c
    void run() -> run
    com.wenwen.chatuidemo.activity.ContactSickFragment access$0(com.wenwen.chatuidemo.activity.ContactSickFragment$5) -> a
com.wenwen.chatuidemo.activity.ContactSickFragment$5$1 -> com.wenwen.chatuidemo.activity.bl:
    com.wenwen.chatuidemo.activity.ContactSickFragment$5 this$1 -> a
    android.app.ProgressDialog val$pd -> b
    void run() -> run
com.wenwen.chatuidemo.activity.ContactSickFragment$5$2 -> com.wenwen.chatuidemo.activity.bm:
    com.wenwen.chatuidemo.activity.ContactSickFragment$5 this$1 -> a
    android.app.ProgressDialog val$pd -> b
    void run() -> run
com.wenwen.chatuidemo.activity.ContactSickFragment$6 -> com.wenwen.chatuidemo.activity.bn:
    com.wenwen.chatuidemo.activity.ContactSickFragment this$0 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.ContactSickFragment$7 -> com.wenwen.chatuidemo.activity.bo:
    com.wenwen.chatuidemo.activity.ContactSickFragment this$0 -> a
    int compare(com.wenwen.chatuidemo.domain.MyUser1,com.wenwen.chatuidemo.domain.MyUser1) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.wenwen.chatuidemo.activity.ContactlistFragment -> com.wenwen.chatuidemo.activity.ContactlistFragment:
    com.wenwen.chatuidemo.adapter.ContactAdapter adapter -> a
    java.util.List contactList -> b
    android.widget.ListView listView -> c
    boolean hidden -> d
    com.wenwen.chatuidemo.widget.Sidebar sidebar -> e
    android.view.inputmethod.InputMethodManager inputMethodManager -> f
    java.util.List blackList -> g
    android.os.Handler handler -> h
    com.google.gson.Gson gson -> i
    java.util.List myUser -> j
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
    void onActivityCreated(android.os.Bundle) -> onActivityCreated
    android.os.Handler getHandler() -> a
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onHiddenChanged(boolean) -> onHiddenChanged
    void onResume() -> onResume
    void deleteContact(com.wenwen.chatuidemo.domain.MyUser) -> a
    void moveToBlacklist(java.lang.String) -> a
    void refresh() -> b
    void getContactList() -> c
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    com.google.gson.Gson access$0(com.wenwen.chatuidemo.activity.ContactlistFragment) -> a
    java.util.List access$1(com.wenwen.chatuidemo.activity.ContactlistFragment) -> b
    void access$2(com.wenwen.chatuidemo.activity.ContactlistFragment) -> c
    com.wenwen.chatuidemo.adapter.ContactAdapter access$3(com.wenwen.chatuidemo.activity.ContactlistFragment) -> d
    android.view.inputmethod.InputMethodManager access$4(com.wenwen.chatuidemo.activity.ContactlistFragment) -> e
com.wenwen.chatuidemo.activity.ContactlistFragment$1 -> com.wenwen.chatuidemo.activity.bp:
    com.wenwen.chatuidemo.activity.ContactlistFragment this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
    com.wenwen.chatuidemo.activity.ContactlistFragment access$0(com.wenwen.chatuidemo.activity.ContactlistFragment$1) -> a
com.wenwen.chatuidemo.activity.ContactlistFragment$1$1 -> com.wenwen.chatuidemo.activity.bq:
    com.wenwen.chatuidemo.activity.ContactlistFragment$1 this$1 -> a
    void onStart() -> b
    void onSuccess(int,org.apache.http.Header[],byte[]) -> a
    void onFinish() -> c
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> a
com.wenwen.chatuidemo.activity.ContactlistFragment$2 -> com.wenwen.chatuidemo.activity.br:
    com.wenwen.chatuidemo.activity.ContactlistFragment this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.wenwen.chatuidemo.activity.ContactlistFragment$3 -> com.wenwen.chatuidemo.activity.bs:
    com.wenwen.chatuidemo.activity.ContactlistFragment this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.wenwen.chatuidemo.activity.ContactlistFragment$4 -> com.wenwen.chatuidemo.activity.bt:
    com.wenwen.chatuidemo.activity.ContactlistFragment this$0 -> a
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.activity.ContactlistFragment$5 -> com.wenwen.chatuidemo.activity.bu:
    com.wenwen.chatuidemo.activity.ContactlistFragment this$0 -> a
    com.wenwen.chatuidemo.domain.MyUser val$tobeDeleteUser -> b
    android.app.ProgressDialog val$pd -> c
    void run() -> run
    com.wenwen.chatuidemo.activity.ContactlistFragment access$0(com.wenwen.chatuidemo.activity.ContactlistFragment$5) -> a
com.wenwen.chatuidemo.activity.ContactlistFragment$5$1 -> com.wenwen.chatuidemo.activity.bv:
    com.wenwen.chatuidemo.activity.ContactlistFragment$5 this$1 -> a
    android.app.ProgressDialog val$pd -> b
    com.wenwen.chatuidemo.domain.MyUser val$tobeDeleteUser -> c
    void run() -> run
com.wenwen.chatuidemo.activity.ContactlistFragment$5$2 -> com.wenwen.chatuidemo.activity.bw:
    com.wenwen.chatuidemo.activity.ContactlistFragment$5 this$1 -> a
    android.app.ProgressDialog val$pd -> b
    java.lang.Exception val$e -> c
    void run() -> run
com.wenwen.chatuidemo.activity.ContactlistFragment$6 -> com.wenwen.chatuidemo.activity.bx:
    com.wenwen.chatuidemo.activity.ContactlistFragment this$0 -> a
    java.lang.String val$username -> b
    android.app.ProgressDialog val$pd -> c
    void run() -> run
    com.wenwen.chatuidemo.activity.ContactlistFragment access$0(com.wenwen.chatuidemo.activity.ContactlistFragment$6) -> a
com.wenwen.chatuidemo.activity.ContactlistFragment$6$1 -> com.wenwen.chatuidemo.activity.by:
    com.wenwen.chatuidemo.activity.ContactlistFragment$6 this$1 -> a
    android.app.ProgressDialog val$pd -> b
    void run() -> run
com.wenwen.chatuidemo.activity.ContactlistFragment$6$2 -> com.wenwen.chatuidemo.activity.bz:
    com.wenwen.chatuidemo.activity.ContactlistFragment$6 this$1 -> a
    android.app.ProgressDialog val$pd -> b
    void run() -> run
com.wenwen.chatuidemo.activity.ContactlistFragment$7 -> com.wenwen.chatuidemo.activity.ca:
    com.wenwen.chatuidemo.activity.ContactlistFragment this$0 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.ContactlistFragment$8 -> com.wenwen.chatuidemo.activity.cb:
    com.wenwen.chatuidemo.activity.ContactlistFragment this$0 -> a
    int compare(com.wenwen.chatuidemo.domain.MyUser,com.wenwen.chatuidemo.domain.MyUser) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.wenwen.chatuidemo.activity.ContextMenu -> com.wenwen.chatuidemo.activity.ContextMenu:
    int position -> a
    void onCreate(android.os.Bundle) -> onCreate
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void copy(android.view.View) -> copy
    void delete(android.view.View) -> delete
    void forward(android.view.View) -> forward
    void open(android.view.View) -> open
    void download(android.view.View) -> download
    void toCloud(android.view.View) -> toCloud
com.wenwen.chatuidemo.activity.Department -> com.wenwen.chatuidemo.activity.Department:
    java.lang.String TAG -> a
    android.widget.ListView listView -> b
    com.wenwen.chatuidemo.adapter.DepartmentAdapter departmentAdapter -> c
    void onCreate(android.os.Bundle) -> onCreate
    void back(android.view.View) -> back
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.activity.Department$1 -> com.wenwen.chatuidemo.activity.cc:
    com.wenwen.chatuidemo.activity.Department this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.wenwen.chatuidemo.activity.DiagnoseActivity -> com.wenwen.chatuidemo.activity.DiagnoseActivity:
    android.widget.TextView currentVersion -> a
    android.widget.Button uploadLog -> b
    android.app.ProgressDialog progressDialog -> c
    void onCreate(android.os.Bundle) -> onCreate
    void back(android.view.View) -> back
    java.lang.String getVersionName() -> b
    void onClick(android.view.View) -> onClick
    void uploadlog() -> a
    android.app.ProgressDialog access$0(com.wenwen.chatuidemo.activity.DiagnoseActivity) -> a
com.wenwen.chatuidemo.activity.DiagnoseActivity$1 -> com.wenwen.chatuidemo.activity.cd:
    com.wenwen.chatuidemo.activity.DiagnoseActivity this$0 -> a
    void onSuccess() -> onSuccess
    void onProgress(int,java.lang.String) -> onProgress
    void onError(int,java.lang.String) -> onError
    com.wenwen.chatuidemo.activity.DiagnoseActivity access$0(com.wenwen.chatuidemo.activity.DiagnoseActivity$1) -> a
com.wenwen.chatuidemo.activity.DiagnoseActivity$1$1 -> com.wenwen.chatuidemo.activity.ce:
    com.wenwen.chatuidemo.activity.DiagnoseActivity$1 this$1 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.DiagnoseActivity$1$2 -> com.wenwen.chatuidemo.activity.cf:
    com.wenwen.chatuidemo.activity.DiagnoseActivity$1 this$1 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.EditActivity -> com.wenwen.chatuidemo.activity.EditActivity:
    android.widget.EditText editText -> a
    void onCreate(android.os.Bundle) -> onCreate
    void save(android.view.View) -> save
com.wenwen.chatuidemo.activity.ExitGroupDialog -> com.wenwen.chatuidemo.activity.ExitGroupDialog:
    android.widget.TextView text -> a
    android.widget.Button exitBtn -> b
    void onCreate(android.os.Bundle) -> onCreate
    void logout(android.view.View) -> logout
    void cancel(android.view.View) -> cancel
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
com.wenwen.chatuidemo.activity.ForwardMessageActivity -> com.wenwen.chatuidemo.activity.ForwardMessageActivity:
    com.wenwen.chatuidemo.domain.MyUser selectUser -> b
    java.lang.String forward_msg_id -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onListItemClick(int) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
com.wenwen.chatuidemo.activity.GroupBlacklistActivity -> com.wenwen.chatuidemo.activity.GroupBlacklistActivity:
    android.widget.ListView listView -> a
    android.widget.ProgressBar progressBar -> b
    com.wenwen.chatuidemo.activity.GroupBlacklistActivity$BlacklistAdapter adapter -> c
    java.lang.String groupId -> d
    void onCreate(android.os.Bundle) -> onCreate
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void removeOutBlacklist(java.lang.String) -> a
    java.lang.String access$0(com.wenwen.chatuidemo.activity.GroupBlacklistActivity) -> a
    void access$1(com.wenwen.chatuidemo.activity.GroupBlacklistActivity,com.wenwen.chatuidemo.activity.GroupBlacklistActivity$BlacklistAdapter) -> a
    android.widget.ListView access$2(com.wenwen.chatuidemo.activity.GroupBlacklistActivity) -> b
    com.wenwen.chatuidemo.activity.GroupBlacklistActivity$BlacklistAdapter access$3(com.wenwen.chatuidemo.activity.GroupBlacklistActivity) -> c
    android.widget.ProgressBar access$4(com.wenwen.chatuidemo.activity.GroupBlacklistActivity) -> d
com.wenwen.chatuidemo.activity.GroupBlacklistActivity$1 -> com.wenwen.chatuidemo.activity.cg:
    com.wenwen.chatuidemo.activity.GroupBlacklistActivity this$0 -> a
    void run() -> run
    com.wenwen.chatuidemo.activity.GroupBlacklistActivity access$0(com.wenwen.chatuidemo.activity.GroupBlacklistActivity$1) -> a
com.wenwen.chatuidemo.activity.GroupBlacklistActivity$1$1 -> com.wenwen.chatuidemo.activity.ch:
    com.wenwen.chatuidemo.activity.GroupBlacklistActivity$1 this$1 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.GroupBlacklistActivity$1$2 -> com.wenwen.chatuidemo.activity.ci:
    com.wenwen.chatuidemo.activity.GroupBlacklistActivity$1 this$1 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.GroupBlacklistActivity$2 -> com.wenwen.chatuidemo.activity.cj:
    com.wenwen.chatuidemo.activity.GroupBlacklistActivity this$0 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.GroupBlacklistActivity$BlacklistAdapter -> com.wenwen.chatuidemo.activity.ck:
    com.wenwen.chatuidemo.activity.GroupBlacklistActivity this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.wenwen.chatuidemo.activity.GroupDetailsActivity -> com.wenwen.chatuidemo.activity.GroupDetailsActivity:
    java.lang.String longClickUsername -> a
    com.wenwen.chatuidemo.widget.ExpandGridView userGridview -> c
    java.lang.String groupId -> d
    android.widget.ProgressBar loadingPB -> e
    android.widget.Button exitBtn -> f
    android.widget.Button deleteBtn -> g
    com.easemob.chat.EMGroup group -> h
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$GridAdapter adapter -> i
    int referenceWidth -> j
    int referenceHeight -> k
    android.app.ProgressDialog progressDialog -> l
    android.widget.RelativeLayout rl_switch_block_groupmsg -> m
    android.widget.ImageView iv_switch_block_groupmsg -> n
    android.widget.ImageView iv_switch_unblock_groupmsg -> p
    com.wenwen.chatuidemo.activity.GroupDetailsActivity instance -> b
    android.widget.RelativeLayout clearAllHistory -> q
    android.widget.RelativeLayout blacklistLayout -> r
    android.widget.RelativeLayout changeGroupNameLayout -> s
    void onCreate(android.os.Bundle) -> onCreate
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void exitGroup(android.view.View) -> exitGroup
    void exitDeleteGroup(android.view.View) -> exitDeleteGroup
    void clearGroupHistory() -> a
    void exitGrop() -> c
    void deleteGrop() -> d
    void addMembersToGroup(java.lang.String[]) -> a
    void onClick(android.view.View) -> onClick
    void updateGroup() -> b
    void back(android.view.View) -> back
    void onBackPressed() -> onBackPressed
    void onDestroy() -> onDestroy
    com.easemob.chat.EMGroup access$0(com.wenwen.chatuidemo.activity.GroupDetailsActivity) -> a
    java.lang.String access$1(com.wenwen.chatuidemo.activity.GroupDetailsActivity) -> b
    int access$2(com.wenwen.chatuidemo.activity.GroupDetailsActivity) -> c
    int access$3(com.wenwen.chatuidemo.activity.GroupDetailsActivity) -> d
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$GridAdapter access$4(com.wenwen.chatuidemo.activity.GroupDetailsActivity) -> e
    android.app.ProgressDialog access$5(com.wenwen.chatuidemo.activity.GroupDetailsActivity) -> f
    android.widget.ProgressBar access$6(com.wenwen.chatuidemo.activity.GroupDetailsActivity) -> g
    android.widget.Button access$7(com.wenwen.chatuidemo.activity.GroupDetailsActivity) -> h
    android.widget.Button access$8(com.wenwen.chatuidemo.activity.GroupDetailsActivity) -> i
    android.widget.ImageView access$9(com.wenwen.chatuidemo.activity.GroupDetailsActivity) -> j
    android.widget.ImageView access$10(com.wenwen.chatuidemo.activity.GroupDetailsActivity) -> k
com.wenwen.chatuidemo.activity.GroupDetailsActivity$1 -> com.wenwen.chatuidemo.activity.cl:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.wenwen.chatuidemo.activity.GroupDetailsActivity$2 -> com.wenwen.chatuidemo.activity.cm:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity this$0 -> a
    java.lang.String val$returnData -> b
    void run() -> run
    com.wenwen.chatuidemo.activity.GroupDetailsActivity access$0(com.wenwen.chatuidemo.activity.GroupDetailsActivity$2) -> a
com.wenwen.chatuidemo.activity.GroupDetailsActivity$2$1 -> com.wenwen.chatuidemo.activity.cn:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$2 this$1 -> a
    java.lang.String val$returnData -> b
    void run() -> run
com.wenwen.chatuidemo.activity.GroupDetailsActivity$2$2 -> com.wenwen.chatuidemo.activity.co:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$2 this$1 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.GroupDetailsActivity$3 -> com.wenwen.chatuidemo.activity.cp:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity this$0 -> a
    void run() -> run
    com.wenwen.chatuidemo.activity.GroupDetailsActivity access$0(com.wenwen.chatuidemo.activity.GroupDetailsActivity$3) -> a
com.wenwen.chatuidemo.activity.GroupDetailsActivity$3$1 -> com.wenwen.chatuidemo.activity.cq:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$3 this$1 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.GroupDetailsActivity$3$2 -> com.wenwen.chatuidemo.activity.cr:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$3 this$1 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.GroupDetailsActivity$4 -> com.wenwen.chatuidemo.activity.cs:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity this$0 -> a
    void run() -> run
    com.wenwen.chatuidemo.activity.GroupDetailsActivity access$0(com.wenwen.chatuidemo.activity.GroupDetailsActivity$4) -> a
com.wenwen.chatuidemo.activity.GroupDetailsActivity$4$1 -> com.wenwen.chatuidemo.activity.ct:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$4 this$1 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.GroupDetailsActivity$4$2 -> com.wenwen.chatuidemo.activity.cu:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$4 this$1 -> a
    java.lang.Exception val$e -> b
    void run() -> run
com.wenwen.chatuidemo.activity.GroupDetailsActivity$5 -> com.wenwen.chatuidemo.activity.cv:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity this$0 -> a
    void run() -> run
    com.wenwen.chatuidemo.activity.GroupDetailsActivity access$0(com.wenwen.chatuidemo.activity.GroupDetailsActivity$5) -> a
com.wenwen.chatuidemo.activity.GroupDetailsActivity$5$1 -> com.wenwen.chatuidemo.activity.cw:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$5 this$1 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.GroupDetailsActivity$5$2 -> com.wenwen.chatuidemo.activity.cx:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$5 this$1 -> a
    java.lang.Exception val$e -> b
    void run() -> run
com.wenwen.chatuidemo.activity.GroupDetailsActivity$6 -> com.wenwen.chatuidemo.activity.cy:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity this$0 -> a
    java.lang.String[] val$newmembers -> b
    void run() -> run
    com.wenwen.chatuidemo.activity.GroupDetailsActivity access$0(com.wenwen.chatuidemo.activity.GroupDetailsActivity$6) -> a
com.wenwen.chatuidemo.activity.GroupDetailsActivity$6$1 -> com.wenwen.chatuidemo.activity.cz:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$6 this$1 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.GroupDetailsActivity$6$2 -> com.wenwen.chatuidemo.activity.da:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$6 this$1 -> a
    java.lang.Exception val$e -> b
    void run() -> run
com.wenwen.chatuidemo.activity.GroupDetailsActivity$7 -> com.wenwen.chatuidemo.activity.db:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity this$0 -> a
    void run() -> run
    com.wenwen.chatuidemo.activity.GroupDetailsActivity access$0(com.wenwen.chatuidemo.activity.GroupDetailsActivity$7) -> a
com.wenwen.chatuidemo.activity.GroupDetailsActivity$7$1 -> com.wenwen.chatuidemo.activity.dc:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$7 this$1 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.GroupDetailsActivity$7$2 -> com.wenwen.chatuidemo.activity.dd:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$7 this$1 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.GroupDetailsActivity$GridAdapter -> com.wenwen.chatuidemo.activity.de:
    int res -> c
    boolean isInDeleteMode -> a
    java.util.List objects -> d
    com.wenwen.chatuidemo.activity.GroupDetailsActivity this$0 -> b
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    int getCount() -> getCount
    com.wenwen.chatuidemo.activity.GroupDetailsActivity access$0(com.wenwen.chatuidemo.activity.GroupDetailsActivity$GridAdapter) -> a
com.wenwen.chatuidemo.activity.GroupDetailsActivity$GridAdapter$1 -> com.wenwen.chatuidemo.activity.df:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$GridAdapter this$1 -> a
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.activity.GroupDetailsActivity$GridAdapter$2 -> com.wenwen.chatuidemo.activity.dg:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$GridAdapter this$1 -> a
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.activity.GroupDetailsActivity$GridAdapter$3 -> com.wenwen.chatuidemo.activity.dh:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$GridAdapter this$1 -> a
    java.lang.String val$username -> b
    void onClick(android.view.View) -> onClick
    void deleteMembersFromGroup(java.lang.String) -> a
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$GridAdapter access$0(com.wenwen.chatuidemo.activity.GroupDetailsActivity$GridAdapter$3) -> a
com.wenwen.chatuidemo.activity.GroupDetailsActivity$GridAdapter$3$1 -> com.wenwen.chatuidemo.activity.di:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$GridAdapter$3 this$2 -> a
    java.lang.String val$username -> b
    android.app.ProgressDialog val$deleteDialog -> c
    void run() -> run
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$GridAdapter$3 access$0(com.wenwen.chatuidemo.activity.GroupDetailsActivity$GridAdapter$3$1) -> a
com.wenwen.chatuidemo.activity.GroupDetailsActivity$GridAdapter$3$1$1 -> com.wenwen.chatuidemo.activity.dj:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$GridAdapter$3$1 this$3 -> a
    android.app.ProgressDialog val$deleteDialog -> b
    void run() -> run
com.wenwen.chatuidemo.activity.GroupDetailsActivity$GridAdapter$3$1$2 -> com.wenwen.chatuidemo.activity.dk:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$GridAdapter$3$1 this$3 -> a
    java.lang.Exception val$e -> b
    void run() -> run
com.wenwen.chatuidemo.activity.GroupDetailsActivity$GridAdapter$4 -> com.wenwen.chatuidemo.activity.dl:
    com.wenwen.chatuidemo.activity.GroupDetailsActivity$GridAdapter this$1 -> a
    java.lang.String val$username -> b
    boolean onLongClick(android.view.View) -> onLongClick
com.wenwen.chatuidemo.activity.GroupPickContactsActivity -> com.wenwen.chatuidemo.activity.GroupPickContactsActivity:
    android.widget.ListView listView -> b
    boolean isCreatingNewGroup -> a
    boolean isSignleChecked -> c
    com.wenwen.chatuidemo.activity.GroupPickContactsActivity$PickContactAdapter contactAdapter -> d
    java.util.List exitingMembers -> e
    void onCreate(android.os.Bundle) -> onCreate
    void save(android.view.View) -> save
    java.util.List getToBeAddMembers() -> a
    void back(android.view.View) -> back
    java.util.List access$0(com.wenwen.chatuidemo.activity.GroupPickContactsActivity) -> a
    boolean access$1(com.wenwen.chatuidemo.activity.GroupPickContactsActivity) -> b
    com.wenwen.chatuidemo.activity.GroupPickContactsActivity$PickContactAdapter access$2(com.wenwen.chatuidemo.activity.GroupPickContactsActivity) -> c
com.wenwen.chatuidemo.activity.GroupPickContactsActivity$1 -> com.wenwen.chatuidemo.activity.dm:
    com.wenwen.chatuidemo.activity.GroupPickContactsActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.wenwen.chatuidemo.activity.GroupPickContactsActivity$PickContactAdapter -> com.wenwen.chatuidemo.activity.dn:
    boolean[] isCheckedArray -> b
    com.wenwen.chatuidemo.activity.GroupPickContactsActivity this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    boolean[] access$0(com.wenwen.chatuidemo.activity.GroupPickContactsActivity$PickContactAdapter) -> a
    com.wenwen.chatuidemo.activity.GroupPickContactsActivity access$1(com.wenwen.chatuidemo.activity.GroupPickContactsActivity$PickContactAdapter) -> b
com.wenwen.chatuidemo.activity.GroupPickContactsActivity$PickContactAdapter$1 -> com.wenwen.chatuidemo.activity.do:
    com.wenwen.chatuidemo.activity.GroupPickContactsActivity$PickContactAdapter this$1 -> a
    java.lang.String val$username -> b
    android.widget.CheckBox val$checkBox -> c
    int val$position -> d
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity -> com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity:
    android.widget.Button btn_add_group -> a
    android.widget.TextView tv_admin -> b
    android.widget.TextView tv_name -> c
    android.widget.TextView tv_introduction -> d
    com.easemob.chat.EMGroup group -> e
    java.lang.String groupid -> f
    android.widget.ProgressBar progressBar -> g
    void onCreate(android.os.Bundle) -> onCreate
    void addToGroup(android.view.View) -> addToGroup
    void back(android.view.View) -> back
    java.lang.String access$0(com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity) -> a
    void access$1(com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity,com.easemob.chat.EMGroup) -> a
    android.widget.ProgressBar access$2(com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity) -> b
    com.easemob.chat.EMGroup access$3(com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity) -> c
    android.widget.Button access$4(com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity) -> d
    android.widget.TextView access$5(com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity) -> e
    android.widget.TextView access$6(com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity) -> f
    android.widget.TextView access$7(com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity) -> g
com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity$1 -> com.wenwen.chatuidemo.activity.dp:
    com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity this$0 -> a
    void run() -> run
    com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity access$0(com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity$1) -> a
com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity$1$1 -> com.wenwen.chatuidemo.activity.dq:
    com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity$1 this$1 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity$1$2 -> com.wenwen.chatuidemo.activity.dr:
    com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity$1 this$1 -> a
    com.easemob.exceptions.EaseMobException val$e -> b
    void run() -> run
com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity$2 -> com.wenwen.chatuidemo.activity.ds:
    com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity this$0 -> a
    android.app.ProgressDialog val$pd -> b
    void run() -> run
    com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity access$0(com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity$2) -> a
com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity$2$1 -> com.wenwen.chatuidemo.activity.dt:
    com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity$2 this$1 -> a
    android.app.ProgressDialog val$pd -> b
    void run() -> run
com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity$2$2 -> com.wenwen.chatuidemo.activity.du:
    com.wenwen.chatuidemo.activity.GroupSimpleDetailActivity$2 this$1 -> a
    android.app.ProgressDialog val$pd -> b
    com.easemob.exceptions.EaseMobException val$e -> c
    void run() -> run
com.wenwen.chatuidemo.activity.GroupsActivity -> com.wenwen.chatuidemo.activity.GroupsActivity:
    android.widget.ListView groupListView -> c
    java.util.List grouplist -> a
    com.wenwen.chatuidemo.adapter.GroupAdapter groupAdapter -> d
    android.view.inputmethod.InputMethodManager inputMethodManager -> e
    com.wenwen.chatuidemo.activity.GroupsActivity instance -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onPublicGroups(android.view.View) -> onPublicGroups
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    void back(android.view.View) -> back
    com.wenwen.chatuidemo.adapter.GroupAdapter access$0(com.wenwen.chatuidemo.activity.GroupsActivity) -> a
    android.view.inputmethod.InputMethodManager access$1(com.wenwen.chatuidemo.activity.GroupsActivity) -> b
com.wenwen.chatuidemo.activity.GroupsActivity$1 -> com.wenwen.chatuidemo.activity.dv:
    com.wenwen.chatuidemo.activity.GroupsActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.wenwen.chatuidemo.activity.GroupsActivity$2 -> com.wenwen.chatuidemo.activity.dw:
    com.wenwen.chatuidemo.activity.GroupsActivity this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.wenwen.chatuidemo.activity.HomeFragment -> com.wenwen.chatuidemo.activity.HomeFragment:
    java.lang.String TAG -> a
    android.widget.RelativeLayout latyout_home_line -> b
    android.widget.RelativeLayout latyout_home_phone -> c
    android.widget.RelativeLayout latyout_home_mz -> d
    android.widget.TextView unread_line_number -> e
    android.widget.TextView line_number -> f
    android.widget.TextView unread_phone_number -> g
    android.widget.TextView phone_number -> h
    android.widget.TextView unread_mz_number -> i
    android.widget.TextView mz_number -> j
    com.wenwen.chatui.adv.AdvClient client -> k
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
    void onActivityCreated(android.os.Bundle) -> onActivityCreated
    void setText() -> a
    void init() -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.activity.Hospital -> com.wenwen.chatuidemo.activity.Hospital:
    java.lang.String TAG -> a
    android.widget.ListView listView -> b
    com.wenwen.chatuidemo.adapter.HospitalAdapter hospitalAdapter -> c
    void onCreate(android.os.Bundle) -> onCreate
    void back(android.view.View) -> back
com.wenwen.chatuidemo.activity.Hospital$1 -> com.wenwen.chatuidemo.activity.dx:
    com.wenwen.chatuidemo.activity.Hospital this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.wenwen.chatuidemo.activity.ImageGridActivity -> com.wenwen.chatuidemo.activity.ImageGridActivity:
    void onCreate(android.os.Bundle) -> onCreate
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
com.wenwen.chatuidemo.activity.ImageGridFragment -> com.wenwen.chatuidemo.activity.ImageGridFragment:
    int mImageThumbSize -> b
    int mImageThumbSpacing -> c
    com.wenwen.chatuidemo.activity.ImageGridFragment$ImageAdapter mAdapter -> d
    com.wenwen.chatuidemo.video.util.ImageResizer mImageResizer -> e
    java.util.List mList -> a
    void onCreate(android.os.Bundle) -> onCreate
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void getVideoFile() -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    com.wenwen.chatuidemo.video.util.ImageResizer access$0(com.wenwen.chatuidemo.activity.ImageGridFragment) -> a
    int access$1(com.wenwen.chatuidemo.activity.ImageGridFragment) -> b
    int access$2(com.wenwen.chatuidemo.activity.ImageGridFragment) -> c
    com.wenwen.chatuidemo.activity.ImageGridFragment$ImageAdapter access$3(com.wenwen.chatuidemo.activity.ImageGridFragment) -> d
com.wenwen.chatuidemo.activity.ImageGridFragment$1 -> com.wenwen.chatuidemo.activity.dy:
    com.wenwen.chatuidemo.activity.ImageGridFragment this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.wenwen.chatuidemo.activity.ImageGridFragment$2 -> com.wenwen.chatuidemo.activity.dz:
    com.wenwen.chatuidemo.activity.ImageGridFragment this$0 -> a
    android.widget.GridView val$mGridView -> b
    void onGlobalLayout() -> onGlobalLayout
com.wenwen.chatuidemo.activity.ImageGridFragment$ImageAdapter -> com.wenwen.chatuidemo.activity.ea:
    android.content.Context mContext -> b
    int mItemHeight -> c
    android.widget.RelativeLayout$LayoutParams mImageViewLayoutParams -> d
    com.wenwen.chatuidemo.activity.ImageGridFragment this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void setItemHeight(int) -> a
com.wenwen.chatuidemo.activity.ImageGridFragment$ImageAdapter$ViewHolder -> com.wenwen.chatuidemo.activity.eb:
    com.wenwen.chatuidemo.widget.RecyclingImageView imageView -> a
    android.widget.ImageView icon -> b
    android.widget.TextView tvDur -> c
    android.widget.TextView tvSize -> d
    com.wenwen.chatuidemo.activity.ImageGridFragment$ImageAdapter this$1 -> e
com.wenwen.chatuidemo.activity.LoginActivity -> com.wenwen.chatuidemo.activity.LoginActivity:
    android.widget.EditText usernameEditText -> b
    android.widget.EditText passwordEditText -> c
    com.google.gson.Gson gson -> d
    boolean progressShow -> e
    boolean autoLogin -> f
    java.util.List myUser -> g
    java.util.List myUser1 -> h
    android.os.Handler loginhandler -> a
    void onCreate(android.os.Bundle) -> onCreate
    void login(android.view.View) -> login
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void register(android.view.View) -> register
    void onResume() -> onResume
    void loginFailure2Umeng(long,int,java.lang.String) -> a
    android.widget.EditText access$0(com.wenwen.chatuidemo.activity.LoginActivity) -> a
    android.widget.EditText access$1(com.wenwen.chatuidemo.activity.LoginActivity) -> b
    com.google.gson.Gson access$2(com.wenwen.chatuidemo.activity.LoginActivity) -> c
    java.util.List access$3(com.wenwen.chatuidemo.activity.LoginActivity) -> d
    java.util.List access$4(com.wenwen.chatuidemo.activity.LoginActivity) -> e
    void access$5(com.wenwen.chatuidemo.activity.LoginActivity,boolean) -> a
    boolean access$6(com.wenwen.chatuidemo.activity.LoginActivity) -> f
    void access$7(com.wenwen.chatuidemo.activity.LoginActivity,long,int,java.lang.String) -> a
com.wenwen.chatuidemo.activity.LoginActivity$1 -> com.wenwen.chatuidemo.activity.ec:
    com.wenwen.chatuidemo.activity.LoginActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
    com.wenwen.chatuidemo.activity.LoginActivity access$0(com.wenwen.chatuidemo.activity.LoginActivity$1) -> a
com.wenwen.chatuidemo.activity.LoginActivity$1$1 -> com.wenwen.chatuidemo.activity.ed:
    com.wenwen.chatuidemo.activity.LoginActivity$1 this$1 -> a
    void onSuccess() -> onSuccess
    void onProgress(int,java.lang.String) -> onProgress
    void onError(int,java.lang.String) -> onError
com.wenwen.chatuidemo.activity.LoginActivity$1$2 -> com.wenwen.chatuidemo.activity.ee:
    com.wenwen.chatuidemo.activity.LoginActivity$1 this$1 -> a
    void onStart() -> b
    void onSuccess(int,org.apache.http.Header[],byte[]) -> a
    void onFinish() -> c
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> a
com.wenwen.chatuidemo.activity.LoginActivity$1$3 -> com.wenwen.chatuidemo.activity.ef:
    com.wenwen.chatuidemo.activity.LoginActivity$1 this$1 -> a
    void onStart() -> b
    void onSuccess(int,org.apache.http.Header[],byte[]) -> a
    void onFinish() -> c
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> a
com.wenwen.chatuidemo.activity.LoginActivity$2 -> com.wenwen.chatuidemo.activity.eg:
    com.wenwen.chatuidemo.activity.LoginActivity this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.wenwen.chatuidemo.activity.LoginActivity$3 -> com.wenwen.chatuidemo.activity.eh:
    com.wenwen.chatuidemo.activity.LoginActivity this$0 -> a
    void onCancel(android.content.DialogInterface) -> onCancel
com.wenwen.chatuidemo.activity.LoginActivity$4 -> com.wenwen.chatuidemo.activity.ei:
    com.wenwen.chatuidemo.activity.LoginActivity this$0 -> a
    android.app.ProgressDialog val$pd -> b
    void onStart() -> b
    void onSuccess(int,org.apache.http.Header[],byte[]) -> a
    void onFinish() -> c
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> a
com.wenwen.chatuidemo.activity.LoginActivity$5 -> com.wenwen.chatuidemo.activity.ej:
    com.wenwen.chatuidemo.activity.LoginActivity this$0 -> a
    void onCancel(android.content.DialogInterface) -> onCancel
com.wenwen.chatuidemo.activity.LoginActivity$6 -> com.wenwen.chatuidemo.activity.ek:
    com.wenwen.chatuidemo.activity.LoginActivity this$0 -> a
    java.lang.String val$username -> b
    java.lang.String val$password -> c
    long val$start -> d
    android.app.ProgressDialog val$pd -> e
    void onSuccess() -> onSuccess
    void onProgress(int,java.lang.String) -> onProgress
    void onError(int,java.lang.String) -> onError
    com.wenwen.chatuidemo.activity.LoginActivity access$0(com.wenwen.chatuidemo.activity.LoginActivity$6) -> a
com.wenwen.chatuidemo.activity.LoginActivity$6$1 -> com.wenwen.chatuidemo.activity.el:
    com.wenwen.chatuidemo.activity.LoginActivity$6 this$1 -> a
    android.app.ProgressDialog val$pd -> b
    void run() -> run
com.wenwen.chatuidemo.activity.LoginActivity$6$2 -> com.wenwen.chatuidemo.activity.em:
    com.wenwen.chatuidemo.activity.LoginActivity$6 this$1 -> a
    android.app.ProgressDialog val$pd -> b
    java.lang.String val$message -> c
    void run() -> run
com.wenwen.chatuidemo.activity.LoginActivity$8 -> com.wenwen.chatuidemo.activity.en:
    com.wenwen.chatuidemo.activity.LoginActivity this$0 -> a
    long val$start -> b
    int val$code -> c
    java.lang.String val$message -> d
    void run() -> run
com.wenwen.chatuidemo.activity.MainActivity -> com.wenwen.chatuidemo.activity.MainActivity:
    android.widget.Button[] mTabs -> b
    com.wenwen.chatuidemo.activity.ContactlistFragment contactListFragment -> c
    com.wenwen.chatuidemo.activity.ContactSickFragment contactSickFragment -> d
    com.wenwen.chatuidemo.activity.ChatAllHistoryFragment chatHistoryFragment -> e
    com.wenwen.chatuidemo.activity.HomeFragment homeFragment -> f
    com.wenwen.chatuidemo.activity.PersonFragment settingFragment -> g
    android.support.v4.app.Fragment[] fragments -> h
    int index -> i
    int currentTabIndex -> j
    com.wenwen.chatuidemo.activity.MainActivity$NewMessageBroadcastReceiver msgReceiver -> k
    boolean isConflict -> a
    android.content.BroadcastReceiver ackMessageReceiver -> l
    android.content.BroadcastReceiver cmdMessageReceiver -> m
    com.wenwen.chatuidemo.db.InviteMessgeDao inviteMessgeDao -> n
    com.wenwen.chatuidemo.db.UserDao userDao -> p
    android.app.AlertDialog$Builder conflictBuilder -> q
    boolean isConflictDialogShow -> r
    void onCreate(android.os.Bundle) -> onCreate
    void initView() -> b
    void onTabClicked(android.view.View) -> onTabClicked
    void onDestroy() -> onDestroy
    void updateUnreadLabel() -> a
    void onResume() -> onResume
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void showConflictDialog() -> c
    void onNewIntent(android.content.Intent) -> onNewIntent
    void access$1(com.wenwen.chatuidemo.activity.MainActivity,android.app.AlertDialog$Builder) -> a
com.wenwen.chatuidemo.activity.MainActivity$1 -> com.wenwen.chatuidemo.activity.eo:
    com.wenwen.chatuidemo.activity.MainActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.wenwen.chatuidemo.activity.MainActivity$2 -> com.wenwen.chatuidemo.activity.ep:
    com.wenwen.chatuidemo.activity.MainActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.wenwen.chatuidemo.activity.MainActivity$3 -> com.wenwen.chatuidemo.activity.eq:
    com.wenwen.chatuidemo.activity.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.wenwen.chatuidemo.activity.MainActivity$NewMessageBroadcastReceiver -> com.wenwen.chatuidemo.activity.er:
    com.wenwen.chatuidemo.activity.MainActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.wenwen.chatuidemo.activity.MyPoints -> com.wenwen.chatuidemo.activity.MyPoints:
    void onCreate(android.os.Bundle) -> onCreate
com.wenwen.chatuidemo.activity.NewFriendsMsgActivity -> com.wenwen.chatuidemo.activity.NewFriendsMsgActivity:
    android.widget.ListView listView -> a
    void onCreate(android.os.Bundle) -> onCreate
    void back(android.view.View) -> back
com.wenwen.chatuidemo.activity.NewGroupActivity -> com.wenwen.chatuidemo.activity.NewGroupActivity:
    android.widget.EditText groupNameEditText -> a
    android.app.ProgressDialog progressDialog -> b
    android.widget.EditText introductionEditText -> c
    android.widget.CheckBox checkBox -> d
    android.widget.CheckBox memberCheckbox -> e
    android.widget.LinearLayout openInviteContainer -> f
    void onCreate(android.os.Bundle) -> onCreate
    void save(android.view.View) -> save
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void back(android.view.View) -> back
    android.widget.LinearLayout access$0(com.wenwen.chatuidemo.activity.NewGroupActivity) -> a
    android.widget.EditText access$1(com.wenwen.chatuidemo.activity.NewGroupActivity) -> b
    android.widget.EditText access$2(com.wenwen.chatuidemo.activity.NewGroupActivity) -> c
    android.widget.CheckBox access$3(com.wenwen.chatuidemo.activity.NewGroupActivity) -> d
    android.widget.CheckBox access$4(com.wenwen.chatuidemo.activity.NewGroupActivity) -> e
    android.app.ProgressDialog access$5(com.wenwen.chatuidemo.activity.NewGroupActivity) -> f
com.wenwen.chatuidemo.activity.NewGroupActivity$1 -> com.wenwen.chatuidemo.activity.es:
    com.wenwen.chatuidemo.activity.NewGroupActivity this$0 -> a
    void onCheckedChanged(android.widget.CompoundButton,boolean) -> onCheckedChanged
com.wenwen.chatuidemo.activity.NewGroupActivity$2 -> com.wenwen.chatuidemo.activity.et:
    com.wenwen.chatuidemo.activity.NewGroupActivity this$0 -> a
    android.content.Intent val$data -> b
    void run() -> run
    com.wenwen.chatuidemo.activity.NewGroupActivity access$0(com.wenwen.chatuidemo.activity.NewGroupActivity$2) -> a
com.wenwen.chatuidemo.activity.NewGroupActivity$2$1 -> com.wenwen.chatuidemo.activity.eu:
    com.wenwen.chatuidemo.activity.NewGroupActivity$2 this$1 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.NewGroupActivity$2$2 -> com.wenwen.chatuidemo.activity.ev:
    com.wenwen.chatuidemo.activity.NewGroupActivity$2 this$1 -> a
    com.easemob.exceptions.EaseMobException val$e -> b
    void run() -> run
com.wenwen.chatuidemo.activity.PersonFragment -> com.wenwen.chatuidemo.activity.PersonFragment:
    java.lang.String TAG -> a
    android.widget.RelativeLayout latyout_personal_data -> b
    android.widget.RelativeLayout layout_integral -> c
    android.widget.RelativeLayout layout_chatset_order -> d
    android.widget.RelativeLayout layout_clinic_order -> e
    android.widget.RelativeLayout layout_phone_order -> f
    android.widget.RelativeLayout layout_photo_text_order -> g
    android.widget.Button btn_logout -> h
    android.widget.Button btn_integral -> i
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
    void onActivityCreated(android.os.Bundle) -> onActivityCreated
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void logout() -> logout
com.wenwen.chatuidemo.activity.PersonFragment$1 -> com.wenwen.chatuidemo.activity.ew:
    com.wenwen.chatuidemo.activity.PersonFragment this$0 -> a
    android.app.ProgressDialog val$pd -> b
    void onSuccess() -> onSuccess
    void onProgress(int,java.lang.String) -> onProgress
    void onError(int,java.lang.String) -> onError
    com.wenwen.chatuidemo.activity.PersonFragment access$0(com.wenwen.chatuidemo.activity.PersonFragment$1) -> a
com.wenwen.chatuidemo.activity.PersonFragment$1$1 -> com.wenwen.chatuidemo.activity.ex:
    com.wenwen.chatuidemo.activity.PersonFragment$1 this$1 -> a
    android.app.ProgressDialog val$pd -> b
    void run() -> run
com.wenwen.chatuidemo.activity.PersonalData -> com.wenwen.chatuidemo.activity.PersonalData:
    java.lang.String TAG -> a
    android.widget.RelativeLayout layout_laboratory -> b
    android.widget.RelativeLayout layout_hospital -> c
    android.widget.TextView hospital -> d
    android.widget.TextView laboratory -> e
    android.widget.EditText username -> f
    android.widget.EditText thesis -> g
    android.widget.EditText skilled -> h
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void sub(android.view.View) -> sub
    void back(android.view.View) -> back
com.wenwen.chatuidemo.activity.PersonalData$1 -> com.wenwen.chatuidemo.activity.ey:
    com.wenwen.chatuidemo.activity.PersonalData this$0 -> a
    android.app.ProgressDialog val$pd -> b
    void onStart() -> b
    void onSuccess(int,org.apache.http.Header[],byte[]) -> a
    void onFinish() -> c
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> a
com.wenwen.chatuidemo.activity.PhoneOrderSetting -> com.wenwen.chatuidemo.activity.PhoneOrderSetting:
    java.lang.String TAG -> a
    android.widget.TextView time_tv -> b
    android.widget.TextView time_sw -> c
    android.widget.TextView time_xw -> d
    android.widget.TextView time_tv1 -> e
    android.widget.TextView time_sw1 -> f
    android.widget.TextView time_xw1 -> g
    android.widget.TextView time_tv2 -> h
    android.widget.TextView time_sw2 -> i
    android.widget.TextView time_xw2 -> j
    android.widget.TextView time_tv3 -> k
    android.widget.TextView time_sw3 -> l
    android.widget.TextView time_xw3 -> m
    android.widget.TextView time_tv4 -> n
    android.widget.TextView time_sw4 -> p
    android.widget.TextView time_xw4 -> q
    android.widget.TextView time_tv5 -> r
    android.widget.TextView time_sw5 -> s
    android.widget.TextView time_xw5 -> t
    android.widget.TextView time_tv6 -> u
    android.widget.TextView time_sw6 -> v
    android.widget.TextView time_xw6 -> w
    android.widget.TextView time_tv7 -> x
    android.widget.TextView time_sw7 -> y
    android.widget.TextView time_xw7 -> z
    int width -> A
    android.widget.Button save -> B
    android.widget.EditText et_points_every_num -> C
    android.widget.ImageView iv_switch_open_vip -> D
    android.widget.ImageView iv_switch_close_vip -> E
    android.widget.RelativeLayout rl_switch_vip -> F
    int isvip -> G
    int week1 -> H
    int week2 -> I
    int week3 -> J
    int week4 -> K
    int week5 -> L
    int week6 -> M
    int week7 -> N
    java.lang.StringBuffer weekBuilder -> O
    java.lang.String time1 -> P
    java.lang.String time2 -> Q
    java.lang.String time3 -> R
    java.lang.String time4 -> S
    java.lang.String time5 -> T
    java.lang.String time6 -> U
    java.lang.String time7 -> V
    java.lang.StringBuffer timeBuilder -> W
    android.widget.TextView tv -> X
    void onCreate(android.os.Bundle) -> onCreate
    void setWith() -> a
    void init() -> b
    void onClick(android.view.View) -> onClick
    void setWeek() -> c
com.wenwen.chatuidemo.activity.PhoneOrderSetting$1 -> com.wenwen.chatuidemo.activity.ez:
    com.wenwen.chatuidemo.activity.PhoneOrderSetting this$0 -> a
    android.app.ProgressDialog val$pd -> b
    void onStart() -> b
    void onSuccess(int,org.apache.http.Header[],byte[]) -> a
    void onFinish() -> c
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> a
com.wenwen.chatuidemo.activity.PhotoTextSetting -> com.wenwen.chatuidemo.activity.PhotoTextSetting:
    java.lang.String TAG -> a
    android.widget.RelativeLayout rl_switch_vip -> b
    android.widget.ImageView iv_switch_open_vip -> c
    android.widget.ImageView iv_switch_close_vip -> d
    android.widget.EditText et_points_every_num -> e
    android.widget.EditText et_points_weekly_num -> f
    android.widget.CheckBox check_box -> g
    int isvip -> h
    android.widget.Button save -> i
    void onCreate(android.os.Bundle) -> onCreate
    void init() -> a
    void onClick(android.view.View) -> onClick
    void back(android.view.View) -> back
com.wenwen.chatuidemo.activity.PhotoTextSetting$1 -> com.wenwen.chatuidemo.activity.fa:
    com.wenwen.chatuidemo.activity.PhotoTextSetting this$0 -> a
    android.app.ProgressDialog val$pd -> b
    void onStart() -> b
    void onSuccess(int,org.apache.http.Header[],byte[]) -> a
    void onFinish() -> c
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> a
com.wenwen.chatuidemo.activity.PickContactNoCheckboxActivity -> com.wenwen.chatuidemo.activity.PickContactNoCheckboxActivity:
    android.widget.ListView listView -> b
    com.wenwen.chatuidemo.widget.Sidebar sidebar -> c
    com.wenwen.chatuidemo.adapter.ContactAdapter contactAdapter -> a
    java.util.List contactList -> d
    void onCreate(android.os.Bundle) -> onCreate
    void onListItemClick(int) -> a
    void back(android.view.View) -> back
    void getContactList() -> a
com.wenwen.chatuidemo.activity.PickContactNoCheckboxActivity$1 -> com.wenwen.chatuidemo.activity.fb:
    com.wenwen.chatuidemo.activity.PickContactNoCheckboxActivity this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.wenwen.chatuidemo.activity.PickContactNoCheckboxActivity$2 -> com.wenwen.chatuidemo.activity.fc:
    com.wenwen.chatuidemo.activity.PickContactNoCheckboxActivity this$0 -> a
    int compare(com.wenwen.chatuidemo.domain.MyUser,com.wenwen.chatuidemo.domain.MyUser) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.wenwen.chatuidemo.activity.PointsOut -> com.wenwen.chatuidemo.activity.PointsOut:
    void onCreate(android.os.Bundle) -> onCreate
com.wenwen.chatuidemo.activity.PublicGroupsActivity -> com.wenwen.chatuidemo.activity.PublicGroupsActivity:
    android.widget.ProgressBar pb -> a
    android.widget.ListView listView -> b
    android.widget.EditText query -> c
    android.widget.ImageButton clearSearch -> d
    com.wenwen.chatuidemo.activity.PublicGroupsActivity$GroupsAdapter adapter -> e
    void onCreate(android.os.Bundle) -> onCreate
    void back(android.view.View) -> back
    android.widget.ProgressBar access$0(com.wenwen.chatuidemo.activity.PublicGroupsActivity) -> a
    void access$1(com.wenwen.chatuidemo.activity.PublicGroupsActivity,com.wenwen.chatuidemo.activity.PublicGroupsActivity$GroupsAdapter) -> a
    android.widget.ListView access$2(com.wenwen.chatuidemo.activity.PublicGroupsActivity) -> b
    com.wenwen.chatuidemo.activity.PublicGroupsActivity$GroupsAdapter access$3(com.wenwen.chatuidemo.activity.PublicGroupsActivity) -> c
    void access$4(com.wenwen.chatuidemo.activity.PublicGroupsActivity,android.widget.EditText) -> a
    void access$5(com.wenwen.chatuidemo.activity.PublicGroupsActivity,android.widget.ImageButton) -> a
    android.widget.EditText access$6(com.wenwen.chatuidemo.activity.PublicGroupsActivity) -> d
    android.widget.ImageButton access$7(com.wenwen.chatuidemo.activity.PublicGroupsActivity) -> e
com.wenwen.chatuidemo.activity.PublicGroupsActivity$1 -> com.wenwen.chatuidemo.activity.fd:
    com.wenwen.chatuidemo.activity.PublicGroupsActivity this$0 -> a
    void run() -> run
    com.wenwen.chatuidemo.activity.PublicGroupsActivity access$0(com.wenwen.chatuidemo.activity.PublicGroupsActivity$1) -> a
com.wenwen.chatuidemo.activity.PublicGroupsActivity$1$1 -> com.wenwen.chatuidemo.activity.fe:
    com.wenwen.chatuidemo.activity.PublicGroupsActivity$1 this$1 -> a
    java.util.List val$groupsList -> b
    void run() -> run
    com.wenwen.chatuidemo.activity.PublicGroupsActivity$1 access$0(com.wenwen.chatuidemo.activity.PublicGroupsActivity$1$1) -> a
com.wenwen.chatuidemo.activity.PublicGroupsActivity$1$1$1 -> com.wenwen.chatuidemo.activity.ff:
    com.wenwen.chatuidemo.activity.PublicGroupsActivity$1$1 this$2 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.wenwen.chatuidemo.activity.PublicGroupsActivity$1$1$2 -> com.wenwen.chatuidemo.activity.fg:
    com.wenwen.chatuidemo.activity.PublicGroupsActivity$1$1 this$2 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.wenwen.chatuidemo.activity.PublicGroupsActivity$1$1$3 -> com.wenwen.chatuidemo.activity.fh:
    com.wenwen.chatuidemo.activity.PublicGroupsActivity$1$1 this$2 -> a
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.activity.PublicGroupsActivity$1$2 -> com.wenwen.chatuidemo.activity.fi:
    com.wenwen.chatuidemo.activity.PublicGroupsActivity$1 this$1 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.PublicGroupsActivity$GroupsAdapter -> com.wenwen.chatuidemo.activity.fj:
    android.view.LayoutInflater inflater -> b
    com.wenwen.chatuidemo.activity.PublicGroupsActivity this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.wenwen.chatuidemo.activity.RecorderVideoActivity -> com.wenwen.chatuidemo.activity.RecorderVideoActivity:
    android.os.PowerManager$WakeLock mWakeLock -> e
    android.widget.ImageView btnStart -> f
    android.widget.ImageView btnStop -> g
    android.media.MediaRecorder mediaRecorder -> h
    android.widget.VideoView mVideoView -> i
    java.lang.String localPath -> a
    android.hardware.Camera mCamera -> j
    int previewWidth -> k
    int previewHeight -> l
    android.widget.Chronometer chronometer -> m
    int frontCamera -> n
    android.widget.Button btn_switch -> p
    android.hardware.Camera$Parameters cameraParameters -> b
    android.view.SurfaceHolder mSurfaceHolder -> q
    int defaultVideoFrameRate -> c
    android.media.MediaScannerConnection msc -> d
    void onCreate(android.os.Bundle) -> onCreate
    void initViews() -> e
    void back(android.view.View) -> back
    void onResume() -> onResume
    boolean initCamera() -> f
    void handleSurfaceChanged() -> g
    void onPause() -> onPause
    void onClick(android.view.View) -> onClick
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void startRecording() -> a
    void initRecorder() -> h
    void stopRecording() -> b
    void releaseRecorder() -> i
    void releaseCamera() -> c
    void switchCamera() -> d
    void sendVideo(android.view.View) -> sendVideo
    void onInfo(android.media.MediaRecorder,int,int) -> onInfo
    void onError(android.media.MediaRecorder,int,int) -> onError
    void onDestroy() -> onDestroy
    void onBackPressed() -> onBackPressed
    void showFailDialog() -> j
    android.hardware.Camera access$0(com.wenwen.chatuidemo.activity.RecorderVideoActivity) -> a
    boolean access$1(com.wenwen.chatuidemo.activity.RecorderVideoActivity) -> b
    android.view.SurfaceHolder access$2(com.wenwen.chatuidemo.activity.RecorderVideoActivity) -> c
    void access$3(com.wenwen.chatuidemo.activity.RecorderVideoActivity) -> d
com.wenwen.chatuidemo.activity.RecorderVideoActivity$1 -> com.wenwen.chatuidemo.activity.fk:
    com.wenwen.chatuidemo.activity.RecorderVideoActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.wenwen.chatuidemo.activity.RecorderVideoActivity$2 -> com.wenwen.chatuidemo.activity.fl:
    com.wenwen.chatuidemo.activity.RecorderVideoActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.wenwen.chatuidemo.activity.RecorderVideoActivity$3 -> com.wenwen.chatuidemo.activity.fm:
    com.wenwen.chatuidemo.activity.RecorderVideoActivity this$0 -> a
    void onScanCompleted(java.lang.String,android.net.Uri) -> onScanCompleted
    void onMediaScannerConnected() -> onMediaScannerConnected
com.wenwen.chatuidemo.activity.RecorderVideoActivity$4 -> com.wenwen.chatuidemo.activity.fn:
    com.wenwen.chatuidemo.activity.RecorderVideoActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.wenwen.chatuidemo.activity.RecorderVideoActivity$5 -> com.wenwen.chatuidemo.activity.fo:
    com.wenwen.chatuidemo.activity.RecorderVideoActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.wenwen.chatuidemo.activity.RegisterActivity -> com.wenwen.chatuidemo.activity.RegisterActivity:
    android.widget.EditText userNameEditText -> a
    android.widget.EditText passwordEditText -> b
    android.widget.EditText confirmPwdEditText -> c
    void onCreate(android.os.Bundle) -> onCreate
    void register(android.view.View) -> register
    void back(android.view.View) -> back
    android.widget.EditText access$0(com.wenwen.chatuidemo.activity.RegisterActivity) -> a
com.wenwen.chatuidemo.activity.RegisterActivity$1 -> com.wenwen.chatuidemo.activity.fp:
    com.wenwen.chatuidemo.activity.RegisterActivity this$0 -> a
    android.app.ProgressDialog val$pd -> b
    void onStart() -> b
    void onSuccess(int,org.apache.http.Header[],byte[]) -> a
    void onFinish() -> c
    void onFailure(int,org.apache.http.Header[],byte[],java.lang.Throwable) -> a
com.wenwen.chatuidemo.activity.SettingsFragment -> com.wenwen.chatuidemo.activity.SettingsFragment:
    android.widget.RelativeLayout rl_switch_notification -> a
    android.widget.RelativeLayout rl_switch_sound -> b
    android.widget.RelativeLayout rl_switch_vibrate -> c
    android.widget.RelativeLayout rl_switch_speaker -> d
    android.widget.ImageView iv_switch_open_notification -> e
    android.widget.ImageView iv_switch_close_notification -> f
    android.widget.ImageView iv_switch_open_sound -> g
    android.widget.ImageView iv_switch_close_sound -> h
    android.widget.ImageView iv_switch_open_vibrate -> i
    android.widget.ImageView iv_switch_close_vibrate -> j
    android.widget.ImageView iv_switch_open_speaker -> k
    android.widget.ImageView iv_switch_close_speaker -> l
    android.widget.TextView textview1 -> m
    android.widget.TextView textview2 -> n
    android.widget.LinearLayout blacklistContainer -> o
    android.widget.Button logoutBtn -> p
    com.easemob.chat.EMChatOptions chatOptions -> q
    android.widget.LinearLayout llDiagnose -> r
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
    void onActivityCreated(android.os.Bundle) -> onActivityCreated
    void onClick(android.view.View) -> onClick
    void logout() -> logout
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
com.wenwen.chatuidemo.activity.SettingsFragment$1 -> com.wenwen.chatuidemo.activity.fq:
    com.wenwen.chatuidemo.activity.SettingsFragment this$0 -> a
    android.app.ProgressDialog val$pd -> b
    void onSuccess() -> onSuccess
    void onProgress(int,java.lang.String) -> onProgress
    void onError(int,java.lang.String) -> onError
    com.wenwen.chatuidemo.activity.SettingsFragment access$0(com.wenwen.chatuidemo.activity.SettingsFragment$1) -> a
com.wenwen.chatuidemo.activity.SettingsFragment$1$1 -> com.wenwen.chatuidemo.activity.fr:
    com.wenwen.chatuidemo.activity.SettingsFragment$1 this$1 -> a
    android.app.ProgressDialog val$pd -> b
    void run() -> run
com.wenwen.chatuidemo.activity.ShowBigImage -> com.wenwen.chatuidemo.activity.ShowBigImage:
    android.app.ProgressDialog pd -> a
    com.wenwen.chatuidemo.widget.photoview.PhotoView image -> b
    int default_res -> c
    boolean deleteAfterDownload -> d
    boolean showAvator -> e
    java.lang.String localFilePath -> f
    java.lang.String username -> g
    android.graphics.Bitmap bitmap -> h
    boolean isDownloaded -> i
    android.widget.ProgressBar loadLocalPb -> j
    void onCreate(android.os.Bundle) -> onCreate
    void downloadImage(java.lang.String,java.util.Map) -> a
    void onBackPressed() -> onBackPressed
    java.lang.String access$0(com.wenwen.chatuidemo.activity.ShowBigImage) -> a
    void access$1(com.wenwen.chatuidemo.activity.ShowBigImage,android.graphics.Bitmap) -> a
    android.graphics.Bitmap access$2(com.wenwen.chatuidemo.activity.ShowBigImage) -> b
    com.wenwen.chatuidemo.widget.photoview.PhotoView access$3(com.wenwen.chatuidemo.activity.ShowBigImage) -> c
    int access$4(com.wenwen.chatuidemo.activity.ShowBigImage) -> d
    void access$5(com.wenwen.chatuidemo.activity.ShowBigImage,boolean) -> a
    android.app.ProgressDialog access$6(com.wenwen.chatuidemo.activity.ShowBigImage) -> e
com.wenwen.chatuidemo.activity.ShowBigImage$1 -> com.wenwen.chatuidemo.activity.fs:
    com.wenwen.chatuidemo.activity.ShowBigImage this$0 -> a
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.activity.ShowBigImage$2 -> com.wenwen.chatuidemo.activity.ft:
    com.wenwen.chatuidemo.activity.ShowBigImage this$0 -> a
    void onSuccess(java.lang.String) -> onSuccess
    void onError(java.lang.String) -> onError
    void onProgress(int) -> onProgress
    com.wenwen.chatuidemo.activity.ShowBigImage access$0(com.wenwen.chatuidemo.activity.ShowBigImage$2) -> a
com.wenwen.chatuidemo.activity.ShowBigImage$2$1 -> com.wenwen.chatuidemo.activity.fu:
    com.wenwen.chatuidemo.activity.ShowBigImage$2 this$1 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.ShowBigImage$2$2 -> com.wenwen.chatuidemo.activity.fv:
    com.wenwen.chatuidemo.activity.ShowBigImage$2 this$1 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.ShowBigImage$2$3 -> com.wenwen.chatuidemo.activity.fw:
    com.wenwen.chatuidemo.activity.ShowBigImage$2 this$1 -> a
    int val$progress -> b
    void run() -> run
com.wenwen.chatuidemo.activity.ShowBigImage$3 -> com.wenwen.chatuidemo.activity.fx:
    com.wenwen.chatuidemo.activity.ShowBigImage this$0 -> a
    com.easemob.cloud.HttpFileManager val$httpFileMgr -> b
    java.lang.String val$remoteFilePath -> c
    java.util.Map val$headers -> d
    com.easemob.cloud.CloudOperationCallback val$callback -> e
    void run() -> run
com.wenwen.chatuidemo.activity.ShowNormalFileActivity -> com.wenwen.chatuidemo.activity.ShowNormalFileActivity:
    android.widget.ProgressBar progressBar -> a
    java.io.File file -> b
    void onCreate(android.os.Bundle) -> onCreate
    java.io.File access$0(com.wenwen.chatuidemo.activity.ShowNormalFileActivity) -> a
    android.widget.ProgressBar access$1(com.wenwen.chatuidemo.activity.ShowNormalFileActivity) -> b
com.wenwen.chatuidemo.activity.ShowNormalFileActivity$1 -> com.wenwen.chatuidemo.activity.fy:
    com.wenwen.chatuidemo.activity.ShowNormalFileActivity this$0 -> a
    com.easemob.chat.FileMessageBody val$messageBody -> b
    java.util.Map val$maps -> c
    void run() -> run
    com.wenwen.chatuidemo.activity.ShowNormalFileActivity access$0(com.wenwen.chatuidemo.activity.ShowNormalFileActivity$1) -> a
com.wenwen.chatuidemo.activity.ShowNormalFileActivity$1$1 -> com.wenwen.chatuidemo.activity.fz:
    com.wenwen.chatuidemo.activity.ShowNormalFileActivity$1 this$1 -> a
    void onSuccess(java.lang.String) -> onSuccess
    void onProgress(int) -> onProgress
    void onError(java.lang.String) -> onError
    com.wenwen.chatuidemo.activity.ShowNormalFileActivity$1 access$0(com.wenwen.chatuidemo.activity.ShowNormalFileActivity$1$1) -> a
com.wenwen.chatuidemo.activity.ShowNormalFileActivity$1$1$1 -> com.wenwen.chatuidemo.activity.ga:
    com.wenwen.chatuidemo.activity.ShowNormalFileActivity$1$1 this$2 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.ShowNormalFileActivity$1$1$2 -> com.wenwen.chatuidemo.activity.gb:
    com.wenwen.chatuidemo.activity.ShowNormalFileActivity$1$1 this$2 -> a
    int val$progress -> b
    void run() -> run
com.wenwen.chatuidemo.activity.ShowNormalFileActivity$1$1$3 -> com.wenwen.chatuidemo.activity.gc:
    com.wenwen.chatuidemo.activity.ShowNormalFileActivity$1$1 this$2 -> a
    java.lang.String val$msg -> b
    void run() -> run
com.wenwen.chatuidemo.activity.ShowVideoActivity -> com.wenwen.chatuidemo.activity.ShowVideoActivity:
    android.widget.RelativeLayout loadingLayout -> a
    android.widget.ProgressBar progressBar -> b
    java.lang.String localFilePath -> c
    void onCreate(android.os.Bundle) -> onCreate
    void downloadVideo(java.lang.String,java.util.Map) -> a
    void onBackPressed() -> onBackPressed
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    android.widget.RelativeLayout access$0(com.wenwen.chatuidemo.activity.ShowVideoActivity) -> a
    android.widget.ProgressBar access$1(com.wenwen.chatuidemo.activity.ShowVideoActivity) -> b
    java.lang.String access$2(com.wenwen.chatuidemo.activity.ShowVideoActivity) -> c
com.wenwen.chatuidemo.activity.ShowVideoActivity$1 -> com.wenwen.chatuidemo.activity.gd:
    com.wenwen.chatuidemo.activity.ShowVideoActivity this$0 -> a
    void onSuccess(java.lang.String) -> onSuccess
    void onProgress(int) -> onProgress
    void onError(java.lang.String) -> onError
    com.wenwen.chatuidemo.activity.ShowVideoActivity access$0(com.wenwen.chatuidemo.activity.ShowVideoActivity$1) -> a
com.wenwen.chatuidemo.activity.ShowVideoActivity$1$1 -> com.wenwen.chatuidemo.activity.ge:
    com.wenwen.chatuidemo.activity.ShowVideoActivity$1 this$1 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.ShowVideoActivity$1$2 -> com.wenwen.chatuidemo.activity.gf:
    com.wenwen.chatuidemo.activity.ShowVideoActivity$1 this$1 -> a
    int val$progress -> b
    void run() -> run
com.wenwen.chatuidemo.activity.ShowVideoActivity$1$3 -> com.wenwen.chatuidemo.activity.gg:
    com.wenwen.chatuidemo.activity.ShowVideoActivity$1 this$1 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.ShowVideoActivity$2 -> com.wenwen.chatuidemo.activity.gh:
    com.wenwen.chatuidemo.activity.ShowVideoActivity this$0 -> a
    com.easemob.cloud.HttpFileManager val$httpFileMgr -> b
    java.lang.String val$remoteUrl -> c
    java.util.Map val$header -> d
    com.easemob.cloud.CloudOperationCallback val$callback -> e
    void run() -> run
com.wenwen.chatuidemo.activity.SplashActivity -> com.wenwen.chatuidemo.activity.SplashActivity:
    android.widget.LinearLayout rootLayout -> a
    android.widget.TextView versionText -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    java.lang.String getVersion() -> a
com.wenwen.chatuidemo.activity.SplashActivity$1 -> com.wenwen.chatuidemo.activity.gi:
    com.wenwen.chatuidemo.activity.SplashActivity this$0 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.VoiceCallActivity -> com.wenwen.chatuidemo.activity.VoiceCallActivity:
    android.widget.LinearLayout comingBtnContainer -> b
    android.widget.Button hangupBtn -> c
    android.widget.Button refuseBtn -> d
    android.widget.Button answerBtn -> e
    android.widget.ImageView muteImage -> f
    android.widget.ImageView handsFreeImage -> g
    boolean isMuteState -> h
    boolean isHandsfreeState -> i
    boolean isInComingCall -> j
    android.widget.TextView callStateTextView -> k
    android.media.SoundPool soundPool -> l
    int streamID -> m
    boolean endCallTriggerByMe -> n
    android.os.Handler handler -> p
    android.media.Ringtone ringtone -> q
    int outgoing -> r
    android.widget.TextView nickTextView -> s
    android.widget.TextView durationTextView -> t
    android.media.AudioManager audioManager -> u
    android.widget.Chronometer chronometer -> v
    java.lang.String callDruationText -> w
    java.lang.String username -> x
    com.wenwen.chatuidemo.activity.VoiceCallActivity$CallingState callingState -> y
    java.lang.String msgid -> a
    boolean isAnswered -> z
    android.widget.LinearLayout voiceContronlLayout -> A
    int[] $SWITCH_TABLE$com$wenwen$chatuidemo$activity$VoiceCallActivity$CallingState -> B
    void onCreate(android.os.Bundle) -> onCreate
    void addCallStateListener() -> a
    void onClick(android.view.View) -> onClick
    int playMakeCallSounds() -> e
    void onDestroy() -> onDestroy
    void onBackPressed() -> onBackPressed
    void openSpeakerOn() -> b
    void closeSpeakerOn() -> c
    void saveCallRecord() -> f
    int access$0(com.wenwen.chatuidemo.activity.VoiceCallActivity) -> a
    void access$1(com.wenwen.chatuidemo.activity.VoiceCallActivity,int) -> a
    android.widget.TextView access$2(com.wenwen.chatuidemo.activity.VoiceCallActivity) -> b
    android.media.SoundPool access$3(com.wenwen.chatuidemo.activity.VoiceCallActivity) -> c
    int access$4(com.wenwen.chatuidemo.activity.VoiceCallActivity) -> d
    android.widget.Chronometer access$5(com.wenwen.chatuidemo.activity.VoiceCallActivity) -> e
    void access$6(com.wenwen.chatuidemo.activity.VoiceCallActivity,com.wenwen.chatuidemo.activity.VoiceCallActivity$CallingState) -> a
    android.os.Handler access$7(com.wenwen.chatuidemo.activity.VoiceCallActivity) -> f
    void access$8(com.wenwen.chatuidemo.activity.VoiceCallActivity) -> g
    void access$9(com.wenwen.chatuidemo.activity.VoiceCallActivity,java.lang.String) -> a
    boolean access$10(com.wenwen.chatuidemo.activity.VoiceCallActivity) -> h
    boolean access$11(com.wenwen.chatuidemo.activity.VoiceCallActivity) -> i
    boolean access$12(com.wenwen.chatuidemo.activity.VoiceCallActivity) -> j
    int[] $SWITCH_TABLE$com$wenwen$chatuidemo$activity$VoiceCallActivity$CallingState() -> d
com.wenwen.chatuidemo.activity.VoiceCallActivity$1 -> com.wenwen.chatuidemo.activity.gj:
    com.wenwen.chatuidemo.activity.VoiceCallActivity this$0 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.VoiceCallActivity$2 -> com.wenwen.chatuidemo.activity.gk:
    com.wenwen.chatuidemo.activity.VoiceCallActivity this$0 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.VoiceCallActivity$3 -> com.wenwen.chatuidemo.activity.gl:
    com.wenwen.chatuidemo.activity.VoiceCallActivity this$0 -> a
    int[] $SWITCH_TABLE$com$easemob$chat$EMCallStateChangeListener$CallState -> b
    void onCallStateChanged(com.easemob.chat.EMCallStateChangeListener$CallState,com.easemob.chat.EMCallStateChangeListener$CallError) -> onCallStateChanged
    int[] $SWITCH_TABLE$com$easemob$chat$EMCallStateChangeListener$CallState() -> a
    com.wenwen.chatuidemo.activity.VoiceCallActivity access$1(com.wenwen.chatuidemo.activity.VoiceCallActivity$3) -> a
com.wenwen.chatuidemo.activity.VoiceCallActivity$3$1 -> com.wenwen.chatuidemo.activity.gm:
    com.wenwen.chatuidemo.activity.VoiceCallActivity$3 this$1 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.VoiceCallActivity$3$2 -> com.wenwen.chatuidemo.activity.gn:
    com.wenwen.chatuidemo.activity.VoiceCallActivity$3 this$1 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.VoiceCallActivity$3$3 -> com.wenwen.chatuidemo.activity.go:
    com.wenwen.chatuidemo.activity.VoiceCallActivity$3 this$1 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.VoiceCallActivity$3$4 -> com.wenwen.chatuidemo.activity.gp:
    com.wenwen.chatuidemo.activity.VoiceCallActivity$3 this$1 -> a
    com.easemob.chat.EMCallStateChangeListener$CallError val$fError -> b
    void postDelayedCloseMsg() -> a
    void run() -> run
    com.wenwen.chatuidemo.activity.VoiceCallActivity$3 access$0(com.wenwen.chatuidemo.activity.VoiceCallActivity$3$4) -> a
com.wenwen.chatuidemo.activity.VoiceCallActivity$3$4$1 -> com.wenwen.chatuidemo.activity.gq:
    com.wenwen.chatuidemo.activity.VoiceCallActivity$3$4 this$2 -> a
    void run() -> run
com.wenwen.chatuidemo.activity.VoiceCallActivity$CallingState -> com.wenwen.chatuidemo.activity.gr:
    com.wenwen.chatuidemo.activity.VoiceCallActivity$CallingState CANCED -> a
    com.wenwen.chatuidemo.activity.VoiceCallActivity$CallingState NORMAL -> b
    com.wenwen.chatuidemo.activity.VoiceCallActivity$CallingState REFUESD -> c
    com.wenwen.chatuidemo.activity.VoiceCallActivity$CallingState BEREFUESD -> d
    com.wenwen.chatuidemo.activity.VoiceCallActivity$CallingState UNANSWERED -> e
    com.wenwen.chatuidemo.activity.VoiceCallActivity$CallingState OFFLINE -> f
    com.wenwen.chatuidemo.activity.VoiceCallActivity$CallingState NORESPONSE -> g
    com.wenwen.chatuidemo.activity.VoiceCallActivity$CallingState BUSY -> h
    com.wenwen.chatuidemo.activity.VoiceCallActivity$CallingState[] ENUM$VALUES -> i
    com.wenwen.chatuidemo.activity.VoiceCallActivity$CallingState[] values() -> values
    com.wenwen.chatuidemo.activity.VoiceCallActivity$CallingState valueOf(java.lang.String) -> valueOf
com.wenwen.chatuidemo.adapter.ChatAllHistoryAdapter -> com.wenwen.chatuidemo.adapter.a:
    android.view.LayoutInflater inflater -> a
    java.util.List conversationList -> b
    java.util.List copyConversationList -> c
    com.wenwen.chatuidemo.adapter.ChatAllHistoryAdapter$ConversationFilter conversationFilter -> d
    int[] $SWITCH_TABLE$com$easemob$chat$EMMessage$Type -> e
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.String getMessageDigest(com.easemob.chat.EMMessage,android.content.Context) -> a
    java.lang.String getStrng(android.content.Context,int) -> a
    android.widget.Filter getFilter() -> getFilter
    java.util.List access$0(com.wenwen.chatuidemo.adapter.ChatAllHistoryAdapter) -> a
    java.util.List access$1(com.wenwen.chatuidemo.adapter.ChatAllHistoryAdapter) -> b
    int[] $SWITCH_TABLE$com$easemob$chat$EMMessage$Type() -> a
com.wenwen.chatuidemo.adapter.ChatAllHistoryAdapter$ConversationFilter -> com.wenwen.chatuidemo.adapter.b:
    java.util.List mOriginalValues -> a
    com.wenwen.chatuidemo.adapter.ChatAllHistoryAdapter this$0 -> b
    android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence) -> performFiltering
    void publishResults(java.lang.CharSequence,android.widget.Filter$FilterResults) -> publishResults
com.wenwen.chatuidemo.adapter.ChatAllHistoryAdapter$ViewHolder -> com.wenwen.chatuidemo.adapter.c:
    android.widget.TextView name -> a
    android.widget.TextView unreadLabel -> b
    android.widget.TextView message -> c
    android.widget.TextView time -> d
    android.widget.ImageView avatar -> e
    android.view.View msgState -> f
    android.widget.RelativeLayout list_item_layout -> g
com.wenwen.chatuidemo.adapter.ChatHistoryAdapter -> com.wenwen.chatuidemo.adapter.d:
    android.view.LayoutInflater inflater -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.wenwen.chatuidemo.adapter.ChatHistoryAdapter$ViewHolder -> com.wenwen.chatuidemo.adapter.e:
    android.widget.TextView name -> a
    android.widget.TextView unreadLabel -> b
    android.widget.TextView message -> c
    android.widget.TextView time -> d
    android.widget.ImageView avatar -> e
    android.view.View msgState -> f
    android.widget.RelativeLayout list_item_layout -> g
com.wenwen.chatuidemo.adapter.ContactAdapter -> com.wenwen.chatuidemo.adapter.f:
    android.view.LayoutInflater layoutInflater -> a
    android.widget.EditText query -> b
    android.widget.ImageButton clearSearch -> c
    android.util.SparseIntArray positionOfSection -> d
    android.util.SparseIntArray sectionOfPosition -> e
    com.wenwen.chatuidemo.widget.Sidebar sidebar -> f
    int res -> g
    int getViewTypeCount() -> getViewTypeCount
    int getItemViewType(int) -> getItemViewType
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    com.wenwen.chatuidemo.domain.MyUser getItem(int) -> a
    int getCount() -> getCount
    int getPositionForSection(int) -> getPositionForSection
    int getSectionForPosition(int) -> getSectionForPosition
    java.lang.Object[] getSections() -> getSections
    java.lang.Object getItem(int) -> getItem
    android.widget.ImageButton access$1(com.wenwen.chatuidemo.adapter.ContactAdapter) -> a
    com.wenwen.chatuidemo.widget.Sidebar access$2(com.wenwen.chatuidemo.adapter.ContactAdapter) -> b
    android.widget.EditText access$3(com.wenwen.chatuidemo.adapter.ContactAdapter) -> c
com.wenwen.chatuidemo.adapter.ContactAdapter$1 -> com.wenwen.chatuidemo.adapter.g:
    com.wenwen.chatuidemo.adapter.ContactAdapter this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.wenwen.chatuidemo.adapter.ContactAdapter$2 -> com.wenwen.chatuidemo.adapter.h:
    com.wenwen.chatuidemo.adapter.ContactAdapter this$0 -> a
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.adapter.DepartmentAdapter -> com.wenwen.chatuidemo.adapter.i:
    android.content.Context mContext -> a
    java.lang.String[] mydata -> b
    android.view.LayoutInflater layoutInflater -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.wenwen.chatuidemo.adapter.DepartmentAdapter$ViewHolder -> com.wenwen.chatuidemo.adapter.j:
    android.widget.TextView tv_name -> b
    com.wenwen.chatuidemo.adapter.DepartmentAdapter this$0 -> a
    void access$1(com.wenwen.chatuidemo.adapter.DepartmentAdapter$ViewHolder,android.widget.TextView) -> a
    android.widget.TextView access$2(com.wenwen.chatuidemo.adapter.DepartmentAdapter$ViewHolder) -> a
com.wenwen.chatuidemo.adapter.ExpressionAdapter -> com.wenwen.chatuidemo.adapter.k:
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.wenwen.chatuidemo.adapter.ExpressionPagerAdapter -> com.wenwen.chatuidemo.adapter.ExpressionPagerAdapter:
    java.util.List views -> a
    int getCount() -> getCount
    boolean isViewFromObject(android.view.View,java.lang.Object) -> isViewFromObject
    java.lang.Object instantiateItem(android.view.View,int) -> instantiateItem
    void destroyItem(android.view.View,int,java.lang.Object) -> destroyItem
com.wenwen.chatuidemo.adapter.GroupAdapter -> com.wenwen.chatuidemo.adapter.l:
    android.view.LayoutInflater inflater -> a
    int getViewTypeCount() -> getViewTypeCount
    int getItemViewType(int) -> getItemViewType
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    int getCount() -> getCount
com.wenwen.chatuidemo.adapter.GroupAdapter$1 -> com.wenwen.chatuidemo.adapter.m:
    com.wenwen.chatuidemo.adapter.GroupAdapter this$0 -> a
    android.widget.ImageButton val$clearSearch -> b
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.wenwen.chatuidemo.adapter.GroupAdapter$2 -> com.wenwen.chatuidemo.adapter.n:
    com.wenwen.chatuidemo.adapter.GroupAdapter this$0 -> a
    android.widget.EditText val$query -> b
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.adapter.HospitalAdapter -> com.wenwen.chatuidemo.adapter.o:
    android.content.Context mContext -> a
    java.lang.String[] mydata -> b
    android.view.LayoutInflater layoutInflater -> c
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.wenwen.chatuidemo.adapter.HospitalAdapter$ViewHolder -> com.wenwen.chatuidemo.adapter.p:
    android.widget.TextView tv_name -> b
    com.wenwen.chatuidemo.adapter.HospitalAdapter this$0 -> a
    void access$1(com.wenwen.chatuidemo.adapter.HospitalAdapter$ViewHolder,android.widget.TextView) -> a
    android.widget.TextView access$2(com.wenwen.chatuidemo.adapter.HospitalAdapter$ViewHolder) -> a
com.wenwen.chatuidemo.adapter.MessageAdapter -> com.wenwen.chatuidemo.adapter.q:
    java.lang.String username -> a
    android.view.LayoutInflater inflater -> b
    android.app.Activity activity -> c
    com.easemob.chat.EMConversation conversation -> d
    android.content.Context context -> e
    java.util.Map timers -> f
    int[] $SWITCH_TABLE$com$easemob$chat$EMMessage$Type -> g
    int[] $SWITCH_TABLE$com$easemob$chat$EMMessage$Status -> h
    int getCount() -> getCount
    void refresh() -> a
    com.easemob.chat.EMMessage getItem(int) -> a
    long getItemId(int) -> getItemId
    int getItemViewType(int) -> getItemViewType
    int getViewTypeCount() -> getViewTypeCount
    android.view.View createViewByMessage(com.easemob.chat.EMMessage,int) -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void handleTextMessage(com.easemob.chat.EMMessage,com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder,int) -> a
    void handleVoiceCallMessage(com.easemob.chat.EMMessage,com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder,int) -> b
    void handleImageMessage(com.easemob.chat.EMMessage,com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder,int,android.view.View) -> a
    void handleVideoMessage(com.easemob.chat.EMMessage,com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder,int,android.view.View) -> b
    void handleVoiceMessage(com.easemob.chat.EMMessage,com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder,int,android.view.View) -> c
    void handleFileMessage(com.easemob.chat.EMMessage,com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder,int,android.view.View) -> d
    void handleLocationMessage(com.easemob.chat.EMMessage,com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder,int,android.view.View) -> e
    void sendMsgInBackground(com.easemob.chat.EMMessage,com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder) -> a
    void showDownloadImageProgress(com.easemob.chat.EMMessage,com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder) -> b
    void sendPictureMessage(com.easemob.chat.EMMessage,com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder) -> c
    void updateSendedView(com.easemob.chat.EMMessage,com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder) -> d
    boolean showImageView(java.lang.String,android.widget.ImageView,java.lang.String,java.lang.String,com.easemob.chat.EMMessage) -> a
    void showVideoThumbView(java.lang.String,android.widget.ImageView,java.lang.String,com.easemob.chat.EMMessage) -> a
    void sendEvent2Umeng(com.easemob.chat.EMMessage,long) -> a
    java.lang.Object getItem(int) -> getItem
    android.content.Context access$1(com.wenwen.chatuidemo.adapter.MessageAdapter) -> a
    android.app.Activity access$2(com.wenwen.chatuidemo.adapter.MessageAdapter) -> b
    int[] $SWITCH_TABLE$com$easemob$chat$EMMessage$Type() -> b
    int[] $SWITCH_TABLE$com$easemob$chat$EMMessage$Status() -> c
    void access$5(com.wenwen.chatuidemo.adapter.MessageAdapter,com.easemob.chat.EMMessage,long) -> a
    void access$6(com.wenwen.chatuidemo.adapter.MessageAdapter,com.easemob.chat.EMMessage,com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder) -> a
com.wenwen.chatuidemo.adapter.MessageAdapter$1 -> com.wenwen.chatuidemo.adapter.r:
    com.wenwen.chatuidemo.adapter.MessageAdapter this$0 -> a
    int val$position -> b
    com.easemob.chat.EMMessage val$message -> c
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.adapter.MessageAdapter$10 -> com.wenwen.chatuidemo.adapter.s:
    com.wenwen.chatuidemo.adapter.MessageAdapter this$0 -> a
    java.lang.String val$filePath -> b
    com.easemob.chat.NormalFileMessageBody val$fileMessageBody -> c
    com.easemob.chat.EMMessage val$message -> d
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.adapter.MessageAdapter$11 -> com.wenwen.chatuidemo.adapter.t:
    com.wenwen.chatuidemo.adapter.MessageAdapter this$0 -> a
    com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder val$holder -> b
    com.easemob.chat.EMMessage val$message -> c
    java.util.Timer val$timer -> d
    void run() -> run
    com.wenwen.chatuidemo.adapter.MessageAdapter access$0(com.wenwen.chatuidemo.adapter.MessageAdapter$11) -> a
com.wenwen.chatuidemo.adapter.MessageAdapter$11$1 -> com.wenwen.chatuidemo.adapter.u:
    com.wenwen.chatuidemo.adapter.MessageAdapter$11 this$1 -> a
    com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder val$holder -> b
    com.easemob.chat.EMMessage val$message -> c
    java.util.Timer val$timer -> d
    void run() -> run
com.wenwen.chatuidemo.adapter.MessageAdapter$12 -> com.wenwen.chatuidemo.adapter.v:
    com.wenwen.chatuidemo.adapter.MessageAdapter this$0 -> a
    int val$position -> b
    boolean onLongClick(android.view.View) -> onLongClick
com.wenwen.chatuidemo.adapter.MessageAdapter$13 -> com.wenwen.chatuidemo.adapter.w:
    com.wenwen.chatuidemo.adapter.MessageAdapter this$0 -> a
    com.easemob.chat.EMMessage val$message -> b
    long val$start -> c
    com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder val$holder -> d
    void onSuccess() -> onSuccess
    void onError(int,java.lang.String) -> onError
    void onProgress(int,java.lang.String) -> onProgress
com.wenwen.chatuidemo.adapter.MessageAdapter$14 -> com.wenwen.chatuidemo.adapter.x:
    com.wenwen.chatuidemo.adapter.MessageAdapter this$0 -> a
    com.easemob.chat.EMMessage val$message -> b
    com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder val$holder -> c
    void onSuccess() -> onSuccess
    void onError(int,java.lang.String) -> onError
    void onProgress(int,java.lang.String) -> onProgress
    com.wenwen.chatuidemo.adapter.MessageAdapter access$0(com.wenwen.chatuidemo.adapter.MessageAdapter$14) -> a
com.wenwen.chatuidemo.adapter.MessageAdapter$14$1 -> com.wenwen.chatuidemo.adapter.y:
    com.wenwen.chatuidemo.adapter.MessageAdapter$14 this$1 -> a
    com.easemob.chat.EMMessage val$message -> b
    com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder val$holder -> c
    void run() -> run
com.wenwen.chatuidemo.adapter.MessageAdapter$14$2 -> com.wenwen.chatuidemo.adapter.z:
    com.wenwen.chatuidemo.adapter.MessageAdapter$14 this$1 -> a
    com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder val$holder -> b
    int val$progress -> c
    void run() -> run
com.wenwen.chatuidemo.adapter.MessageAdapter$15 -> com.wenwen.chatuidemo.adapter.aa:
    com.wenwen.chatuidemo.adapter.MessageAdapter this$0 -> a
    com.easemob.chat.EMMessage val$message -> b
    long val$start -> c
    com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder val$holder -> d
    void onSuccess() -> onSuccess
    void onError(int,java.lang.String) -> onError
    void onProgress(int,java.lang.String) -> onProgress
    com.wenwen.chatuidemo.adapter.MessageAdapter access$0(com.wenwen.chatuidemo.adapter.MessageAdapter$15) -> a
com.wenwen.chatuidemo.adapter.MessageAdapter$15$1 -> com.wenwen.chatuidemo.adapter.ab:
    com.wenwen.chatuidemo.adapter.MessageAdapter$15 this$1 -> a
    com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder val$holder -> b
    void run() -> run
com.wenwen.chatuidemo.adapter.MessageAdapter$15$2 -> com.wenwen.chatuidemo.adapter.ac:
    com.wenwen.chatuidemo.adapter.MessageAdapter$15 this$1 -> a
    com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder val$holder -> b
    void run() -> run
com.wenwen.chatuidemo.adapter.MessageAdapter$15$3 -> com.wenwen.chatuidemo.adapter.ad:
    com.wenwen.chatuidemo.adapter.MessageAdapter$15 this$1 -> a
    com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder val$holder -> b
    int val$progress -> c
    void run() -> run
com.wenwen.chatuidemo.adapter.MessageAdapter$16 -> com.wenwen.chatuidemo.adapter.ae:
    com.wenwen.chatuidemo.adapter.MessageAdapter this$0 -> a
    com.easemob.chat.EMMessage val$message -> b
    com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder val$holder -> c
    void run() -> run
com.wenwen.chatuidemo.adapter.MessageAdapter$17 -> com.wenwen.chatuidemo.adapter.af:
    com.wenwen.chatuidemo.adapter.MessageAdapter this$0 -> a
    java.lang.String val$localFullSizePath -> b
    com.easemob.chat.EMMessage val$message -> c
    java.lang.String val$remote -> d
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.adapter.MessageAdapter$18 -> com.wenwen.chatuidemo.adapter.ag:
    com.wenwen.chatuidemo.adapter.MessageAdapter this$0 -> a
    com.easemob.chat.EMMessage val$message -> b
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.adapter.MessageAdapter$19 -> com.wenwen.chatuidemo.adapter.ah:
    com.wenwen.chatuidemo.adapter.MessageAdapter this$0 -> a
    long val$start -> b
    com.easemob.chat.EMMessage val$message -> c
    int[] $SWITCH_TABLE$com$easemob$chat$EMMessage$Type -> d
    void run() -> run
    int[] $SWITCH_TABLE$com$easemob$chat$EMMessage$Type() -> a
com.wenwen.chatuidemo.adapter.MessageAdapter$2 -> com.wenwen.chatuidemo.adapter.ai:
    com.wenwen.chatuidemo.adapter.MessageAdapter this$0 -> a
    int val$position -> b
    boolean onLongClick(android.view.View) -> onLongClick
com.wenwen.chatuidemo.adapter.MessageAdapter$3 -> com.wenwen.chatuidemo.adapter.aj:
    com.wenwen.chatuidemo.adapter.MessageAdapter this$0 -> a
    int val$position -> b
    boolean onLongClick(android.view.View) -> onLongClick
com.wenwen.chatuidemo.adapter.MessageAdapter$4 -> com.wenwen.chatuidemo.adapter.ak:
    com.wenwen.chatuidemo.adapter.MessageAdapter this$0 -> a
    int val$position -> b
    boolean onLongClick(android.view.View) -> onLongClick
com.wenwen.chatuidemo.adapter.MessageAdapter$5 -> com.wenwen.chatuidemo.adapter.al:
    com.wenwen.chatuidemo.adapter.MessageAdapter this$0 -> a
    com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder val$holder -> b
    com.easemob.chat.EMMessage val$message -> c
    java.util.Timer val$timer -> d
    void run() -> run
    com.wenwen.chatuidemo.adapter.MessageAdapter access$0(com.wenwen.chatuidemo.adapter.MessageAdapter$5) -> a
com.wenwen.chatuidemo.adapter.MessageAdapter$5$1 -> com.wenwen.chatuidemo.adapter.am:
    com.wenwen.chatuidemo.adapter.MessageAdapter$5 this$1 -> a
    com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder val$holder -> b
    com.easemob.chat.EMMessage val$message -> c
    java.util.Timer val$timer -> d
    void run() -> run
com.wenwen.chatuidemo.adapter.MessageAdapter$6 -> com.wenwen.chatuidemo.adapter.an:
    com.wenwen.chatuidemo.adapter.MessageAdapter this$0 -> a
    int val$position -> b
    boolean onLongClick(android.view.View) -> onLongClick
com.wenwen.chatuidemo.adapter.MessageAdapter$7 -> com.wenwen.chatuidemo.adapter.ao:
    com.wenwen.chatuidemo.adapter.MessageAdapter this$0 -> a
    com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder val$holder -> b
    com.easemob.chat.EMMessage val$message -> c
    java.util.Timer val$timer -> d
    void run() -> run
    com.wenwen.chatuidemo.adapter.MessageAdapter access$0(com.wenwen.chatuidemo.adapter.MessageAdapter$7) -> a
com.wenwen.chatuidemo.adapter.MessageAdapter$7$1 -> com.wenwen.chatuidemo.adapter.ap:
    com.wenwen.chatuidemo.adapter.MessageAdapter$7 this$1 -> a
    com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder val$holder -> b
    com.easemob.chat.EMMessage val$message -> c
    java.util.Timer val$timer -> d
    void run() -> run
com.wenwen.chatuidemo.adapter.MessageAdapter$8 -> com.wenwen.chatuidemo.adapter.aq:
    com.wenwen.chatuidemo.adapter.MessageAdapter this$0 -> a
    int val$position -> b
    boolean onLongClick(android.view.View) -> onLongClick
com.wenwen.chatuidemo.adapter.MessageAdapter$9 -> com.wenwen.chatuidemo.adapter.ar:
    com.wenwen.chatuidemo.adapter.MessageAdapter this$0 -> a
    com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder val$holder -> b
    void onSuccess() -> onSuccess
    void onProgress(int,java.lang.String) -> onProgress
    void onError(int,java.lang.String) -> onError
    com.wenwen.chatuidemo.adapter.MessageAdapter access$0(com.wenwen.chatuidemo.adapter.MessageAdapter$9) -> a
com.wenwen.chatuidemo.adapter.MessageAdapter$9$1 -> com.wenwen.chatuidemo.adapter.as:
    com.wenwen.chatuidemo.adapter.MessageAdapter$9 this$1 -> a
    com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder val$holder -> b
    void run() -> run
com.wenwen.chatuidemo.adapter.MessageAdapter$9$2 -> com.wenwen.chatuidemo.adapter.at:
    com.wenwen.chatuidemo.adapter.MessageAdapter$9 this$1 -> a
    com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder val$holder -> b
    void run() -> run
com.wenwen.chatuidemo.adapter.MessageAdapter$MapClickListener -> com.wenwen.chatuidemo.adapter.au:
    com.easemob.util.LatLng location -> a
    java.lang.String address -> b
    com.wenwen.chatuidemo.adapter.MessageAdapter this$0 -> c
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.adapter.MessageAdapter$ViewHolder -> com.wenwen.chatuidemo.adapter.av:
    android.widget.ImageView iv -> a
    android.widget.TextView tv -> b
    android.widget.ProgressBar pb -> c
    android.widget.ImageView staus_iv -> d
    android.widget.ImageView head_iv -> e
    android.widget.TextView tv_userId -> f
    android.widget.ImageView playBtn -> g
    android.widget.TextView timeLength -> h
    android.widget.TextView size -> i
    android.widget.LinearLayout container_status_btn -> j
    android.widget.LinearLayout ll_container -> k
    android.widget.ImageView iv_read_status -> l
    android.widget.TextView tv_ack -> m
    android.widget.TextView tv_delivered -> n
    android.widget.TextView tv_file_name -> o
    android.widget.TextView tv_file_size -> p
    android.widget.TextView tv_file_download_state -> q
com.wenwen.chatuidemo.adapter.NewFriendsMsgAdapter -> com.wenwen.chatuidemo.adapter.aw:
    android.content.Context context -> a
    com.wenwen.chatuidemo.db.InviteMessgeDao messgeDao -> b
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void acceptInvitation(android.widget.Button,com.wenwen.chatuidemo.domain.InviteMessage) -> a
    void access$0(com.wenwen.chatuidemo.adapter.NewFriendsMsgAdapter,android.widget.Button,com.wenwen.chatuidemo.domain.InviteMessage) -> a
    android.content.Context access$1(com.wenwen.chatuidemo.adapter.NewFriendsMsgAdapter) -> a
    com.wenwen.chatuidemo.db.InviteMessgeDao access$2(com.wenwen.chatuidemo.adapter.NewFriendsMsgAdapter) -> b
com.wenwen.chatuidemo.adapter.NewFriendsMsgAdapter$1 -> com.wenwen.chatuidemo.adapter.ax:
    com.wenwen.chatuidemo.adapter.NewFriendsMsgAdapter this$0 -> a
    com.wenwen.chatuidemo.adapter.NewFriendsMsgAdapter$ViewHolder val$holder -> b
    com.wenwen.chatuidemo.domain.InviteMessage val$msg -> c
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.adapter.NewFriendsMsgAdapter$2 -> com.wenwen.chatuidemo.adapter.ay:
    com.wenwen.chatuidemo.adapter.NewFriendsMsgAdapter this$0 -> a
    com.wenwen.chatuidemo.domain.InviteMessage val$msg -> b
    android.app.ProgressDialog val$pd -> c
    android.widget.Button val$button -> d
    void run() -> run
    com.wenwen.chatuidemo.adapter.NewFriendsMsgAdapter access$0(com.wenwen.chatuidemo.adapter.NewFriendsMsgAdapter$2) -> a
com.wenwen.chatuidemo.adapter.NewFriendsMsgAdapter$2$1 -> com.wenwen.chatuidemo.adapter.az:
    com.wenwen.chatuidemo.adapter.NewFriendsMsgAdapter$2 this$1 -> a
    android.app.ProgressDialog val$pd -> b
    android.widget.Button val$button -> c
    com.wenwen.chatuidemo.domain.InviteMessage val$msg -> d
    void run() -> run
com.wenwen.chatuidemo.adapter.NewFriendsMsgAdapter$2$2 -> com.wenwen.chatuidemo.adapter.ba:
    com.wenwen.chatuidemo.adapter.NewFriendsMsgAdapter$2 this$1 -> a
    android.app.ProgressDialog val$pd -> b
    java.lang.Exception val$e -> c
    void run() -> run
com.wenwen.chatuidemo.adapter.NewFriendsMsgAdapter$ViewHolder -> com.wenwen.chatuidemo.adapter.bb:
    android.widget.ImageView avator -> a
    android.widget.TextView name -> b
    android.widget.TextView reason -> c
    android.widget.Button status -> d
    android.widget.LinearLayout groupContainer -> e
    android.widget.TextView groupname -> f
com.wenwen.chatuidemo.adapter.SickContactAdapter -> com.wenwen.chatuidemo.adapter.bc:
    android.view.LayoutInflater layoutInflater -> a
    android.widget.EditText query -> b
    android.widget.ImageButton clearSearch -> c
    android.util.SparseIntArray positionOfSection -> d
    android.util.SparseIntArray sectionOfPosition -> e
    com.wenwen.chatuidemo.widget.Sidebar sidebar -> f
    int res -> g
    int getViewTypeCount() -> getViewTypeCount
    int getItemViewType(int) -> getItemViewType
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    com.wenwen.chatuidemo.domain.MyUser1 getItem(int) -> a
    int getCount() -> getCount
    int getPositionForSection(int) -> getPositionForSection
    int getSectionForPosition(int) -> getSectionForPosition
    java.lang.Object[] getSections() -> getSections
    java.lang.Object getItem(int) -> getItem
    android.widget.ImageButton access$1(com.wenwen.chatuidemo.adapter.SickContactAdapter) -> a
    com.wenwen.chatuidemo.widget.Sidebar access$2(com.wenwen.chatuidemo.adapter.SickContactAdapter) -> b
    android.widget.EditText access$3(com.wenwen.chatuidemo.adapter.SickContactAdapter) -> c
com.wenwen.chatuidemo.adapter.SickContactAdapter$1 -> com.wenwen.chatuidemo.adapter.bd:
    com.wenwen.chatuidemo.adapter.SickContactAdapter this$0 -> a
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void afterTextChanged(android.text.Editable) -> afterTextChanged
com.wenwen.chatuidemo.adapter.SickContactAdapter$2 -> com.wenwen.chatuidemo.adapter.be:
    com.wenwen.chatuidemo.adapter.SickContactAdapter this$0 -> a
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.adapter.VoicePlayClickListener -> com.wenwen.chatuidemo.adapter.bf:
    com.easemob.chat.EMMessage message -> a
    com.easemob.chat.VoiceMessageBody voiceBody -> b
    android.widget.ImageView voiceIconView -> c
    android.graphics.drawable.AnimationDrawable voiceAnimation -> i
    android.media.MediaPlayer mediaPlayer -> d
    android.widget.ImageView iv_read_status -> e
    android.app.Activity activity -> f
    com.easemob.chat.EMMessage$ChatType chatType -> j
    android.widget.BaseAdapter adapter -> k
    boolean isPlaying -> g
    com.wenwen.chatuidemo.adapter.VoicePlayClickListener currentPlayListener -> h
    void stopPlayVoice() -> a
    void playVoice(java.lang.String) -> a
    void showAnimation() -> b
    void onClick(android.view.View) -> onClick
    android.widget.BaseAdapter access$0(com.wenwen.chatuidemo.adapter.VoicePlayClickListener) -> a
com.wenwen.chatuidemo.adapter.VoicePlayClickListener$1 -> com.wenwen.chatuidemo.adapter.bg:
    com.wenwen.chatuidemo.adapter.VoicePlayClickListener this$0 -> a
    void onCompletion(android.media.MediaPlayer) -> onCompletion
com.wenwen.chatuidemo.adapter.VoicePlayClickListener$2 -> com.wenwen.chatuidemo.adapter.bh:
    com.wenwen.chatuidemo.adapter.VoicePlayClickListener this$0 -> a
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.wenwen.chatuidemo.db.DbOpenHelper -> com.wenwen.chatuidemo.a.a:
    com.wenwen.chatuidemo.db.DbOpenHelper instance -> a
    com.wenwen.chatuidemo.db.DbOpenHelper getInstance(android.content.Context) -> a
    java.lang.String getUserDatabaseName() -> b
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    void closeDB() -> a
com.wenwen.chatuidemo.db.InviteMessgeDao -> com.wenwen.chatuidemo.a.b:
    com.wenwen.chatuidemo.db.DbOpenHelper dbHelper -> a
    void updateMessage(int,android.content.ContentValues) -> a
    java.util.List getMessagesList() -> a
    void deleteMessage(java.lang.String) -> a
com.wenwen.chatuidemo.db.SickUserDao -> com.wenwen.chatuidemo.a.c:
    com.wenwen.chatuidemo.db.DbOpenHelper dbHelper -> a
    void saveSickContactList(java.util.List) -> a
    java.util.Map getSickContactList() -> a
    void deleteSickContact(java.lang.String) -> a
com.wenwen.chatuidemo.db.UserDao -> com.wenwen.chatuidemo.a.d:
    com.wenwen.chatuidemo.db.DbOpenHelper dbHelper -> a
    void saveContactList(java.util.List) -> a
    java.util.Map getContactList() -> a
    void deleteContact(java.lang.String) -> a
com.wenwen.chatuidemo.domain.InviteMessage -> com.wenwen.chatuidemo.domain.a:
    java.lang.String from -> a
    long time -> b
    java.lang.String reason -> c
    com.wenwen.chatuidemo.domain.InviteMessage$InviteMesageStatus status -> d
    java.lang.String groupId -> e
    java.lang.String groupName -> f
    int id -> g
    java.lang.String getFrom() -> a
    void setFrom(java.lang.String) -> a
    void setTime(long) -> a
    java.lang.String getReason() -> b
    void setReason(java.lang.String) -> b
    com.wenwen.chatuidemo.domain.InviteMessage$InviteMesageStatus getStatus() -> c
    void setStatus(com.wenwen.chatuidemo.domain.InviteMessage$InviteMesageStatus) -> a
    int getId() -> d
    void setId(int) -> a
    java.lang.String getGroupId() -> e
    void setGroupId(java.lang.String) -> c
    java.lang.String getGroupName() -> f
    void setGroupName(java.lang.String) -> d
com.wenwen.chatuidemo.domain.InviteMessage$InviteMesageStatus -> com.wenwen.chatuidemo.domain.b:
    com.wenwen.chatuidemo.domain.InviteMessage$InviteMesageStatus BEINVITEED -> a
    com.wenwen.chatuidemo.domain.InviteMessage$InviteMesageStatus BEREFUSED -> b
    com.wenwen.chatuidemo.domain.InviteMessage$InviteMesageStatus BEAGREED -> c
    com.wenwen.chatuidemo.domain.InviteMessage$InviteMesageStatus BEAPPLYED -> d
    com.wenwen.chatuidemo.domain.InviteMessage$InviteMesageStatus AGREED -> e
    com.wenwen.chatuidemo.domain.InviteMessage$InviteMesageStatus REFUSED -> f
    com.wenwen.chatuidemo.domain.InviteMessage$InviteMesageStatus[] ENUM$VALUES -> g
    com.wenwen.chatuidemo.domain.InviteMessage$InviteMesageStatus[] values() -> values
    com.wenwen.chatuidemo.domain.InviteMessage$InviteMesageStatus valueOf(java.lang.String) -> valueOf
com.wenwen.chatuidemo.domain.MyUser -> com.wenwen.chatuidemo.domain.c:
    java.lang.String header -> a
    java.lang.String account_id -> b
    java.lang.String account_name -> c
    java.lang.String account_image -> d
    java.lang.String account_username -> e
    java.lang.String mdname -> f
    java.lang.String getMdname() -> a
    void setMdname(java.lang.String) -> a
    java.lang.String toString() -> toString
    java.lang.String getHeader() -> b
    void setHeader(java.lang.String) -> b
    java.lang.String getAccount_username() -> c
    void setAccount_username(java.lang.String) -> c
    java.lang.String getAccount_name() -> d
    void setAccount_name(java.lang.String) -> d
com.wenwen.chatuidemo.domain.MyUser1 -> com.wenwen.chatuidemo.domain.d:
    java.lang.String header -> a
    java.lang.String account_id -> b
    java.lang.String account_name -> c
    java.lang.String account_image -> d
    java.lang.String account_username -> e
    java.lang.String mdname -> f
    java.lang.String getMdname() -> a
    void setMdname(java.lang.String) -> a
    java.lang.String getAccount_username() -> b
    java.lang.String getHeader() -> c
    void setHeader(java.lang.String) -> b
    void setAccount_username(java.lang.String) -> c
    java.lang.String getAccount_name() -> d
    void setAccount_name(java.lang.String) -> d
    java.lang.String getAccount_image() -> e
    java.lang.String toString() -> toString
com.wenwen.chatuidemo.domain.ScikUser -> com.wenwen.chatuidemo.domain.ScikUser:
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.wenwen.chatuidemo.domain.User -> com.wenwen.chatuidemo.domain.User:
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.wenwen.chatuidemo.domain.VideoEntity -> com.wenwen.chatuidemo.domain.e:
    int ID -> a
    java.lang.String title -> b
    java.lang.String filePath -> c
    int size -> d
    int duration -> e
com.wenwen.chatuidemo.receiver.VoiceCallReceiver -> com.wenwen.chatuidemo.b.a:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.wenwen.chatuidemo.task.DownloadImageTask -> com.wenwen.chatuidemo.c.a:
    com.wenwen.chatuidemo.task.DownloadImageTask$DownloadFileCallback callback -> a
    android.graphics.Bitmap doInBackground(com.easemob.chat.EMMessage[]) -> a
    void onPostExecute(android.graphics.Bitmap) -> a
    void onPreExecute() -> onPreExecute
    void onProgressUpdate(java.lang.Integer[]) -> a
    java.lang.String getThumbnailImagePath(java.lang.String) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void onProgressUpdate(java.lang.Object[]) -> onProgressUpdate
com.wenwen.chatuidemo.task.DownloadImageTask$DownloadFileCallback -> com.wenwen.chatuidemo.c.b:
    void beforeDownload() -> a
    void downloadProgress(int) -> a
    void afterDownload(android.graphics.Bitmap) -> a
com.wenwen.chatuidemo.task.LoadImageTask -> com.wenwen.chatuidemo.c.c:
    android.widget.ImageView iv -> g
    java.lang.String localFullSizePath -> a
    java.lang.String thumbnailPath -> b
    java.lang.String remotePath -> c
    com.easemob.chat.EMMessage message -> d
    com.easemob.chat.EMMessage$ChatType chatType -> e
    android.app.Activity activity -> f
    android.graphics.Bitmap doInBackground(java.lang.Object[]) -> a
    void onPostExecute(android.graphics.Bitmap) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.wenwen.chatuidemo.task.LoadImageTask$1 -> com.wenwen.chatuidemo.c.d:
    com.wenwen.chatuidemo.task.LoadImageTask this$0 -> a
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.task.LoadImageTask$2 -> com.wenwen.chatuidemo.c.e:
    com.wenwen.chatuidemo.task.LoadImageTask this$0 -> a
    void run() -> run
com.wenwen.chatuidemo.task.LoadLocalBigImgTask -> com.wenwen.chatuidemo.c.f:
    android.widget.ProgressBar pb -> a
    com.wenwen.chatuidemo.widget.photoview.PhotoView photoView -> b
    java.lang.String path -> c
    int width -> d
    int height -> e
    android.content.Context context -> f
    void onPreExecute() -> onPreExecute
    android.graphics.Bitmap doInBackground(java.lang.Void[]) -> a
    void onPostExecute(android.graphics.Bitmap) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.wenwen.chatuidemo.task.LoadVideoImageTask -> com.wenwen.chatuidemo.c.g:
    android.widget.ImageView iv -> f
    java.lang.String thumbnailPath -> a
    java.lang.String thumbnailUrl -> b
    android.app.Activity activity -> c
    com.easemob.chat.EMMessage message -> d
    android.widget.BaseAdapter adapter -> e
    android.graphics.Bitmap doInBackground(java.lang.Object[]) -> a
    void onPostExecute(android.graphics.Bitmap) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.wenwen.chatuidemo.task.LoadVideoImageTask$1 -> com.wenwen.chatuidemo.c.h:
    com.wenwen.chatuidemo.task.LoadVideoImageTask this$0 -> a
    void onClick(android.view.View) -> onClick
com.wenwen.chatuidemo.task.LoadVideoImageTask$2 -> com.wenwen.chatuidemo.c.i:
    com.wenwen.chatuidemo.task.LoadVideoImageTask this$0 -> a
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.wenwen.chatuidemo.utils.CommonUtils -> com.wenwen.chatuidemo.d.a:
    int[] $SWITCH_TABLE$com$easemob$chat$EMMessage$Type -> a
    boolean isNetWorkConnected(android.content.Context) -> a
    boolean isExitsSdcard() -> a
    java.lang.String getMessageDigest(com.easemob.chat.EMMessage,android.content.Context) -> a
    java.lang.String getStrng(android.content.Context,int) -> a
    int[] $SWITCH_TABLE$com$easemob$chat$EMMessage$Type() -> b
com.wenwen.chatuidemo.utils.Constants -> com.wenwen.chatuidemo.d.b:
    java.lang.String[] hostpital -> a
    java.lang.String[] department -> b
com.wenwen.chatuidemo.utils.HttpClientRequest -> com.wenwen.chatuidemo.d.c:
    com.loopj.android.http.AsyncHttpClient client -> a
    void post(java.lang.String,com.loopj.android.http.RequestParams,int,com.loopj.android.http.AsyncHttpResponseHandler) -> a
com.wenwen.chatuidemo.utils.ImageCache -> com.wenwen.chatuidemo.d.d:
    com.wenwen.chatuidemo.utils.ImageCache imageCache -> a
    android.support.v4.util.LruCache cache -> b
    com.wenwen.chatuidemo.utils.ImageCache getInstance() -> a
    android.graphics.Bitmap put(java.lang.String,android.graphics.Bitmap) -> a
    android.graphics.Bitmap get(java.lang.String) -> a
com.wenwen.chatuidemo.utils.ImageCache$1 -> com.wenwen.chatuidemo.d.e:
    com.wenwen.chatuidemo.utils.ImageCache this$0 -> a
    int sizeOf(java.lang.String,android.graphics.Bitmap) -> a
    int sizeOf(java.lang.Object,java.lang.Object) -> sizeOf
com.wenwen.chatuidemo.utils.ImageUtils -> com.wenwen.chatuidemo.d.f:
    java.lang.String getImagePath(java.lang.String) -> a
    java.lang.String getThumbnailImagePath(java.lang.String) -> b
com.wenwen.chatuidemo.utils.MD5 -> com.wenwen.chatuidemo.d.g:
    java.lang.String md5(java.lang.String) -> a
com.wenwen.chatuidemo.utils.SmileUtils -> com.wenwen.chatuidemo.d.h:
    android.text.Spannable$Factory spannableFactory -> a
    java.util.Map emoticons -> b
    void addPattern(java.util.Map,java.lang.String,int) -> a
    boolean addSmiles(android.content.Context,android.text.Spannable) -> a
    android.text.Spannable getSmiledText(android.content.Context,java.lang.CharSequence) -> a
    boolean containsKey(java.lang.String) -> a
com.wenwen.chatuidemo.utils.StringUtil -> com.wenwen.chatuidemo.d.i:
    java.lang.String getSubString(java.lang.String,int) -> a
com.wenwen.chatuidemo.video.util.AsyncTask -> com.wenwen.chatuidemo.video.util.a:
    java.util.concurrent.ThreadFactory sThreadFactory -> d
    java.util.concurrent.BlockingQueue sPoolWorkQueue -> e
    java.util.concurrent.Executor THREAD_POOL_EXECUTOR -> a
    java.util.concurrent.Executor SERIAL_EXECUTOR -> b
    java.util.concurrent.Executor DUAL_THREAD_EXECUTOR -> c
    com.wenwen.chatuidemo.video.util.AsyncTask$InternalHandler sHandler -> f
    java.util.concurrent.Executor sDefaultExecutor -> g
    com.wenwen.chatuidemo.video.util.AsyncTask$WorkerRunnable mWorker -> h
    java.util.concurrent.FutureTask mFuture -> i
    com.wenwen.chatuidemo.video.util.AsyncTask$Status mStatus -> j
    java.util.concurrent.atomic.AtomicBoolean mCancelled -> k
    java.util.concurrent.atomic.AtomicBoolean mTaskInvoked -> l
    int[] $SWITCH_TABLE$com$wenwen$chatuidemo$video$util$AsyncTask$Status -> m
    void postResultIfNotInvoked(java.lang.Object) -> c
    java.lang.Object postResult(java.lang.Object) -> d
    java.lang.Object doInBackground(java.lang.Object[]) -> a
    void onPreExecute() -> a
    void onPostExecute(java.lang.Object) -> a
    void onProgressUpdate(java.lang.Object[]) -> b
    void onCancelled(java.lang.Object) -> b
    void onCancelled() -> b
    boolean isCancelled() -> c
    boolean cancel(boolean) -> cancel
    com.wenwen.chatuidemo.video.util.AsyncTask execute(java.lang.Object[]) -> c
    com.wenwen.chatuidemo.video.util.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[]) -> a
    void finish(java.lang.Object) -> e
    void access$0(com.wenwen.chatuidemo.video.util.AsyncTask,java.lang.Object) -> a
    java.util.concurrent.atomic.AtomicBoolean access$1(com.wenwen.chatuidemo.video.util.AsyncTask) -> a
    java.lang.Object access$2(com.wenwen.chatuidemo.video.util.AsyncTask,java.lang.Object) -> b
    void access$3(com.wenwen.chatuidemo.video.util.AsyncTask,java.lang.Object) -> c
    int[] $SWITCH_TABLE$com$wenwen$chatuidemo$video$util$AsyncTask$Status() -> d
com.wenwen.chatuidemo.video.util.AsyncTask$1 -> com.wenwen.chatuidemo.video.util.b:
    java.util.concurrent.atomic.AtomicInteger mCount -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.wenwen.chatuidemo.video.util.AsyncTask$2 -> com.wenwen.chatuidemo.video.util.c:
    com.wenwen.chatuidemo.video.util.AsyncTask this$0 -> a
    java.lang.Object call() -> call
com.wenwen.chatuidemo.video.util.AsyncTask$3 -> com.wenwen.chatuidemo.video.util.d:
    com.wenwen.chatuidemo.video.util.AsyncTask this$0 -> a
    void done() -> done
com.wenwen.chatuidemo.video.util.AsyncTask$AsyncTaskResult -> com.wenwen.chatuidemo.video.util.e:
    com.wenwen.chatuidemo.video.util.AsyncTask mTask -> a
    java.lang.Object[] mData -> b
com.wenwen.chatuidemo.video.util.AsyncTask$InternalHandler -> com.wenwen.chatuidemo.video.util.f:
    void handleMessage(android.os.Message) -> handleMessage
com.wenwen.chatuidemo.video.util.AsyncTask$SerialExecutor -> com.wenwen.chatuidemo.video.util.g:
    java.util.ArrayDeque mTasks -> a
    java.lang.Runnable mActive -> b
    void execute(java.lang.Runnable) -> execute
    void scheduleNext() -> a
com.wenwen.chatuidemo.video.util.AsyncTask$SerialExecutor$1 -> com.wenwen.chatuidemo.video.util.h:
    com.wenwen.chatuidemo.video.util.AsyncTask$SerialExecutor this$1 -> a
    java.lang.Runnable val$r -> b
    void run() -> run
com.wenwen.chatuidemo.video.util.AsyncTask$Status -> com.wenwen.chatuidemo.video.util.i:
    com.wenwen.chatuidemo.video.util.AsyncTask$Status PENDING -> a
    com.wenwen.chatuidemo.video.util.AsyncTask$Status RUNNING -> b
    com.wenwen.chatuidemo.video.util.AsyncTask$Status FINISHED -> c
    com.wenwen.chatuidemo.video.util.AsyncTask$Status[] ENUM$VALUES -> d
    com.wenwen.chatuidemo.video.util.AsyncTask$Status[] values() -> values
    com.wenwen.chatuidemo.video.util.AsyncTask$Status valueOf(java.lang.String) -> valueOf
com.wenwen.chatuidemo.video.util.AsyncTask$WorkerRunnable -> com.wenwen.chatuidemo.video.util.j:
    java.lang.Object[] mParams -> b
com.wenwen.chatuidemo.video.util.ImageCache -> com.wenwen.chatuidemo.video.util.ImageCache:
    android.support.v4.util.LruCache mMemoryCache -> a
    com.wenwen.chatuidemo.video.util.ImageCache$ImageCacheParams mCacheParams -> b
    java.util.Set mReusableBitmaps -> c
    com.wenwen.chatuidemo.video.util.ImageCache getInstance(android.support.v4.app.FragmentManager,com.wenwen.chatuidemo.video.util.ImageCache$ImageCacheParams) -> a
    void init(com.wenwen.chatuidemo.video.util.ImageCache$ImageCacheParams) -> a
    void addBitmapToCache(java.lang.String,android.graphics.drawable.BitmapDrawable) -> a
    android.graphics.drawable.BitmapDrawable getBitmapFromMemCache(java.lang.String) -> a
    void clearCache() -> a
    int getBitmapSize(android.graphics.drawable.BitmapDrawable) -> a
    com.wenwen.chatuidemo.video.util.ImageCache$RetainFragment findOrCreateRetainFragment(android.support.v4.app.FragmentManager) -> a
    java.util.Set access$0(com.wenwen.chatuidemo.video.util.ImageCache) -> a
com.wenwen.chatuidemo.video.util.ImageCache$1 -> com.wenwen.chatuidemo.video.util.k:
    com.wenwen.chatuidemo.video.util.ImageCache this$0 -> a
    void entryRemoved(boolean,java.lang.String,android.graphics.drawable.BitmapDrawable,android.graphics.drawable.BitmapDrawable) -> a
    int sizeOf(java.lang.String,android.graphics.drawable.BitmapDrawable) -> a
    int sizeOf(java.lang.Object,java.lang.Object) -> sizeOf
    void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object) -> entryRemoved
com.wenwen.chatuidemo.video.util.ImageCache$ImageCacheParams -> com.wenwen.chatuidemo.video.util.l:
    int memCacheSize -> a
    int compressQuality -> b
    boolean memoryCacheEnabled -> c
    boolean initDiskCacheOnCreate -> d
    void setMemCacheSizePercent(float) -> a
com.wenwen.chatuidemo.video.util.ImageCache$RetainFragment -> com.wenwen.chatuidemo.video.util.ImageCache$RetainFragment:
    java.lang.Object mObject -> a
    void onCreate(android.os.Bundle) -> onCreate
    void setObject(java.lang.Object) -> a
    java.lang.Object getObject() -> a
com.wenwen.chatuidemo.video.util.ImageResizer -> com.wenwen.chatuidemo.video.util.m:
    int mImageWidth -> a
    int mImageHeight -> b
    void setImageSize(int,int) -> a
    void setImageSize(int) -> a
    android.graphics.Bitmap processBitmap(java.lang.Object) -> a
com.wenwen.chatuidemo.video.util.ImageWorker -> com.wenwen.chatuidemo.video.util.n:
    com.wenwen.chatuidemo.video.util.ImageCache mImageCache -> a
    com.wenwen.chatuidemo.video.util.ImageCache$ImageCacheParams mImageCacheParams -> b
    android.graphics.Bitmap mLoadingBitmap -> e
    boolean mFadeInBitmap -> f
    boolean mExitTasksEarly -> g
    boolean mPauseWork -> c
    java.lang.Object mPauseWorkLock -> h
    android.content.res.Resources mResources -> d
    void loadImage(java.lang.Object,android.widget.ImageView) -> a
    void setLoadingImage(int) -> b
    void addImageCache(android.support.v4.app.FragmentManager,com.wenwen.chatuidemo.video.util.ImageCache$ImageCacheParams) -> a
    void setExitTasksEarly(boolean) -> a
    android.graphics.Bitmap processBitmap(java.lang.Object) -> a
    boolean cancelPotentialWork(java.lang.Object,android.widget.ImageView) -> b
    com.wenwen.chatuidemo.video.util.ImageWorker$BitmapWorkerTask getBitmapWorkerTask(android.widget.ImageView) -> b
    void setImageDrawable(android.widget.ImageView,android.graphics.drawable.Drawable) -> a
    void setPauseWork(boolean) -> b
    void clearCacheInternal() -> a
    void clearCache() -> b
    void closeCache() -> c
    java.lang.Object access$0(com.wenwen.chatuidemo.video.util.ImageWorker) -> a
    boolean access$1(com.wenwen.chatuidemo.video.util.ImageWorker) -> b
    com.wenwen.chatuidemo.video.util.ImageCache access$2(com.wenwen.chatuidemo.video.util.ImageWorker) -> c
    void access$3(com.wenwen.chatuidemo.video.util.ImageWorker,android.widget.ImageView,android.graphics.drawable.Drawable) -> a
    com.wenwen.chatuidemo.video.util.ImageWorker$BitmapWorkerTask access$4(android.widget.ImageView) -> a
com.wenwen.chatuidemo.video.util.ImageWorker$AsyncDrawable -> com.wenwen.chatuidemo.video.util.o:
    java.lang.ref.WeakReference bitmapWorkerTaskReference -> a
    com.wenwen.chatuidemo.video.util.ImageWorker$BitmapWorkerTask getBitmapWorkerTask() -> a
com.wenwen.chatuidemo.video.util.ImageWorker$BitmapWorkerTask -> com.wenwen.chatuidemo.video.util.p:
    java.lang.Object mData -> e
    java.lang.ref.WeakReference imageViewReference -> f
    com.wenwen.chatuidemo.video.util.ImageWorker this$0 -> d
    android.graphics.drawable.BitmapDrawable doInBackground(java.lang.Void[]) -> a
    void onPostExecute(android.graphics.drawable.BitmapDrawable) -> a
    void onCancelled(android.graphics.drawable.BitmapDrawable) -> b
    android.widget.ImageView getAttachedImageView() -> e
    void onPostExecute(java.lang.Object) -> a
    void onCancelled(java.lang.Object) -> b
    java.lang.Object doInBackground(java.lang.Object[]) -> a
    java.lang.Object access$3(com.wenwen.chatuidemo.video.util.ImageWorker$BitmapWorkerTask) -> a
com.wenwen.chatuidemo.video.util.ImageWorker$CacheAsyncTask -> com.wenwen.chatuidemo.video.util.q:
    com.wenwen.chatuidemo.video.util.ImageWorker this$0 -> d
    java.lang.Void doInBackground(java.lang.Object[]) -> d
    java.lang.Object doInBackground(java.lang.Object[]) -> a
com.wenwen.chatuidemo.video.util.RecyclingBitmapDrawable -> com.wenwen.chatuidemo.video.util.r:
    int mCacheRefCount -> a
    int mDisplayRefCount -> b
    boolean mHasBeenDisplayed -> c
    void setIsDisplayed(boolean) -> a
    void setIsCached(boolean) -> b
    void checkState() -> a
    boolean hasValidBitmap() -> b
com.wenwen.chatuidemo.video.util.Utils -> com.wenwen.chatuidemo.video.util.s:
    boolean hasHoneycomb() -> a
    boolean hasHoneycombMR1() -> b
    boolean hasJellyBean() -> c
    java.util.List getResolutionList(android.hardware.Camera) -> a
com.wenwen.chatuidemo.video.util.Utils$ResolutionComparator -> com.wenwen.chatuidemo.video.util.t:
    int compare(android.hardware.Camera$Size,android.hardware.Camera$Size) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.wenwen.chatuidemo.widget.ExpandGridView -> com.wenwen.chatuidemo.widget.ExpandGridView:
    void onMeasure(int,int) -> onMeasure
com.wenwen.chatuidemo.widget.PasteEditText -> com.wenwen.chatuidemo.widget.PasteEditText:
    android.content.Context context -> a
    boolean onTextContextMenuItem(int) -> onTextContextMenuItem
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
com.wenwen.chatuidemo.widget.RecyclingImageView -> com.wenwen.chatuidemo.widget.RecyclingImageView:
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setImageDrawable(android.graphics.drawable.Drawable) -> setImageDrawable
    void notifyDrawable(android.graphics.drawable.Drawable,boolean) -> a
com.wenwen.chatuidemo.widget.Sidebar -> com.wenwen.chatuidemo.widget.Sidebar:
    android.graphics.Paint paint -> a
    android.widget.TextView header -> b
    float height -> c
    android.widget.ListView mListView -> d
    android.content.Context context -> e
    java.lang.String[] sections -> f
    void setListView(android.widget.ListView) -> setListView
    void init() -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    int sectionForPoint(float) -> a
    void setHeaderTextAndscroll(android.view.MotionEvent) -> setHeaderTextAndscroll
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
com.wenwen.chatuidemo.widget.photoview.Compat -> com.wenwen.chatuidemo.widget.photoview.a:
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
com.wenwen.chatuidemo.widget.photoview.PhotoView -> com.wenwen.chatuidemo.widget.photoview.PhotoView:
    com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher mAttacher -> a
    android.widget.ImageView$ScaleType mPendingScaleType -> b
    android.graphics.RectF getDisplayRect() -> getDisplayRect
    float getMinScale() -> getMinScale
    float getMidScale() -> getMidScale
    float getMaxScale() -> getMaxScale
    float getScale() -> getScale
    android.widget.ImageView$ScaleType getScaleType() -> getScaleType
    void setAllowParentInterceptOnEdge(boolean) -> setAllowParentInterceptOnEdge
    void setMinScale(float) -> setMinScale
    void setMidScale(float) -> setMidScale
    void setMaxScale(float) -> setMaxScale
    void setImageDrawable(android.graphics.drawable.Drawable) -> setImageDrawable
    void setImageResource(int) -> setImageResource
    void setImageURI(android.net.Uri) -> setImageURI
    void setOnMatrixChangeListener(com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher$OnMatrixChangedListener) -> setOnMatrixChangeListener
    void setOnLongClickListener(android.view.View$OnLongClickListener) -> setOnLongClickListener
    void setOnPhotoTapListener(com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher$OnPhotoTapListener) -> setOnPhotoTapListener
    void setOnViewTapListener(com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher$OnViewTapListener) -> setOnViewTapListener
    void setScaleType(android.widget.ImageView$ScaleType) -> setScaleType
    void setZoomable(boolean) -> setZoomable
    void onDetachedFromWindow() -> onDetachedFromWindow
com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher -> com.wenwen.chatuidemo.widget.photoview.b:
    boolean DEBUG -> a
    float mMinScale -> b
    float mMaxScale -> c
    boolean mAllowParentInterceptOnEdge -> d
    java.lang.ref.WeakReference mImageView -> e
    android.view.ViewTreeObserver mViewTreeObserver -> f
    android.view.GestureDetector mGestureDetector -> g
    com.wenwen.chatuidemo.widget.photoview.VersionedGestureDetector mScaleDragDetector -> h
    android.graphics.Matrix mBaseMatrix -> i
    android.graphics.Matrix mDrawMatrix -> j
    android.graphics.Matrix mSuppMatrix -> k
    android.graphics.RectF mDisplayRect -> l
    float[] mMatrixValues -> m
    com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher$OnMatrixChangedListener mMatrixChangeListener -> n
    com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher$OnPhotoTapListener mPhotoTapListener -> o
    com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher$OnViewTapListener mViewTapListener -> p
    android.view.View$OnLongClickListener mLongClickListener -> q
    int mIvTop -> r
    int mIvRight -> s
    int mIvBottom -> t
    int mIvLeft -> u
    com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher$FlingRunnable mCurrentFlingRunnable -> v
    int mScrollEdge -> w
    boolean mZoomEnabled -> x
    android.widget.ImageView$ScaleType mScaleType -> y
    int[] $SWITCH_TABLE$android$widget$ImageView$ScaleType -> z
    void checkZoomLevels(float,float) -> b
    boolean hasDrawable(android.widget.ImageView) -> a
    boolean isSupportedScaleType(android.widget.ImageView$ScaleType) -> b
    void setImageViewScaleTypeMatrix(android.widget.ImageView) -> b
    void cleanup() -> a
    android.graphics.RectF getDisplayRect() -> b
    android.widget.ImageView getImageView() -> c
    float getMinScale() -> d
    float getMaxScale() -> e
    float getScale() -> f
    android.widget.ImageView$ScaleType getScaleType() -> g
    boolean onDoubleTap(android.view.MotionEvent) -> onDoubleTap
    boolean onDoubleTapEvent(android.view.MotionEvent) -> onDoubleTapEvent
    void onDrag(float,float) -> a
    void onFling(float,float,float,float) -> a
    void onGlobalLayout() -> onGlobalLayout
    void onScale(float,float,float) -> a
    boolean onSingleTapConfirmed(android.view.MotionEvent) -> onSingleTapConfirmed
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void setAllowParentInterceptOnEdge(boolean) -> a
    void setMinScale(float) -> a
    void setMaxScale(float) -> b
    void setOnLongClickListener(android.view.View$OnLongClickListener) -> a
    void setOnMatrixChangeListener(com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher$OnMatrixChangedListener) -> a
    void setOnPhotoTapListener(com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher$OnPhotoTapListener) -> a
    void setOnViewTapListener(com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher$OnViewTapListener) -> a
    void setScaleType(android.widget.ImageView$ScaleType) -> a
    void setZoomable(boolean) -> b
    void update() -> h
    void zoomTo(float,float,float) -> b
    android.graphics.Matrix getDisplayMatrix() -> i
    void cancelFling() -> l
    void checkAndDisplayMatrix() -> m
    void checkImageViewScaleType() -> n
    void checkMatrixBounds() -> o
    android.graphics.RectF getDisplayRect(android.graphics.Matrix) -> a
    float getValue(android.graphics.Matrix,int) -> a
    void resetMatrix() -> p
    void setImageViewMatrix(android.graphics.Matrix) -> b
    void updateBaseMatrix(android.graphics.drawable.Drawable) -> a
    float getMidScale() -> j
    void setMidScale(float) -> c
    android.graphics.Matrix access$0(com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher) -> a
    void access$1(com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher) -> b
    void access$2(com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher,android.graphics.Matrix) -> a
    int[] $SWITCH_TABLE$android$widget$ImageView$ScaleType() -> k
    android.view.View$OnLongClickListener access$4(com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher) -> c
    java.lang.ref.WeakReference access$5(com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher) -> d
com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher$1 -> com.wenwen.chatuidemo.widget.photoview.c:
    com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher this$0 -> a
    void onLongPress(android.view.MotionEvent) -> onLongPress
com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher$AnimatedZoomRunnable -> com.wenwen.chatuidemo.widget.photoview.d:
    float mFocalX -> b
    float mFocalY -> c
    float mTargetZoom -> d
    float mDeltaScale -> e
    com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher this$0 -> a
    void run() -> run
com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher$FlingRunnable -> com.wenwen.chatuidemo.widget.photoview.e:
    com.wenwen.chatuidemo.widget.photoview.ScrollerProxy mScroller -> b
    int mCurrentX -> c
    int mCurrentY -> d
    com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher this$0 -> a
    void cancelFling() -> a
    void fling(int,int,int,int) -> a
    void run() -> run
com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher$OnMatrixChangedListener -> com.wenwen.chatuidemo.widget.photoview.f:
    void onMatrixChanged(android.graphics.RectF) -> a
com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher$OnPhotoTapListener -> com.wenwen.chatuidemo.widget.photoview.g:
    void onPhotoTap(android.view.View,float,float) -> a
com.wenwen.chatuidemo.widget.photoview.PhotoViewAttacher$OnViewTapListener -> com.wenwen.chatuidemo.widget.photoview.h:
    void onViewTap(android.view.View,float,float) -> a
com.wenwen.chatuidemo.widget.photoview.SDK16 -> com.wenwen.chatuidemo.widget.photoview.i:
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
com.wenwen.chatuidemo.widget.photoview.ScrollerProxy -> com.wenwen.chatuidemo.widget.photoview.j:
    com.wenwen.chatuidemo.widget.photoview.ScrollerProxy getScroller(android.content.Context) -> a
    boolean computeScrollOffset() -> a
    void fling(int,int,int,int,int,int,int,int,int,int) -> a
    void forceFinished(boolean) -> a
    int getCurrX() -> b
    int getCurrY() -> c
com.wenwen.chatuidemo.widget.photoview.ScrollerProxy$GingerScroller -> com.wenwen.chatuidemo.widget.photoview.k:
    android.widget.OverScroller mScroller -> a
    boolean computeScrollOffset() -> a
    void fling(int,int,int,int,int,int,int,int,int,int) -> a
    void forceFinished(boolean) -> a
    int getCurrX() -> b
    int getCurrY() -> c
com.wenwen.chatuidemo.widget.photoview.ScrollerProxy$PreGingerScroller -> com.wenwen.chatuidemo.widget.photoview.l:
    android.widget.Scroller mScroller -> a
    boolean computeScrollOffset() -> a
    void fling(int,int,int,int,int,int,int,int,int,int) -> a
    void forceFinished(boolean) -> a
    int getCurrX() -> b
    int getCurrY() -> c
com.wenwen.chatuidemo.widget.photoview.VersionedGestureDetector -> com.wenwen.chatuidemo.widget.photoview.m:
    com.wenwen.chatuidemo.widget.photoview.VersionedGestureDetector$OnGestureListener mListener -> a
    com.wenwen.chatuidemo.widget.photoview.VersionedGestureDetector newInstance(android.content.Context,com.wenwen.chatuidemo.widget.photoview.VersionedGestureDetector$OnGestureListener) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> a
    boolean isScaling() -> a
com.wenwen.chatuidemo.widget.photoview.VersionedGestureDetector$CupcakeDetector -> com.wenwen.chatuidemo.widget.photoview.n:
    float mLastTouchX -> b
    float mLastTouchY -> c
    float mTouchSlop -> d
    float mMinimumVelocity -> e
    android.view.VelocityTracker mVelocityTracker -> f
    boolean mIsDragging -> g
    float getActiveX(android.view.MotionEvent) -> b
    float getActiveY(android.view.MotionEvent) -> c
    boolean isScaling() -> a
    boolean onTouchEvent(android.view.MotionEvent) -> a
com.wenwen.chatuidemo.widget.photoview.VersionedGestureDetector$EclairDetector -> com.wenwen.chatuidemo.widget.photoview.o:
    int mActivePointerId -> f
    int mActivePointerIndex -> g
    float getActiveX(android.view.MotionEvent) -> b
    float getActiveY(android.view.MotionEvent) -> c
    boolean onTouchEvent(android.view.MotionEvent) -> a
com.wenwen.chatuidemo.widget.photoview.VersionedGestureDetector$FroyoDetector -> com.wenwen.chatuidemo.widget.photoview.p:
    android.view.ScaleGestureDetector mDetector -> f
    android.view.ScaleGestureDetector$OnScaleGestureListener mScaleListener -> g
    boolean isScaling() -> a
    boolean onTouchEvent(android.view.MotionEvent) -> a
com.wenwen.chatuidemo.widget.photoview.VersionedGestureDetector$FroyoDetector$1 -> com.wenwen.chatuidemo.widget.photoview.q:
    com.wenwen.chatuidemo.widget.photoview.VersionedGestureDetector$FroyoDetector this$1 -> a
    boolean onScale(android.view.ScaleGestureDetector) -> onScale
    boolean onScaleBegin(android.view.ScaleGestureDetector) -> onScaleBegin
    void onScaleEnd(android.view.ScaleGestureDetector) -> onScaleEnd
com.wenwen.chatuidemo.widget.photoview.VersionedGestureDetector$OnGestureListener -> com.wenwen.chatuidemo.widget.photoview.r:
    void onDrag(float,float) -> a
    void onFling(float,float,float,float) -> a
    void onScale(float,float,float) -> a
com.xonami.javaBells.DefaultJingleSession -> com.d.a.a:
    com.xonami.javaBells.JinglePacketHandler jinglePacketHandler -> jinglePacketHandler
    java.lang.String myJid -> myJid
    java.lang.String sessionId -> sessionId
    org.jivesoftware.smack.XMPPConnection connection -> connection
    com.xonami.javaBells.DefaultJingleSession$SessionState state -> state
    java.lang.String peerJid -> peerJid
    boolean checkAndAck(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> checkAndAck
    boolean check(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> check
    void closeSession(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason) -> closeSession
    void ack(org.jivesoftware.smack.packet.IQ) -> ack
    void unsupportedInfo(org.jivesoftware.smack.packet.IQ) -> unsupportedInfo
    void handleContentAcept(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleContentAcept
    void handleContentAdd(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleContentAdd
    void handleContentModify(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleContentModify
    void handleContentReject(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleContentReject
    void handleContentRemove(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleContentRemove
    void handleDescriptionInfo(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleDescriptionInfo
    void handleSecurityInfo(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleSecurityInfo
    void handleSessionAccept(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleSessionAccept
    void handleSessionInfo(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleSessionInfo
    void handleSessionInitiate(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleSessionInitiate
    void handleSessionTerminate(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleSessionTerminate
    void handleTransportAccept(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleTransportAccept
    void handleTransportInfo(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleTransportInfo
    void handleTransportReject(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleTransportReject
    void handleSessionReplace(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleSessionReplace
    java.lang.String getSessionId() -> getSessionId
com.xonami.javaBells.DefaultJingleSession$1 -> com.d.a.b:
    com.xonami.javaBells.DefaultJingleSession this$0 -> a
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
com.xonami.javaBells.DefaultJingleSession$SessionState -> com.d.a.c:
    com.xonami.javaBells.DefaultJingleSession$SessionState NEW -> a
    com.xonami.javaBells.DefaultJingleSession$SessionState NEGOTIATING_TRANSPORT -> b
    com.xonami.javaBells.DefaultJingleSession$SessionState OPEN -> c
    com.xonami.javaBells.DefaultJingleSession$SessionState CLOSED -> d
    com.xonami.javaBells.DefaultJingleSession$SessionState[] $VALUES -> e
    com.xonami.javaBells.DefaultJingleSession$SessionState[] values() -> values
    com.xonami.javaBells.DefaultJingleSession$SessionState valueOf(java.lang.String) -> valueOf
com.xonami.javaBells.IceAgent -> com.d.a.d:
    java.security.SecureRandom random -> a
    int candidateId -> c
    int streamPort -> b
    org.ice4j.ice.Agent agent -> d
    void createStreams(java.util.Collection) -> a
    org.ice4j.ice.Agent getAgent() -> a
    void addAgentStateChangeListener(java.beans.PropertyChangeListener) -> a
    java.util.List getStreamNames() -> b
    void freeAgent() -> c
    void addRemoteCandidates(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> a
    void startConnectivityEstablishment() -> d
    void addLocalCandidateToContents(java.util.List) -> a
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.IceUdpTransportPacketExtension getLocalCandidatePacketExtensionForStream(java.lang.String) -> a
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CandidateType convertType(org.ice4j.ice.CandidateType) -> a
    org.ice4j.ice.CandidateType convertType(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CandidateType) -> a
    void createStream(java.lang.String) -> b
    int getStreamPort() -> e
    java.lang.String nextCandidateId() -> f
com.xonami.javaBells.JingleManager -> com.d.a.e:
    boolean enabled -> a
    void enableJingle() -> a
com.xonami.javaBells.JingleManager$1 -> com.d.a.f:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
com.xonami.javaBells.JinglePacketHandler -> com.d.a.g:
    java.util.HashMap jingleSessions -> jingleSessions
    java.util.HashMap deadSessions -> deadSessions
    org.jivesoftware.smack.XMPPConnection connection -> connection
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    com.xonami.javaBells.JingleSession removeJingleSession(com.xonami.javaBells.JingleSession) -> removeJingleSession
    com.xonami.javaBells.JingleSession createInitateJingleSession(java.lang.String) -> createInitateJingleSession
    com.xonami.javaBells.JingleSession createJingleSession(java.lang.String,net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> createJingleSession
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
    void clear() -> clear
com.xonami.javaBells.JinglePacketHandler$1 -> com.d.a.h:
    int[] $SwitchMap$net$java$sip$communicator$impl$protocol$jabber$extensions$jingle$JingleAction -> a
com.xonami.javaBells.JingleSession -> com.d.a.i:
    void handleContentAcept(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleContentAcept
    void handleContentAdd(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleContentAdd
    void handleContentModify(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleContentModify
    void handleContentReject(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleContentReject
    void handleContentRemove(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleContentRemove
    void handleDescriptionInfo(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleDescriptionInfo
    void handleSecurityInfo(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleSecurityInfo
    void handleSessionAccept(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleSessionAccept
    void handleSessionInfo(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleSessionInfo
    void handleSessionInitiate(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleSessionInitiate
    void handleSessionTerminate(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleSessionTerminate
    void handleTransportAccept(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleTransportAccept
    void handleTransportInfo(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleTransportInfo
    void handleTransportReject(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleTransportReject
    void handleSessionReplace(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> handleSessionReplace
    java.lang.String getSessionId() -> getSessionId
com.xonami.javaBells.MediaType -> com.d.a.j:
    com.xonami.javaBells.MediaType Audio -> a
    com.xonami.javaBells.MediaType Video -> b
    com.xonami.javaBells.MediaType[] $VALUES -> c
    com.xonami.javaBells.MediaType[] values() -> values
    com.xonami.javaBells.MediaType valueOf(java.lang.String) -> valueOf
com.xonami.javaBells.StunTurnAddress -> com.d.a.k:
    org.ice4j.TransportAddress[] stunAddresses -> a
    org.ice4j.TransportAddress[] turnAddresses -> b
    java.lang.String[] hosts -> c
    java.util.HashMap hostToAddressMap -> d
    com.xonami.javaBells.StunTurnAddress getAddress(org.ice4j.TransportAddress[],org.ice4j.TransportAddress[]) -> a
de.measite.smack.AndroidDebugger -> a.a.a.a:
    boolean printInterpreted -> a
    org.jivesoftware.smack.Connection connection -> b
    org.jivesoftware.smack.PacketListener listener -> c
    org.jivesoftware.smack.ConnectionListener connListener -> d
    java.io.Writer writer -> e
    java.io.Reader reader -> f
    org.jivesoftware.smack.util.ReaderListener readerListener -> g
    org.jivesoftware.smack.util.WriterListener writerListener -> h
    java.io.Reader newConnectionReader(java.io.Reader) -> newConnectionReader
    java.io.Writer newConnectionWriter(java.io.Writer) -> newConnectionWriter
    void userHasLogged(java.lang.String) -> userHasLogged
    java.io.Reader getReader() -> getReader
    java.io.Writer getWriter() -> getWriter
    org.jivesoftware.smack.PacketListener getReaderListener() -> getReaderListener
    org.jivesoftware.smack.PacketListener getWriterListener() -> getWriterListener
de.measite.smack.Sasl -> a.a.a.b:
    java.util.Enumeration getSaslClientFactories() -> a
    org.apache.harmony.javax.security.sasl.SaslClient createSaslClient(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> a
de.measite.smack.SaslClientFactory -> a.a.a.c:
    org.apache.harmony.javax.security.sasl.SaslClient createSaslClient(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> createSaslClient
    java.lang.String[] getMechanismNames(java.util.Map) -> getMechanismNames
gov.nist.core.GenericObject -> b.a.a.a:
    java.lang.String SEMICOLON -> SEMICOLON
    java.lang.String COLON -> COLON
    java.lang.String COMMA -> COMMA
    java.lang.String SLASH -> SLASH
    java.lang.String SP -> SP
    java.lang.String EQUALS -> EQUALS
    java.lang.String STAR -> STAR
    java.lang.String NEWLINE -> NEWLINE
    java.lang.String RETURN -> RETURN
    java.lang.String LESS_THAN -> LESS_THAN
    java.lang.String GREATER_THAN -> GREATER_THAN
    java.lang.String AT -> AT
    java.lang.String DOT -> DOT
    java.lang.String QUESTION -> QUESTION
    java.lang.String POUND -> POUND
    java.lang.String AND -> AND
    java.lang.String LPAREN -> LPAREN
    java.lang.String RPAREN -> RPAREN
    java.lang.String DOUBLE_QUOTE -> DOUBLE_QUOTE
    java.lang.String QUOTE -> QUOTE
    java.lang.String HT -> HT
    java.lang.String PERCENT -> PERCENT
    java.util.Set immutableClasses -> immutableClasses
    java.lang.String[] immutableClassNames -> immutableClassNames
    int indentation -> indentation
    java.lang.String stringRepresentation -> stringRepresentation
    gov.nist.core.Match matchExpression -> matchExpression
    void setMatcher(gov.nist.core.Match) -> setMatcher
    gov.nist.core.Match getMatcher() -> getMatcher
    java.lang.Class getClassFromName(java.lang.String) -> getClassFromName
    boolean isMySubclass(java.lang.Class) -> isMySubclass
    java.lang.Object makeClone(java.lang.Object) -> makeClone
    java.lang.Object clone() -> clone
    void merge(java.lang.Object) -> merge
    java.lang.String getIndentation() -> getIndentation
    void sprint(java.lang.String) -> sprint
    void sprint(java.lang.Object) -> sprint
    void sprint(int) -> sprint
    void sprint(short) -> sprint
    void sprint(char) -> sprint
    void sprint(long) -> sprint
    void sprint(boolean) -> sprint
    void sprint(double) -> sprint
    void sprint(float) -> sprint
    void dbgPrint() -> dbgPrint
    void dbgPrint(java.lang.String) -> dbgPrint
    boolean equals(java.lang.Object) -> equals
    boolean match(java.lang.Object) -> match
    java.lang.String debugDump() -> debugDump
    java.lang.String debugDump(int) -> debugDump
    java.lang.String encode() -> encode
    java.lang.StringBuilder encode(java.lang.StringBuilder) -> encode
gov.nist.core.GenericObjectList -> b.a.a.b:
    int indentation -> a
    java.lang.String listName -> b
    java.util.ListIterator myListIterator -> d
    java.lang.String stringRep -> e
    java.lang.Class myClass -> c
    java.lang.String getIndentation() -> a
    boolean isMySubclass(java.lang.Class) -> a
    java.lang.Object clone() -> clone
    gov.nist.core.GenericObject first() -> b
    gov.nist.core.GenericObject next() -> c
    void sprint(java.lang.String) -> a
    java.lang.String debugDump() -> d
    java.lang.String debugDump(int) -> a
    void addFirst(gov.nist.core.GenericObject) -> a
    java.lang.String encode() -> e
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean match(java.lang.Object) -> a
    void addFirst(java.lang.Object) -> addFirst
gov.nist.core.InternalErrorHandler -> b.a.a.c:
    void handleException(java.lang.Exception) -> a
gov.nist.core.Match -> b.a.a.d:
    boolean match(java.lang.String) -> a
gov.nist.core.NameValue -> b.a.a.e:
    boolean isQuotedString -> a
    boolean isFlagParameter -> b
    java.lang.String separator -> c
    java.lang.String quotes -> d
    java.lang.String name -> e
    java.lang.Object value -> f
    void setSeparator(java.lang.String) -> a
    java.lang.String getName() -> a
    java.lang.Object getValueAsObject() -> b
    void setName(java.lang.String) -> b
    void setValueAsObject(java.lang.Object) -> a
    java.lang.String encode() -> encode
    java.lang.StringBuilder encode(java.lang.StringBuilder) -> encode
    java.lang.Object clone() -> clone
    boolean equals(java.lang.Object) -> equals
    java.lang.String getKey() -> c
    java.lang.String getValue() -> d
    java.lang.String setValue(java.lang.String) -> c
    int hashCode() -> hashCode
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
gov.nist.javax.sdp.fields.AttributeField -> b.a.b.a.a.a:
    gov.nist.core.NameValue attribute -> attribute
    gov.nist.core.NameValue getAttribute() -> getAttribute
    void setAttribute(gov.nist.core.NameValue) -> setAttribute
    java.lang.String encode() -> encode
    java.lang.String toString() -> toString
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    boolean hasValue() -> hasValue
    java.lang.String getValue() -> getValue
    void setValue(java.lang.String) -> setValue
    void setValueAllowNull(java.lang.String) -> setValueAllowNull
    java.lang.Object clone() -> clone
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
gov.nist.javax.sdp.fields.SDPField -> b.a.b.a.a.b:
    java.lang.String fieldName -> fieldName
    java.lang.String encode() -> encode
    java.lang.String getFieldName() -> getFieldName
    char getTypeChar() -> getTypeChar
    java.lang.String toString() -> toString
gov.nist.javax.sdp.fields.SDPObject -> b.a.b.a.a.c:
    java.lang.String SDPFIELDS_PACKAGE -> SDPFIELDS_PACKAGE
    java.lang.String CORE_PACKAGE -> CORE_PACKAGE
    java.lang.String encode() -> encode
    void sprint(java.lang.String) -> sprint
    void initSprint() -> initSprint
    java.lang.String toString() -> toString
    java.lang.String getStringRepresentation() -> getStringRepresentation
    boolean equals(java.lang.Object) -> equals
    java.lang.String debugDump() -> debugDump
    boolean match(java.lang.Object) -> match
    java.lang.String dbgPrint(int) -> dbgPrint
internal.org.apache.http.entity.mime.FormBodyPart -> c.a.a.a.a.a.a:
    java.lang.String name -> a
    internal.org.apache.http.entity.mime.Header header -> b
    internal.org.apache.http.entity.mime.content.ContentBody body -> c
    java.lang.String getName() -> a
    internal.org.apache.http.entity.mime.content.ContentBody getBody() -> b
    internal.org.apache.http.entity.mime.Header getHeader() -> c
    void addField(java.lang.String,java.lang.String) -> a
    void generateContentDisp(internal.org.apache.http.entity.mime.content.ContentBody) -> a
    void generateContentType(internal.org.apache.http.entity.mime.content.ContentBody) -> b
    void generateTransferEncoding(internal.org.apache.http.entity.mime.content.ContentBody) -> c
internal.org.apache.http.entity.mime.Header -> c.a.a.a.a.a.b:
    java.util.List fields -> a
    java.util.Map fieldMap -> b
    void addField(internal.org.apache.http.entity.mime.MinimalField) -> a
    internal.org.apache.http.entity.mime.MinimalField getField(java.lang.String) -> a
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
internal.org.apache.http.entity.mime.HttpMultipart -> c.a.a.a.a.a.c:
    org.apache.http.util.ByteArrayBuffer FIELD_SEP -> a
    org.apache.http.util.ByteArrayBuffer CR_LF -> b
    org.apache.http.util.ByteArrayBuffer TWO_DASHES -> c
    java.lang.String subType -> d
    java.nio.charset.Charset charset -> e
    java.lang.String boundary -> f
    java.util.List parts -> g
    internal.org.apache.http.entity.mime.HttpMultipartMode mode -> h
    org.apache.http.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String) -> a
    void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream) -> a
    void writeBytes(java.lang.String,java.nio.charset.Charset,java.io.OutputStream) -> a
    void writeBytes(java.lang.String,java.io.OutputStream) -> a
    void writeField(internal.org.apache.http.entity.mime.MinimalField,java.io.OutputStream) -> a
    void writeField(internal.org.apache.http.entity.mime.MinimalField,java.nio.charset.Charset,java.io.OutputStream) -> a
    java.util.List getBodyParts() -> a
    void addBodyPart(internal.org.apache.http.entity.mime.FormBodyPart) -> a
    java.lang.String getBoundary() -> b
    void doWriteTo(internal.org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean) -> a
    void writeTo(java.io.OutputStream) -> a
    long getTotalLength() -> c
internal.org.apache.http.entity.mime.HttpMultipart$1 -> c.a.a.a.a.a.d:
    int[] $SwitchMap$internal$org$apache$http$entity$mime$HttpMultipartMode -> a
internal.org.apache.http.entity.mime.HttpMultipartMode -> c.a.a.a.a.a.e:
    internal.org.apache.http.entity.mime.HttpMultipartMode STRICT -> a
    internal.org.apache.http.entity.mime.HttpMultipartMode BROWSER_COMPATIBLE -> b
    internal.org.apache.http.entity.mime.HttpMultipartMode[] $VALUES -> c
    internal.org.apache.http.entity.mime.HttpMultipartMode[] values() -> values
    internal.org.apache.http.entity.mime.HttpMultipartMode valueOf(java.lang.String) -> valueOf
internal.org.apache.http.entity.mime.MIME -> c.a.a.a.a.a.f:
    java.nio.charset.Charset DEFAULT_CHARSET -> a
internal.org.apache.http.entity.mime.MinimalField -> c.a.a.a.a.a.g:
    java.lang.String name -> a
    java.lang.String value -> b
    java.lang.String getName() -> a
    java.lang.String getBody() -> b
    java.lang.String toString() -> toString
internal.org.apache.http.entity.mime.MultipartEntity -> c.a.a.a.a.a.h:
    char[] MULTIPART_CHARS -> MULTIPART_CHARS
    internal.org.apache.http.entity.mime.HttpMultipart multipart -> multipart
    org.apache.http.Header contentType -> contentType
    long length -> length
    boolean dirty -> dirty
    java.lang.String generateContentType(java.lang.String,java.nio.charset.Charset) -> generateContentType
    java.lang.String generateBoundary() -> generateBoundary
    void addPart(internal.org.apache.http.entity.mime.FormBodyPart) -> addPart
    void addPart(java.lang.String,internal.org.apache.http.entity.mime.content.ContentBody) -> addPart
    boolean isRepeatable() -> isRepeatable
    boolean isChunked() -> isChunked
    boolean isStreaming() -> isStreaming
    long getContentLength() -> getContentLength
    void consumeContent() -> consumeContent
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    org.apache.http.Header getContentType() -> getContentType
internal.org.apache.http.entity.mime.content.AbstractContentBody -> c.a.a.a.a.a.a.a:
    java.lang.String mimeType -> a
    java.lang.String mediaType -> b
    java.lang.String subType -> c
    java.lang.String getMimeType() -> a
internal.org.apache.http.entity.mime.content.ContentBody -> c.a.a.a.a.a.a.b:
    java.lang.String getFilename() -> b
    void writeTo(java.io.OutputStream) -> a
internal.org.apache.http.entity.mime.content.ContentDescriptor -> c.a.a.a.a.a.a.c:
    java.lang.String getMimeType() -> a
    java.lang.String getCharset() -> c
    java.lang.String getTransferEncoding() -> d
    long getContentLength() -> e
internal.org.apache.http.entity.mime.content.FileBody -> c.a.a.a.a.a.a.d:
    java.io.File file -> a
    java.lang.String filename -> b
    java.lang.String charset -> c
    void writeTo(java.io.OutputStream) -> a
    java.lang.String getTransferEncoding() -> d
    java.lang.String getCharset() -> c
    long getContentLength() -> e
    java.lang.String getFilename() -> b
internal.org.apache.http.entity.mime.content.StringBody -> c.a.a.a.a.a.a.e:
    byte[] content -> a
    java.nio.charset.Charset charset -> b
    void writeTo(java.io.OutputStream) -> a
    java.lang.String getTransferEncoding() -> d
    java.lang.String getCharset() -> c
    long getContentLength() -> e
    java.lang.String getFilename() -> b
javax.sdp.Attribute -> d.a.a:
javax.sdp.Field -> d.a.b:
javax.sdp.SdpException -> d.a.c:
javax.sdp.SdpParseException -> d.a.d:
    java.lang.String getMessage() -> getMessage
net.java.sip.communicator.impl.protocol.jabber.extensions.AbstractPacketExtension -> net.java.sip.communicator.impl.protocol.jabber.extensions.AbstractPacketExtension:
    java.lang.String namespace -> namespace
    java.lang.String elementName -> elementName
    java.util.Map attributes -> attributes
    java.lang.String textContent -> textContent
    java.util.List childExtensions -> childExtensions
    java.lang.String getElementName() -> getElementName
    void setNamespace(java.lang.String) -> setNamespace
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
    java.util.List getChildExtensions() -> getChildExtensions
    void addChildExtension(org.jivesoftware.smack.packet.PacketExtension) -> addChildExtension
    void setAttribute(java.lang.String,java.lang.Object) -> setAttribute
    void removeAttribute(java.lang.String) -> removeAttribute
    java.lang.Object getAttribute(java.lang.String) -> getAttribute
    java.lang.String getAttributeAsString(java.lang.String) -> getAttributeAsString
    int getAttributeAsInt(java.lang.String) -> getAttributeAsInt
    int getAttributeAsInt(java.lang.String,int) -> getAttributeAsInt
    java.net.URI getAttributeAsURI(java.lang.String) -> getAttributeAsURI
    java.util.List getAttributeNames() -> getAttributeNames
    void setText(java.lang.String) -> setText
    java.lang.String getText() -> getText
    org.jivesoftware.smack.packet.PacketExtension getFirstChildOfType(java.lang.Class) -> getFirstChildOfType
    java.util.List getChildExtensionsOfType(java.lang.Class) -> getChildExtensionsOfType
net.java.sip.communicator.impl.protocol.jabber.extensions.DefaultPacketExtensionProvider -> net.java.sip.communicator.impl.protocol.jabber.extensions.DefaultPacketExtensionProvider:
    java.util.logging.Logger logger -> logger
    java.lang.Class packetClass -> packetClass
    net.java.sip.communicator.impl.protocol.jabber.extensions.AbstractPacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.BandwidthPacketExtension -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.BandwidthPacketExtension:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String TYPE_ATTR_NAME -> TYPE_ATTR_NAME
    void setType(java.lang.String) -> setType
    java.lang.String getType() -> getType
    void setBandwidth(java.lang.String) -> setBandwidth
    java.lang.String getBandwidth() -> getBandwidth
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CandidatePacketExtension -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CandidatePacketExtension:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String COMPONENT_ATTR_NAME -> COMPONENT_ATTR_NAME
    int RTP_COMPONENT_ID -> RTP_COMPONENT_ID
    int RTCP_COMPONENT_ID -> RTCP_COMPONENT_ID
    java.lang.String FOUNDATION_ATTR_NAME -> FOUNDATION_ATTR_NAME
    java.lang.String GENERATION_ATTR_NAME -> GENERATION_ATTR_NAME
    java.lang.String ID_ATTR_NAME -> ID_ATTR_NAME
    java.lang.String IP_ATTR_NAME -> IP_ATTR_NAME
    java.lang.String NETWORK_ATTR_NAME -> NETWORK_ATTR_NAME
    java.lang.String PORT_ATTR_NAME -> PORT_ATTR_NAME
    java.lang.String PRIORITY_ATTR_NAME -> PRIORITY_ATTR_NAME
    java.lang.String PROTOCOL_ATTR_NAME -> PROTOCOL_ATTR_NAME
    java.lang.String REL_ADDR_ATTR_NAME -> REL_ADDR_ATTR_NAME
    java.lang.String REL_PORT_ATTR_NAME -> REL_PORT_ATTR_NAME
    java.lang.String TYPE_ATTR_NAME -> TYPE_ATTR_NAME
    void setComponent(int) -> setComponent
    int getComponent() -> getComponent
    void setFoundation(java.lang.String) -> setFoundation
    java.lang.String getFoundation() -> getFoundation
    void setGeneration(int) -> setGeneration
    int getGeneration() -> getGeneration
    void setID(java.lang.String) -> setID
    java.lang.String getID() -> getID
    void setIP(java.lang.String) -> setIP
    java.lang.String getIP() -> getIP
    void setNetwork(int) -> setNetwork
    int getNetwork() -> getNetwork
    void setPort(int) -> setPort
    int getPort() -> getPort
    void setPriority(long) -> setPriority
    int getPriority() -> getPriority
    void setProtocol(java.lang.String) -> setProtocol
    java.lang.String getProtocol() -> getProtocol
    void setRelAddr(java.lang.String) -> setRelAddr
    java.lang.String getRelAddr() -> getRelAddr
    void setRelPort(int) -> setRelPort
    int getRelPort() -> getRelPort
    void setType(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CandidateType) -> setType
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CandidateType getType() -> getType
    int compareTo(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CandidatePacketExtension) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CandidateType -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CandidateType:
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CandidateType host -> host
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CandidateType prflx -> prflx
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CandidateType relay -> relay
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CandidateType srflx -> srflx
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CandidateType stun -> stun
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CandidateType local -> local
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CandidateType[] $VALUES -> $VALUES
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CandidateType[] values() -> values
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CandidateType valueOf(java.lang.String) -> valueOf
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CoinPacketExtension -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CoinPacketExtension:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ISFOCUS_ATTR_NAME -> ISFOCUS_ATTR_NAME
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String CREATOR_ATTR_NAME -> CREATOR_ATTR_NAME
    java.lang.String DISPOSITION_ATTR_NAME -> DISPOSITION_ATTR_NAME
    java.lang.String NAME_ATTR_NAME -> NAME_ATTR_NAME
    java.lang.String SENDERS_ATTR_NAME -> SENDERS_ATTR_NAME
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$CreatorEnum getCreator() -> getCreator
    void setCreator(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$CreatorEnum) -> setCreator
    java.lang.String getDisposition() -> getDisposition
    void setDisposition(java.lang.String) -> setDisposition
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$SendersEnum getSenders() -> getSenders
    void setSenders(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$SendersEnum) -> setSenders
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$CreatorEnum -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$CreatorEnum:
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$CreatorEnum initiator -> initiator
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$CreatorEnum responder -> responder
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$CreatorEnum[] $VALUES -> $VALUES
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$CreatorEnum[] values() -> values
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$CreatorEnum valueOf(java.lang.String) -> valueOf
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$SendersEnum -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$SendersEnum:
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$SendersEnum initiator -> initiator
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$SendersEnum none -> none
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$SendersEnum responder -> responder
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$SendersEnum both -> both
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$SendersEnum[] $VALUES -> $VALUES
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$SendersEnum[] values() -> values
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$SendersEnum valueOf(java.lang.String) -> valueOf
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CryptoPacketExtension -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CryptoPacketExtension:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String CRYPTO_SUITE_ATTR_NAME -> CRYPTO_SUITE_ATTR_NAME
    java.lang.String KEY_PARAMS_ATTR_NAME -> KEY_PARAMS_ATTR_NAME
    java.lang.String SESSION_PARAMS_ATTR_NAME -> SESSION_PARAMS_ATTR_NAME
    java.lang.String TAG_ATTR_NAME -> TAG_ATTR_NAME
    void initialize(a.a.a.a.g) -> initialize
    void setCryptoSuite(java.lang.String) -> setCryptoSuite
    java.lang.String getCryptoSuite() -> getCryptoSuite
    boolean equalsCryptoSuite(java.lang.String) -> equalsCryptoSuite
    void setKeyParams(java.lang.String) -> setKeyParams
    java.lang.String getKeyParams() -> getKeyParams
    boolean equalsKeyParams(java.lang.String) -> equalsKeyParams
    void setSessionParams(java.lang.String) -> setSessionParams
    java.lang.String getSessionParams() -> getSessionParams
    boolean equalsSessionParams(java.lang.String) -> equalsSessionParams
    void setTag(java.lang.String) -> setTag
    java.lang.String getTag() -> getTag
    boolean equalsTag(java.lang.String) -> equalsTag
    a.a.a.a.g toSrtpCryptoAttribute() -> toSrtpCryptoAttribute
    boolean equalsStrings(java.lang.String,java.lang.String) -> equalsStrings
    boolean equals(java.lang.Object) -> equals
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.EncryptionPacketExtension -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.EncryptionPacketExtension:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String REQUIRED_ATTR_NAME -> REQUIRED_ATTR_NAME
    java.util.List cryptoList -> cryptoList
    void addCrypto(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CryptoPacketExtension) -> addCrypto
    java.util.List getCryptoList() -> getCryptoList
    void setRequired(boolean) -> setRequired
    boolean isRequired() -> isRequired
    java.util.List getChildExtensions() -> getChildExtensions
    void addChildExtension(org.jivesoftware.smack.packet.PacketExtension) -> addChildExtension
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.IceUdpTransportPacketExtension -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.IceUdpTransportPacketExtension:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String PWD_ATTR_NAME -> PWD_ATTR_NAME
    java.lang.String UFRAG_ATTR_NAME -> UFRAG_ATTR_NAME
    java.util.List candidateList -> candidateList
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.RemoteCandidatePacketExtension remoteCandidate -> remoteCandidate
    void setPassword(java.lang.String) -> setPassword
    java.lang.String getPassword() -> getPassword
    void setUfrag(java.lang.String) -> setUfrag
    java.lang.String getUfrag() -> getUfrag
    java.util.List getChildExtensions() -> getChildExtensions
    void addCandidate(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CandidatePacketExtension) -> addCandidate
    boolean removeCandidate(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.CandidatePacketExtension) -> removeCandidate
    java.util.List getCandidateList() -> getCandidateList
    void setRemoteCandidate(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.RemoteCandidatePacketExtension) -> setRemoteCandidate
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.RemoteCandidatePacketExtension getRemoteCandidate() -> getRemoteCandidate
    void addChildExtension(org.jivesoftware.smack.packet.PacketExtension) -> addChildExtension
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.InputEvtPacketExtension -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.InputEvtPacketExtension:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction:
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction CONTENT_ACCEPT -> CONTENT_ACCEPT
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction CONTENT_ADD -> CONTENT_ADD
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction CONTENT_MODIFY -> CONTENT_MODIFY
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction CONTENT_REJECT -> CONTENT_REJECT
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction CONTENT_REMOVE -> CONTENT_REMOVE
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction DESCRIPTION_INFO -> DESCRIPTION_INFO
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction SECURITY_INFO -> SECURITY_INFO
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction SESSION_ACCEPT -> SESSION_ACCEPT
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction SESSION_INFO -> SESSION_INFO
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction SESSION_INITIATE -> SESSION_INITIATE
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction SESSION_TERMINATE -> SESSION_TERMINATE
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction TRANSPORT_ACCEPT -> TRANSPORT_ACCEPT
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction TRANSPORT_INFO -> TRANSPORT_INFO
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction TRANSPORT_REJECT -> TRANSPORT_REJECT
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction TRANSPORT_REPLACE -> TRANSPORT_REPLACE
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction CALL_ACCEPT -> CALL_ACCEPT
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction CALLER_RELAY -> CALLER_RELAY
    java.lang.String actionName -> actionName
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction[] $VALUES -> $VALUES
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction[] values() -> values
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction parseString(java.lang.String) -> parseString
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String ACTION_ATTR_NAME -> ACTION_ATTR_NAME
    java.lang.String INITIATOR_ATTR_NAME -> INITIATOR_ATTR_NAME
    java.lang.String RESPONDER_ATTR_NAME -> RESPONDER_ATTR_NAME
    java.lang.String SID_ATTR_NAME -> SID_ATTR_NAME
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction action -> action
    java.lang.String initiator -> initiator
    java.lang.String responder -> responder
    java.lang.String sid -> sid
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ReasonPacketExtension reason -> reason
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.SessionInfoPacketExtension sessionInfo -> sessionInfo
    java.util.List contentList -> contentList
    java.lang.String getChildElementXML() -> getChildElementXML
    void setSID(java.lang.String) -> setSID
    java.lang.String getSID() -> getSID
    java.lang.String generateSID() -> generateSID
    void setResponder(java.lang.String) -> setResponder
    java.lang.String getResponder() -> getResponder
    void setInitiator(java.lang.String) -> setInitiator
    java.lang.String getInitiator() -> getInitiator
    void setAction(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction) -> setAction
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleAction getAction() -> getAction
    void setReason(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ReasonPacketExtension) -> setReason
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ReasonPacketExtension getReason() -> getReason
    java.util.List getContentList() -> getContentList
    void addContent(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension) -> addContent
    boolean containsContentChildOfType(java.lang.Class) -> containsContentChildOfType
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension getContentForType(java.lang.Class) -> getContentForType
    void setSessionInfo(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.SessionInfoPacketExtension) -> setSessionInfo
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.SessionInfoPacketExtension getSessionInfo() -> getSessionInfo
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQProvider -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQProvider:
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JinglePacketFactory -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JinglePacketFactory:
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ createRinging(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ) -> createRinging
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ createSessionInfo(java.lang.String,java.lang.String,java.lang.String) -> createSessionInfo
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ createSessionInfo(java.lang.String,java.lang.String,java.lang.String,net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.SessionInfoType) -> createSessionInfo
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ createBusy(java.lang.String,java.lang.String,java.lang.String) -> createBusy
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ createBye(java.lang.String,java.lang.String,java.lang.String) -> createBye
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ createCancel(java.lang.String,java.lang.String,java.lang.String) -> createCancel
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ createSessionTerminate(java.lang.String,java.lang.String,java.lang.String,net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason,java.lang.String) -> createSessionTerminate
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ createSessionAccept(java.lang.String,java.lang.String,java.lang.String,java.lang.Iterable) -> createSessionAccept
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ createSessionInitiate(java.lang.String,java.lang.String,java.lang.String,java.util.List) -> createSessionInitiate
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ createContentAdd(java.lang.String,java.lang.String,java.lang.String,java.util.List) -> createContentAdd
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ createContentAccept(java.lang.String,java.lang.String,java.lang.String,java.lang.Iterable) -> createContentAccept
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ createContentReject(java.lang.String,java.lang.String,java.lang.String,java.lang.Iterable) -> createContentReject
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ createContentModify(java.lang.String,java.lang.String,java.lang.String,net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension) -> createContentModify
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ createContentRemove(java.lang.String,java.lang.String,java.lang.String,java.lang.Iterable) -> createContentRemove
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ createCallAccept(java.lang.String,java.lang.String,java.lang.String) -> createCallAccept
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.JingleIQ createCallerRelay(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> createCallerRelay
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.MuteSessionInfoPacketExtension -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.MuteSessionInfoPacketExtension:
    java.lang.String NAME_ATTR_VALUE -> NAME_ATTR_VALUE
    boolean isMute() -> isMute
    java.lang.String getName() -> getName
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ParameterPacketExtension -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ParameterPacketExtension:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAME_ATTR_NAME -> NAME_ATTR_NAME
    java.lang.String VALUE_ATTR_NAME -> VALUE_ATTR_NAME
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    void setValue(java.lang.String) -> setValue
    java.lang.String getValue() -> getValue
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.PayloadTypePacketExtension -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.PayloadTypePacketExtension:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String CHANNELS_ATTR_NAME -> CHANNELS_ATTR_NAME
    java.lang.String CLOCKRATE_ATTR_NAME -> CLOCKRATE_ATTR_NAME
    java.lang.String ID_ATTR_NAME -> ID_ATTR_NAME
    java.lang.String MAXPTIME_ATTR_NAME -> MAXPTIME_ATTR_NAME
    java.lang.String NAME_ATTR_NAME -> NAME_ATTR_NAME
    java.lang.String PTIME_ATTR_NAME -> PTIME_ATTR_NAME
    void setChannels(int) -> setChannels
    int getChannels() -> getChannels
    void setClockrate(int) -> setClockrate
    int getClockrate() -> getClockrate
    void setId(int) -> setId
    int getID() -> getID
    void setMaxptime(int) -> setMaxptime
    int getMaxptime() -> getMaxptime
    void setPtime(int) -> setPtime
    int getPtime() -> getPtime
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    void addParameter(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ParameterPacketExtension) -> addParameter
    java.util.List getParameters() -> getParameters
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.RTPHdrExtPacketExtension -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.RTPHdrExtPacketExtension:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String ID_ATTR_NAME -> ID_ATTR_NAME
    java.lang.String SENDERS_ATTR_NAME -> SENDERS_ATTR_NAME
    java.lang.String URI_ATTR_NAME -> URI_ATTR_NAME
    java.lang.String ATTRIBUTES_ATTR_NAME -> ATTRIBUTES_ATTR_NAME
    void setID(java.lang.String) -> setID
    java.lang.String getID() -> getID
    void setSenders(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$SendersEnum) -> setSenders
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ContentPacketExtension$SendersEnum getSenders() -> getSenders
    void setURI(java.net.URI) -> setURI
    java.net.URI getURI() -> getURI
    void setAttributes(java.lang.String) -> setAttributes
    java.lang.String getAttributes() -> getAttributes
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.RawUdpTransportPacketExtension -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.RawUdpTransportPacketExtension:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.util.List getChildExtensions() -> getChildExtensions
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason:
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason ALTERNATIVE_SESSION -> ALTERNATIVE_SESSION
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason BUSY -> BUSY
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason CANCEL -> CANCEL
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason CONNECTIVITY_ERROR -> CONNECTIVITY_ERROR
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason DECLINE -> DECLINE
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason EXPIRED -> EXPIRED
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason FAILED_APPLICATION -> FAILED_APPLICATION
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason FAILED_TRANSPORT -> FAILED_TRANSPORT
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason GENERAL_ERROR -> GENERAL_ERROR
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason GONE -> GONE
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason INCOMPATIBLE_PARAMETERS -> INCOMPATIBLE_PARAMETERS
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason MEDIA_ERROR -> MEDIA_ERROR
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason SECURITY_ERROR -> SECURITY_ERROR
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason SUCCESS -> SUCCESS
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason TIMEOUT -> TIMEOUT
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason UNSUPPORTED_APPLICATIONS -> UNSUPPORTED_APPLICATIONS
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason UNSUPPORTED_TRANSPORTS -> UNSUPPORTED_TRANSPORTS
    java.lang.String reasonValue -> reasonValue
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason[] $VALUES -> $VALUES
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason[] values() -> values
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason parseString(java.lang.String) -> parseString
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ReasonPacketExtension -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ReasonPacketExtension:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String TEXT_ELEMENT_NAME -> TEXT_ELEMENT_NAME
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason reason -> reason
    java.lang.String text -> text
    org.jivesoftware.smack.packet.PacketExtension otherExtension -> otherExtension
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.Reason getReason() -> getReason
    java.lang.String getText() -> getText
    void setText(java.lang.String) -> setText
    org.jivesoftware.smack.packet.PacketExtension getOtherExtension() -> getOtherExtension
    void setOtherExtension(org.jivesoftware.smack.packet.PacketExtension) -> setOtherExtension
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ReasonProvider -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ReasonProvider:
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ReasonPacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
    java.lang.String parseText(org.xmlpull.v1.XmlPullParser) -> parseText
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.RedirectPacketExtension -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.RedirectPacketExtension:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String redir -> redir
    void setRedir(java.lang.String) -> setRedir
    java.lang.String getRedir() -> getRedir
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.RedirectProvider -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.RedirectProvider:
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.RedirectPacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
    java.lang.String parseText(org.xmlpull.v1.XmlPullParser) -> parseText
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.RemoteCandidatePacketExtension -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.RemoteCandidatePacketExtension:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.RtpDescriptionPacketExtension -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.RtpDescriptionPacketExtension:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String MEDIA_ATTR_NAME -> MEDIA_ATTR_NAME
    java.lang.String SSRC_ATTR_NAME -> SSRC_ATTR_NAME
    java.util.List payloadTypes -> payloadTypes
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.EncryptionPacketExtension encryption -> encryption
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.BandwidthPacketExtension bandwidth -> bandwidth
    java.util.List extmapList -> extmapList
    java.util.List children -> children
    void setMedia(java.lang.String) -> setMedia
    java.lang.String getMedia() -> getMedia
    void setSsrc(java.lang.String) -> setSsrc
    java.lang.String getSsrc() -> getSsrc
    void addPayloadType(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.PayloadTypePacketExtension) -> addPayloadType
    java.util.List getPayloadTypes() -> getPayloadTypes
    java.util.List getChildExtensions() -> getChildExtensions
    void addChildExtension(org.jivesoftware.smack.packet.PacketExtension) -> addChildExtension
    void setEncryption(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.EncryptionPacketExtension) -> setEncryption
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.EncryptionPacketExtension getEncryption() -> getEncryption
    void setBandwidth(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.BandwidthPacketExtension) -> setBandwidth
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.BandwidthPacketExtension getBandwidth() -> getBandwidth
    void addExtmap(net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.RTPHdrExtPacketExtension) -> addExtmap
    java.util.List getExtmapList() -> getExtmapList
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.SessionInfoPacketExtension -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.SessionInfoPacketExtension:
    java.lang.String NAMESPACE -> NAMESPACE
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.SessionInfoType type -> type
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.SessionInfoType getType() -> getType
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.SessionInfoType -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.SessionInfoType:
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.SessionInfoType active -> active
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.SessionInfoType hold -> hold
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.SessionInfoType mute -> mute
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.SessionInfoType ringing -> ringing
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.SessionInfoType unhold -> unhold
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.SessionInfoType unmute -> unmute
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.SessionInfoType[] $VALUES -> $VALUES
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.SessionInfoType[] values() -> values
    net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.SessionInfoType valueOf(java.lang.String) -> valueOf
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.TransferPacketExtension -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.TransferPacketExtension:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String FROM_ATTR_NAME -> FROM_ATTR_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String SID_ATTR_NAME -> SID_ATTR_NAME
    java.lang.String TO_ATTR_NAME -> TO_ATTR_NAME
    java.lang.String getFrom() -> getFrom
    void setFrom(java.lang.String) -> setFrom
    java.lang.String getSID() -> getSID
    void setSID(java.lang.String) -> setSID
    java.lang.String getTo() -> getTo
    void setTo(java.lang.String) -> setTo
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.TransferredPacketExtension -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.TransferredPacketExtension:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ZrtpHashPacketExtension -> net.java.sip.communicator.impl.protocol.jabber.extensions.jingle.ZrtpHashPacketExtension:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String VERSION_ATTR_NAME -> VERSION_ATTR_NAME
    java.lang.String getVersion() -> getVersion
    void setVersion(java.lang.String) -> setVersion
    java.lang.String getValue() -> getValue
    void setValue(java.lang.String) -> setValue
org.apache.harmony.javax.security.auth.AuthPermission -> org.apache.harmony.javax.security.auth.AuthPermission:
    long serialVersionUID -> serialVersionUID
    java.lang.String CREATE_LOGIN_CONTEXT -> CREATE_LOGIN_CONTEXT
    java.lang.String CREATE_LOGIN_CONTEXT_ANY -> CREATE_LOGIN_CONTEXT_ANY
    java.lang.String init(java.lang.String) -> init
org.apache.harmony.javax.security.auth.DestroyFailedException -> org.apache.harmony.javax.security.auth.DestroyFailedException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.auth.Destroyable -> org.apache.harmony.javax.security.auth.Destroyable:
    void destroy() -> destroy
    boolean isDestroyed() -> isDestroyed
org.apache.harmony.javax.security.auth.PrivateCredentialPermission -> org.apache.harmony.javax.security.auth.PrivateCredentialPermission:
    long serialVersionUID -> serialVersionUID
    java.lang.String READ -> READ
    java.lang.String credentialClass -> credentialClass
    int offset -> offset
    org.apache.harmony.javax.security.auth.PrivateCredentialPermission$CredOwner[] set -> set
    void initTargetName(java.lang.String) -> initTargetName
    void readObject(java.io.ObjectInputStream) -> readObject
    java.lang.String[][] getPrincipals() -> getPrincipals
    java.lang.String getActions() -> getActions
    java.lang.String getCredentialClass() -> getCredentialClass
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean implies(java.security.Permission) -> implies
    java.security.PermissionCollection newPermissionCollection() -> newPermissionCollection
    boolean sameMembers(java.lang.Object[],java.lang.Object[],int) -> sameMembers
org.apache.harmony.javax.security.auth.PrivateCredentialPermission$CredOwner -> org.apache.harmony.javax.security.auth.PrivateCredentialPermission$CredOwner:
    long serialVersionUID -> serialVersionUID
    java.lang.String principalClass -> principalClass
    java.lang.String principalName -> principalName
    boolean isClassWildcard -> isClassWildcard
    boolean isPNameWildcard -> isPNameWildcard
    boolean implies(java.lang.Object) -> implies
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.apache.harmony.javax.security.auth.RefreshFailedException -> org.apache.harmony.javax.security.auth.RefreshFailedException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.auth.Refreshable -> org.apache.harmony.javax.security.auth.Refreshable:
    void refresh() -> refresh
    boolean isCurrent() -> isCurrent
org.apache.harmony.javax.security.auth.Subject -> org.apache.harmony.javax.security.auth.Subject:
    long serialVersionUID -> serialVersionUID
    org.apache.harmony.javax.security.auth.AuthPermission _AS -> _AS
    org.apache.harmony.javax.security.auth.AuthPermission _AS_PRIVILEGED -> _AS_PRIVILEGED
    org.apache.harmony.javax.security.auth.AuthPermission _SUBJECT -> _SUBJECT
    org.apache.harmony.javax.security.auth.AuthPermission _PRINCIPALS -> _PRINCIPALS
    org.apache.harmony.javax.security.auth.AuthPermission _PRIVATE_CREDENTIALS -> _PRIVATE_CREDENTIALS
    org.apache.harmony.javax.security.auth.AuthPermission _PUBLIC_CREDENTIALS -> _PUBLIC_CREDENTIALS
    org.apache.harmony.javax.security.auth.AuthPermission _READ_ONLY -> _READ_ONLY
    java.util.Set principals -> principals
    boolean readOnly -> readOnly
    org.apache.harmony.javax.security.auth.Subject$SecureSet privateCredentials -> privateCredentials
    org.apache.harmony.javax.security.auth.Subject$SecureSet publicCredentials -> publicCredentials
    java.lang.Object doAs(org.apache.harmony.javax.security.auth.Subject,java.security.PrivilegedAction) -> doAs
    java.lang.Object doAsPrivileged(org.apache.harmony.javax.security.auth.Subject,java.security.PrivilegedAction,java.security.AccessControlContext) -> doAsPrivileged
    java.lang.Object doAs_PrivilegedAction(org.apache.harmony.javax.security.auth.Subject,java.security.PrivilegedAction,java.security.AccessControlContext) -> doAs_PrivilegedAction
    java.lang.Object doAs(org.apache.harmony.javax.security.auth.Subject,java.security.PrivilegedExceptionAction) -> doAs
    java.lang.Object doAsPrivileged(org.apache.harmony.javax.security.auth.Subject,java.security.PrivilegedExceptionAction,java.security.AccessControlContext) -> doAsPrivileged
    java.lang.Object doAs_PrivilegedExceptionAction(org.apache.harmony.javax.security.auth.Subject,java.security.PrivilegedExceptionAction,java.security.AccessControlContext) -> doAs_PrivilegedExceptionAction
    boolean equals(java.lang.Object) -> equals
    java.util.Set getPrincipals() -> getPrincipals
    java.util.Set getPrincipals(java.lang.Class) -> getPrincipals
    java.util.Set getPrivateCredentials() -> getPrivateCredentials
    java.util.Set getPrivateCredentials(java.lang.Class) -> getPrivateCredentials
    java.util.Set getPublicCredentials() -> getPublicCredentials
    java.util.Set getPublicCredentials(java.lang.Class) -> getPublicCredentials
    int hashCode() -> hashCode
    void setReadOnly() -> setReadOnly
    boolean isReadOnly() -> isReadOnly
    java.lang.String toString() -> toString
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    org.apache.harmony.javax.security.auth.Subject getSubject(java.security.AccessControlContext) -> getSubject
    void checkPermission(java.security.Permission) -> checkPermission
    void checkState() -> checkState
    org.apache.harmony.javax.security.auth.AuthPermission access$000() -> access$000
    void access$100(org.apache.harmony.javax.security.auth.Subject) -> access$100
    void access$200(java.security.Permission) -> access$200
    org.apache.harmony.javax.security.auth.AuthPermission access$300() -> access$300
    java.util.Set access$400(org.apache.harmony.javax.security.auth.Subject) -> access$400
    org.apache.harmony.javax.security.auth.AuthPermission access$500() -> access$500
org.apache.harmony.javax.security.auth.Subject$1 -> org.apache.harmony.javax.security.auth.Subject$1:
    java.security.AccessControlContext val$context -> val$context
    org.apache.harmony.javax.security.auth.SubjectDomainCombiner val$combiner -> val$combiner
    java.lang.Object run() -> run
org.apache.harmony.javax.security.auth.Subject$2 -> org.apache.harmony.javax.security.auth.Subject$2:
    java.security.AccessControlContext val$context -> val$context
    org.apache.harmony.javax.security.auth.SubjectDomainCombiner val$combiner -> val$combiner
    java.security.AccessControlContext run() -> run
    java.lang.Object run() -> run
org.apache.harmony.javax.security.auth.Subject$3 -> org.apache.harmony.javax.security.auth.Subject$3:
    java.security.AccessControlContext val$context -> val$context
    java.security.DomainCombiner run() -> run
    java.lang.Object run() -> run
org.apache.harmony.javax.security.auth.Subject$SecureSet -> org.apache.harmony.javax.security.auth.Subject$SecureSet:
    long serialVersionUID -> serialVersionUID
    java.util.LinkedList elements -> elements
    int setType -> setType
    int SET_Principal -> SET_Principal
    int SET_PrivCred -> SET_PrivCred
    int SET_PubCred -> SET_PubCred
    org.apache.harmony.javax.security.auth.AuthPermission permission -> permission
    org.apache.harmony.javax.security.auth.Subject this$0 -> this$0
    void verifyElement(java.lang.Object) -> verifyElement
    boolean add(java.lang.Object) -> add
    java.util.Iterator iterator() -> iterator
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
    java.util.Set get(java.lang.Class) -> get
    void readObject(java.io.ObjectInputStream) -> readObject
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    org.apache.harmony.javax.security.auth.AuthPermission access$600(org.apache.harmony.javax.security.auth.Subject$SecureSet) -> access$600
org.apache.harmony.javax.security.auth.Subject$SecureSet$1 -> org.apache.harmony.javax.security.auth.Subject$SecureSet$1:
    org.apache.harmony.javax.security.auth.Subject$SecureSet this$1 -> this$1
    java.lang.Object next() -> next
org.apache.harmony.javax.security.auth.Subject$SecureSet$2 -> org.apache.harmony.javax.security.auth.Subject$SecureSet$2:
    java.util.LinkedList elements -> elements
    java.lang.Class val$c -> val$c
    org.apache.harmony.javax.security.auth.Subject$SecureSet this$1 -> this$1
    boolean add(java.lang.Object) -> add
    java.util.Iterator iterator() -> iterator
    boolean retainAll(java.util.Collection) -> retainAll
    int size() -> size
org.apache.harmony.javax.security.auth.Subject$SecureSet$SecureIterator -> org.apache.harmony.javax.security.auth.Subject$SecureSet$SecureIterator:
    java.util.Iterator iterator -> iterator
    org.apache.harmony.javax.security.auth.Subject$SecureSet this$1 -> this$1
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
org.apache.harmony.javax.security.auth.SubjectDomainCombiner -> org.apache.harmony.javax.security.auth.SubjectDomainCombiner:
    org.apache.harmony.javax.security.auth.Subject subject -> subject
    org.apache.harmony.javax.security.auth.AuthPermission _GET -> _GET
    org.apache.harmony.javax.security.auth.Subject getSubject() -> getSubject
    java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[]) -> combine
org.apache.harmony.javax.security.auth.callback.Callback -> org.apache.harmony.javax.security.auth.callback.Callback:
org.apache.harmony.javax.security.auth.callback.CallbackHandler -> org.apache.harmony.javax.security.auth.callback.CallbackHandler:
    void handle(org.apache.harmony.javax.security.auth.callback.Callback[]) -> handle
org.apache.harmony.javax.security.auth.callback.ChoiceCallback -> org.apache.harmony.javax.security.auth.callback.ChoiceCallback:
    long serialVersionUID -> serialVersionUID
    int defaultChoice -> defaultChoice
    java.lang.String prompt -> prompt
    boolean multipleSelectionsAllowed -> multipleSelectionsAllowed
    java.lang.String[] choices -> choices
    int[] selections -> selections
    void setChoices(java.lang.String[]) -> setChoices
    void setPrompt(java.lang.String) -> setPrompt
    void setDefaultChoice(int) -> setDefaultChoice
    boolean allowMultipleSelections() -> allowMultipleSelections
    java.lang.String[] getChoices() -> getChoices
    int getDefaultChoice() -> getDefaultChoice
    java.lang.String getPrompt() -> getPrompt
    int[] getSelectedIndexes() -> getSelectedIndexes
    void setSelectedIndex(int) -> setSelectedIndex
    void setSelectedIndexes(int[]) -> setSelectedIndexes
org.apache.harmony.javax.security.auth.callback.ConfirmationCallback -> org.apache.harmony.javax.security.auth.callback.ConfirmationCallback:
    long serialVersionUID -> serialVersionUID
    int YES -> YES
    int NO -> NO
    int CANCEL -> CANCEL
    int OK -> OK
    int YES_NO_OPTION -> YES_NO_OPTION
    int YES_NO_CANCEL_OPTION -> YES_NO_CANCEL_OPTION
    int OK_CANCEL_OPTION -> OK_CANCEL_OPTION
    int UNSPECIFIED_OPTION -> UNSPECIFIED_OPTION
    int INFORMATION -> INFORMATION
    int WARNING -> WARNING
    int ERROR -> ERROR
    java.lang.String prompt -> prompt
    int messageType -> messageType
    int optionType -> optionType
    int defaultOption -> defaultOption
    java.lang.String[] options -> options
    int selection -> selection
    java.lang.String getPrompt() -> getPrompt
    int getMessageType() -> getMessageType
    int getDefaultOption() -> getDefaultOption
    java.lang.String[] getOptions() -> getOptions
    int getOptionType() -> getOptionType
    int getSelectedIndex() -> getSelectedIndex
    void setSelectedIndex(int) -> setSelectedIndex
org.apache.harmony.javax.security.auth.callback.LanguageCallback -> org.apache.harmony.javax.security.auth.callback.LanguageCallback:
    long serialVersionUID -> serialVersionUID
    java.util.Locale locale -> locale
    java.util.Locale getLocale() -> getLocale
    void setLocale(java.util.Locale) -> setLocale
org.apache.harmony.javax.security.auth.callback.NameCallback -> org.apache.harmony.javax.security.auth.callback.NameCallback:
    long serialVersionUID -> serialVersionUID
    java.lang.String prompt -> prompt
    java.lang.String defaultName -> defaultName
    java.lang.String inputName -> inputName
    void setPrompt(java.lang.String) -> setPrompt
    void setDefaultName(java.lang.String) -> setDefaultName
    java.lang.String getPrompt() -> getPrompt
    java.lang.String getDefaultName() -> getDefaultName
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
org.apache.harmony.javax.security.auth.callback.PasswordCallback -> org.apache.harmony.javax.security.auth.callback.PasswordCallback:
    long serialVersionUID -> serialVersionUID
    java.lang.String prompt -> prompt
    boolean echoOn -> echoOn
    char[] inputPassword -> inputPassword
    void setPrompt(java.lang.String) -> setPrompt
    java.lang.String getPrompt() -> getPrompt
    boolean isEchoOn() -> isEchoOn
    void setPassword(char[]) -> setPassword
    char[] getPassword() -> getPassword
    void clearPassword() -> clearPassword
org.apache.harmony.javax.security.auth.callback.TextInputCallback -> org.apache.harmony.javax.security.auth.callback.TextInputCallback:
    long serialVersionUID -> serialVersionUID
    java.lang.String defaultText -> defaultText
    java.lang.String prompt -> prompt
    java.lang.String inputText -> inputText
    void setPrompt(java.lang.String) -> setPrompt
    void setDefaultText(java.lang.String) -> setDefaultText
    java.lang.String getDefaultText() -> getDefaultText
    java.lang.String getPrompt() -> getPrompt
    java.lang.String getText() -> getText
    void setText(java.lang.String) -> setText
org.apache.harmony.javax.security.auth.callback.TextOutputCallback -> org.apache.harmony.javax.security.auth.callback.TextOutputCallback:
    long serialVersionUID -> serialVersionUID
    int INFORMATION -> INFORMATION
    int WARNING -> WARNING
    int ERROR -> ERROR
    java.lang.String message -> message
    int messageType -> messageType
    java.lang.String getMessage() -> getMessage
    int getMessageType() -> getMessageType
org.apache.harmony.javax.security.auth.callback.UnsupportedCallbackException -> org.apache.harmony.javax.security.auth.callback.UnsupportedCallbackException:
    long serialVersionUID -> serialVersionUID
    org.apache.harmony.javax.security.auth.callback.Callback callback -> callback
    org.apache.harmony.javax.security.auth.callback.Callback getCallback() -> getCallback
org.apache.harmony.javax.security.auth.login.AccountException -> org.apache.harmony.javax.security.auth.login.AccountException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.auth.login.AccountExpiredException -> org.apache.harmony.javax.security.auth.login.AccountExpiredException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.auth.login.AccountLockedException -> org.apache.harmony.javax.security.auth.login.AccountLockedException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.auth.login.AccountNotFoundException -> org.apache.harmony.javax.security.auth.login.AccountNotFoundException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.auth.login.AppConfigurationEntry -> org.apache.harmony.javax.security.auth.login.AppConfigurationEntry:
    java.util.Map options -> options
    org.apache.harmony.javax.security.auth.login.AppConfigurationEntry$LoginModuleControlFlag controlFlag -> controlFlag
    java.lang.String loginModuleName -> loginModuleName
    java.lang.String getLoginModuleName() -> getLoginModuleName
    org.apache.harmony.javax.security.auth.login.AppConfigurationEntry$LoginModuleControlFlag getControlFlag() -> getControlFlag
    java.util.Map getOptions() -> getOptions
org.apache.harmony.javax.security.auth.login.AppConfigurationEntry$LoginModuleControlFlag -> org.apache.harmony.javax.security.auth.login.AppConfigurationEntry$LoginModuleControlFlag:
    java.lang.String flag -> flag
    org.apache.harmony.javax.security.auth.login.AppConfigurationEntry$LoginModuleControlFlag REQUIRED -> REQUIRED
    org.apache.harmony.javax.security.auth.login.AppConfigurationEntry$LoginModuleControlFlag REQUISITE -> REQUISITE
    org.apache.harmony.javax.security.auth.login.AppConfigurationEntry$LoginModuleControlFlag OPTIONAL -> OPTIONAL
    org.apache.harmony.javax.security.auth.login.AppConfigurationEntry$LoginModuleControlFlag SUFFICIENT -> SUFFICIENT
    java.lang.String toString() -> toString
org.apache.harmony.javax.security.auth.login.Configuration -> org.apache.harmony.javax.security.auth.login.Configuration:
    org.apache.harmony.javax.security.auth.login.Configuration configuration -> configuration
    org.apache.harmony.javax.security.auth.AuthPermission GET_LOGIN_CONFIGURATION -> GET_LOGIN_CONFIGURATION
    org.apache.harmony.javax.security.auth.AuthPermission SET_LOGIN_CONFIGURATION -> SET_LOGIN_CONFIGURATION
    java.lang.String LOGIN_CONFIGURATION_PROVIDER -> LOGIN_CONFIGURATION_PROVIDER
    org.apache.harmony.javax.security.auth.login.Configuration getConfiguration() -> getConfiguration
    org.apache.harmony.javax.security.auth.login.Configuration getDefaultProvider() -> getDefaultProvider
    org.apache.harmony.javax.security.auth.login.Configuration getAccessibleConfiguration() -> getAccessibleConfiguration
    void setConfiguration(org.apache.harmony.javax.security.auth.login.Configuration) -> setConfiguration
    org.apache.harmony.javax.security.auth.login.AppConfigurationEntry[] getAppConfigurationEntry(java.lang.String) -> getAppConfigurationEntry
    void refresh() -> refresh
org.apache.harmony.javax.security.auth.login.Configuration$1 -> org.apache.harmony.javax.security.auth.login.Configuration$1:
    void refresh() -> refresh
    org.apache.harmony.javax.security.auth.login.AppConfigurationEntry[] getAppConfigurationEntry(java.lang.String) -> getAppConfigurationEntry
org.apache.harmony.javax.security.auth.login.CredentialException -> org.apache.harmony.javax.security.auth.login.CredentialException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.auth.login.CredentialExpiredException -> org.apache.harmony.javax.security.auth.login.CredentialExpiredException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.auth.login.CredentialNotFoundException -> org.apache.harmony.javax.security.auth.login.CredentialNotFoundException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.auth.login.FailedLoginException -> org.apache.harmony.javax.security.auth.login.FailedLoginException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.auth.login.LoginContext -> org.apache.harmony.javax.security.auth.login.LoginContext:
    java.lang.String DEFAULT_CALLBACK_HANDLER_PROPERTY -> DEFAULT_CALLBACK_HANDLER_PROPERTY
    int OPTIONAL -> OPTIONAL
    int REQUIRED -> REQUIRED
    int REQUISITE -> REQUISITE
    int SUFFICIENT -> SUFFICIENT
    org.apache.harmony.javax.security.auth.Subject subject -> subject
    boolean userProvidedSubject -> userProvidedSubject
    boolean userProvidedConfig -> userProvidedConfig
    java.security.AccessControlContext userContext -> userContext
    org.apache.harmony.javax.security.auth.callback.CallbackHandler callbackHandler -> callbackHandler
    org.apache.harmony.javax.security.auth.login.LoginContext$Module[] modules -> modules
    java.util.Map sharedState -> sharedState
    java.lang.ClassLoader contextClassLoader -> contextClassLoader
    boolean loggedIn -> loggedIn
    void init(java.lang.String,org.apache.harmony.javax.security.auth.Subject,org.apache.harmony.javax.security.auth.callback.CallbackHandler,org.apache.harmony.javax.security.auth.login.Configuration) -> init
    org.apache.harmony.javax.security.auth.Subject getSubject() -> getSubject
    void login() -> login
    void loginImpl() -> loginImpl
    void logout() -> logout
    void logoutImpl() -> logoutImpl
    java.lang.ClassLoader access$002(org.apache.harmony.javax.security.auth.login.LoginContext,java.lang.ClassLoader) -> access$002
    java.lang.ClassLoader access$000(org.apache.harmony.javax.security.auth.login.LoginContext) -> access$000
    org.apache.harmony.javax.security.auth.callback.CallbackHandler access$102(org.apache.harmony.javax.security.auth.login.LoginContext,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> access$102
    void access$200(org.apache.harmony.javax.security.auth.login.LoginContext) -> access$200
    void access$300(org.apache.harmony.javax.security.auth.login.LoginContext) -> access$300
    java.security.AccessControlContext access$500(org.apache.harmony.javax.security.auth.login.LoginContext) -> access$500
org.apache.harmony.javax.security.auth.login.LoginContext$1 -> org.apache.harmony.javax.security.auth.login.LoginContext$1:
    org.apache.harmony.javax.security.auth.callback.CallbackHandler val$cbHandler -> val$cbHandler
    org.apache.harmony.javax.security.auth.login.LoginContext this$0 -> this$0
    java.lang.Void run() -> run
    java.lang.Object run() -> run
org.apache.harmony.javax.security.auth.login.LoginContext$2 -> org.apache.harmony.javax.security.auth.login.LoginContext$2:
    org.apache.harmony.javax.security.auth.login.LoginContext this$0 -> this$0
    java.lang.Void run() -> run
    java.lang.Object run() -> run
org.apache.harmony.javax.security.auth.login.LoginContext$3 -> org.apache.harmony.javax.security.auth.login.LoginContext$3:
    org.apache.harmony.javax.security.auth.login.LoginContext this$0 -> this$0
    java.lang.Void run() -> run
    java.lang.Object run() -> run
org.apache.harmony.javax.security.auth.login.LoginContext$ContextedCallbackHandler -> org.apache.harmony.javax.security.auth.login.LoginContext$ContextedCallbackHandler:
    org.apache.harmony.javax.security.auth.callback.CallbackHandler hiddenHandlerRef -> hiddenHandlerRef
    org.apache.harmony.javax.security.auth.login.LoginContext this$0 -> this$0
    void handle(org.apache.harmony.javax.security.auth.callback.Callback[]) -> handle
    org.apache.harmony.javax.security.auth.callback.CallbackHandler access$400(org.apache.harmony.javax.security.auth.login.LoginContext$ContextedCallbackHandler) -> access$400
org.apache.harmony.javax.security.auth.login.LoginContext$ContextedCallbackHandler$1 -> org.apache.harmony.javax.security.auth.login.LoginContext$ContextedCallbackHandler$1:
    org.apache.harmony.javax.security.auth.callback.Callback[] val$callbacks -> val$callbacks
    org.apache.harmony.javax.security.auth.login.LoginContext$ContextedCallbackHandler this$1 -> this$1
    java.lang.Void run() -> run
    java.lang.Object run() -> run
org.apache.harmony.javax.security.auth.login.LoginContext$Module -> org.apache.harmony.javax.security.auth.login.LoginContext$Module:
    org.apache.harmony.javax.security.auth.login.AppConfigurationEntry entry -> entry
    int flag -> flag
    org.apache.harmony.javax.security.auth.spi.LoginModule module -> module
    java.lang.Class klass -> klass
    org.apache.harmony.javax.security.auth.login.LoginContext this$0 -> this$0
    int getFlag() -> getFlag
    void create(org.apache.harmony.javax.security.auth.Subject,org.apache.harmony.javax.security.auth.callback.CallbackHandler,java.util.Map) -> create
org.apache.harmony.javax.security.auth.login.LoginException -> org.apache.harmony.javax.security.auth.login.LoginException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.auth.spi.LoginModule -> org.apache.harmony.javax.security.auth.spi.LoginModule:
    void initialize(org.apache.harmony.javax.security.auth.Subject,org.apache.harmony.javax.security.auth.callback.CallbackHandler,java.util.Map,java.util.Map) -> initialize
    boolean login() -> login
    boolean commit() -> commit
    boolean abort() -> abort
    boolean logout() -> logout
org.apache.harmony.javax.security.sasl.AuthenticationException -> org.apache.harmony.javax.security.sasl.AuthenticationException:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.sasl.AuthorizeCallback -> org.apache.harmony.javax.security.sasl.AuthorizeCallback:
    long serialVersionUID -> serialVersionUID
    java.lang.String authenticationID -> authenticationID
    java.lang.String authorizationID -> authorizationID
    java.lang.String authorizedID -> authorizedID
    boolean authorized -> authorized
    java.lang.String getAuthenticationID() -> getAuthenticationID
    java.lang.String getAuthorizationID() -> getAuthorizationID
    java.lang.String getAuthorizedID() -> getAuthorizedID
    boolean isAuthorized() -> isAuthorized
    void setAuthorized(boolean) -> setAuthorized
    void setAuthorizedID(java.lang.String) -> setAuthorizedID
org.apache.harmony.javax.security.sasl.RealmCallback -> org.apache.harmony.javax.security.sasl.RealmCallback:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.sasl.RealmChoiceCallback -> org.apache.harmony.javax.security.sasl.RealmChoiceCallback:
    long serialVersionUID -> serialVersionUID
org.apache.harmony.javax.security.sasl.Sasl -> org.apache.harmony.javax.security.sasl.Sasl:
    java.lang.String CLIENTFACTORYSRV -> CLIENTFACTORYSRV
    java.lang.String SERVERFACTORYSRV -> SERVERFACTORYSRV
    java.lang.String POLICY_NOPLAINTEXT -> POLICY_NOPLAINTEXT
    java.lang.String POLICY_NOACTIVE -> POLICY_NOACTIVE
    java.lang.String POLICY_NODICTIONARY -> POLICY_NODICTIONARY
    java.lang.String POLICY_NOANONYMOUS -> POLICY_NOANONYMOUS
    java.lang.String POLICY_FORWARD_SECRECY -> POLICY_FORWARD_SECRECY
    java.lang.String POLICY_PASS_CREDENTIALS -> POLICY_PASS_CREDENTIALS
    java.lang.String MAX_BUFFER -> MAX_BUFFER
    java.lang.String RAW_SEND_SIZE -> RAW_SEND_SIZE
    java.lang.String REUSE -> REUSE
    java.lang.String QOP -> QOP
    java.lang.String STRENGTH -> STRENGTH
    java.lang.String SERVER_AUTH -> SERVER_AUTH
    java.lang.Object newInstance(java.lang.String,java.security.Provider) -> newInstance
    java.util.Collection findFactories(java.lang.String) -> findFactories
    java.util.Enumeration getSaslClientFactories() -> getSaslClientFactories
    java.util.Enumeration getSaslServerFactories() -> getSaslServerFactories
    org.apache.harmony.javax.security.sasl.SaslServer createSaslServer(java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> createSaslServer
    org.apache.harmony.javax.security.sasl.SaslClient createSaslClient(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> createSaslClient
org.apache.harmony.javax.security.sasl.SaslClient -> org.apache.harmony.javax.security.sasl.SaslClient:
    void dispose() -> dispose
    byte[] evaluateChallenge(byte[]) -> evaluateChallenge
    java.lang.String getMechanismName() -> getMechanismName
    java.lang.Object getNegotiatedProperty(java.lang.String) -> getNegotiatedProperty
    boolean hasInitialResponse() -> hasInitialResponse
    boolean isComplete() -> isComplete
    byte[] unwrap(byte[],int,int) -> unwrap
    byte[] wrap(byte[],int,int) -> wrap
org.apache.harmony.javax.security.sasl.SaslClientFactory -> org.apache.harmony.javax.security.sasl.SaslClientFactory:
    org.apache.harmony.javax.security.sasl.SaslClient createSaslClient(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> createSaslClient
    java.lang.String[] getMechanismNames(java.util.Map) -> getMechanismNames
org.apache.harmony.javax.security.sasl.SaslException -> org.apache.harmony.javax.security.sasl.SaslException:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable _exception -> _exception
    java.lang.Throwable getCause() -> getCause
    java.lang.Throwable initCause(java.lang.Throwable) -> initCause
    java.lang.String toString() -> toString
org.apache.harmony.javax.security.sasl.SaslServer -> org.apache.harmony.javax.security.sasl.SaslServer:
    void dispose() -> dispose
    byte[] evaluateResponse(byte[]) -> evaluateResponse
    java.lang.String getAuthorizationID() -> getAuthorizationID
    java.lang.String getMechanismName() -> getMechanismName
    java.lang.Object getNegotiatedProperty(java.lang.String) -> getNegotiatedProperty
    boolean isComplete() -> isComplete
    byte[] unwrap(byte[],int,int) -> unwrap
    byte[] wrap(byte[],int,int) -> wrap
org.apache.harmony.javax.security.sasl.SaslServerFactory -> org.apache.harmony.javax.security.sasl.SaslServerFactory:
    org.apache.harmony.javax.security.sasl.SaslServer createSaslServer(java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> createSaslServer
    java.lang.String[] getMechanismNames(java.util.Map) -> getMechanismNames
org.apache.qpid.management.common.sasl.CRAMMD5HashedSaslClientFactory -> org.apache.qpid.management.common.sasl.CRAMMD5HashedSaslClientFactory:
    java.lang.String MECHANISM -> MECHANISM
    org.apache.harmony.javax.security.sasl.SaslClient createSaslClient(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> createSaslClient
    java.lang.String[] getMechanismNames(java.util.Map) -> getMechanismNames
org.apache.qpid.management.common.sasl.ClientSaslFactory -> org.apache.qpid.management.common.sasl.ClientSaslFactory:
    org.apache.harmony.javax.security.sasl.SaslClient createSaslClient(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.util.Map,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> createSaslClient
    java.lang.String[] getMechanismNames(java.util.Map) -> getMechanismNames
org.apache.qpid.management.common.sasl.Constants -> org.apache.qpid.management.common.sasl.Constants:
    java.lang.String MECH_CRAMMD5 -> MECH_CRAMMD5
    java.lang.String MECH_PLAIN -> MECH_PLAIN
    java.lang.String SASL_CRAMMD5 -> SASL_CRAMMD5
    java.lang.String SASL_PLAIN -> SASL_PLAIN
org.apache.qpid.management.common.sasl.JCAProvider -> org.apache.qpid.management.common.sasl.JCAProvider:
    long serialVersionUID -> serialVersionUID
    void register(java.util.Map) -> register
org.apache.qpid.management.common.sasl.PlainSaslClient -> org.apache.qpid.management.common.sasl.PlainSaslClient:
    boolean completed -> completed
    org.apache.harmony.javax.security.auth.callback.CallbackHandler cbh -> cbh
    java.lang.String authorizationID -> authorizationID
    java.lang.String authenticationID -> authenticationID
    byte[] password -> password
    byte SEPARATOR -> SEPARATOR
    byte[] evaluateChallenge(byte[]) -> evaluateChallenge
    java.lang.String getMechanismName() -> getMechanismName
    boolean hasInitialResponse() -> hasInitialResponse
    boolean isComplete() -> isComplete
    byte[] unwrap(byte[],int,int) -> unwrap
    byte[] wrap(byte[],int,int) -> wrap
    java.lang.Object getNegotiatedProperty(java.lang.String) -> getNegotiatedProperty
    void clearPassword() -> clearPassword
    void dispose() -> dispose
    void finalize() -> finalize
    java.lang.Object[] getUserInfo() -> getUserInfo
org.apache.qpid.management.common.sasl.SaslProvider -> org.apache.qpid.management.common.sasl.SaslProvider:
    long serialVersionUID -> serialVersionUID
org.apache.qpid.management.common.sasl.UserPasswordCallbackHandler -> org.apache.qpid.management.common.sasl.UserPasswordCallbackHandler:
    java.lang.String user -> user
    char[] pwchars -> pwchars
    void handle(org.apache.harmony.javax.security.auth.callback.Callback[]) -> handle
    void clearPassword() -> clearPassword
    void finalize() -> finalize
org.apache.qpid.management.common.sasl.UsernameHashedPasswordCallbackHandler -> org.apache.qpid.management.common.sasl.UsernameHashedPasswordCallbackHandler:
    java.lang.String user -> user
    char[] pwchars -> pwchars
    void handle(org.apache.harmony.javax.security.auth.callback.Callback[]) -> handle
    void clearPassword() -> clearPassword
    void finalize() -> finalize
    char[] getHash(java.lang.String) -> getHash
org.bitlet.weupnp.GatewayDevice -> org.bitlet.weupnp.GatewayDevice:
    java.lang.String st -> st
    java.lang.String location -> location
    java.lang.String serviceType -> serviceType
    java.lang.String serviceTypeCIF -> serviceTypeCIF
    java.lang.String urlBase -> urlBase
    java.lang.String controlURL -> controlURL
    java.lang.String controlURLCIF -> controlURLCIF
    java.lang.String eventSubURL -> eventSubURL
    java.lang.String eventSubURLCIF -> eventSubURLCIF
    java.lang.String sCPDURL -> sCPDURL
    java.lang.String sCPDURLCIF -> sCPDURLCIF
    java.lang.String deviceType -> deviceType
    java.lang.String deviceTypeCIF -> deviceTypeCIF
    java.lang.String friendlyName -> friendlyName
    java.lang.String manufacturer -> manufacturer
    java.lang.String modelDescription -> modelDescription
    java.lang.String presentationURL -> presentationURL
    java.net.InetAddress localAddress -> localAddress
    java.lang.String modelNumber -> modelNumber
    java.lang.String modelName -> modelName
    int TIMEOUT -> TIMEOUT
    void loadDescription() -> loadDescription
    java.util.Map simpleUPnPcommand(java.lang.String,java.lang.String,java.lang.String,java.util.Map) -> simpleUPnPcommand
    boolean isConnected() -> isConnected
    java.lang.String getExternalIPAddress() -> getExternalIPAddress
    boolean addPortMapping(int,int,java.lang.String,java.lang.String,java.lang.String) -> addPortMapping
    boolean getSpecificPortMappingEntry(int,java.lang.String,org.bitlet.weupnp.PortMappingEntry) -> getSpecificPortMappingEntry
    boolean getGenericPortMappingEntry(int,org.bitlet.weupnp.PortMappingEntry) -> getGenericPortMappingEntry
    java.lang.Integer getPortMappingNumberOfEntries() -> getPortMappingNumberOfEntries
    boolean deletePortMapping(int,java.lang.String) -> deletePortMapping
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    void setLocalAddress(java.net.InetAddress) -> setLocalAddress
    java.lang.String getSt() -> getSt
    void setSt(java.lang.String) -> setSt
    java.lang.String getLocation() -> getLocation
    void setLocation(java.lang.String) -> setLocation
    java.lang.String getServiceType() -> getServiceType
    void setServiceType(java.lang.String) -> setServiceType
    java.lang.String getServiceTypeCIF() -> getServiceTypeCIF
    void setServiceTypeCIF(java.lang.String) -> setServiceTypeCIF
    java.lang.String getControlURL() -> getControlURL
    void setControlURL(java.lang.String) -> setControlURL
    java.lang.String getControlURLCIF() -> getControlURLCIF
    void setControlURLCIF(java.lang.String) -> setControlURLCIF
    java.lang.String getEventSubURL() -> getEventSubURL
    void setEventSubURL(java.lang.String) -> setEventSubURL
    java.lang.String getEventSubURLCIF() -> getEventSubURLCIF
    void setEventSubURLCIF(java.lang.String) -> setEventSubURLCIF
    java.lang.String getSCPDURL() -> getSCPDURL
    void setSCPDURL(java.lang.String) -> setSCPDURL
    java.lang.String getSCPDURLCIF() -> getSCPDURLCIF
    void setSCPDURLCIF(java.lang.String) -> setSCPDURLCIF
    java.lang.String getDeviceType() -> getDeviceType
    void setDeviceType(java.lang.String) -> setDeviceType
    java.lang.String getDeviceTypeCIF() -> getDeviceTypeCIF
    void setDeviceTypeCIF(java.lang.String) -> setDeviceTypeCIF
    java.lang.String getURLBase() -> getURLBase
    void setURLBase(java.lang.String) -> setURLBase
    java.lang.String getFriendlyName() -> getFriendlyName
    void setFriendlyName(java.lang.String) -> setFriendlyName
    java.lang.String getManufacturer() -> getManufacturer
    void setManufacturer(java.lang.String) -> setManufacturer
    java.lang.String getModelDescription() -> getModelDescription
    void setModelDescription(java.lang.String) -> setModelDescription
    java.lang.String getPresentationURL() -> getPresentationURL
    void setPresentationURL(java.lang.String) -> setPresentationURL
    java.lang.String getModelName() -> getModelName
    void setModelName(java.lang.String) -> setModelName
    java.lang.String getModelNumber() -> getModelNumber
    void setModelNumber(java.lang.String) -> setModelNumber
    java.lang.String copyOrCatUrl(java.lang.String,java.lang.String) -> copyOrCatUrl
org.bitlet.weupnp.GatewayDeviceHandler -> org.bitlet.weupnp.GatewayDeviceHandler:
    org.bitlet.weupnp.GatewayDevice device -> device
    java.lang.String currentElement -> currentElement
    int level -> level
    short state -> state
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void characters(char[],int,int) -> characters
org.bitlet.weupnp.GatewayDiscover -> org.bitlet.weupnp.GatewayDiscover:
    int PORT -> PORT
    java.lang.String IP -> IP
    int TIMEOUT -> TIMEOUT
    java.lang.String stSearch -> stSearch
    java.util.Map devices -> devices
    java.util.Map discover() -> discover
    org.bitlet.weupnp.GatewayDevice parseMSearchReplay(byte[]) -> parseMSearchReplay
    org.bitlet.weupnp.GatewayDevice getValidGateway() -> getValidGateway
    java.net.InetAddress getOutboundAddress(java.net.SocketAddress) -> getOutboundAddress
org.bitlet.weupnp.LogUtils -> org.bitlet.weupnp.LogUtils:
    java.lang.String LOG_NAME -> LOG_NAME
    java.util.logging.Logger logger -> logger
    java.util.logging.Logger getLogger() -> getLogger
    java.lang.String getLogName() -> getLogName
org.bitlet.weupnp.Main -> org.bitlet.weupnp.Main:
    int SAMPLE_PORT -> SAMPLE_PORT
    short WAIT_TIME -> WAIT_TIME
    void main(java.lang.String[]) -> main
org.bitlet.weupnp.NameValueHandler -> org.bitlet.weupnp.NameValueHandler:
    java.util.Map nameValue -> nameValue
    java.lang.String currentElement -> currentElement
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void characters(char[],int,int) -> characters
org.bitlet.weupnp.PortMappingEntry -> org.bitlet.weupnp.PortMappingEntry:
    int internalPort -> internalPort
    int externalPort -> externalPort
    java.lang.String remoteHost -> remoteHost
    java.lang.String internalClient -> internalClient
    java.lang.String protocol -> protocol
    java.lang.String enabled -> enabled
    java.lang.String portMappingDescription -> portMappingDescription
    int getInternalPort() -> getInternalPort
    void setInternalPort(int) -> setInternalPort
    int getExternalPort() -> getExternalPort
    void setExternalPort(int) -> setExternalPort
    java.lang.String getRemoteHost() -> getRemoteHost
    void setRemoteHost(java.lang.String) -> setRemoteHost
    java.lang.String getInternalClient() -> getInternalClient
    void setInternalClient(java.lang.String) -> setInternalClient
    java.lang.String getProtocol() -> getProtocol
    void setProtocol(java.lang.String) -> setProtocol
    java.lang.String getEnabled() -> getEnabled
    void setEnabled(java.lang.String) -> setEnabled
    java.lang.String getPortMappingDescription() -> getPortMappingDescription
    void setPortMappingDescription(java.lang.String) -> setPortMappingDescription
org.ice4j.AbstractResponseCollector -> org.ice4j.AbstractResponseCollector:
    void processFailure(org.ice4j.BaseStunMessageEvent) -> processFailure
    void processTimeout(org.ice4j.StunTimeoutEvent) -> processTimeout
    void processUnreachable(org.ice4j.StunFailureEvent) -> processUnreachable
org.ice4j.BaseStunMessageEvent -> org.ice4j.BaseStunMessageEvent:
    long serialVersionUID -> serialVersionUID
    org.ice4j.message.Message message -> message
    org.ice4j.stack.StunStack stunStack -> stunStack
    org.ice4j.stack.TransactionID transactionID -> transactionID
    org.ice4j.message.Message getMessage() -> getMessage
    org.ice4j.TransportAddress getSourceAddress() -> getSourceAddress
    org.ice4j.stack.StunStack getStunStack() -> getStunStack
    org.ice4j.stack.TransactionID getTransactionID() -> getTransactionID
    void setTransactionID(org.ice4j.stack.TransactionID) -> setTransactionID
org.ice4j.ChannelDataMessageEvent -> org.ice4j.ChannelDataMessageEvent:
    long serialVersionUID -> serialVersionUID
    org.ice4j.stack.StunStack stunStack -> stunStack
    org.ice4j.TransportAddress remoteAddress -> remoteAddress
    org.ice4j.TransportAddress localAddress -> localAddress
    org.ice4j.message.ChannelData channelDataMessage -> channelDataMessage
    org.ice4j.message.ChannelData getChannelDataMessage() -> getChannelDataMessage
    org.ice4j.TransportAddress getRemoteAddress() -> getRemoteAddress
    org.ice4j.TransportAddress getLocalAddress() -> getLocalAddress
    org.ice4j.stack.StunStack getStunStack() -> getStunStack
org.ice4j.PeerUdpMessageEvent -> org.ice4j.PeerUdpMessageEvent:
    long serialVersionUID -> serialVersionUID
    org.ice4j.stack.StunStack stunStack -> stunStack
    org.ice4j.stack.RawMessage udpMessage -> udpMessage
    byte[] getBytes() -> getBytes
    int getMessageLength() -> getMessageLength
    org.ice4j.TransportAddress getRemoteAddress() -> getRemoteAddress
    org.ice4j.TransportAddress getLocalAddress() -> getLocalAddress
    org.ice4j.stack.StunStack getStunStack() -> getStunStack
org.ice4j.ResponseCollector -> org.ice4j.ResponseCollector:
    void processResponse(org.ice4j.StunResponseEvent) -> processResponse
    void processTimeout(org.ice4j.StunTimeoutEvent) -> processTimeout
org.ice4j.StackProperties -> org.ice4j.StackProperties:
    java.util.logging.Logger logger -> logger
    java.lang.String BIND_RETRIES -> BIND_RETRIES
    int BIND_RETRIES_DEFAULT_VALUE -> BIND_RETRIES_DEFAULT_VALUE
    java.lang.String FIRST_CTRAN_RETRANS_AFTER -> FIRST_CTRAN_RETRANS_AFTER
    java.lang.String MAX_CTRAN_RETRANS_TIMER -> MAX_CTRAN_RETRANS_TIMER
    java.lang.String KEEP_CRANS_AFTER_A_RESPONSE -> KEEP_CRANS_AFTER_A_RESPONSE
    java.lang.String MAX_CTRAN_RETRANSMISSIONS -> MAX_CTRAN_RETRANSMISSIONS
    java.lang.String MAX_CHECK_LIST_SIZE -> MAX_CHECK_LIST_SIZE
    java.lang.String SOFTWARE -> SOFTWARE
    java.lang.String PROPAGATE_RECEIVED_RETRANSMISSIONS -> PROPAGATE_RECEIVED_RETRANSMISSIONS
    java.lang.String ALLOW_LINK_TO_GLOBAL_REACHABILITY -> ALLOW_LINK_TO_GLOBAL_REACHABILITY
    java.lang.String ALWAYS_SIGN -> ALWAYS_SIGN
    java.lang.String REQUIRE_MESSAGE_INTEGRITY -> REQUIRE_MESSAGE_INTEGRITY
    java.lang.String TERMINATION_DELAY -> TERMINATION_DELAY
    java.lang.String NO_KEEP_ALIVES -> NO_KEEP_ALIVES
    java.lang.String NOMINATION_TIMER -> NOMINATION_TIMER
    java.lang.String DISABLE_IPv6 -> DISABLE_IPv6
    java.lang.String ALLOWED_INTERFACES -> ALLOWED_INTERFACES
    java.lang.String BLOCKED_INTERFACES -> BLOCKED_INTERFACES
    java.lang.String getString(java.lang.String) -> getString
    java.lang.String[] getStringArray(java.lang.String,java.lang.String) -> getStringArray
    int getInt(java.lang.String,int) -> getInt
    boolean getBoolean(java.lang.String,boolean) -> getBoolean
org.ice4j.StunException -> org.ice4j.StunException:
    long serialVersionUID -> serialVersionUID
    int UNKNOWN_ERROR -> UNKNOWN_ERROR
    int ILLEGAL_STATE -> ILLEGAL_STATE
    int ILLEGAL_ARGUMENT -> ILLEGAL_ARGUMENT
    int INTERNAL_ERROR -> INTERNAL_ERROR
    int TRANSACTION_DOES_NOT_EXIST -> TRANSACTION_DOES_NOT_EXIST
    int NETWORK_ERROR -> NETWORK_ERROR
    int TRANSACTION_ALREADY_ANSWERED -> TRANSACTION_ALREADY_ANSWERED
    int id -> id
    void setID(int) -> setID
    int getID() -> getID
org.ice4j.StunFailureEvent -> org.ice4j.StunFailureEvent:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> cause
    org.ice4j.TransportAddress getLocalAddress() -> getLocalAddress
    java.lang.Throwable getCause() -> getCause
    java.lang.String toString() -> toString
org.ice4j.StunMessageEvent -> org.ice4j.StunMessageEvent:
    long serialVersionUID -> serialVersionUID
    org.ice4j.stack.RawMessage rawMessage -> rawMessage
    org.ice4j.TransportAddress getLocalAddress() -> getLocalAddress
    org.ice4j.TransportAddress getRemoteAddress() -> getRemoteAddress
    java.lang.String toString() -> toString
    org.ice4j.stack.RawMessage getRawMessage() -> getRawMessage
org.ice4j.StunResponseEvent -> org.ice4j.StunResponseEvent:
    long serialVersionUID -> serialVersionUID
    org.ice4j.message.Request request -> request
    org.ice4j.message.Request getRequest() -> getRequest
    org.ice4j.message.Response getResponse() -> getResponse
org.ice4j.StunTimeoutEvent -> org.ice4j.StunTimeoutEvent:
    long serialVersionUID -> serialVersionUID
    org.ice4j.TransportAddress getLocalAddress() -> getLocalAddress
    java.lang.String toString() -> toString
org.ice4j.Transport -> org.ice4j.Transport:
    org.ice4j.Transport TCP -> TCP
    org.ice4j.Transport UDP -> UDP
    org.ice4j.Transport TLS -> TLS
    org.ice4j.Transport DTLS -> DTLS
    org.ice4j.Transport SCTP -> SCTP
    org.ice4j.Transport SSLTCP -> SSLTCP
    java.lang.String transportName -> transportName
    org.ice4j.Transport[] $VALUES -> $VALUES
    org.ice4j.Transport[] values() -> values
    org.ice4j.Transport valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
    org.ice4j.Transport parse(java.lang.String) -> parse
org.ice4j.TransportAddress -> org.ice4j.TransportAddress:
    long serialVersionUID -> serialVersionUID
    org.ice4j.Transport transport -> transport
    byte[] getAddressBytes() -> getAddressBytes
    java.lang.String toString() -> toString
    java.lang.String getHostAddress() -> getHostAddress
    org.ice4j.Transport getTransport() -> getTransport
    boolean equals(org.ice4j.TransportAddress) -> equals
    boolean equalsTransportAddress(java.lang.Object) -> equalsTransportAddress
    boolean isIPv6() -> isIPv6
    boolean canReach(org.ice4j.TransportAddress) -> canReach
org.ice4j.attribute.AddressAttribute -> org.ice4j.attribute.AddressAttribute:
    byte ADDRESS_FAMILY_IPV4 -> ADDRESS_FAMILY_IPV4
    byte ADDRESS_FAMILY_IPV6 -> ADDRESS_FAMILY_IPV6
    org.ice4j.TransportAddress address -> address
    char DATA_LENGTH_FOR_IPV6 -> DATA_LENGTH_FOR_IPV6
    char DATA_LENGTH_FOR_IPV4 -> DATA_LENGTH_FOR_IPV4
    boolean isTypeValid(char) -> isTypeValid
    void setAttributeType(char) -> setAttributeType
    java.lang.String getName() -> getName
    boolean equals(java.lang.Object) -> equals
    char getDataLength() -> getDataLength
    byte[] encode() -> encode
    void setAddress(org.ice4j.TransportAddress) -> setAddress
    org.ice4j.TransportAddress getAddress() -> getAddress
    byte[] getAddressBytes() -> getAddressBytes
    byte getFamily() -> getFamily
    int getPort() -> getPort
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
org.ice4j.attribute.AlternateServerAttribute -> org.ice4j.attribute.AlternateServerAttribute:
    java.lang.String NAME -> NAME
    int getPort() -> getPort
    byte getFamily() -> getFamily
    byte[] getAddressBytes() -> getAddressBytes
    org.ice4j.TransportAddress getAddress() -> getAddress
    void setAddress(org.ice4j.TransportAddress) -> setAddress
    byte[] encode() -> encode
    char getDataLength() -> getDataLength
    boolean equals(java.lang.Object) -> equals
    java.lang.String getName() -> getName
org.ice4j.attribute.Attribute -> org.ice4j.attribute.Attribute:
    char MAPPED_ADDRESS -> MAPPED_ADDRESS
    char RESPONSE_ADDRESS -> RESPONSE_ADDRESS
    char CHANGE_REQUEST -> CHANGE_REQUEST
    char SOURCE_ADDRESS -> SOURCE_ADDRESS
    char CHANGED_ADDRESS -> CHANGED_ADDRESS
    char USERNAME -> USERNAME
    char PASSWORD -> PASSWORD
    char MESSAGE_INTEGRITY -> MESSAGE_INTEGRITY
    char ERROR_CODE -> ERROR_CODE
    char UNKNOWN_ATTRIBUTES -> UNKNOWN_ATTRIBUTES
    char REFLECTED_FROM -> REFLECTED_FROM
    char REALM -> REALM
    char NONCE -> NONCE
    char XOR_MAPPED_ADDRESS -> XOR_MAPPED_ADDRESS
    char XOR_ONLY -> XOR_ONLY
    char SOFTWARE -> SOFTWARE
    char ALTERNATE_SERVER -> ALTERNATE_SERVER
    char FINGERPRINT -> FINGERPRINT
    char UNKNOWN_OPTIONAL_ATTRIBUTE -> UNKNOWN_OPTIONAL_ATTRIBUTE
    char CHANNEL_NUMBER -> CHANNEL_NUMBER
    char LIFETIME -> LIFETIME
    char XOR_PEER_ADDRESS -> XOR_PEER_ADDRESS
    char DATA -> DATA
    char XOR_RELAYED_ADDRESS -> XOR_RELAYED_ADDRESS
    char REQUESTED_ADDRESS_FAMILY -> REQUESTED_ADDRESS_FAMILY
    char EVEN_PORT -> EVEN_PORT
    char REQUESTED_TRANSPORT -> REQUESTED_TRANSPORT
    char DONT_FRAGMENT -> DONT_FRAGMENT
    char RESERVATION_TOKEN -> RESERVATION_TOKEN
    char CONNECTION_ID -> CONNECTION_ID
    char MAGIC_COOKIE -> MAGIC_COOKIE
    char DESTINATION_ADDRESS -> DESTINATION_ADDRESS
    char REMOTE_ADDRESS -> REMOTE_ADDRESS
    char PRIORITY -> PRIORITY
    char USE_CANDIDATE -> USE_CANDIDATE
    char ICE_CONTROLLED -> ICE_CONTROLLED
    char ICE_CONTROLLING -> ICE_CONTROLLING
    char attributeType -> attributeType
    char HEADER_LENGTH -> HEADER_LENGTH
    int locationInMessage -> locationInMessage
    char getDataLength() -> getDataLength
    java.lang.String getName() -> getName
    char getAttributeType() -> getAttributeType
    void setAttributeType(char) -> setAttributeType
    boolean equals(java.lang.Object) -> equals
    byte[] encode() -> encode
    void setLocationInMessage(int) -> setLocationInMessage
    int getLocationInMessage() -> getLocationInMessage
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
org.ice4j.attribute.AttributeDecoder -> org.ice4j.attribute.AttributeDecoder:
    org.ice4j.attribute.Attribute decode(byte[],char,char) -> decode
org.ice4j.attribute.AttributeFactory -> org.ice4j.attribute.AttributeFactory:
    org.ice4j.attribute.ChangeRequestAttribute createChangeRequestAttribute() -> createChangeRequestAttribute
    org.ice4j.attribute.ChangeRequestAttribute createChangeRequestAttribute(boolean,boolean) -> createChangeRequestAttribute
    org.ice4j.attribute.ChangedAddressAttribute createChangedAddressAttribute(org.ice4j.TransportAddress) -> createChangedAddressAttribute
    org.ice4j.attribute.ErrorCodeAttribute createErrorCodeAttribute(byte,byte) -> createErrorCodeAttribute
    org.ice4j.attribute.ErrorCodeAttribute createErrorCodeAttribute(byte,byte,java.lang.String) -> createErrorCodeAttribute
    org.ice4j.attribute.ErrorCodeAttribute createErrorCodeAttribute(char) -> createErrorCodeAttribute
    org.ice4j.attribute.ErrorCodeAttribute createErrorCodeAttribute(char,java.lang.String) -> createErrorCodeAttribute
    org.ice4j.attribute.MappedAddressAttribute createMappedAddressAttribute(org.ice4j.TransportAddress) -> createMappedAddressAttribute
    org.ice4j.attribute.ReflectedFromAttribute createReflectedFromAttribute(org.ice4j.TransportAddress) -> createReflectedFromAttribute
    org.ice4j.attribute.ResponseAddressAttribute createResponseAddressAttribute(org.ice4j.TransportAddress) -> createResponseAddressAttribute
    org.ice4j.attribute.SourceAddressAttribute createSourceAddressAttribute(org.ice4j.TransportAddress) -> createSourceAddressAttribute
    org.ice4j.attribute.UnknownAttributesAttribute createUnknownAttributesAttribute() -> createUnknownAttributesAttribute
    org.ice4j.attribute.XorRelayedAddressAttribute createXorRelayedAddressAttribute(org.ice4j.TransportAddress,byte[]) -> createXorRelayedAddressAttribute
    org.ice4j.attribute.XorPeerAddressAttribute createXorPeerAddressAttribute(org.ice4j.TransportAddress,byte[]) -> createXorPeerAddressAttribute
    org.ice4j.attribute.XorMappedAddressAttribute createXorMappedAddressAttribute(org.ice4j.TransportAddress,byte[]) -> createXorMappedAddressAttribute
    org.ice4j.attribute.UsernameAttribute createUsernameAttribute(byte[]) -> createUsernameAttribute
    org.ice4j.attribute.UsernameAttribute createUsernameAttribute(java.lang.String) -> createUsernameAttribute
    org.ice4j.attribute.MessageIntegrityAttribute createMessageIntegrityAttribute(java.lang.String) -> createMessageIntegrityAttribute
    org.ice4j.attribute.FingerprintAttribute createFingerprintAttribute() -> createFingerprintAttribute
    org.ice4j.attribute.ChannelNumberAttribute createChannelNumberAttribute(char) -> createChannelNumberAttribute
    org.ice4j.attribute.RealmAttribute createRealmAttribute(byte[]) -> createRealmAttribute
    org.ice4j.attribute.NonceAttribute createNonceAttribute(byte[]) -> createNonceAttribute
    org.ice4j.attribute.SoftwareAttribute createSoftwareAttribute(byte[]) -> createSoftwareAttribute
    org.ice4j.attribute.EvenPortAttribute createEvenPortAttribute(boolean) -> createEvenPortAttribute
    org.ice4j.attribute.LifetimeAttribute createLifetimeAttribute(int) -> createLifetimeAttribute
    org.ice4j.attribute.RequestedTransportAttribute createRequestedTransportAttribute(byte) -> createRequestedTransportAttribute
    org.ice4j.attribute.ReservationTokenAttribute createReservationTokenAttribute(byte[]) -> createReservationTokenAttribute
    org.ice4j.attribute.DataAttribute createDataAttribute(byte[]) -> createDataAttribute
    org.ice4j.attribute.DataAttribute createDataAttributeWithoutPadding(byte[]) -> createDataAttributeWithoutPadding
    org.ice4j.attribute.IceControlledAttribute createIceControlledAttribute(long) -> createIceControlledAttribute
    org.ice4j.attribute.PriorityAttribute createPriorityAttribute(long) -> createPriorityAttribute
    org.ice4j.attribute.UseCandidateAttribute createUseCandidateAttribute() -> createUseCandidateAttribute
    org.ice4j.attribute.IceControllingAttribute createIceControllingAttribute(long) -> createIceControllingAttribute
    org.ice4j.attribute.MagicCookieAttribute createMagicCookieAttribute() -> createMagicCookieAttribute
    org.ice4j.attribute.DestinationAddressAttribute createDestinationAddressAttribute(org.ice4j.TransportAddress) -> createDestinationAddressAttribute
    org.ice4j.attribute.RequestedAddressFamilyAttribute createRequestedAddressFamilyAttribute(char) -> createRequestedAddressFamilyAttribute
    org.ice4j.attribute.ConnectionIdAttribute createConnectionIdAttribute(int) -> createConnectionIdAttribute
org.ice4j.attribute.ChangeRequestAttribute -> org.ice4j.attribute.ChangeRequestAttribute:
    java.lang.String NAME -> NAME
    boolean changeIpFlag -> changeIpFlag
    boolean changePortFlag -> changePortFlag
    char DATA_LENGTH -> DATA_LENGTH
    java.lang.String getName() -> getName
    boolean equals(java.lang.Object) -> equals
    char getDataLength() -> getDataLength
    byte[] encode() -> encode
    void setChangeIpFlag(boolean) -> setChangeIpFlag
    boolean getChangeIpFlag() -> getChangeIpFlag
    void setChangePortFlag(boolean) -> setChangePortFlag
    boolean getChangePortFlag() -> getChangePortFlag
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
org.ice4j.attribute.ChangedAddressAttribute -> org.ice4j.attribute.ChangedAddressAttribute:
    java.lang.String NAME -> NAME
    int getPort() -> getPort
    byte getFamily() -> getFamily
    byte[] getAddressBytes() -> getAddressBytes
    org.ice4j.TransportAddress getAddress() -> getAddress
    void setAddress(org.ice4j.TransportAddress) -> setAddress
    byte[] encode() -> encode
    char getDataLength() -> getDataLength
    boolean equals(java.lang.Object) -> equals
    java.lang.String getName() -> getName
org.ice4j.attribute.ChannelNumberAttribute -> org.ice4j.attribute.ChannelNumberAttribute:
    java.lang.String NAME -> NAME
    char DATA_LENGTH -> DATA_LENGTH
    char channelNumber -> channelNumber
    boolean equals(java.lang.Object) -> equals
    java.lang.String getName() -> getName
    char getDataLength() -> getDataLength
    byte[] encode() -> encode
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
    void setChannelNumber(char) -> setChannelNumber
    char getChannelNumber() -> getChannelNumber
    boolean isValidRange(char) -> isValidRange
org.ice4j.attribute.ConnectionIdAttribute -> org.ice4j.attribute.ConnectionIdAttribute:
    java.lang.String NAME -> NAME
    char DATA_LENGTH -> DATA_LENGTH
    int connectionIdValue -> connectionIdValue
    char getDataLength() -> getDataLength
    java.lang.String getName() -> getName
    boolean equals(java.lang.Object) -> equals
    byte[] encode() -> encode
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
    int getConnectionIdValue() -> getConnectionIdValue
    void setConnectionIdValue(int) -> setConnectionIdValue
org.ice4j.attribute.ContentDependentAttribute -> org.ice4j.attribute.ContentDependentAttribute:
    byte[] encode(org.ice4j.stack.StunStack,byte[],int,int) -> encode
org.ice4j.attribute.DataAttribute -> org.ice4j.attribute.DataAttribute:
    java.lang.String NAME -> NAME
    byte[] data -> data
    boolean padding -> padding
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
    byte[] encode() -> encode
    char getDataLength() -> getDataLength
    java.lang.String getName() -> getName
    byte[] getData() -> getData
    void setData(byte[]) -> setData
    boolean equals(java.lang.Object) -> equals
org.ice4j.attribute.DestinationAddressAttribute -> org.ice4j.attribute.DestinationAddressAttribute:
    java.lang.String NAME -> NAME
    int getPort() -> getPort
    byte getFamily() -> getFamily
    byte[] getAddressBytes() -> getAddressBytes
    org.ice4j.TransportAddress getAddress() -> getAddress
    void setAddress(org.ice4j.TransportAddress) -> setAddress
    byte[] encode() -> encode
    char getDataLength() -> getDataLength
    boolean equals(java.lang.Object) -> equals
    java.lang.String getName() -> getName
org.ice4j.attribute.DontFragmentAttribute -> org.ice4j.attribute.DontFragmentAttribute:
    java.lang.String NAME -> NAME
    char DATA_LENGTH -> DATA_LENGTH
    boolean equals(java.lang.Object) -> equals
    java.lang.String getName() -> getName
    char getDataLength() -> getDataLength
    byte[] encode() -> encode
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
org.ice4j.attribute.ErrorCodeAttribute -> org.ice4j.attribute.ErrorCodeAttribute:
    java.lang.String NAME -> NAME
    char TRY_ALTERNATE -> TRY_ALTERNATE
    char BAD_REQUEST -> BAD_REQUEST
    char UNAUTHORIZED -> UNAUTHORIZED
    char FORBIDDEN -> FORBIDDEN
    char UNKNOWN_ATTRIBUTE -> UNKNOWN_ATTRIBUTE
    char STALE_CREDENTIALS -> STALE_CREDENTIALS
    char INTEGRITY_CHECK_FAILURE -> INTEGRITY_CHECK_FAILURE
    char MISSING_USERNAME -> MISSING_USERNAME
    char USE_TLS -> USE_TLS
    char ALLOCATION_MISMATCH -> ALLOCATION_MISMATCH
    char STALE_NONCE -> STALE_NONCE
    char ADDRESS_FAMILY_NOT_SUPPORTED -> ADDRESS_FAMILY_NOT_SUPPORTED
    char WRONG_CREDENTIALS -> WRONG_CREDENTIALS
    char UNSUPPORTED_TRANSPORT_PROTOCOL -> UNSUPPORTED_TRANSPORT_PROTOCOL
    char PEER_ADDRESS_FAMILY_MISMATCH -> PEER_ADDRESS_FAMILY_MISMATCH
    char CONNECTION_ALREADY_EXISTS -> CONNECTION_ALREADY_EXISTS
    char CONNECTION_TIMEOUT_OR_FAILURE -> CONNECTION_TIMEOUT_OR_FAILURE
    char ALLOCATION_QUOTA_REACHED -> ALLOCATION_QUOTA_REACHED
    char ROLE_CONFLICT -> ROLE_CONFLICT
    char SERVER_ERROR -> SERVER_ERROR
    char INSUFFICIENT_CAPACITY -> INSUFFICIENT_CAPACITY
    char GLOBAL_FAILURE -> GLOBAL_FAILURE
    byte errorClass -> errorClass
    byte errorNumber -> errorNumber
    byte[] reasonPhrase -> reasonPhrase
    void setErrorCode(char) -> setErrorCode
    char getErrorCode() -> getErrorCode
    void setErrorNumber(byte) -> setErrorNumber
    byte getErrorNumber() -> getErrorNumber
    void setErrorClass(byte) -> setErrorClass
    byte getErrorClass() -> getErrorClass
    java.lang.String getDefaultReasonPhrase(char) -> getDefaultReasonPhrase
    void setReasonPhrase(java.lang.String) -> setReasonPhrase
    java.lang.String getReasonPhrase() -> getReasonPhrase
    java.lang.String getName() -> getName
    char getDataLength() -> getDataLength
    byte[] encode() -> encode
    boolean equals(java.lang.Object) -> equals
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
org.ice4j.attribute.EvenPortAttribute -> org.ice4j.attribute.EvenPortAttribute:
    java.lang.String NAME -> NAME
    char DATA_LENGTH -> DATA_LENGTH
    boolean rFlag -> rFlag
    boolean equals(java.lang.Object) -> equals
    java.lang.String getName() -> getName
    char getDataLength() -> getDataLength
    byte[] encode() -> encode
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
    void setRFlag(boolean) -> setRFlag
    boolean isRFlag() -> isRFlag
org.ice4j.attribute.FingerprintAttribute -> org.ice4j.attribute.FingerprintAttribute:
    java.lang.String NAME -> NAME
    byte[] XOR_MASK -> XOR_MASK
    byte[] crc -> crc
    byte[] getChecksum() -> getChecksum
    char getDataLength() -> getDataLength
    java.lang.String getName() -> getName
    boolean equals(java.lang.Object) -> equals
    byte[] encode() -> encode
    byte[] encode(org.ice4j.stack.StunStack,byte[],int,int) -> encode
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
    byte[] calculateXorCRC32(byte[],int,int) -> calculateXorCRC32
org.ice4j.attribute.IceControlAttribute -> org.ice4j.attribute.IceControlAttribute:
    char DATA_LENGTH_ICE_CONTROL -> DATA_LENGTH_ICE_CONTROL
    long tieBreaker -> tieBreaker
    boolean isControlling -> isControlling
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
    byte[] encode() -> encode
    boolean equals(java.lang.Object) -> equals
    char getDataLength() -> getDataLength
    java.lang.String getName() -> getName
    void setTieBreaker(long) -> setTieBreaker
    long getTieBreaker() -> getTieBreaker
org.ice4j.attribute.IceControlledAttribute -> org.ice4j.attribute.IceControlledAttribute:
org.ice4j.attribute.IceControllingAttribute -> org.ice4j.attribute.IceControllingAttribute:
org.ice4j.attribute.LifetimeAttribute -> org.ice4j.attribute.LifetimeAttribute:
    java.lang.String NAME -> NAME
    char DATA_LENGTH -> DATA_LENGTH
    int lifetime -> lifetime
    boolean equals(java.lang.Object) -> equals
    java.lang.String getName() -> getName
    char getDataLength() -> getDataLength
    byte[] encode() -> encode
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
    void setLifetime(int) -> setLifetime
    int getLifetime() -> getLifetime
org.ice4j.attribute.MagicCookieAttribute -> org.ice4j.attribute.MagicCookieAttribute:
    java.lang.String NAME -> NAME
    char DATA_LENGTH -> DATA_LENGTH
    int value -> value
    java.lang.String getName() -> getName
    char getDataLength() -> getDataLength
    boolean equals(java.lang.Object) -> equals
    byte[] encode() -> encode
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
org.ice4j.attribute.MappedAddressAttribute -> org.ice4j.attribute.MappedAddressAttribute:
    java.lang.String NAME -> NAME
    int getPort() -> getPort
    byte getFamily() -> getFamily
    byte[] getAddressBytes() -> getAddressBytes
    org.ice4j.TransportAddress getAddress() -> getAddress
    void setAddress(org.ice4j.TransportAddress) -> setAddress
    byte[] encode() -> encode
    char getDataLength() -> getDataLength
    boolean equals(java.lang.Object) -> equals
    java.lang.String getName() -> getName
org.ice4j.attribute.MessageIntegrityAttribute -> org.ice4j.attribute.MessageIntegrityAttribute:
    java.lang.String NAME -> NAME
    java.lang.String HMAC_SHA1_ALGORITHM -> HMAC_SHA1_ALGORITHM
    char DATA_LENGTH -> DATA_LENGTH
    byte[] hmacSha1Content -> hmacSha1Content
    java.lang.String username -> username
    java.lang.String media -> media
    void setUsername(java.lang.String) -> setUsername
    void setMedia(java.lang.String) -> setMedia
    byte[] getHmacSha1Content() -> getHmacSha1Content
    byte[] calculateHmacSha1(byte[],int,int,byte[]) -> calculateHmacSha1
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
    byte[] encode() -> encode
    byte[] encode(org.ice4j.stack.StunStack,byte[],int,int) -> encode
    char getDataLength() -> getDataLength
    java.lang.String getName() -> getName
    boolean equals(java.lang.Object) -> equals
org.ice4j.attribute.NonceAttribute -> org.ice4j.attribute.NonceAttribute:
    java.lang.String NAME -> NAME
    byte[] nonce -> nonce
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
    byte[] encode() -> encode
    char getDataLength() -> getDataLength
    java.lang.String getName() -> getName
    byte[] getNonce() -> getNonce
    void setNonce(byte[]) -> setNonce
    boolean equals(java.lang.Object) -> equals
org.ice4j.attribute.OptionalAttribute -> org.ice4j.attribute.OptionalAttribute:
    byte[] attributeValue -> attributeValue
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
    byte[] encode() -> encode
    char getDataLength() -> getDataLength
    java.lang.String getName() -> getName
    byte[] getBody() -> getBody
    void setBody(byte[],int,int) -> setBody
    boolean equals(java.lang.Object) -> equals
org.ice4j.attribute.PriorityAttribute -> org.ice4j.attribute.PriorityAttribute:
    char DATA_LENGTH_PRIORITY -> DATA_LENGTH_PRIORITY
    long priority -> priority
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
    byte[] encode() -> encode
    boolean equals(java.lang.Object) -> equals
    char getDataLength() -> getDataLength
    java.lang.String getName() -> getName
    long getPriority() -> getPriority
    void setPriority(long) -> setPriority
org.ice4j.attribute.RealmAttribute -> org.ice4j.attribute.RealmAttribute:
    java.lang.String NAME -> NAME
    byte[] realm -> realm
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
    byte[] encode() -> encode
    char getDataLength() -> getDataLength
    java.lang.String getName() -> getName
    byte[] getRealm() -> getRealm
    void setRealm(byte[]) -> setRealm
    boolean equals(java.lang.Object) -> equals
org.ice4j.attribute.ReflectedFromAttribute -> org.ice4j.attribute.ReflectedFromAttribute:
    java.lang.String NAME -> NAME
    int getPort() -> getPort
    byte getFamily() -> getFamily
    byte[] getAddressBytes() -> getAddressBytes
    org.ice4j.TransportAddress getAddress() -> getAddress
    void setAddress(org.ice4j.TransportAddress) -> setAddress
    byte[] encode() -> encode
    char getDataLength() -> getDataLength
    boolean equals(java.lang.Object) -> equals
    java.lang.String getName() -> getName
org.ice4j.attribute.RemoteAddressAttribute -> org.ice4j.attribute.RemoteAddressAttribute:
    java.lang.String NAME -> NAME
    int getPort() -> getPort
    byte getFamily() -> getFamily
    byte[] getAddressBytes() -> getAddressBytes
    org.ice4j.TransportAddress getAddress() -> getAddress
    void setAddress(org.ice4j.TransportAddress) -> setAddress
    byte[] encode() -> encode
    char getDataLength() -> getDataLength
    boolean equals(java.lang.Object) -> equals
    java.lang.String getName() -> getName
org.ice4j.attribute.RequestedAddressFamilyAttribute -> org.ice4j.attribute.RequestedAddressFamilyAttribute:
    java.lang.String NAME -> NAME
    char DATA_LENGTH -> DATA_LENGTH
    char IPv4 -> IPv4
    char IPv6 -> IPv6
    char family -> family
    char getDataLength() -> getDataLength
    java.lang.String getName() -> getName
    boolean equals(java.lang.Object) -> equals
    byte[] encode() -> encode
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
    char getFamily() -> getFamily
    boolean setFamily(char) -> setFamily
org.ice4j.attribute.RequestedTransportAttribute -> org.ice4j.attribute.RequestedTransportAttribute:
    java.lang.String NAME -> NAME
    char DATA_LENGTH -> DATA_LENGTH
    byte UDP -> UDP
    byte TCP -> TCP
    byte transportProtocol -> transportProtocol
    boolean equals(java.lang.Object) -> equals
    java.lang.String getName() -> getName
    char getDataLength() -> getDataLength
    byte[] encode() -> encode
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
    void setRequestedTransport(byte) -> setRequestedTransport
    int getRequestedTransport() -> getRequestedTransport
org.ice4j.attribute.ReservationTokenAttribute -> org.ice4j.attribute.ReservationTokenAttribute:
    java.lang.String NAME -> NAME
    byte[] reservationToken -> reservationToken
    int hashCode -> hashCode
    java.util.Random random -> random
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
    byte[] encode() -> encode
    java.lang.String getName() -> getName
    byte[] getReservationToken() -> getReservationToken
    void setReservationToken(byte[]) -> setReservationToken
    char getDataLength() -> getDataLength
    org.ice4j.attribute.ReservationTokenAttribute createNewReservationTokenAttribute() -> createNewReservationTokenAttribute
    void generateReservationTokenAttribute(org.ice4j.attribute.ReservationTokenAttribute,int) -> generateReservationTokenAttribute
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.String toString(byte[]) -> toString
    int hashCode() -> hashCode
org.ice4j.attribute.ResponseAddressAttribute -> org.ice4j.attribute.ResponseAddressAttribute:
    java.lang.String NAME -> NAME
    int getPort() -> getPort
    byte getFamily() -> getFamily
    byte[] getAddressBytes() -> getAddressBytes
    org.ice4j.TransportAddress getAddress() -> getAddress
    void setAddress(org.ice4j.TransportAddress) -> setAddress
    byte[] encode() -> encode
    char getDataLength() -> getDataLength
    boolean equals(java.lang.Object) -> equals
    java.lang.String getName() -> getName
org.ice4j.attribute.SoftwareAttribute -> org.ice4j.attribute.SoftwareAttribute:
    byte[] software -> software
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
    byte[] encode() -> encode
    char getDataLength() -> getDataLength
    java.lang.String getName() -> getName
    byte[] getSoftware() -> getSoftware
    void setSoftware(byte[]) -> setSoftware
    boolean equals(java.lang.Object) -> equals
org.ice4j.attribute.SourceAddressAttribute -> org.ice4j.attribute.SourceAddressAttribute:
    java.lang.String NAME -> NAME
    int getPort() -> getPort
    byte getFamily() -> getFamily
    byte[] getAddressBytes() -> getAddressBytes
    org.ice4j.TransportAddress getAddress() -> getAddress
    void setAddress(org.ice4j.TransportAddress) -> setAddress
    byte[] encode() -> encode
    char getDataLength() -> getDataLength
    boolean equals(java.lang.Object) -> equals
    java.lang.String getName() -> getName
org.ice4j.attribute.UnknownAttributesAttribute -> org.ice4j.attribute.UnknownAttributesAttribute:
    java.lang.String NAME -> NAME
    java.util.ArrayList unknownAttributes -> unknownAttributes
    java.lang.String getName() -> getName
    char getDataLength() -> getDataLength
    void addAttributeID(char) -> addAttributeID
    boolean contains(char) -> contains
    java.util.Iterator getAttributes() -> getAttributes
    int getAttributeCount() -> getAttributeCount
    char getAttribute(int) -> getAttribute
    byte[] encode() -> encode
    boolean equals(java.lang.Object) -> equals
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
org.ice4j.attribute.UseCandidateAttribute -> org.ice4j.attribute.UseCandidateAttribute:
    char DATA_LENGTH_USE_CANDIDATE -> DATA_LENGTH_USE_CANDIDATE
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
    byte[] encode() -> encode
    boolean equals(java.lang.Object) -> equals
    char getDataLength() -> getDataLength
    java.lang.String getName() -> getName
org.ice4j.attribute.UsernameAttribute -> org.ice4j.attribute.UsernameAttribute:
    java.lang.String NAME -> NAME
    byte[] username -> username
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
    byte[] encode() -> encode
    char getDataLength() -> getDataLength
    java.lang.String getName() -> getName
    byte[] getUsername() -> getUsername
    void setUsername(byte[]) -> setUsername
    boolean equals(java.lang.Object) -> equals
org.ice4j.attribute.XorMappedAddressAttribute -> org.ice4j.attribute.XorMappedAddressAttribute:
    java.lang.String NAME -> NAME
    org.ice4j.TransportAddress applyXor(org.ice4j.TransportAddress,byte[]) -> applyXor
    org.ice4j.TransportAddress getAddress(byte[]) -> getAddress
    org.ice4j.TransportAddress applyXor(byte[]) -> applyXor
    void setAddress(org.ice4j.TransportAddress,byte[]) -> setAddress
    int getPort() -> getPort
    byte getFamily() -> getFamily
    byte[] getAddressBytes() -> getAddressBytes
    org.ice4j.TransportAddress getAddress() -> getAddress
    void setAddress(org.ice4j.TransportAddress) -> setAddress
    byte[] encode() -> encode
    char getDataLength() -> getDataLength
    boolean equals(java.lang.Object) -> equals
    java.lang.String getName() -> getName
org.ice4j.attribute.XorOnlyAttribute -> org.ice4j.attribute.XorOnlyAttribute:
    void decodeAttributeBody(byte[],char,char) -> decodeAttributeBody
    byte[] encode() -> encode
    char getDataLength() -> getDataLength
    java.lang.String getName() -> getName
    boolean equals(java.lang.Object) -> equals
org.ice4j.attribute.XorPeerAddressAttribute -> org.ice4j.attribute.XorPeerAddressAttribute:
    java.lang.String NAME -> NAME
org.ice4j.attribute.XorRelayedAddressAttribute -> org.ice4j.attribute.XorRelayedAddressAttribute:
    java.lang.String NAME -> NAME
org.ice4j.ice.Agent -> org.ice4j.ice.Agent:
    int CONSENT_FRESHNESS_MAX_RETRANSMISSIONS -> CONSENT_FRESHNESS_MAX_RETRANSMISSIONS
    int CONSENT_FRESHNESS_WAIT_INTERVAL -> CONSENT_FRESHNESS_WAIT_INTERVAL
    int DEFAULT_MAX_CHECK_LIST_SIZE -> DEFAULT_MAX_CHECK_LIST_SIZE
    int DEFAULT_TERMINATION_DELAY -> DEFAULT_TERMINATION_DELAY
    java.beans.PropertyChangeListener[] NO_STATE_CHANGE_LISTENERS -> NO_STATE_CHANGE_LISTENERS
    java.util.logging.Logger logger -> logger
    java.util.Map mediaStreams -> mediaStreams
    org.ice4j.ice.harvest.HostCandidateHarvester hostCandidateHarvester -> hostCandidateHarvester
    org.ice4j.ice.harvest.CandidateHarvesterSet harvesters -> harvesters
    org.ice4j.ice.FoundationsRegistry foundationsRegistry -> foundationsRegistry
    org.ice4j.ice.DefaultNominator nominator -> nominator
    java.lang.String PROPERTY_ICE_PROCESSING_STATE -> PROPERTY_ICE_PROCESSING_STATE
    long taValue -> taValue
    java.util.List preDiscoveredPairsQueue -> preDiscoveredPairsQueue
    java.lang.Object startLock -> startLock
    java.lang.String ufrag -> ufrag
    java.lang.String password -> password
    long tieBreaker -> tieBreaker
    boolean isControlling -> isControlling
    org.ice4j.ice.ConnectivityCheckClient connCheckClient -> connCheckClient
    org.ice4j.ice.ConnectivityCheckServer connCheckServer -> connCheckServer
    org.ice4j.ice.IceProcessingState state -> state
    java.util.List stateListeners -> stateListeners
    org.ice4j.stack.StunStack stunStack -> stunStack
    org.ice4j.ice.Agent$TerminationThread terminationThread -> terminationThread
    java.lang.Thread stunKeepAliveThread -> stunKeepAliveThread
    int generation -> generation
    boolean trickle -> trickle
    boolean shutdown -> shutdown
    boolean harvestingStarted -> harvestingStarted
    boolean performConsentFreshness -> performConsentFreshness
    org.ice4j.ice.IceMediaStream createMediaStream(java.lang.String) -> createMediaStream
    org.ice4j.ice.Component createComponent(org.ice4j.ice.IceMediaStream,org.ice4j.Transport,int,int,int) -> createComponent
    void gatherCandidates(org.ice4j.ice.Component,int,int,int) -> gatherCandidates
    void startCandidateTrickle(org.ice4j.ice.harvest.TrickleCallback) -> startCandidateTrickle
    void startConnectivityEstablishment() -> startConnectivityEstablishment
    void pruneNonMatchedStreams() -> pruneNonMatchedStreams
    boolean isStarted() -> isStarted
    boolean isOver() -> isOver
    org.ice4j.ice.IceProcessingState getState() -> getState
    void addStateChangeListener(java.beans.PropertyChangeListener) -> addStateChangeListener
    void removeStateChangeListener(java.beans.PropertyChangeListener) -> removeStateChangeListener
    void fireStateChange(org.ice4j.ice.IceProcessingState,org.ice4j.ice.IceProcessingState) -> fireStateChange
    void setState(org.ice4j.ice.IceProcessingState) -> setState
    void initCheckLists() -> initCheckLists
    void addCandidateHarvester(org.ice4j.ice.harvest.CandidateHarvester) -> addCandidateHarvester
    org.ice4j.ice.harvest.CandidateHarvesterSet getHarvesters() -> getHarvesters
    java.lang.String getLocalUfrag() -> getLocalUfrag
    java.lang.String getLocalPassword() -> getLocalPassword
    java.lang.String generateLocalUserName(java.lang.String) -> generateLocalUserName
    java.lang.String generateRemoteUserName(java.lang.String) -> generateRemoteUserName
    java.lang.String generateLocalUserName(org.ice4j.ice.RemoteCandidate,org.ice4j.ice.LocalCandidate) -> generateLocalUserName
    java.lang.String generateRemoteUserName(org.ice4j.ice.RemoteCandidate,org.ice4j.ice.LocalCandidate) -> generateRemoteUserName
    java.lang.String generateUserName(org.ice4j.ice.Candidate,org.ice4j.ice.Candidate) -> generateUserName
    org.ice4j.ice.FoundationsRegistry getFoundationsRegistry() -> getFoundationsRegistry
    org.ice4j.ice.IceMediaStream getStream(java.lang.String) -> getStream
    java.util.List getStreamNames() -> getStreamNames
    java.util.List getStreams() -> getStreams
    int getStreamCount() -> getStreamCount
    java.util.List getStreamsWithPendingConnectivityEstablishment() -> getStreamsWithPendingConnectivityEstablishment
    org.ice4j.stack.StunStack getStunStack() -> getStunStack
    int getActiveCheckListCount() -> getActiveCheckListCount
    java.lang.String toString() -> toString
    long getTieBreaker() -> getTieBreaker
    void setControlling(boolean) -> setControlling
    void removeStream(org.ice4j.ice.IceMediaStream) -> removeStream
    boolean isControlling() -> isControlling
    org.ice4j.ice.LocalCandidate findLocalCandidate(org.ice4j.TransportAddress) -> findLocalCandidate
    org.ice4j.ice.LocalCandidate findLocalCandidate(org.ice4j.TransportAddress,java.lang.String) -> findLocalCandidate
    org.ice4j.ice.RemoteCandidate findRemoteCandidate(org.ice4j.TransportAddress) -> findRemoteCandidate
    org.ice4j.ice.CandidatePair findCandidatePair(org.ice4j.TransportAddress,org.ice4j.TransportAddress) -> findCandidatePair
    org.ice4j.ice.CandidatePair findCandidatePair(java.lang.String,java.lang.String) -> findCandidatePair
    void incomingCheckReceived(org.ice4j.TransportAddress,org.ice4j.TransportAddress,long,java.lang.String,java.lang.String,boolean) -> incomingCheckReceived
    void triggerCheck(org.ice4j.ice.CandidatePair) -> triggerCheck
    void validatePair(org.ice4j.ice.CandidatePair) -> validatePair
    void nominate(org.ice4j.ice.CandidatePair) -> nominate
    void setNominationStrategy(org.ice4j.ice.NominationStrategy) -> setNominationStrategy
    void nominationConfirmed(org.ice4j.ice.CandidatePair) -> nominationConfirmed
    void checkListStatesUpdated() -> checkListStatesUpdated
    void logCandTypes() -> logCandTypes
    int countHostCandidates() -> countHostCandidates
    void setTa(long) -> setTa
    long calculateTa() -> calculateTa
    long calculateStunHarvestRTO() -> calculateStunHarvestRTO
    long calculateStunConnCheckRTO() -> calculateStunConnCheckRTO
    void scheduleTermination() -> scheduleTermination
    void scheduleStunKeepAlive() -> scheduleStunKeepAlive
    void terminate(org.ice4j.ice.IceProcessingState) -> terminate
    java.lang.String ensureIceAttributeLength(java.lang.String,int,int) -> ensureIceAttributeLength
    void finalize() -> finalize
    void free() -> free
    int getGeneration() -> getGeneration
    void setGeneration(int) -> setGeneration
    void runInStunKeepAliveThread() -> runInStunKeepAliveThread
    boolean runInStunKeepAliveThreadCondition() -> runInStunKeepAliveThreadCondition
    org.ice4j.ice.CandidatePair getSelectedPair(java.lang.String) -> getSelectedPair
    org.ice4j.ice.LocalCandidate getSelectedLocalCandidate(java.lang.String) -> getSelectedLocalCandidate
    org.ice4j.ice.RemoteCandidate getSelectedRemoteCandidate(java.lang.String) -> getSelectedRemoteCandidate
    boolean isTrickling() -> isTrickling
    void setTrickling(boolean) -> setTrickling
    long getHarvestingTime(java.lang.String) -> getHarvestingTime
    int getHarvestCount(java.lang.String) -> getHarvestCount
    long getTotalHarvestingTime() -> getTotalHarvestingTime
    int getHarvestCount() -> getHarvestCount
    boolean getPerformConsentFreshness() -> getPerformConsentFreshness
    void setPerformConsentFreshness(boolean) -> setPerformConsentFreshness
    void access$100(org.ice4j.ice.Agent) -> access$100
    java.util.logging.Logger access$200() -> access$200
    void access$300(org.ice4j.ice.Agent,org.ice4j.ice.IceProcessingState) -> access$300
    org.ice4j.ice.Agent$TerminationThread access$402(org.ice4j.ice.Agent,org.ice4j.ice.Agent$TerminationThread) -> access$402
org.ice4j.ice.Agent$1 -> org.ice4j.ice.Agent$1:
    org.ice4j.ice.Agent this$0 -> this$0
    void run() -> run
org.ice4j.ice.Agent$TerminationThread -> org.ice4j.ice.Agent$TerminationThread:
    org.ice4j.ice.Agent this$0 -> this$0
    void run() -> run
org.ice4j.ice.Candidate -> org.ice4j.ice.Candidate:
    org.ice4j.TransportAddress transportAddress -> transportAddress
    org.ice4j.ice.CandidateType candidateType -> candidateType
    java.lang.String foundation -> foundation
    org.ice4j.ice.Candidate base -> base
    long priority -> priority
    boolean virtual -> virtual
    org.ice4j.ice.Component parentComponent -> parentComponent
    org.ice4j.TransportAddress stunServerAddress -> stunServerAddress
    org.ice4j.TransportAddress relayServerAddress -> relayServerAddress
    org.ice4j.TransportAddress mappedAddress -> mappedAddress
    org.ice4j.ice.Candidate relatedCandidate -> relatedCandidate
    int MAX_TYPE_PREFERENCE -> MAX_TYPE_PREFERENCE
    int MIN_TYPE_PREFERENCE -> MIN_TYPE_PREFERENCE
    int MAX_LOCAL_PREFERENCE -> MAX_LOCAL_PREFERENCE
    int MIN_LOCAL_PREFERENCE -> MIN_LOCAL_PREFERENCE
    org.ice4j.ice.CandidateType getType() -> getType
    void setCandidateType(org.ice4j.ice.CandidateType) -> setCandidateType
    java.lang.String getFoundation() -> getFoundation
    void setFoundation(java.lang.String) -> setFoundation
    org.ice4j.ice.Candidate getBase() -> getBase
    void setBase(org.ice4j.ice.Candidate) -> setBase
    long getPriority() -> getPriority
    org.ice4j.TransportAddress getTransportAddress() -> getTransportAddress
    boolean equals(java.lang.Object) -> equals
    org.ice4j.ice.Component getParentComponent() -> getParentComponent
    long computePriority() -> computePriority
    long computeGTalkPriority() -> computeGTalkPriority
    long computePriorityForType(org.ice4j.ice.CandidateType) -> computePriorityForType
    long computeGTalkPriorityForType(org.ice4j.ice.CandidateType) -> computeGTalkPriorityForType
    int getTypePreference(org.ice4j.ice.CandidateType) -> getTypePreference
    int getLocalPreference() -> getLocalPreference
    boolean isVirtual() -> isVirtual
    void setVirtual(boolean) -> setVirtual
    org.ice4j.TransportAddress getStunServerAddress() -> getStunServerAddress
    void setStunServerAddress(org.ice4j.TransportAddress) -> setStunServerAddress
    org.ice4j.TransportAddress getRelayServerAddress() -> getRelayServerAddress
    void setRelayServerAddress(org.ice4j.TransportAddress) -> setRelayServerAddress
    org.ice4j.TransportAddress getMappedAddress() -> getMappedAddress
    void setMappedAddress(org.ice4j.TransportAddress) -> setMappedAddress
    org.ice4j.Transport getTransport() -> getTransport
    org.ice4j.TransportAddress getRelatedAddress() -> getRelatedAddress
    org.ice4j.ice.Candidate findRelatedCandidate(org.ice4j.TransportAddress) -> findRelatedCandidate
    java.lang.String toString() -> toString
    java.lang.String toShortString() -> toShortString
    int getDefaultPreference() -> getDefaultPreference
    boolean canReach(org.ice4j.ice.Candidate) -> canReach
    boolean isDefault() -> isDefault
    java.lang.String getUfrag() -> getUfrag
    org.ice4j.TransportAddress getHostAddress() -> getHostAddress
    org.ice4j.TransportAddress getReflexiveAddress() -> getReflexiveAddress
    org.ice4j.TransportAddress getRelayedAddress() -> getRelayedAddress
    org.ice4j.ice.Candidate getRelatedCandidate() -> getRelatedCandidate
    int compareTo(org.ice4j.ice.Candidate) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
org.ice4j.ice.Candidate$1 -> org.ice4j.ice.Candidate$1:
    int[] $SwitchMap$org$ice4j$ice$CandidateType -> $SwitchMap$org$ice4j$ice$CandidateType
org.ice4j.ice.CandidateExtendedType -> org.ice4j.ice.CandidateExtendedType:
    org.ice4j.ice.CandidateExtendedType HOST_CANDIDATE -> HOST_CANDIDATE
    org.ice4j.ice.CandidateExtendedType UPNP_CANDIDATE -> UPNP_CANDIDATE
    org.ice4j.ice.CandidateExtendedType STATICALLY_MAPPED_CANDIDATE -> STATICALLY_MAPPED_CANDIDATE
    org.ice4j.ice.CandidateExtendedType STUN_PEER_REFLEXIVE_CANDIDATE -> STUN_PEER_REFLEXIVE_CANDIDATE
    org.ice4j.ice.CandidateExtendedType STUN_SERVER_REFLEXIVE_CANDIDATE -> STUN_SERVER_REFLEXIVE_CANDIDATE
    org.ice4j.ice.CandidateExtendedType TURN_RELAYED_CANDIDATE -> TURN_RELAYED_CANDIDATE
    org.ice4j.ice.CandidateExtendedType GOOGLE_TURN_RELAYED_CANDIDATE -> GOOGLE_TURN_RELAYED_CANDIDATE
    org.ice4j.ice.CandidateExtendedType GOOGLE_TCP_TURN_RELAYED_CANDIDATE -> GOOGLE_TCP_TURN_RELAYED_CANDIDATE
    org.ice4j.ice.CandidateExtendedType JINGLE_NODE_CANDIDATE -> JINGLE_NODE_CANDIDATE
    java.lang.String extendedTypeName -> extendedTypeName
    org.ice4j.ice.CandidateExtendedType[] $VALUES -> $VALUES
    org.ice4j.ice.CandidateExtendedType[] values() -> values
    org.ice4j.ice.CandidateExtendedType valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
    org.ice4j.ice.CandidateExtendedType parse(java.lang.String) -> parse
org.ice4j.ice.CandidatePair -> org.ice4j.ice.CandidatePair:
    long CONSENT_FRESHNESS_UNKNOWN -> CONSENT_FRESHNESS_UNKNOWN
    long MATH_POW_2_32 -> MATH_POW_2_32
    org.ice4j.ice.LocalCandidate localCandidate -> localCandidate
    org.ice4j.ice.RemoteCandidate remoteCandidate -> remoteCandidate
    long priority -> priority
    boolean useCandidate -> useCandidate
    boolean useCandidateSent -> useCandidateSent
    boolean isValid -> isValid
    boolean isNominated -> isNominated
    org.ice4j.ice.CandidatePair$PairComparator comparator -> comparator
    org.ice4j.ice.CandidatePairState state -> state
    org.ice4j.stack.TransactionID connCheckTranID -> connCheckTranID
    long consentFreshness -> consentFreshness
    java.lang.String getFoundation() -> getFoundation
    org.ice4j.ice.LocalCandidate getLocalCandidate() -> getLocalCandidate
    void setLocalCandidate(org.ice4j.ice.LocalCandidate) -> setLocalCandidate
    org.ice4j.ice.RemoteCandidate getRemoteCandidate() -> getRemoteCandidate
    void setRemoteCandidate(org.ice4j.ice.RemoteCandidate) -> setRemoteCandidate
    org.ice4j.ice.CandidatePairState getState() -> getState
    void setStateFailed() -> setStateFailed
    void setStateFrozen() -> setStateFrozen
    void setStateInProgress(org.ice4j.stack.TransactionID) -> setStateInProgress
    void setStateSucceeded() -> setStateSucceeded
    void setStateWaiting() -> setStateWaiting
    void setState(org.ice4j.ice.CandidatePairState,org.ice4j.stack.TransactionID) -> setState
    boolean isFrozen() -> isFrozen
    org.ice4j.ice.Candidate getControllingAgentCandidate() -> getControllingAgentCandidate
    org.ice4j.ice.Candidate getControlledAgentCandidate() -> getControlledAgentCandidate
    void computePriority() -> computePriority
    long getPriority() -> getPriority
    int compareTo(org.ice4j.ice.CandidatePair) -> compareTo
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    java.lang.String toShortString() -> toShortString
    org.ice4j.ice.Component getParentComponent() -> getParentComponent
    org.ice4j.stack.TransactionID getConnectivityCheckTransaction() -> getConnectivityCheckTransaction
    void setUseCandidateSent() -> setUseCandidateSent
    boolean useCandidateSent() -> useCandidateSent
    void setUseCandidateReceived() -> setUseCandidateReceived
    boolean useCandidateReceived() -> useCandidateReceived
    void nominate() -> nominate
    boolean isNominated() -> isNominated
    boolean isValid() -> isValid
    void validate() -> validate
    long getConsentFreshness() -> getConsentFreshness
    void setConsentFreshness() -> setConsentFreshness
    void setConsentFreshness(long) -> setConsentFreshness
    int compareTo(java.lang.Object) -> compareTo
org.ice4j.ice.CandidatePair$PairComparator -> org.ice4j.ice.CandidatePair$PairComparator:
    int compare(org.ice4j.ice.CandidatePair,org.ice4j.ice.CandidatePair) -> compare
    boolean equals(java.lang.Object) -> equals
    int compare(java.lang.Object,java.lang.Object) -> compare
org.ice4j.ice.CandidatePairState -> org.ice4j.ice.CandidatePairState:
    org.ice4j.ice.CandidatePairState WAITING -> WAITING
    org.ice4j.ice.CandidatePairState IN_PROGRESS -> IN_PROGRESS
    org.ice4j.ice.CandidatePairState SUCCEEDED -> SUCCEEDED
    org.ice4j.ice.CandidatePairState FAILED -> FAILED
    org.ice4j.ice.CandidatePairState FROZEN -> FROZEN
    java.lang.String stateName -> stateName
    org.ice4j.ice.CandidatePairState[] $VALUES -> $VALUES
    org.ice4j.ice.CandidatePairState[] values() -> values
    org.ice4j.ice.CandidatePairState valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
org.ice4j.ice.CandidatePrioritizer -> org.ice4j.ice.CandidatePrioritizer:
    int compareCandidates(org.ice4j.ice.Candidate,org.ice4j.ice.Candidate) -> compareCandidates
    int compare(org.ice4j.ice.Candidate,org.ice4j.ice.Candidate) -> compare
    boolean equals(java.lang.Object) -> equals
    int compare(java.lang.Object,java.lang.Object) -> compare
org.ice4j.ice.CandidateType -> org.ice4j.ice.CandidateType:
    org.ice4j.ice.CandidateType PEER_REFLEXIVE_CANDIDATE -> PEER_REFLEXIVE_CANDIDATE
    org.ice4j.ice.CandidateType SERVER_REFLEXIVE_CANDIDATE -> SERVER_REFLEXIVE_CANDIDATE
    org.ice4j.ice.CandidateType RELAYED_CANDIDATE -> RELAYED_CANDIDATE
    org.ice4j.ice.CandidateType HOST_CANDIDATE -> HOST_CANDIDATE
    org.ice4j.ice.CandidateType LOCAL_CANDIDATE -> LOCAL_CANDIDATE
    org.ice4j.ice.CandidateType STUN_CANDIDATE -> STUN_CANDIDATE
    java.lang.String typeName -> typeName
    org.ice4j.ice.CandidateType[] $VALUES -> $VALUES
    org.ice4j.ice.CandidateType[] values() -> values
    org.ice4j.ice.CandidateType valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
    org.ice4j.ice.CandidateType parse(java.lang.String) -> parse
org.ice4j.ice.CheckList -> org.ice4j.ice.CheckList:
    java.util.logging.Logger logger -> logger
    long serialVersionUID -> serialVersionUID
    org.ice4j.ice.CheckListState state -> state
    java.util.List triggeredCheckQueue -> triggeredCheckQueue
    org.ice4j.ice.IceMediaStream parentStream -> parentStream
    java.util.List stateListeners -> stateListeners
    java.util.List checkListeners -> checkListeners
    java.lang.String PROPERTY_CHECK_LIST_STATE -> PROPERTY_CHECK_LIST_STATE
    java.lang.String PROPERTY_CHECK_LIST_CHECKS -> PROPERTY_CHECK_LIST_CHECKS
    org.ice4j.ice.CheckListState getState() -> getState
    void setState(org.ice4j.ice.CheckListState) -> setState
    void scheduleTriggeredCheck(org.ice4j.ice.CandidatePair) -> scheduleTriggeredCheck
    org.ice4j.ice.CandidatePair popTriggeredCheck() -> popTriggeredCheck
    org.ice4j.ice.CandidatePair getNextOrdinaryPairToCheck() -> getNextOrdinaryPairToCheck
    boolean isActive() -> isActive
    boolean allChecksCompleted() -> allChecksCompleted
    boolean isFrozen() -> isFrozen
    java.lang.String toString() -> toString
    void computeInitialCheckListPairStates() -> computeInitialCheckListPairStates
    void recomputePairPriorities() -> recomputePairPriorities
    void handleNominationConfirmed(org.ice4j.ice.CandidatePair) -> handleNominationConfirmed
    java.lang.String getName() -> getName
    boolean containsNomineeForComponent(org.ice4j.ice.Component) -> containsNomineeForComponent
    void addStateChangeListener(java.beans.PropertyChangeListener) -> addStateChangeListener
    void removeStateChangeListener(java.beans.PropertyChangeListener) -> removeStateChangeListener
    void fireStateChange(org.ice4j.ice.CheckListState,org.ice4j.ice.CheckListState) -> fireStateChange
    void addChecksListener(java.beans.PropertyChangeListener) -> addChecksListener
    void removeChecksListener(java.beans.PropertyChangeListener) -> removeChecksListener
    void fireEndOfOrdinaryChecks() -> fireEndOfOrdinaryChecks
    org.ice4j.ice.IceMediaStream getParentStream() -> getParentStream
org.ice4j.ice.CheckListState -> org.ice4j.ice.CheckListState:
    org.ice4j.ice.CheckListState RUNNING -> RUNNING
    org.ice4j.ice.CheckListState COMPLETED -> COMPLETED
    org.ice4j.ice.CheckListState FAILED -> FAILED
    java.lang.String stateName -> stateName
    org.ice4j.ice.CheckListState[] $VALUES -> $VALUES
    org.ice4j.ice.CheckListState[] values() -> values
    org.ice4j.ice.CheckListState valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
org.ice4j.ice.Component -> org.ice4j.ice.Component:
    java.util.logging.Logger logger -> logger
    int componentID -> componentID
    int RTP -> RTP
    int RTCP -> RTCP
    org.ice4j.Transport transport -> transport
    org.ice4j.ice.IceMediaStream parentStream -> parentStream
    java.util.List localCandidates -> localCandidates
    java.util.List remoteCandidates -> remoteCandidates
    java.util.List remoteUpdateCandidates -> remoteUpdateCandidates
    org.ice4j.ice.CandidatePrioritizer candidatePrioritizer -> candidatePrioritizer
    org.ice4j.ice.LocalCandidate defaultCandidate -> defaultCandidate
    org.ice4j.ice.CandidatePair selectedPair -> selectedPair
    org.ice4j.ice.Candidate defaultRemoteCandidate -> defaultRemoteCandidate
    boolean addLocalCandidate(org.ice4j.ice.LocalCandidate) -> addLocalCandidate
    java.util.List getLocalCandidates() -> getLocalCandidates
    int countLocalHostCandidates() -> countLocalHostCandidates
    int getLocalCandidateCount() -> getLocalCandidateCount
    void addRemoteCandidate(org.ice4j.ice.RemoteCandidate) -> addRemoteCandidate
    void addUpdateRemoteCandidates(org.ice4j.ice.RemoteCandidate) -> addUpdateRemoteCandidates
    org.ice4j.ice.LocalCandidate createLocalTcpCandidate4GTalk(org.ice4j.ice.RemoteCandidate,org.ice4j.ice.LocalCandidate) -> createLocalTcpCandidate4GTalk
    void updateRemoteCandidates() -> updateRemoteCandidates
    java.util.List getRemoteCandidates() -> getRemoteCandidates
    void addRemoteCandidates(java.util.List) -> addRemoteCandidates
    int getRemoteCandidateCount() -> getRemoteCandidateCount
    org.ice4j.ice.IceMediaStream getParentStream() -> getParentStream
    int getComponentID() -> getComponentID
    org.ice4j.Transport getTransport() -> getTransport
    java.lang.String toString() -> toString
    java.lang.String toShortString() -> toShortString
    void prioritizeCandidates() -> prioritizeCandidates
    void eliminateRedundantCandidates() -> eliminateRedundantCandidates
    org.ice4j.ice.LocalCandidate findRedundant(org.ice4j.ice.LocalCandidate) -> findRedundant
    org.ice4j.ice.LocalCandidate getDefaultCandidate() -> getDefaultCandidate
    org.ice4j.ice.Candidate getDefaultRemoteCandidate() -> getDefaultRemoteCandidate
    void setDefaultRemoteCandidate(org.ice4j.ice.Candidate) -> setDefaultRemoteCandidate
    void selectDefaultCandidate() -> selectDefaultCandidate
    void free() -> free
    void free(org.ice4j.ice.LocalCandidate) -> free
    org.ice4j.ice.LocalCandidate findLocalCandidate(org.ice4j.TransportAddress) -> findLocalCandidate
    org.ice4j.ice.RemoteCandidate findRemoteCandidate(org.ice4j.TransportAddress) -> findRemoteCandidate
    int coundHostCandidates() -> coundHostCandidates
    void setSelectedPair(org.ice4j.ice.CandidatePair) -> setSelectedPair
    org.ice4j.ice.CandidatePair getSelectedPair() -> getSelectedPair
    java.lang.String getName() -> getName
org.ice4j.ice.ConnectivityCheckClient -> org.ice4j.ice.ConnectivityCheckClient:
    java.util.logging.Logger logger -> logger
    org.ice4j.ice.Agent parentAgent -> parentAgent
    org.ice4j.stack.StunStack stunStack -> stunStack
    java.util.List paceMakers -> paceMakers
    java.util.Map timers -> timers
    void startChecks() -> startChecks
    void startChecks(org.ice4j.ice.CheckList) -> startChecks
    void sendBindingIndicationForPair(org.ice4j.ice.CandidatePair) -> sendBindingIndicationForPair
    org.ice4j.stack.TransactionID startCheckForPair(org.ice4j.ice.CandidatePair) -> startCheckForPair
    org.ice4j.stack.TransactionID startCheckForPair(org.ice4j.ice.CandidatePair,int,int,int) -> startCheckForPair
    void processResponse(org.ice4j.StunResponseEvent) -> processResponse
    void updateCheckListAndTimerStates(org.ice4j.ice.CandidatePair) -> updateCheckListAndTimerStates
    void processSuccessResponse(org.ice4j.StunResponseEvent) -> processSuccessResponse
    boolean checkSymmetricAddresses(org.ice4j.StunResponseEvent) -> checkSymmetricAddresses
    void processErrorResponse(org.ice4j.StunResponseEvent) -> processErrorResponse
    void processTimeout(org.ice4j.StunTimeoutEvent) -> processTimeout
    void stop() -> stop
    java.util.logging.Logger access$000() -> access$000
    org.ice4j.ice.Agent access$100(org.ice4j.ice.ConnectivityCheckClient) -> access$100
    java.util.List access$200(org.ice4j.ice.ConnectivityCheckClient) -> access$200
org.ice4j.ice.ConnectivityCheckClient$1 -> org.ice4j.ice.ConnectivityCheckClient$1:
    org.ice4j.ice.CheckList val$checkList -> val$checkList
    java.lang.String val$streamName -> val$streamName
    org.ice4j.ice.ConnectivityCheckClient this$0 -> this$0
    void run() -> run
org.ice4j.ice.ConnectivityCheckClient$PaceMaker -> org.ice4j.ice.ConnectivityCheckClient$PaceMaker:
    boolean running -> running
    org.ice4j.ice.CheckList checkList -> checkList
    org.ice4j.ice.ConnectivityCheckClient this$0 -> this$0
    long getNextWaitInterval() -> getNextWaitInterval
    void run() -> run
org.ice4j.ice.ConnectivityCheckServer -> org.ice4j.ice.ConnectivityCheckServer:
    java.util.logging.Logger logger -> logger
    org.ice4j.ice.Agent parentAgent -> parentAgent
    boolean started -> started
    org.ice4j.stack.StunStack stunStack -> stunStack
    void processRequest(org.ice4j.StunMessageEvent) -> processRequest
    long extractPriority(org.ice4j.message.Request) -> extractPriority
    boolean repairRoleConflict(org.ice4j.StunMessageEvent) -> repairRoleConflict
    boolean checkLocalUserName(java.lang.String) -> checkLocalUserName
    byte[] getLocalKey(java.lang.String) -> getLocalKey
    byte[] getRemoteKey(java.lang.String,java.lang.String) -> getRemoteKey
    void start() -> start
    void stop() -> stop
org.ice4j.ice.DefaultNominator -> org.ice4j.ice.DefaultNominator:
    java.util.logging.Logger logger -> logger
    org.ice4j.ice.Agent parentAgent -> parentAgent
    org.ice4j.ice.NominationStrategy strategy -> strategy
    java.util.Map validatedCandidates -> validatedCandidates
    void propertyChange(java.beans.PropertyChangeEvent) -> propertyChange
    void strategyNominateFirstValid(java.beans.PropertyChangeEvent) -> strategyNominateFirstValid
    void strategyNominateHighestPrio(java.beans.PropertyChangeEvent) -> strategyNominateHighestPrio
    void setStrategy(org.ice4j.ice.NominationStrategy) -> setStrategy
    void strategyNominateFirstHostOrReflexiveValid(java.beans.PropertyChangeEvent) -> strategyNominateFirstHostOrReflexiveValid
    java.util.logging.Logger access$000() -> access$000
    org.ice4j.ice.Agent access$100(org.ice4j.ice.DefaultNominator) -> access$100
    java.util.Map access$200(org.ice4j.ice.DefaultNominator) -> access$200
org.ice4j.ice.DefaultNominator$RelayedCandidateTask -> org.ice4j.ice.DefaultNominator$RelayedCandidateTask:
    int WAIT_TIME -> WAIT_TIME
    org.ice4j.ice.CandidatePair pair -> pair
    boolean cancelled -> cancelled
    org.ice4j.ice.DefaultNominator this$0 -> this$0
    void propertyChange(java.beans.PropertyChangeEvent) -> propertyChange
    boolean cancel() -> cancel
    void run() -> run
org.ice4j.ice.FoundationsRegistry -> org.ice4j.ice.FoundationsRegistry:
    int lastAssignedFoundation -> lastAssignedFoundation
    int lastAssignedRemoteFoundation -> lastAssignedRemoteFoundation
    java.util.Map foundations -> foundations
    void assignFoundation(org.ice4j.ice.Candidate) -> assignFoundation
    java.lang.String obtainFoundationForPeerReflexiveCandidate() -> obtainFoundationForPeerReflexiveCandidate
    int size() -> size
org.ice4j.ice.FoundationsRegistry$1 -> org.ice4j.ice.FoundationsRegistry$1:
    int[] $SwitchMap$org$ice4j$ice$CandidateType -> $SwitchMap$org$ice4j$ice$CandidateType
org.ice4j.ice.GoogleRelayedCandidate -> org.ice4j.ice.GoogleRelayedCandidate:
    org.ice4j.socket.GoogleRelayedCandidateDatagramSocket relayedCandidateDatagramSocket -> relayedCandidateDatagramSocket
    org.ice4j.socket.GoogleRelayedCandidateSocket relayedCandidateSocket -> relayedCandidateSocket
    org.ice4j.socket.IceSocketWrapper socket -> socket
    org.ice4j.ice.harvest.GoogleTurnCandidateHarvest turnCandidateHarvest -> turnCandidateHarvest
    java.lang.String username -> username
    java.lang.String password -> password
    org.ice4j.socket.GoogleRelayedCandidateDatagramSocket getRelayedCandidateDatagramSocket() -> getRelayedCandidateDatagramSocket
    org.ice4j.socket.GoogleRelayedCandidateSocket getRelayedCandidateSocket() -> getRelayedCandidateSocket
    org.ice4j.socket.IceSocketWrapper getIceSocketWrapper() -> getIceSocketWrapper
    java.lang.String getPassword() -> getPassword
org.ice4j.ice.HostCandidate -> org.ice4j.ice.HostCandidate:
    org.ice4j.socket.IceSocketWrapper socket -> socket
    org.ice4j.socket.StunDatagramPacketFilter createStunDatagramPacketFilter(org.ice4j.TransportAddress) -> createStunDatagramPacketFilter
    org.ice4j.socket.IceSocketWrapper getIceSocketWrapper() -> getIceSocketWrapper
org.ice4j.ice.IceMediaStream -> org.ice4j.ice.IceMediaStream:
    java.util.logging.Logger logger -> logger
    java.lang.String PROPERTY_PAIR_CONSENT_FRESHNESS_CHANGED -> PROPERTY_PAIR_CONSENT_FRESHNESS_CHANGED
    java.lang.String PROPERTY_PAIR_NOMINATED -> PROPERTY_PAIR_NOMINATED
    java.lang.String PROPERTY_PAIR_STATE_CHANGED -> PROPERTY_PAIR_STATE_CHANGED
    java.lang.String PROPERTY_PAIR_VALIDATED -> PROPERTY_PAIR_VALIDATED
    java.lang.String name -> name
    java.util.Map components -> components
    java.util.TreeSet validList -> validList
    int lastComponentID -> lastComponentID
    org.ice4j.ice.CheckList checkList -> checkList
    org.ice4j.ice.Agent parentAgent -> parentAgent
    java.util.List streamListeners -> streamListeners
    int maxCheckListSize -> maxCheckListSize
    java.lang.String remoteUfrag -> remoteUfrag
    java.lang.String remotePassword -> remotePassword
    org.ice4j.ice.Component createComponent(org.ice4j.Transport) -> createComponent
    java.lang.String getName() -> getName
    java.lang.String toString() -> toString
    org.ice4j.ice.Component getComponent(int) -> getComponent
    java.util.List getComponents() -> getComponents
    int getComponentCount() -> getComponentCount
    java.util.List getComponentIDs() -> getComponentIDs
    int getStreamCount() -> getStreamCount
    org.ice4j.ice.Agent getParentAgent() -> getParentAgent
    void free() -> free
    void removeComponent(org.ice4j.ice.Component) -> removeComponent
    void initCheckList() -> initCheckList
    void createCheckList(java.util.List) -> createCheckList
    void createCheckList(org.ice4j.ice.Component,java.util.List) -> createCheckList
    void orderCheckList() -> orderCheckList
    void pruneCheckList(java.util.List) -> pruneCheckList
    org.ice4j.ice.CheckList getCheckList() -> getCheckList
    void setMaxCheckListSize(int) -> setMaxCheckListSize
    org.ice4j.ice.LocalCandidate findLocalCandidate(org.ice4j.TransportAddress) -> findLocalCandidate
    org.ice4j.ice.RemoteCandidate findRemoteCandidate(org.ice4j.TransportAddress) -> findRemoteCandidate
    org.ice4j.ice.CandidatePair findCandidatePair(org.ice4j.TransportAddress,org.ice4j.TransportAddress) -> findCandidatePair
    org.ice4j.ice.CandidatePair findCandidatePair(java.lang.String,java.lang.String) -> findCandidatePair
    int countHostCandidates() -> countHostCandidates
    void addToCheckList(org.ice4j.ice.CandidatePair) -> addToCheckList
    void addToValidList(org.ice4j.ice.CandidatePair) -> addToValidList
    boolean validListContainsFoundation(java.lang.String) -> validListContainsFoundation
    boolean validListContainsNomineeForComponent(org.ice4j.ice.Component) -> validListContainsNomineeForComponent
    boolean validListContainsAllComponents() -> validListContainsAllComponents
    boolean allComponentsAreNominated() -> allComponentsAreNominated
    boolean allComponentsHaveSelected() -> allComponentsHaveSelected
    org.ice4j.ice.CandidatePair getValidPair(org.ice4j.ice.Component) -> getValidPair
    void addPairChangeListener(java.beans.PropertyChangeListener) -> addPairChangeListener
    void removePairStateChangeListener(java.beans.PropertyChangeListener) -> removePairStateChangeListener
    void firePairPropertyChange(org.ice4j.ice.CandidatePair,java.lang.String,java.lang.Object,java.lang.Object) -> firePairPropertyChange
    void setRemoteUfrag(java.lang.String) -> setRemoteUfrag
    java.lang.String getRemoteUfrag() -> getRemoteUfrag
    void setRemotePassword(java.lang.String) -> setRemotePassword
    java.lang.String getRemotePassword() -> getRemotePassword
org.ice4j.ice.IceProcessingState -> org.ice4j.ice.IceProcessingState:
    org.ice4j.ice.IceProcessingState WAITING -> WAITING
    org.ice4j.ice.IceProcessingState RUNNING -> RUNNING
    org.ice4j.ice.IceProcessingState COMPLETED -> COMPLETED
    org.ice4j.ice.IceProcessingState FAILED -> FAILED
    org.ice4j.ice.IceProcessingState TERMINATED -> TERMINATED
    java.lang.String stateName -> stateName
    org.ice4j.ice.IceProcessingState[] $VALUES -> $VALUES
    org.ice4j.ice.IceProcessingState[] values() -> values
    org.ice4j.ice.IceProcessingState valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
org.ice4j.ice.LocalCandidate -> org.ice4j.ice.LocalCandidate:
    org.ice4j.ice.CandidateExtendedType extendedType -> extendedType
    java.lang.String ufrag -> ufrag
    java.util.logging.Logger logger -> logger
    java.net.DatagramSocket getDatagramSocket() -> getDatagramSocket
    java.net.Socket getSocket() -> getSocket
    org.ice4j.socket.IceSocketWrapper getIceSocketWrapper() -> getIceSocketWrapper
    org.ice4j.socket.IceSocketWrapper getStunSocket(org.ice4j.TransportAddress) -> getStunSocket
    org.ice4j.stack.StunStack getStunStack() -> getStunStack
    org.ice4j.socket.StunDatagramPacketFilter createStunDatagramPacketFilter(org.ice4j.TransportAddress) -> createStunDatagramPacketFilter
    void free() -> free
    boolean isDefault() -> isDefault
    void setUfrag(java.lang.String) -> setUfrag
    java.lang.String getUfrag() -> getUfrag
    org.ice4j.ice.CandidateExtendedType getExtendedType() -> getExtendedType
    void setExtendedType(org.ice4j.ice.CandidateExtendedType) -> setExtendedType
    org.ice4j.ice.LocalCandidate findRelatedCandidate(org.ice4j.TransportAddress) -> findRelatedCandidate
    org.ice4j.ice.Candidate findRelatedCandidate(org.ice4j.TransportAddress) -> findRelatedCandidate
org.ice4j.ice.NetworkUtils -> org.ice4j.ice.NetworkUtils:
    java.util.logging.Logger logger -> logger
    java.lang.String IN6_ADDR_ANY -> IN6_ADDR_ANY
    int IN6_ADDR_SIZE -> IN6_ADDR_SIZE
    int IN6_ADDR_TOKEN_SIZE -> IN6_ADDR_TOKEN_SIZE
    java.lang.String IN4_ADDR_ANY -> IN4_ADDR_ANY
    int IN4_ADDR_SIZE -> IN4_ADDR_SIZE
    java.lang.String IN_ADDR_ANY -> IN_ADDR_ANY
    int MAX_PORT_NUMBER -> MAX_PORT_NUMBER
    int MIN_PORT_NUMBER -> MIN_PORT_NUMBER
    java.util.Random portNumberGenerator -> portNumberGenerator
    boolean isWindowsAutoConfiguredIPv4Address(java.net.InetAddress) -> isWindowsAutoConfiguredIPv4Address
    boolean isLinkLocalIPv4Address(java.net.InetAddress) -> isLinkLocalIPv4Address
    int getRandomPortNumber() -> getRandomPortNumber
    int getRandomPortNumber(int,int) -> getRandomPortNumber
    int getRandomPortNumber(int,int,boolean) -> getRandomPortNumber
    boolean isIPv4Address(java.lang.String) -> isIPv4Address
    boolean isIPv6Address(java.lang.String) -> isIPv6Address
    boolean isValidIPAddress(java.lang.String) -> isValidIPAddress
    byte[] strToIPv4(java.lang.String) -> strToIPv4
    byte[] strToIPv6(java.lang.String) -> strToIPv6
    byte[] mappedIPv4ToRealIPv4(byte[]) -> mappedIPv4ToRealIPv4
    boolean isMappedIPv4Addr(byte[]) -> isMappedIPv4Addr
    java.net.InetAddress getInetAddress(java.lang.String) -> getInetAddress
    java.lang.String determineAnyAddress() -> determineAnyAddress
    boolean isValidPortNumber(int) -> isValidPortNumber
    boolean isInterfaceLoopback(java.net.NetworkInterface) -> isInterfaceLoopback
    boolean isInterfaceUp(java.net.NetworkInterface) -> isInterfaceUp
    boolean isInterfaceVirtual(java.net.NetworkInterface) -> isInterfaceVirtual
    java.lang.String stripScopeID(java.lang.String) -> stripScopeID
org.ice4j.ice.NominationStrategy -> org.ice4j.ice.NominationStrategy:
    org.ice4j.ice.NominationStrategy NONE -> NONE
    org.ice4j.ice.NominationStrategy NOMINATE_FIRST_VALID -> NOMINATE_FIRST_VALID
    org.ice4j.ice.NominationStrategy NOMINATE_HIGHEST_PRIO -> NOMINATE_HIGHEST_PRIO
    org.ice4j.ice.NominationStrategy NOMINATE_FIRST_HOST_OR_REFLEXIVE_VALID -> NOMINATE_FIRST_HOST_OR_REFLEXIVE_VALID
    org.ice4j.ice.NominationStrategy NOMINATE_BEST_RTT -> NOMINATE_BEST_RTT
    java.lang.String strategyName -> strategyName
    org.ice4j.ice.NominationStrategy[] $VALUES -> $VALUES
    org.ice4j.ice.NominationStrategy[] values() -> values
    org.ice4j.ice.NominationStrategy valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
org.ice4j.ice.PeerReflexiveCandidate -> org.ice4j.ice.PeerReflexiveCandidate:
    org.ice4j.socket.IceSocketWrapper getIceSocketWrapper() -> getIceSocketWrapper
org.ice4j.ice.RelayedCandidate -> org.ice4j.ice.RelayedCandidate:
    org.ice4j.socket.RelayedCandidateDatagramSocket relayedCandidateDatagramSocket -> relayedCandidateDatagramSocket
    org.ice4j.socket.IceSocketWrapper socket -> socket
    org.ice4j.ice.harvest.TurnCandidateHarvest turnCandidateHarvest -> turnCandidateHarvest
    org.ice4j.socket.RelayedCandidateDatagramSocket getRelayedCandidateDatagramSocket() -> getRelayedCandidateDatagramSocket
    org.ice4j.socket.IceSocketWrapper getIceSocketWrapper() -> getIceSocketWrapper
org.ice4j.ice.RemoteCandidate -> org.ice4j.ice.RemoteCandidate:
    java.lang.String ufrag -> ufrag
    void setPriority(long) -> setPriority
    boolean isDefault() -> isDefault
    java.lang.String getUfrag() -> getUfrag
    org.ice4j.ice.RemoteCandidate findRelatedCandidate(org.ice4j.TransportAddress) -> findRelatedCandidate
    org.ice4j.ice.Candidate findRelatedCandidate(org.ice4j.TransportAddress) -> findRelatedCandidate
org.ice4j.ice.ServerReflexiveCandidate -> org.ice4j.ice.ServerReflexiveCandidate:
    org.ice4j.ice.harvest.StunCandidateHarvest stunHarvest -> stunHarvest
    org.ice4j.socket.IceSocketWrapper getIceSocketWrapper() -> getIceSocketWrapper
    void free() -> free
org.ice4j.ice.UPNPCandidate -> org.ice4j.ice.UPNPCandidate:
    org.a.a.a device -> device
    void free() -> free
    org.ice4j.socket.IceSocketWrapper getIceSocketWrapper() -> getIceSocketWrapper
org.ice4j.ice.harvest.AwsCandidateHarvester -> org.ice4j.ice.harvest.AwsCandidateHarvester:
    java.util.logging.Logger logger -> logger
    java.lang.String PUBLIC_IP_URL -> PUBLIC_IP_URL
    java.lang.String LOCAL_IP_URL -> LOCAL_IP_URL
    java.lang.String EC2_TEST_URL -> EC2_TEST_URL
    java.lang.Boolean RUNNING_ON_EC2 -> RUNNING_ON_EC2
    org.ice4j.TransportAddress mask -> mask
    org.ice4j.TransportAddress face -> face
    java.util.Collection harvest(org.ice4j.ice.Component) -> harvest
    boolean obtainEC2Addresses() -> obtainEC2Addresses
    boolean smellsLikeAnEC2() -> smellsLikeAnEC2
    boolean doTestEc2() -> doTestEc2
    java.lang.String fetch(java.lang.String) -> fetch
org.ice4j.ice.harvest.CandidateHarvester -> org.ice4j.ice.harvest.CandidateHarvester:
    org.ice4j.ice.harvest.HarvestStatistics harvestStatistics -> harvestStatistics
    java.util.Collection harvest(org.ice4j.ice.Component) -> harvest
    org.ice4j.ice.harvest.HarvestStatistics getHarvestStatistics() -> getHarvestStatistics
org.ice4j.ice.harvest.CandidateHarvesterSet -> org.ice4j.ice.harvest.CandidateHarvesterSet:
    java.util.logging.Logger logger -> logger
    java.util.Collection elements -> elements
    java.util.concurrent.ExecutorService threadPool -> threadPool
    boolean add(org.ice4j.ice.harvest.CandidateHarvester) -> add
    void harvest(org.ice4j.ice.Component) -> harvest
    void harvest(java.util.List,org.ice4j.ice.harvest.TrickleCallback) -> harvest
    void harvest(java.util.Iterator,java.util.List,java.util.concurrent.ExecutorService,org.ice4j.ice.harvest.TrickleCallback) -> harvest
    java.util.Iterator iterator() -> iterator
    int size() -> size
    boolean add(java.lang.Object) -> add
org.ice4j.ice.harvest.CandidateHarvesterSet$1 -> org.ice4j.ice.harvest.CandidateHarvesterSet$1:
    java.util.Iterator val$elementIter -> val$elementIter
    org.ice4j.ice.harvest.CandidateHarvesterSet this$0 -> this$0
    boolean hasNext() -> hasNext
    org.ice4j.ice.harvest.CandidateHarvester next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
org.ice4j.ice.harvest.CandidateHarvesterSetElement -> org.ice4j.ice.harvest.CandidateHarvesterSetElement:
    java.util.logging.Logger logger -> logger
    boolean enabled -> enabled
    org.ice4j.ice.harvest.CandidateHarvester harvester -> harvester
    void harvest(org.ice4j.ice.Component,org.ice4j.ice.harvest.TrickleCallback) -> harvest
    boolean harvesterEquals(org.ice4j.ice.harvest.CandidateHarvester) -> harvesterEquals
    boolean isEnabled() -> isEnabled
    void setEnabled(boolean) -> setEnabled
    org.ice4j.ice.harvest.CandidateHarvester getHarvester() -> getHarvester
    void startHarvestTiming() -> startHarvestTiming
    void stopHarvestTiming(java.util.Collection) -> stopHarvestTiming
org.ice4j.ice.harvest.CandidateHarvesterSetTask -> org.ice4j.ice.harvest.CandidateHarvesterSetTask:
    java.util.logging.Logger logger -> logger
    org.ice4j.ice.harvest.CandidateHarvesterSetElement harvester -> harvester
    java.util.Collection components -> components
    org.ice4j.ice.harvest.TrickleCallback trickleCallback -> trickleCallback
    org.ice4j.ice.harvest.CandidateHarvesterSetElement getHarvester() -> getHarvester
    void run() -> run
org.ice4j.ice.harvest.GoogleTurnCandidateHarvest -> org.ice4j.ice.harvest.GoogleTurnCandidateHarvest:
    java.util.logging.Logger logger -> logger
    org.ice4j.message.Request requestToStartResolvingCandidate -> requestToStartResolvingCandidate
    java.lang.String password -> password
    void createCandidates(org.ice4j.message.Response) -> createCandidates
    void createRelayedCandidate(org.ice4j.message.Response) -> createRelayedCandidate
    org.ice4j.ice.GoogleRelayedCandidate createRelayedCandidate(org.ice4j.TransportAddress,org.ice4j.TransportAddress) -> createRelayedCandidate
    org.ice4j.message.Request createRequestToStartResolvingCandidate() -> createRequestToStartResolvingCandidate
    boolean addShortTermCredentialAttributes(org.ice4j.message.Request) -> addShortTermCredentialAttributes
    boolean completedResolvingCandidate(org.ice4j.message.Request,org.ice4j.message.Response) -> completedResolvingCandidate
    void close(org.ice4j.socket.GoogleRelayedCandidateDatagramSocket) -> close
    boolean processErrorOrFailure(org.ice4j.message.Response,org.ice4j.message.Request,org.ice4j.stack.TransactionID) -> processErrorOrFailure
    void processSuccess(org.ice4j.message.Response,org.ice4j.message.Request,org.ice4j.stack.TransactionID) -> processSuccess
org.ice4j.ice.harvest.GoogleTurnCandidateHarvester -> org.ice4j.ice.harvest.GoogleTurnCandidateHarvester:
    java.lang.String password -> password
    org.ice4j.ice.harvest.GoogleTurnCandidateHarvest createHarvest(org.ice4j.ice.HostCandidate) -> createHarvest
    java.lang.String getPassword() -> getPassword
    org.ice4j.ice.harvest.StunCandidateHarvest createHarvest(org.ice4j.ice.HostCandidate) -> createHarvest
org.ice4j.ice.harvest.GoogleTurnSSLCandidateHarvester -> org.ice4j.ice.harvest.GoogleTurnSSLCandidateHarvester:
    byte[] SSL_SERVER_HANDSHAKE -> SSL_SERVER_HANDSHAKE
    byte[] SSL_CLIENT_HANDSHAKE -> SSL_CLIENT_HANDSHAKE
    org.ice4j.ice.harvest.GoogleTurnCandidateHarvest createHarvest(org.ice4j.ice.HostCandidate) -> createHarvest
    org.ice4j.ice.HostCandidate getHostCandidate(org.ice4j.ice.HostCandidate) -> getHostCandidate
    boolean sslHandshake(java.io.InputStream,java.io.OutputStream) -> sslHandshake
    org.ice4j.ice.harvest.StunCandidateHarvest createHarvest(org.ice4j.ice.HostCandidate) -> createHarvest
org.ice4j.ice.harvest.HarvestStatistics -> org.ice4j.ice.harvest.HarvestStatistics:
    int harvestCount -> harvestCount
    long lastStartHarvestingTime -> lastStartHarvestingTime
    long lastHarvestingTime -> lastHarvestingTime
    int totalCandidateCount -> totalCandidateCount
    java.lang.String harvesterName -> harvesterName
    void startHarvestTiming() -> startHarvestTiming
    void stopHarvestTiming(java.util.Collection) -> stopHarvestTiming
    void stopHarvestTiming(int) -> stopHarvestTiming
    long getHarvestDuration() -> getHarvestDuration
    int getTotalCandidateCount() -> getTotalCandidateCount
    int getHarvestCount() -> getHarvestCount
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    java.lang.String toString() -> toString
org.ice4j.ice.harvest.HostCandidateHarvester -> org.ice4j.ice.harvest.HostCandidateHarvester:
    java.util.logging.Logger logger -> logger
    org.ice4j.ice.harvest.HarvestStatistics harvestStatistics -> harvestStatistics
    java.lang.String[] allowedInterfaces -> allowedInterfaces
    java.lang.String[] blockedInterfaces -> blockedInterfaces
    boolean interfaceFiltersinitialized -> interfaceFiltersinitialized
    java.lang.String[] getAllowedInterfaces() -> getAllowedInterfaces
    java.lang.String[] getBlockedInterfaces() -> getBlockedInterfaces
    void harvest(org.ice4j.ice.Component,int,int,int,org.ice4j.Transport) -> harvest
    boolean isInterfaceAllowed(java.net.NetworkInterface) -> isInterfaceAllowed
    org.ice4j.socket.IceSocketWrapper createServerSocket(java.net.InetAddress,int,int,int,org.ice4j.ice.Component) -> createServerSocket
    org.ice4j.socket.IceSocketWrapper createDatagramSocket(java.net.InetAddress,int,int,int) -> createDatagramSocket
    void createAndRegisterStunSocket(org.ice4j.ice.HostCandidate) -> createAndRegisterStunSocket
    void checkPorts(int,int,int) -> checkPorts
    org.ice4j.ice.harvest.HarvestStatistics getHarvestStatistics() -> getHarvestStatistics
    void initializeInterfaceFilters() -> initializeInterfaceFilters
org.ice4j.ice.harvest.MappingCandidateHarvester -> org.ice4j.ice.harvest.MappingCandidateHarvester:
    org.ice4j.TransportAddress mask -> mask
    org.ice4j.TransportAddress face -> face
    java.util.Collection harvest(org.ice4j.ice.Component) -> harvest
org.ice4j.ice.harvest.StunCandidateHarvest -> org.ice4j.ice.harvest.StunCandidateHarvest:
    java.util.logging.Logger logger -> logger
    org.ice4j.ice.LocalCandidate[] NO_CANDIDATES -> NO_CANDIDATES
    long SEND_KEEP_ALIVE_MESSAGE_INTERVAL_NOT_SPECIFIED -> SEND_KEEP_ALIVE_MESSAGE_INTERVAL_NOT_SPECIFIED
    java.util.List candidates -> candidates
    boolean completedResolvingCandidate -> completedResolvingCandidate
    org.ice4j.ice.harvest.StunCandidateHarvester harvester -> harvester
    org.ice4j.ice.HostCandidate hostCandidate -> hostCandidate
    org.ice4j.security.LongTermCredentialSession longTermCredentialSession -> longTermCredentialSession
    java.util.Map requests -> requests
    long sendKeepAliveMessageInterval -> sendKeepAliveMessageInterval
    java.lang.Object sendKeepAliveMessageSyncRoot -> sendKeepAliveMessageSyncRoot
    java.lang.Thread sendKeepAliveMessageThread -> sendKeepAliveMessageThread
    long sendKeepAliveMessageTime -> sendKeepAliveMessageTime
    boolean addCandidate(org.ice4j.ice.LocalCandidate) -> addCandidate
    boolean addShortTermCredentialAttributes(org.ice4j.message.Request) -> addShortTermCredentialAttributes
    boolean completedResolvingCandidate(org.ice4j.message.Request,org.ice4j.message.Response) -> completedResolvingCandidate
    boolean containsCandidate(org.ice4j.ice.LocalCandidate) -> containsCandidate
    void createCandidates(org.ice4j.message.Response) -> createCandidates
    org.ice4j.message.Message createKeepAliveMessage(org.ice4j.ice.LocalCandidate) -> createKeepAliveMessage
    org.ice4j.message.Request createRequestToRetry(org.ice4j.message.Request) -> createRequestToRetry
    org.ice4j.message.Request createRequestToStartResolvingCandidate() -> createRequestToStartResolvingCandidate
    void createSendKeepAliveMessageThread() -> createSendKeepAliveMessageThread
    void createServerReflexiveCandidate(org.ice4j.message.Response) -> createServerReflexiveCandidate
    org.ice4j.ice.ServerReflexiveCandidate createServerReflexiveCandidate(org.ice4j.TransportAddress) -> createServerReflexiveCandidate
    void exitSendKeepAliveMessageThread() -> exitSendKeepAliveMessageThread
    int getCandidateCount() -> getCandidateCount
    org.ice4j.ice.LocalCandidate[] getCandidates() -> getCandidates
    org.ice4j.TransportAddress getMappedAddress(org.ice4j.message.Response) -> getMappedAddress
    boolean processChallenge(byte[],byte[],org.ice4j.message.Request,org.ice4j.stack.TransactionID) -> processChallenge
    boolean processChallenge(org.ice4j.message.Response,org.ice4j.message.Request,org.ice4j.stack.TransactionID) -> processChallenge
    boolean processErrorOrFailure(org.ice4j.message.Response,org.ice4j.message.Request,org.ice4j.stack.TransactionID) -> processErrorOrFailure
    void processFailure(org.ice4j.BaseStunMessageEvent) -> processFailure
    void processResponse(org.ice4j.StunResponseEvent) -> processResponse
    boolean processStaleNonce(org.ice4j.message.Response,org.ice4j.message.Request,org.ice4j.stack.TransactionID) -> processStaleNonce
    void processSuccess(org.ice4j.message.Response,org.ice4j.message.Request,org.ice4j.stack.TransactionID) -> processSuccess
    boolean processUnauthorized(org.ice4j.message.Response,org.ice4j.message.Request,org.ice4j.stack.TransactionID) -> processUnauthorized
    boolean runInSendKeepAliveMessageThread() -> runInSendKeepAliveMessageThread
    void sendKeepAliveMessage() -> sendKeepAliveMessage
    boolean sendKeepAliveMessage(org.ice4j.ice.LocalCandidate) -> sendKeepAliveMessage
    org.ice4j.stack.TransactionID sendRequest(org.ice4j.message.Request,boolean,org.ice4j.stack.TransactionID) -> sendRequest
    void setSendKeepAliveMessageInterval(long) -> setSendKeepAliveMessageInterval
    boolean startResolvingCandidate() -> startResolvingCandidate
    void close() -> close
    boolean access$000(org.ice4j.ice.harvest.StunCandidateHarvest) -> access$000
    void access$100(org.ice4j.ice.harvest.StunCandidateHarvest) -> access$100
org.ice4j.ice.harvest.StunCandidateHarvest$SendKeepAliveMessageThread -> org.ice4j.ice.harvest.StunCandidateHarvest$SendKeepAliveMessageThread:
    java.lang.ref.WeakReference harvest -> harvest
    void run() -> run
org.ice4j.ice.harvest.StunCandidateHarvester -> org.ice4j.ice.harvest.StunCandidateHarvester:
    java.util.logging.Logger logger -> logger
    java.util.List completedHarvests -> completedHarvests
    java.lang.String shortTermCredentialUsername -> shortTermCredentialUsername
    java.util.List startedHarvests -> startedHarvests
    org.ice4j.TransportAddress stunServer -> stunServer
    org.ice4j.stack.StunStack stunStack -> stunStack
    void completedResolvingCandidate(org.ice4j.ice.harvest.StunCandidateHarvest) -> completedResolvingCandidate
    org.ice4j.ice.harvest.StunCandidateHarvest createHarvest(org.ice4j.ice.HostCandidate) -> createHarvest
    org.ice4j.security.LongTermCredential createLongTermCredential(org.ice4j.ice.harvest.StunCandidateHarvest,byte[]) -> createLongTermCredential
    java.lang.String getShortTermCredentialUsername() -> getShortTermCredentialUsername
    org.ice4j.stack.StunStack getStunStack() -> getStunStack
    java.util.Collection harvest(org.ice4j.ice.Component) -> harvest
    java.lang.String listCandidates(java.util.Collection) -> listCandidates
    void startResolvingCandidate(org.ice4j.ice.HostCandidate) -> startResolvingCandidate
    void waitForResolutionEnd() -> waitForResolutionEnd
    java.lang.String toString() -> toString
    org.ice4j.ice.HostCandidate getHostCandidate(org.ice4j.ice.HostCandidate) -> getHostCandidate
org.ice4j.ice.harvest.TrickleCallback -> org.ice4j.ice.harvest.TrickleCallback:
    void onIceCandidates(java.util.Collection) -> onIceCandidates
org.ice4j.ice.harvest.TurnCandidateHarvest -> org.ice4j.ice.harvest.TurnCandidateHarvest:
    java.util.logging.Logger logger -> logger
    org.ice4j.message.Request requestToStartResolvingCandidate -> requestToStartResolvingCandidate
    void close(org.ice4j.socket.RelayedCandidateDatagramSocket) -> close
    boolean completedResolvingCandidate(org.ice4j.message.Request,org.ice4j.message.Response) -> completedResolvingCandidate
    void createCandidates(org.ice4j.message.Response) -> createCandidates
    org.ice4j.message.Message createKeepAliveMessage(org.ice4j.ice.LocalCandidate) -> createKeepAliveMessage
    void createRelayedCandidate(org.ice4j.message.Response) -> createRelayedCandidate
    org.ice4j.ice.RelayedCandidate createRelayedCandidate(org.ice4j.TransportAddress,org.ice4j.TransportAddress) -> createRelayedCandidate
    org.ice4j.message.Request createRequestToRetry(org.ice4j.message.Request) -> createRequestToRetry
    org.ice4j.message.Request createRequestToStartResolvingCandidate() -> createRequestToStartResolvingCandidate
    boolean processErrorOrFailure(org.ice4j.message.Response,org.ice4j.message.Request,org.ice4j.stack.TransactionID) -> processErrorOrFailure
    void processSuccess(org.ice4j.message.Response,org.ice4j.message.Request,org.ice4j.stack.TransactionID) -> processSuccess
    byte[] sendRequest(org.ice4j.socket.RelayedCandidateDatagramSocket,org.ice4j.message.Request) -> sendRequest
org.ice4j.ice.harvest.TurnCandidateHarvest$1 -> org.ice4j.ice.harvest.TurnCandidateHarvest$1:
    int[] $SwitchMap$org$ice4j$ice$CandidateType -> $SwitchMap$org$ice4j$ice$CandidateType
org.ice4j.ice.harvest.TurnCandidateHarvester -> org.ice4j.ice.harvest.TurnCandidateHarvester:
    org.ice4j.security.LongTermCredential longTermCredential -> longTermCredential
    org.ice4j.ice.harvest.TurnCandidateHarvest createHarvest(org.ice4j.ice.HostCandidate) -> createHarvest
    org.ice4j.security.LongTermCredential createLongTermCredential(org.ice4j.ice.harvest.StunCandidateHarvest,byte[]) -> createLongTermCredential
    org.ice4j.ice.harvest.StunCandidateHarvest createHarvest(org.ice4j.ice.HostCandidate) -> createHarvest
org.ice4j.ice.harvest.UPNPHarvester -> org.ice4j.ice.harvest.UPNPHarvester:
    java.util.logging.Logger logger -> logger
    int MAX_RETRIES -> MAX_RETRIES
    java.lang.String stIP -> stIP
    java.lang.String stPPP -> stPPP
    java.lang.Object rootSync -> rootSync
    org.a.a.a device -> device
    int finishThreads -> finishThreads
    java.util.Collection harvest(org.ice4j.ice.Component) -> harvest
    java.util.List createUPNPCandidate(org.ice4j.socket.IceSocketWrapper,java.lang.String,int,org.ice4j.ice.Component,org.a.a.a) -> createUPNPCandidate
    java.lang.String toString() -> toString
    java.util.logging.Logger access$000() -> access$000
    java.lang.Object access$100(org.ice4j.ice.harvest.UPNPHarvester) -> access$100
    int access$208(org.ice4j.ice.harvest.UPNPHarvester) -> access$208
org.ice4j.ice.harvest.UPNPHarvester$UPNPThread -> org.ice4j.ice.harvest.UPNPHarvester$UPNPThread:
    org.a.a.a device -> device
    java.lang.String st -> st
    org.ice4j.ice.harvest.UPNPHarvester this$0 -> this$0
    org.a.a.a getDevice() -> getDevice
    void run() -> run
org.ice4j.ice.sdp.CandidateAttribute -> org.ice4j.ice.sdp.CandidateAttribute:
    java.lang.String NAME -> NAME
    long serialVersionUID -> serialVersionUID
    org.ice4j.ice.Candidate candidate -> candidate
    java.lang.String COLON -> COLON
    java.lang.String NEWLINE -> NEWLINE
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    boolean hasValue() -> hasValue
    java.lang.String getValue() -> getValue
    void setValue(java.lang.String) -> setValue
    char getTypeChar() -> getTypeChar
    org.ice4j.ice.sdp.CandidateAttribute clone() -> clone
    java.lang.String encode() -> encode
    java.lang.Object clone() -> clone
org.ice4j.message.ChannelData -> org.ice4j.message.ChannelData:
    char channelNumber -> channelNumber
    byte[] data -> data
    char HEADER_LENGTH -> HEADER_LENGTH
    void setChannelNumber(char) -> setChannelNumber
    char getChannelNumber() -> getChannelNumber
    void setData(byte[]) -> setData
    byte[] getData() -> getData
    char getDataLength() -> getDataLength
    boolean validateChannelNumber(char) -> validateChannelNumber
    byte[] encode() -> encode
    org.ice4j.message.ChannelData decode(byte[],char,char) -> decode
    boolean isChannelDataMessage(byte[]) -> isChannelDataMessage
org.ice4j.message.Indication -> org.ice4j.message.Indication:
    void setMessageType(char) -> setMessageType
org.ice4j.message.Message -> org.ice4j.message.Message:
    java.util.logging.Logger logger -> logger
    char STUN_REQUEST -> STUN_REQUEST
    char STUN_INDICATION -> STUN_INDICATION
    char STUN_SUCCESS_RESP -> STUN_SUCCESS_RESP
    char STUN_ERROR_RESP -> STUN_ERROR_RESP
    char STUN_METHOD_BINDING -> STUN_METHOD_BINDING
    char BINDING_REQUEST -> BINDING_REQUEST
    char BINDING_SUCCESS_RESPONSE -> BINDING_SUCCESS_RESPONSE
    char BINDING_ERROR_RESPONSE -> BINDING_ERROR_RESPONSE
    char BINDING_INDICATION -> BINDING_INDICATION
    char SHARED_SECRET_REQUEST -> SHARED_SECRET_REQUEST
    char SHARED_SECRET_RESPONSE -> SHARED_SECRET_RESPONSE
    char SHARED_SECRET_ERROR_RESPONSE -> SHARED_SECRET_ERROR_RESPONSE
    char TURN_METHOD_ALLOCATE -> TURN_METHOD_ALLOCATE
    char TURN_METHOD_REFRESH -> TURN_METHOD_REFRESH
    char TURN_METHOD_SEND -> TURN_METHOD_SEND
    char TURN_METHOD_DATA -> TURN_METHOD_DATA
    char TURN_METHOD_CREATEPERMISSION -> TURN_METHOD_CREATEPERMISSION
    char TURN_METHOD_CHANNELBIND -> TURN_METHOD_CHANNELBIND
    char TURN_METHOD_CONNECT -> TURN_METHOD_CONNECT
    char TURN_METHOD_CONNECTION_BIND -> TURN_METHOD_CONNECTION_BIND
    char TURN_METHOD_CONNECTION_ATTEMPT -> TURN_METHOD_CONNECTION_ATTEMPT
    char ALLOCATE_REQUEST -> ALLOCATE_REQUEST
    char ALLOCATE_RESPONSE -> ALLOCATE_RESPONSE
    char ALLOCATE_ERROR_RESPONSE -> ALLOCATE_ERROR_RESPONSE
    char REFRESH_REQUEST -> REFRESH_REQUEST
    char ALLOCATE_REFRESH_REQUEST -> ALLOCATE_REFRESH_REQUEST
    char REFRESH_RESPONSE -> REFRESH_RESPONSE
    char REFRESH_ERROR_RESPONSE -> REFRESH_ERROR_RESPONSE
    char CHANNELBIND_REQUEST -> CHANNELBIND_REQUEST
    char CHANNELBIND_RESPONSE -> CHANNELBIND_RESPONSE
    char CHANNELBIND_ERROR_RESPONSE -> CHANNELBIND_ERROR_RESPONSE
    char CREATEPERMISSION_REQUEST -> CREATEPERMISSION_REQUEST
    char CREATEPERMISSION_RESPONSE -> CREATEPERMISSION_RESPONSE
    char CREATEPERMISSION_ERROR_RESPONSE -> CREATEPERMISSION_ERROR_RESPONSE
    char SEND_INDICATION -> SEND_INDICATION
    char DATA_INDICATION -> DATA_INDICATION
    char CONNECT_REQUEST -> CONNECT_REQUEST
    char CONNECT_RESPONSE -> CONNECT_RESPONSE
    char CONNECT_ERROR_RESPONSE -> CONNECT_ERROR_RESPONSE
    char CONNECTION_BIND_REQUEST -> CONNECTION_BIND_REQUEST
    char CONNECTION_BIND_SUCCESS_RESPONSE -> CONNECTION_BIND_SUCCESS_RESPONSE
    char CONNECTION_BIND_ERROR_RESPONSE -> CONNECTION_BIND_ERROR_RESPONSE
    char CONNECTION_ATTEMPT_INDICATION -> CONNECTION_ATTEMPT_INDICATION
    char SEND_REQUEST -> SEND_REQUEST
    char OLD_DATA_INDICATION -> OLD_DATA_INDICATION
    byte HEADER_LENGTH -> HEADER_LENGTH
    char messageType -> messageType
    byte[] transactionID -> transactionID
    byte[] MAGIC_COOKIE -> MAGIC_COOKIE
    byte TRANSACTION_ID_LENGTH -> TRANSACTION_ID_LENGTH
    byte RFC3489_TRANSACTION_ID_LENGTH -> RFC3489_TRANSACTION_ID_LENGTH
    java.util.LinkedHashMap attributes -> attributes
    boolean rfc3489CompatibilityMode -> rfc3489CompatibilityMode
    byte N_A -> N_A
    byte C -> C
    byte O -> O
    byte M -> M
    byte BINDING_REQUEST_PRESENTITY_INDEX -> BINDING_REQUEST_PRESENTITY_INDEX
    byte BINDING_RESPONSE_PRESENTITY_INDEX -> BINDING_RESPONSE_PRESENTITY_INDEX
    byte BINDING_ERROR_RESPONSE_PRESENTITY_INDEX -> BINDING_ERROR_RESPONSE_PRESENTITY_INDEX
    byte SHARED_SECRET_REQUEST_PRESENTITY_INDEX -> SHARED_SECRET_REQUEST_PRESENTITY_INDEX
    byte SHARED_SECRET_RESPONSE_PRESENTITY_INDEX -> SHARED_SECRET_RESPONSE_PRESENTITY_INDEX
    byte SHARED_SECRET_ERROR_RESPONSE_PRESENTITY_INDEX -> SHARED_SECRET_ERROR_RESPONSE_PRESENTITY_INDEX
    byte ALLOCATE_REQUEST_PRESENTITY_INDEX -> ALLOCATE_REQUEST_PRESENTITY_INDEX
    byte ALLOCATE_RESPONSE_PRESENTITY_INDEX -> ALLOCATE_RESPONSE_PRESENTITY_INDEX
    byte REFRESH_REQUEST_PRESENTITY_INDEX -> REFRESH_REQUEST_PRESENTITY_INDEX
    byte REFRESH_RESPONSE_PRESENTITY_INDEX -> REFRESH_RESPONSE_PRESENTITY_INDEX
    byte CHANNELBIND_REQUEST_PRESENTITY_INDEX -> CHANNELBIND_REQUEST_PRESENTITY_INDEX
    byte CHANNELBIND_RESPONSE_PRESENTITY_INDEX -> CHANNELBIND_RESPONSE_PRESENTITY_INDEX
    byte SEND_INDICATION_PRESENTITY_INDEX -> SEND_INDICATION_PRESENTITY_INDEX
    byte DATA_INDICATION_PRESENTITY_INDEX -> DATA_INDICATION_PRESENTITY_INDEX
    byte MAPPED_ADDRESS_PRESENTITY_INDEX -> MAPPED_ADDRESS_PRESENTITY_INDEX
    byte RESPONSE_ADDRESS_PRESENTITY_INDEX -> RESPONSE_ADDRESS_PRESENTITY_INDEX
    byte CHANGE_REQUEST_PRESENTITY_INDEX -> CHANGE_REQUEST_PRESENTITY_INDEX
    byte SOURCE_ADDRESS_PRESENTITY_INDEX -> SOURCE_ADDRESS_PRESENTITY_INDEX
    byte CHANGED_ADDRESS_PRESENTITY_INDEX -> CHANGED_ADDRESS_PRESENTITY_INDEX
    byte USERNAME_PRESENTITY_INDEX -> USERNAME_PRESENTITY_INDEX
    byte PASSWORD_PRESENTITY_INDEX -> PASSWORD_PRESENTITY_INDEX
    byte MESSAGE_INTEGRITY_PRESENTITY_INDEX -> MESSAGE_INTEGRITY_PRESENTITY_INDEX
    byte ERROR_CODE_PRESENTITY_INDEX -> ERROR_CODE_PRESENTITY_INDEX
    byte UNKNOWN_ATTRIBUTES_PRESENTITY_INDEX -> UNKNOWN_ATTRIBUTES_PRESENTITY_INDEX
    byte REFLECTED_FROM_PRESENTITY_INDEX -> REFLECTED_FROM_PRESENTITY_INDEX
    byte XOR_MAPPED_ADDRESS_PRESENTITY_INDEX -> XOR_MAPPED_ADDRESS_PRESENTITY_INDEX
    byte XOR_ONLY_PRESENTITY_INDEX -> XOR_ONLY_PRESENTITY_INDEX
    byte SOFTWARE_PRESENTITY_INDEX -> SOFTWARE_PRESENTITY_INDEX
    byte UNKNOWN_OPTIONAL_ATTRIBUTES_PRESENTITY_INDEX -> UNKNOWN_OPTIONAL_ATTRIBUTES_PRESENTITY_INDEX
    byte ALTERNATE_SERVER_PRESENTITY_INDEX -> ALTERNATE_SERVER_PRESENTITY_INDEX
    byte REALM_PRESENTITY_INDEX -> REALM_PRESENTITY_INDEX
    byte NONCE_PRESENTITY_INDEX -> NONCE_PRESENTITY_INDEX
    byte FINGERPRINT_PRESENTITY_INDEX -> FINGERPRINT_PRESENTITY_INDEX
    byte CHANNEL_NUMBER_PRESENTITY_INDEX -> CHANNEL_NUMBER_PRESENTITY_INDEX
    byte LIFETIME_PRESENTITY_INDEX -> LIFETIME_PRESENTITY_INDEX
    byte XOR_PEER_ADDRESS_PRESENTITY_INDEX -> XOR_PEER_ADDRESS_PRESENTITY_INDEX
    byte DATA_PRESENTITY_INDEX -> DATA_PRESENTITY_INDEX
    byte XOR_RELAYED_ADDRESS_PRESENTITY_INDEX -> XOR_RELAYED_ADDRESS_PRESENTITY_INDEX
    byte EVEN_PORT_PRESENTITY_INDEX -> EVEN_PORT_PRESENTITY_INDEX
    byte REQUESTED_TRANSPORT_PRESENTITY_INDEX -> REQUESTED_TRANSPORT_PRESENTITY_INDEX
    byte DONT_FRAGMENT_PRESENTITY_INDEX -> DONT_FRAGMENT_PRESENTITY_INDEX
    byte RESERVATION_TOKEN_PRESENTITY_INDEX -> RESERVATION_TOKEN_PRESENTITY_INDEX
    byte PRIORITY_PRESENTITY_INDEX -> PRIORITY_PRESENTITY_INDEX
    byte ICE_CONTROLLING_PRESENTITY_INDEX -> ICE_CONTROLLING_PRESENTITY_INDEX
    byte ICE_CONTROLLED_PRESENTITY_INDEX -> ICE_CONTROLLED_PRESENTITY_INDEX
    byte USE_CANDIDATE_PRESENTITY_INDEX -> USE_CANDIDATE_PRESENTITY_INDEX
    byte DESTINATION_ADDRESS_PRESENTITY_INDEX -> DESTINATION_ADDRESS_PRESENTITY_INDEX
    byte[][] attributePresentities -> attributePresentities
    char getDataLength() -> getDataLength
    char getDataLengthWithoutPadding() -> getDataLengthWithoutPadding
    void putAttribute(org.ice4j.attribute.Attribute) -> putAttribute
    boolean containsAttribute(char) -> containsAttribute
    org.ice4j.attribute.Attribute getAttribute(char) -> getAttribute
    java.util.List getAttributes() -> getAttributes
    org.ice4j.attribute.Attribute removeAttribute(char) -> removeAttribute
    int getAttributeCount() -> getAttributeCount
    void setMessageType(char) -> setMessageType
    char getMessageType() -> getMessageType
    void setTransactionID(byte[]) -> setTransactionID
    byte[] getTransactionID() -> getTransactionID
    byte getAttributePresentity(char) -> getAttributePresentity
    java.lang.String getName() -> getName
    boolean equals(java.lang.Object) -> equals
    byte[] encode(org.ice4j.stack.StunStack) -> encode
    void prepareForEncoding() -> prepareForEncoding
    org.ice4j.message.Message decode(byte[],char,char) -> decode
    void performAttributeSpecificActions(org.ice4j.attribute.Attribute,byte[],int,int) -> performAttributeSpecificActions
    boolean validateFingerprint(org.ice4j.attribute.FingerprintAttribute,byte[],int,int) -> validateFingerprint
    void validateAttributePresentity() -> validateAttributePresentity
    boolean isErrorResponseType(char) -> isErrorResponseType
    boolean isSuccessResponseType(char) -> isSuccessResponseType
    boolean isResponseType(char) -> isResponseType
    boolean isIndicationType(char) -> isIndicationType
    boolean isRequestType(char) -> isRequestType
    java.lang.String toString() -> toString
org.ice4j.message.MessageFactory -> org.ice4j.message.MessageFactory:
    java.util.logging.Logger logger -> logger
    org.ice4j.message.Request createBindingRequest() -> createBindingRequest
    org.ice4j.message.Request createBindingRequest(long) -> createBindingRequest
    org.ice4j.message.Request createBindingRequest(long,boolean,long) -> createBindingRequest
    org.ice4j.message.Response create3489BindingResponse(org.ice4j.TransportAddress,org.ice4j.TransportAddress,org.ice4j.TransportAddress) -> create3489BindingResponse
    org.ice4j.message.Response createBindingResponse(org.ice4j.message.Request,org.ice4j.TransportAddress) -> createBindingResponse
    org.ice4j.message.Response createBindingErrorResponse(char,java.lang.String,char[]) -> createBindingErrorResponse
    org.ice4j.message.Response createBindingErrorResponseUnknownAttributes(char[]) -> createBindingErrorResponseUnknownAttributes
    org.ice4j.message.Response createBindingErrorResponseUnknownAttributes(java.lang.String,char[]) -> createBindingErrorResponseUnknownAttributes
    org.ice4j.message.Response createBindingErrorResponse(char,java.lang.String) -> createBindingErrorResponse
    org.ice4j.message.Response createBindingErrorResponse(char) -> createBindingErrorResponse
    org.ice4j.message.Indication createBindingIndication() -> createBindingIndication
    org.ice4j.message.Request createAllocateRequest() -> createAllocateRequest
    org.ice4j.message.Request createAllocateRequest(byte,boolean) -> createAllocateRequest
    org.ice4j.message.Response createAllocationResponse(org.ice4j.message.Request,org.ice4j.TransportAddress,org.ice4j.TransportAddress,int) -> createAllocationResponse
    org.ice4j.message.Response createAllocationResponse(org.ice4j.message.Request,org.ice4j.TransportAddress,org.ice4j.TransportAddress,byte[],int) -> createAllocationResponse
    org.ice4j.message.Response createAllocationErrorResponse(char) -> createAllocationErrorResponse
    org.ice4j.message.Response createAllocationErrorResponse(char,java.lang.String) -> createAllocationErrorResponse
    org.ice4j.message.Request createGoogleAllocateRequest(java.lang.String) -> createGoogleAllocateRequest
    void addLongTermCredentialAttributes(org.ice4j.message.Request,byte[],byte[],byte[]) -> addLongTermCredentialAttributes
    org.ice4j.message.Request createRefreshRequest() -> createRefreshRequest
    org.ice4j.message.Request createRefreshRequest(int) -> createRefreshRequest
    org.ice4j.message.Response createRefreshResponse(int) -> createRefreshResponse
    org.ice4j.message.Response createRefreshErrorResponse(char) -> createRefreshErrorResponse
    org.ice4j.message.Response createRefreshErrorResponse(char,java.lang.String) -> createRefreshErrorResponse
    org.ice4j.message.Request createChannelBindRequest(char,org.ice4j.TransportAddress,byte[]) -> createChannelBindRequest
    org.ice4j.message.Response createChannelBindResponse() -> createChannelBindResponse
    org.ice4j.message.Response createChannelBindErrorResponse(char) -> createChannelBindErrorResponse
    org.ice4j.message.Response createChannelBindErrorResponse(char,java.lang.String) -> createChannelBindErrorResponse
    org.ice4j.message.Request createCreatePermissionRequest(org.ice4j.TransportAddress,byte[]) -> createCreatePermissionRequest
    org.ice4j.message.Response createCreatePermissionResponse() -> createCreatePermissionResponse
    org.ice4j.message.Response createCreatePermissionErrorResponse(char) -> createCreatePermissionErrorResponse
    org.ice4j.message.Response createPermissionErrorResponse(char,java.lang.String) -> createPermissionErrorResponse
    org.ice4j.message.Indication createSendIndication(org.ice4j.TransportAddress,byte[],byte[]) -> createSendIndication
    org.ice4j.message.Indication createDataIndication(org.ice4j.TransportAddress,byte[],byte[]) -> createDataIndication
    org.ice4j.message.Request createSendRequest(java.lang.String,org.ice4j.TransportAddress,byte[]) -> createSendRequest
    org.ice4j.message.Request createSharedSecretRequest() -> createSharedSecretRequest
    org.ice4j.message.Response createSharedSecretResponse() -> createSharedSecretResponse
    org.ice4j.message.Response createSharedSecretErrorResponse() -> createSharedSecretErrorResponse
    org.ice4j.message.Request createConnectRequest(org.ice4j.TransportAddress,org.ice4j.message.Request) -> createConnectRequest
    org.ice4j.message.Response createConnectResponse(int) -> createConnectResponse
    org.ice4j.message.Response createConnectErrorResponse(char) -> createConnectErrorResponse
    org.ice4j.message.Response createConnectErrorResponse(char,java.lang.String) -> createConnectErrorResponse
    org.ice4j.message.Request createConnectionBindRequest(int) -> createConnectionBindRequest
    org.ice4j.message.Response createConnectionBindResponse() -> createConnectionBindResponse
    org.ice4j.message.Response createConnectionBindErrorResponse(char) -> createConnectionBindErrorResponse
    org.ice4j.message.Response createConnectionBindErrorResponse(char,java.lang.String) -> createConnectionBindErrorResponse
    org.ice4j.message.Indication createConnectionAttemptIndication(int,org.ice4j.TransportAddress) -> createConnectionAttemptIndication
org.ice4j.message.Request -> org.ice4j.message.Request:
    void setMessageType(char) -> setMessageType
org.ice4j.message.Response -> org.ice4j.message.Response:
    boolean isErrorResponse() -> isErrorResponse
    boolean isSuccessResponse() -> isSuccessResponse
    void setMessageType(char) -> setMessageType
org.ice4j.pseudotcp.EnShutdown -> org.ice4j.pseudotcp.EnShutdown:
    org.ice4j.pseudotcp.EnShutdown SD_NONE -> SD_NONE
    org.ice4j.pseudotcp.EnShutdown SD_GRACEFUL -> SD_GRACEFUL
    org.ice4j.pseudotcp.EnShutdown SD_FORCEFUL -> SD_FORCEFUL
    org.ice4j.pseudotcp.EnShutdown[] $VALUES -> $VALUES
    org.ice4j.pseudotcp.EnShutdown[] values() -> values
    org.ice4j.pseudotcp.EnShutdown valueOf(java.lang.String) -> valueOf
org.ice4j.pseudotcp.IPseudoTcpNotify -> org.ice4j.pseudotcp.IPseudoTcpNotify:
    void OnTcpOpen(org.ice4j.pseudotcp.PseudoTCPBase) -> OnTcpOpen
    void OnTcpReadable(org.ice4j.pseudotcp.PseudoTCPBase) -> OnTcpReadable
    void OnTcpWriteable(org.ice4j.pseudotcp.PseudoTCPBase) -> OnTcpWriteable
    void OnTcpClosed(org.ice4j.pseudotcp.PseudoTCPBase,java.io.IOException) -> OnTcpClosed
    org.ice4j.pseudotcp.WriteResult TcpWritePacket(org.ice4j.pseudotcp.PseudoTCPBase,byte[],int) -> TcpWritePacket
org.ice4j.pseudotcp.Option -> org.ice4j.pseudotcp.Option:
    org.ice4j.pseudotcp.Option OPT_NODELAY -> OPT_NODELAY
    org.ice4j.pseudotcp.Option OPT_ACKDELAY -> OPT_ACKDELAY
    org.ice4j.pseudotcp.Option OPT_RCVBUF -> OPT_RCVBUF
    org.ice4j.pseudotcp.Option OPT_SNDBUF -> OPT_SNDBUF
    org.ice4j.pseudotcp.Option OPT_READ_TIMEOUT -> OPT_READ_TIMEOUT
    org.ice4j.pseudotcp.Option OPT_WRITE_TIMEOUT -> OPT_WRITE_TIMEOUT
    org.ice4j.pseudotcp.Option[] $VALUES -> $VALUES
    org.ice4j.pseudotcp.Option[] values() -> values
    org.ice4j.pseudotcp.Option valueOf(java.lang.String) -> valueOf
org.ice4j.pseudotcp.PseudoTCPBase -> org.ice4j.pseudotcp.PseudoTCPBase:
    java.util.logging.Logger logger -> logger
    boolean PSEUDO_KEEPALIVE -> PSEUDO_KEEPALIVE
    int[] PACKET_MAXIMUMS -> PACKET_MAXIMUMS
    int MAX_PACKET -> MAX_PACKET
    int MIN_PACKET -> MIN_PACKET
    int IP_HEADER_SIZE -> IP_HEADER_SIZE
    int ICMP_HEADER_SIZE -> ICMP_HEADER_SIZE
    int UDP_HEADER_SIZE -> UDP_HEADER_SIZE
    int JINGLE_HEADER_SIZE -> JINGLE_HEADER_SIZE
    int DEFAULT_RCV_BUF_SIZE -> DEFAULT_RCV_BUF_SIZE
    int DEFAULT_SND_BUF_SIZE -> DEFAULT_SND_BUF_SIZE
    long MAX_SEQ -> MAX_SEQ
    int HEADER_SIZE -> HEADER_SIZE
    int PACKET_OVERHEAD -> PACKET_OVERHEAD
    long MIN_RTO -> MIN_RTO
    long DEF_RTO -> DEF_RTO
    long MAX_RTO -> MAX_RTO
    long DEF_ACK_DELAY -> DEF_ACK_DELAY
    short FLAG_CTL -> FLAG_CTL
    short FLAG_RST -> FLAG_RST
    short CTL_CONNECT -> CTL_CONNECT
    short CTL_EXTRA -> CTL_EXTRA
    short TCP_OPT_EOL -> TCP_OPT_EOL
    short TCP_OPT_NOOP -> TCP_OPT_NOOP
    short TCP_OPT_MSS -> TCP_OPT_MSS
    short TCP_OPT_WND_SCALE -> TCP_OPT_WND_SCALE
    int CTRL_BOUND -> CTRL_BOUND
    long DEFAULT_TIMEOUT -> DEFAULT_TIMEOUT
    long CLOSED_TIMEOUT -> CLOSED_TIMEOUT
    int IDLE_PING -> IDLE_PING
    int IDLE_TIMEOUT -> IDLE_TIMEOUT
    org.ice4j.pseudotcp.PseudoTcpState m_state -> m_state
    long m_conv -> m_conv
    boolean m_bReadEnable -> m_bReadEnable
    boolean m_bWriteEnable -> m_bWriteEnable
    boolean m_bOutgoing -> m_bOutgoing
    long m_lasttraffic -> m_lasttraffic
    java.util.List m_rlist -> m_rlist
    long m_lastrecv -> m_lastrecv
    int m_rbuf_len -> m_rbuf_len
    int m_rcv_nxt -> m_rcv_nxt
    int m_rcv_wnd -> m_rcv_wnd
    short m_rwnd_scale -> m_rwnd_scale
    org.ice4j.pseudotcp.util.ByteFifoBuffer m_rbuf -> m_rbuf
    java.util.List m_slist -> m_slist
    long m_lastsend -> m_lastsend
    long m_snd_nxt -> m_snd_nxt
    long m_snd_una -> m_snd_una
    int m_sbuf_len -> m_sbuf_len
    int m_snd_wnd -> m_snd_wnd
    short m_swnd_scale -> m_swnd_scale
    org.ice4j.pseudotcp.util.ByteFifoBuffer m_sbuf -> m_sbuf
    long m_mss -> m_mss
    long m_largest -> m_largest
    long m_mtu_advise -> m_mtu_advise
    int m_msslevel -> m_msslevel
    long m_rto_base -> m_rto_base
    long m_ts_recent -> m_ts_recent
    long m_ts_lastack -> m_ts_lastack
    long m_rx_rttvar -> m_rx_rttvar
    long m_rx_srtt -> m_rx_srtt
    long m_rx_rto -> m_rx_rto
    long m_ssthresh -> m_ssthresh
    long m_cwnd -> m_cwnd
    short m_dup_acks -> m_dup_acks
    long m_recover -> m_recover
    long m_t_ack -> m_t_ack
    boolean m_use_nagling -> m_use_nagling
    long m_ack_delay -> m_ack_delay
    boolean m_support_wnd_scale -> m_support_wnd_scale
    org.ice4j.pseudotcp.PseudoTcpNotify m_notify -> m_notify
    org.ice4j.pseudotcp.EnShutdown m_shutdown -> m_shutdown
    java.lang.String debugName -> debugName
    java.lang.Object ack_notify -> ack_notify
    boolean $assertionsDisabled -> $assertionsDisabled
    void connect() -> connect
    void notifyMTU(int) -> notifyMTU
    int getMTU() -> getMTU
    long now() -> now
    long getNextClock(long) -> getNextClock
    void notifyClock(long) -> notifyClock
    boolean notifyPacket(byte[],int) -> notifyPacket
    long getOption(org.ice4j.pseudotcp.Option) -> getOption
    void setOption(org.ice4j.pseudotcp.Option,long) -> setOption
    long getCongestionWindow() -> getCongestionWindow
    long getBytesInFlight() -> getBytesInFlight
    long getBytesBufferedNotSent() -> getBytesBufferedNotSent
    int getAvailable() -> getAvailable
    int getAvailableSendBuffer() -> getAvailableSendBuffer
    long getRoundTripTimeEstimateMs() -> getRoundTripTimeEstimateMs
    int recv(byte[],int,int) -> recv
    int recv(byte[],int) -> recv
    int send(byte[],int) -> send
    int send(byte[],int,int) -> send
    void close(boolean) -> close
    int queue(byte[],int,int,boolean) -> queue
    org.ice4j.pseudotcp.WriteResult packet(long,short,long,long) -> packet
    org.ice4j.pseudotcp.Segment parseSeg(byte[],int) -> parseSeg
    java.lang.String segToStr(org.ice4j.pseudotcp.Segment) -> segToStr
    boolean parse(byte[],int) -> parse
    long clock_check(long) -> clock_check
    boolean process(org.ice4j.pseudotcp.Segment) -> process
    long timeDiff(long,long) -> timeDiff
    void long_to_bytes(long,byte[],int) -> long_to_bytes
    void short_to_bytes(int,byte[],int) -> short_to_bytes
    long bytes_to_long(byte[],int) -> bytes_to_long
    int bytes_to_short(byte[],int) -> bytes_to_short
    byte[] copy_buffer(byte[],int,int) -> copy_buffer
    long bound(long,long,long) -> bound
    byte[] scrollBuffer(byte[],int) -> scrollBuffer
    boolean transmit(org.ice4j.pseudotcp.SSegment,long) -> transmit
    void attemptSend(org.ice4j.pseudotcp.SendFlags) -> attemptSend
    void closedown(java.io.IOException) -> closedown
    void adjustMTU() -> adjustMTU
    boolean isReceiveBufferFull() -> isReceiveBufferFull
    void disableWindowScale() -> disableWindowScale
    void queueConnectMessage() -> queueConnectMessage
    boolean parseOptions(byte[],int,int) -> parseOptions
    void applyOption(short,byte[],long) -> applyOption
    void applyWindowScaleOption(short) -> applyWindowScaleOption
    void resizeSendBuffer(int) -> resizeSendBuffer
    void resizeReceiveBuffer(int) -> resizeReceiveBuffer
    int getM_snd_wnd() -> getM_snd_wnd
    org.ice4j.pseudotcp.PseudoTcpState getState() -> getState
    int getSendBufferSize() -> getSendBufferSize
    int getRecvBufferSize() -> getRecvBufferSize
    short getM_rwnd_scale() -> getM_rwnd_scale
    short getM_swnd_scale() -> getM_swnd_scale
    java.lang.Object getAckNotify() -> getAckNotify
    long getConversationID() -> getConversationID
    void setConversationID(long) -> setConversationID
org.ice4j.pseudotcp.PseudoTcpJavaSocket -> org.ice4j.pseudotcp.PseudoTcpJavaSocket:
org.ice4j.pseudotcp.PseudoTcpNotify -> org.ice4j.pseudotcp.PseudoTcpNotify:
    void onTcpOpen(org.ice4j.pseudotcp.PseudoTCPBase) -> onTcpOpen
    void onTcpReadable(org.ice4j.pseudotcp.PseudoTCPBase) -> onTcpReadable
    void onTcpWriteable(org.ice4j.pseudotcp.PseudoTCPBase) -> onTcpWriteable
    void onTcpClosed(org.ice4j.pseudotcp.PseudoTCPBase,java.io.IOException) -> onTcpClosed
    org.ice4j.pseudotcp.WriteResult tcpWritePacket(org.ice4j.pseudotcp.PseudoTCPBase,byte[],int) -> tcpWritePacket
org.ice4j.pseudotcp.PseudoTcpSocket -> org.ice4j.pseudotcp.PseudoTcpSocket:
    org.ice4j.pseudotcp.PseudoTcpSocketImpl socketImpl -> socketImpl
    java.lang.Object connectLock -> connectLock
    java.lang.Object closeLock -> closeLock
    long getConversationID() -> getConversationID
    void setConversationID(long) -> setConversationID
    void setMTU(int) -> setMTU
    int getMTU() -> getMTU
    long getOption(org.ice4j.pseudotcp.Option) -> getOption
    void setOption(org.ice4j.pseudotcp.Option,long) -> setOption
    void accept(int) -> accept
    void setDebugName(java.lang.String) -> setDebugName
    org.ice4j.pseudotcp.PseudoTcpState getState() -> getState
    boolean isConnected() -> isConnected
    boolean isConnecting() -> isConnecting
    boolean isClosed() -> isClosed
    void connect(java.net.SocketAddress) -> connect
    void checkDestination(int) -> checkDestination
    void connect(java.net.SocketAddress,int) -> connect
    void close() -> close
    void accept(java.net.SocketAddress,int) -> accept
    java.io.FileDescriptor getFileDescriptor() -> getFileDescriptor
org.ice4j.pseudotcp.PseudoTcpSocketFactory -> org.ice4j.pseudotcp.PseudoTcpSocketFactory:
    long DEFAULT_CONVERSATION_ID -> DEFAULT_CONVERSATION_ID
    int DEFAULT_CONNECT_TIMEOUT -> DEFAULT_CONNECT_TIMEOUT
    java.net.Socket createSocket(java.lang.String,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int) -> createSocket
    void connectSocket(java.net.Socket,java.net.InetSocketAddress) -> connectSocket
    java.net.Socket createBoundSocket(java.net.InetSocketAddress) -> createBoundSocket
    java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int) -> createSocket
    org.ice4j.pseudotcp.PseudoTcpSocket createSocket(java.net.DatagramSocket) -> createSocket
    org.ice4j.pseudotcp.PseudoTcpSocket createSocket() -> createSocket
    java.net.SocketImpl createSocketImpl() -> createSocketImpl
    java.net.Socket createSocket() -> createSocket
org.ice4j.pseudotcp.PseudoTcpSocketImpl -> org.ice4j.pseudotcp.PseudoTcpSocketImpl:
    java.util.logging.Logger logger -> logger
    org.ice4j.pseudotcp.PseudoTCPBase pseudoTcp -> pseudoTcp
    java.net.DatagramSocket socket -> socket
    java.net.SocketAddress remoteAddr -> remoteAddr
    int DATAGRAM_RCV_BUFFER_SIZE -> DATAGRAM_RCV_BUFFER_SIZE
    java.lang.Object write_notify -> write_notify
    java.lang.Object read_notify -> read_notify
    java.lang.Object state_notify -> state_notify
    java.io.IOException exception -> exception
    long writeTimeout -> writeTimeout
    long readTimeout -> readTimeout
    org.ice4j.pseudotcp.PseudoTcpSocketImpl$PseudoTcpInputStream inputStream -> inputStream
    org.ice4j.pseudotcp.PseudoTcpSocketImpl$PseudoTcpOutputStream outputstream -> outputstream
    java.util.Map options -> options
    boolean runReceive -> runReceive
    java.lang.Thread receiveThread -> receiveThread
    boolean runClock -> runClock
    java.util.concurrent.ScheduledThreadPoolExecutor clockExecutor -> clockExecutor
    java.util.concurrent.ScheduledFuture currentlyScheduledClockTask -> currentlyScheduledClockTask
    java.lang.Runnable clockTaskRunner -> clockTaskRunner
    void setMTU(int) -> setMTU
    int getMTU() -> getMTU
    long getConversationID() -> getConversationID
    void setConversationID(long) -> setConversationID
    void setDebugName(java.lang.String) -> setDebugName
    void create(boolean) -> create
    void connect(java.lang.String,int) -> connect
    void connect(java.net.InetAddress,int) -> connect
    void connect(java.net.SocketAddress,int) -> connect
    void bind(java.net.InetAddress,int) -> bind
    void listen(int) -> listen
    void setOption(int,java.lang.Object) -> setOption
    java.lang.Object getOption(int) -> getOption
    long getPTCPOption(org.ice4j.pseudotcp.Option) -> getPTCPOption
    void setPTCPOption(org.ice4j.pseudotcp.Option,long) -> setPTCPOption
    void doConnect(java.net.InetSocketAddress,long) -> doConnect
    void accept(java.net.SocketAddress,int) -> accept
    void accept(int) -> accept
    void accept(java.net.SocketImpl) -> accept
    org.ice4j.pseudotcp.PseudoTcpState getState() -> getState
    void updateClock() -> updateClock
    void startThreads() -> startThreads
    void onTcpOpen(org.ice4j.pseudotcp.PseudoTCPBase) -> onTcpOpen
    void onTcpReadable(org.ice4j.pseudotcp.PseudoTCPBase) -> onTcpReadable
    void onTcpWriteable(org.ice4j.pseudotcp.PseudoTCPBase) -> onTcpWriteable
    void onTcpClosed(org.ice4j.pseudotcp.PseudoTCPBase,java.io.IOException) -> onTcpClosed
    void releaseAllLocks() -> releaseAllLocks
    void joinAllThreads() -> joinAllThreads
    org.ice4j.pseudotcp.WriteResult tcpWritePacket(org.ice4j.pseudotcp.PseudoTCPBase,byte[],int) -> tcpWritePacket
    void receivePackets() -> receivePackets
    void runClock() -> runClock
    void scheduleClockTask(long) -> scheduleClockTask
    void cancelClockTask(boolean) -> cancelClockTask
    java.io.OutputStream getOutputStream() -> getOutputStream
    java.io.InputStream getInputStream() -> getInputStream
    int available() -> available
    void close() -> close
    void sendUrgentData(int) -> sendUrgentData
    java.io.FileDescriptor getFileDescriptor() -> getFileDescriptor
    void shutdownInput() -> shutdownInput
    void shutdownOutput() -> shutdownOutput
    java.net.InetAddress getInetAddress() -> getInetAddress
    int getPort() -> getPort
    boolean supportsUrgentData() -> supportsUrgentData
    int getLocalPort() -> getLocalPort
    void setPerformancePreferences(int,int,int) -> setPerformancePreferences
    void access$000(org.ice4j.pseudotcp.PseudoTcpSocketImpl) -> access$000
    void access$100(org.ice4j.pseudotcp.PseudoTcpSocketImpl) -> access$100
    java.util.logging.Logger access$200() -> access$200
    org.ice4j.pseudotcp.PseudoTCPBase access$300(org.ice4j.pseudotcp.PseudoTcpSocketImpl) -> access$300
    long access$400(org.ice4j.pseudotcp.PseudoTcpSocketImpl) -> access$400
    java.lang.Object access$500(org.ice4j.pseudotcp.PseudoTcpSocketImpl) -> access$500
    java.io.IOException access$600(org.ice4j.pseudotcp.PseudoTcpSocketImpl) -> access$600
    java.lang.Object access$700(org.ice4j.pseudotcp.PseudoTcpSocketImpl) -> access$700
    long access$800(org.ice4j.pseudotcp.PseudoTcpSocketImpl) -> access$800
org.ice4j.pseudotcp.PseudoTcpSocketImpl$1 -> org.ice4j.pseudotcp.PseudoTcpSocketImpl$1:
    org.ice4j.pseudotcp.PseudoTcpSocketImpl this$0 -> this$0
    void run() -> run
org.ice4j.pseudotcp.PseudoTcpSocketImpl$2 -> org.ice4j.pseudotcp.PseudoTcpSocketImpl$2:
    org.ice4j.pseudotcp.PseudoTcpSocketImpl this$0 -> this$0
    void run() -> run
org.ice4j.pseudotcp.PseudoTcpSocketImpl$PseudoTcpInputStream -> org.ice4j.pseudotcp.PseudoTcpSocketImpl$PseudoTcpInputStream:
    org.ice4j.pseudotcp.PseudoTcpSocketImpl this$0 -> this$0
    boolean markSupported() -> markSupported
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    int available() -> available
    void close() -> close
    long skip(long) -> skip
    void mark(int) -> mark
    void reset() -> reset
org.ice4j.pseudotcp.PseudoTcpSocketImpl$PseudoTcpOutputStream -> org.ice4j.pseudotcp.PseudoTcpSocketImpl$PseudoTcpOutputStream:
    org.ice4j.pseudotcp.PseudoTcpSocketImpl this$0 -> this$0
    void write(int) -> write
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void flush() -> flush
    void close() -> close
org.ice4j.pseudotcp.PseudoTcpState -> org.ice4j.pseudotcp.PseudoTcpState:
    org.ice4j.pseudotcp.PseudoTcpState TCP_LISTEN -> TCP_LISTEN
    org.ice4j.pseudotcp.PseudoTcpState TCP_SYN_SENT -> TCP_SYN_SENT
    org.ice4j.pseudotcp.PseudoTcpState TCP_SYN_RECEIVED -> TCP_SYN_RECEIVED
    org.ice4j.pseudotcp.PseudoTcpState TCP_ESTABLISHED -> TCP_ESTABLISHED
    org.ice4j.pseudotcp.PseudoTcpState TCP_CLOSED -> TCP_CLOSED
    org.ice4j.pseudotcp.PseudoTcpState[] $VALUES -> $VALUES
    org.ice4j.pseudotcp.PseudoTcpState[] values() -> values
    org.ice4j.pseudotcp.PseudoTcpState valueOf(java.lang.String) -> valueOf
org.ice4j.pseudotcp.RSegment -> org.ice4j.pseudotcp.RSegment:
    long seq -> seq
    long len -> len
org.ice4j.pseudotcp.SSegment -> org.ice4j.pseudotcp.SSegment:
    long seq -> seq
    long len -> len
    short xmit -> xmit
    boolean bCtrl -> bCtrl
org.ice4j.pseudotcp.Segment -> org.ice4j.pseudotcp.Segment:
    long conv -> conv
    long seq -> seq
    long ack -> ack
    byte flags -> flags
    int wnd -> wnd
    long tsval -> tsval
    long tsecr -> tsecr
    byte[] data -> data
    int len -> len
org.ice4j.pseudotcp.SendFlags -> org.ice4j.pseudotcp.SendFlags:
    org.ice4j.pseudotcp.SendFlags sfNone -> sfNone
    org.ice4j.pseudotcp.SendFlags sfImmediateAck -> sfImmediateAck
    org.ice4j.pseudotcp.SendFlags sfDelayedAck -> sfDelayedAck
    org.ice4j.pseudotcp.SendFlags[] $VALUES -> $VALUES
    org.ice4j.pseudotcp.SendFlags[] values() -> values
    org.ice4j.pseudotcp.SendFlags valueOf(java.lang.String) -> valueOf
org.ice4j.pseudotcp.WriteResult -> org.ice4j.pseudotcp.WriteResult:
    org.ice4j.pseudotcp.WriteResult WR_SUCCESS -> WR_SUCCESS
    org.ice4j.pseudotcp.WriteResult WR_TOO_LARGE -> WR_TOO_LARGE
    org.ice4j.pseudotcp.WriteResult WR_FAIL -> WR_FAIL
    org.ice4j.pseudotcp.WriteResult[] $VALUES -> $VALUES
    org.ice4j.pseudotcp.WriteResult[] values() -> values
    org.ice4j.pseudotcp.WriteResult valueOf(java.lang.String) -> valueOf
org.ice4j.pseudotcp.util.ByteFifoBuffer -> org.ice4j.pseudotcp.util.ByteFifoBuffer:
    byte[] array -> array
    int write_pos -> write_pos
    int buffered -> buffered
    int read_pos -> read_pos
    int length() -> length
    int read(byte[],int) -> read
    int read(byte[],int,int) -> read
    int readLimit(int) -> readLimit
    void readOp(byte[],int,int,byte[],int,int) -> readOp
    int getWriteRemaining() -> getWriteRemaining
    int getBuffered() -> getBuffered
    int write(byte[],int) -> write
    int write(byte[],int,int) -> write
    void writeOp(byte[],int,int,byte[],int,int) -> writeOp
    int writeLimit(int) -> writeLimit
    void assertWriteLimit(int) -> assertWriteLimit
    void consumeWriteBuffer(int) -> consumeWriteBuffer
    boolean setCapacity(int) -> setCapacity
    void consumeReadData(int) -> consumeReadData
    int readOffset(byte[],int,int,int) -> readOffset
    int writeOffset(byte[],int,int) -> writeOffset
    void resetReadPosition() -> resetReadPosition
    void resetWritePosition() -> resetWritePosition
org.ice4j.security.CredentialsAuthority -> org.ice4j.security.CredentialsAuthority:
    byte[] getLocalKey(java.lang.String) -> getLocalKey
    byte[] getRemoteKey(java.lang.String,java.lang.String) -> getRemoteKey
    boolean checkLocalUserName(java.lang.String) -> checkLocalUserName
org.ice4j.security.CredentialsManager -> org.ice4j.security.CredentialsManager:
    java.util.List authorities -> authorities
    org.ice4j.security.CredentialsAuthority[] unmodifiableAuthorities -> unmodifiableAuthorities
    boolean checkLocalUserName(java.lang.String) -> checkLocalUserName
    org.ice4j.security.CredentialsAuthority[] getAuthorities() -> getAuthorities
    byte[] getLocalKey(java.lang.String) -> getLocalKey
    byte[] getRemoteKey(java.lang.String,java.lang.String) -> getRemoteKey
    void registerAuthority(org.ice4j.security.CredentialsAuthority) -> registerAuthority
    void unregisterAuthority(org.ice4j.security.CredentialsAuthority) -> unregisterAuthority
org.ice4j.security.LongTermCredential -> org.ice4j.security.LongTermCredential:
    byte[] password -> password
    byte[] username -> username
    byte[] getBytes(java.lang.String) -> getBytes
    java.lang.String toString(byte[]) -> toString
    byte[] getPassword() -> getPassword
    byte[] getUsername() -> getUsername
org.ice4j.security.LongTermCredentialSession -> org.ice4j.security.LongTermCredentialSession:
    org.ice4j.security.LongTermCredential longTermCredential -> longTermCredential
    byte[] nonce -> nonce
    byte[] realm -> realm
    void addAttributes(org.ice4j.message.Request) -> addAttributes
    boolean checkLocalUserName(java.lang.String) -> checkLocalUserName
    byte[] getLocalKey(java.lang.String) -> getLocalKey
    byte[] getNonce() -> getNonce
    byte[] getPassword() -> getPassword
    byte[] getRealm() -> getRealm
    byte[] getRemoteKey(java.lang.String,java.lang.String) -> getRemoteKey
    byte[] getUsername() -> getUsername
    boolean realmEquals(byte[]) -> realmEquals
    void setNonce(byte[]) -> setNonce
    boolean usernameEquals(byte[]) -> usernameEquals
org.ice4j.socket.DatagramPacketFilter -> org.ice4j.socket.DatagramPacketFilter:
    boolean accept(java.net.DatagramPacket) -> accept
org.ice4j.socket.DatagramSocketFactory -> org.ice4j.socket.DatagramSocketFactory:
    java.net.DatagramSocket createUnboundDatagramSocket() -> createUnboundDatagramSocket
org.ice4j.socket.DelegatingDatagramSocket -> org.ice4j.socket.DelegatingDatagramSocket:
    java.util.logging.Logger logger -> logger
    java.net.DatagramSocket delegate -> delegate
    long nbReceivedRtpPackets -> nbReceivedRtpPackets
    long nbSentRtpPackets -> nbSentRtpPackets
    long nbLostRtpPackets -> nbLostRtpPackets
    long lastRtpSequenceNumber -> lastRtpSequenceNumber
    long lastLostPacketLogTime -> lastLostPacketLogTime
    org.ice4j.socket.DatagramSocketFactory delegateFactory -> delegateFactory
    int defaultReceiveBufferSize -> defaultReceiveBufferSize
    void bind(java.net.SocketAddress) -> bind
    void close() -> close
    void connect(java.net.InetAddress,int) -> connect
    void connect(java.net.SocketAddress) -> connect
    void disconnect() -> disconnect
    boolean getBroadcast() -> getBroadcast
    java.nio.channels.DatagramChannel getChannel() -> getChannel
    java.net.InetAddress getInetAddress() -> getInetAddress
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.SocketAddress getLocalSocketAddress() -> getLocalSocketAddress
    int getPort() -> getPort
    int getReceiveBufferSize() -> getReceiveBufferSize
    java.net.SocketAddress getRemoteSocketAddress() -> getRemoteSocketAddress
    boolean getReuseAddress() -> getReuseAddress
    int getSendBufferSize() -> getSendBufferSize
    int getSoTimeout() -> getSoTimeout
    int getTrafficClass() -> getTrafficClass
    boolean isBound() -> isBound
    boolean isClosed() -> isClosed
    boolean isConnected() -> isConnected
    void receive(java.net.DatagramPacket) -> receive
    void send(java.net.DatagramPacket) -> send
    void setBroadcast(boolean) -> setBroadcast
    void setReceiveBufferSize(int) -> setReceiveBufferSize
    void setReuseAddress(boolean) -> setReuseAddress
    void setSendBufferSize(int) -> setSendBufferSize
    void setSoTimeout(int) -> setSoTimeout
    void setTrafficClass(int) -> setTrafficClass
    boolean logRTPPacket(long) -> logRTPPacket
    void logPacketToPcap(java.net.DatagramPacket,long,boolean,java.net.InetAddress,int) -> logPacketToPcap
    long getRtpSequenceNumber(java.net.DatagramPacket) -> getRtpSequenceNumber
    void updateRtpLosses(java.net.DatagramPacket) -> updateRtpLosses
    long logRtpLosses(long,long,long) -> logRtpLosses
    long getNbLost(long,long) -> getNbLost
    void setDefaultDelegateFactory(org.ice4j.socket.DatagramSocketFactory) -> setDefaultDelegateFactory
    void setDefaultReceiveBufferSize(int) -> setDefaultReceiveBufferSize
    void initReceiveBufferSize() -> initReceiveBufferSize
org.ice4j.socket.DelegatingSocket -> org.ice4j.socket.DelegatingSocket:
    java.net.Socket delegate -> delegate
    java.io.InputStream inputStream -> inputStream
    java.io.OutputStream outputStream -> outputStream
    long nbReceivedRtpPackets -> nbReceivedRtpPackets
    long nbSentRtpPackets -> nbSentRtpPackets
    long nbLostRtpPackets -> nbLostRtpPackets
    long lastRtpSequenceNumber -> lastRtpSequenceNumber
    long lastLostPacketLogTime -> lastLostPacketLogTime
    void bind(java.net.SocketAddress) -> bind
    void close() -> close
    void connect(java.net.SocketAddress) -> connect
    void connect(java.net.SocketAddress,int) -> connect
    java.nio.channels.SocketChannel getChannel() -> getChannel
    java.net.InetAddress getInetAddress() -> getInetAddress
    java.io.InputStream getInputStream() -> getInputStream
    boolean getKeepAlive() -> getKeepAlive
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.SocketAddress getLocalSocketAddress() -> getLocalSocketAddress
    boolean getOOBInline() -> getOOBInline
    java.io.OutputStream getOutputStream() -> getOutputStream
    int getPort() -> getPort
    int getReceiveBufferSize() -> getReceiveBufferSize
    java.net.SocketAddress getRemoteSocketAddress() -> getRemoteSocketAddress
    boolean getReuseAddress() -> getReuseAddress
    int getSendBufferSize() -> getSendBufferSize
    int getSoLinger() -> getSoLinger
    int getSoTimeout() -> getSoTimeout
    boolean getTcpNoDelay() -> getTcpNoDelay
    int getTrafficClass() -> getTrafficClass
    boolean isBound() -> isBound
    boolean isClosed() -> isClosed
    boolean isConnected() -> isConnected
    boolean isInputShutdown() -> isInputShutdown
    boolean isOutputShutdown() -> isOutputShutdown
    void sendUrgentData(int) -> sendUrgentData
    void setKeepAlive(boolean) -> setKeepAlive
    void setOOBInline(boolean) -> setOOBInline
    void setPerformancePreferences(int,int,int) -> setPerformancePreferences
    void setReceiveBufferSize(int) -> setReceiveBufferSize
    void setReuseAddress(boolean) -> setReuseAddress
    void setSendBufferSize(int) -> setSendBufferSize
    void setSoLinger(boolean,int) -> setSoLinger
    void setSoTimeout(int) -> setSoTimeout
    void setTcpNoDelay(boolean) -> setTcpNoDelay
    void setTrafficClass(int) -> setTrafficClass
    void shutdownInput() -> shutdownInput
    void shutdownOutput() -> shutdownOutput
    java.lang.String toString() -> toString
    void send(java.net.DatagramPacket) -> send
    void receive(java.net.DatagramPacket) -> receive
    void receiveFromNetwork(java.net.DatagramPacket,java.io.InputStream,java.net.InetAddress,int) -> receiveFromNetwork
    void setOriginalInputStream(java.io.InputStream) -> setOriginalInputStream
    void updateRtpLosses(java.net.DatagramPacket) -> updateRtpLosses
org.ice4j.socket.GoogleRelayedCandidateDatagramSocket -> org.ice4j.socket.GoogleRelayedCandidateDatagramSocket:
    java.util.logging.Logger logger -> logger
    boolean closed -> closed
    org.ice4j.ice.GoogleRelayedCandidate relayedCandidate -> relayedCandidate
    org.ice4j.ice.harvest.GoogleTurnCandidateHarvest turnCandidateHarvest -> turnCandidateHarvest
    org.ice4j.socket.GoogleRelayedCandidateDelegate socketDelegate -> socketDelegate
    void close() -> close
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.InetSocketAddress getLocalSocketAddress() -> getLocalSocketAddress
    org.ice4j.ice.GoogleRelayedCandidate getRelayedCandidate() -> getRelayedCandidate
    void processSuccess(org.ice4j.message.Response,org.ice4j.message.Request) -> processSuccess
    void processResponse(org.ice4j.StunResponseEvent) -> processResponse
    void receive(java.net.DatagramPacket) -> receive
    void send(java.net.DatagramPacket) -> send
    java.net.SocketAddress getLocalSocketAddress() -> getLocalSocketAddress
org.ice4j.socket.GoogleRelayedCandidateDelegate -> org.ice4j.socket.GoogleRelayedCandidateDelegate:
    java.util.logging.Logger logger -> logger
    boolean closed -> closed
    java.util.List packetsToReceive -> packetsToReceive
    java.util.List packetsToSend -> packetsToSend
    java.lang.Thread sendThread -> sendThread
    org.ice4j.ice.harvest.GoogleTurnCandidateHarvest turnCandidateHarvest -> turnCandidateHarvest
    java.lang.String username -> username
    void close() -> close
    void handleMessageEvent(org.ice4j.StunMessageEvent) -> handleMessageEvent
    boolean processErrorOrFailure(org.ice4j.message.Response,org.ice4j.message.Request) -> processErrorOrFailure
    void processSuccess(org.ice4j.message.Response,org.ice4j.message.Request) -> processSuccess
    void processResponse(org.ice4j.StunResponseEvent) -> processResponse
    void processTimeout(org.ice4j.StunTimeoutEvent) -> processTimeout
    void receive(java.net.DatagramPacket) -> receive
    void send(java.net.DatagramPacket) -> send
    void createSendThread() -> createSendThread
    void runInSendThread() -> runInSendThread
    void access$000(org.ice4j.socket.GoogleRelayedCandidateDelegate) -> access$000
    java.util.List access$100(org.ice4j.socket.GoogleRelayedCandidateDelegate) -> access$100
    java.lang.Thread access$200(org.ice4j.socket.GoogleRelayedCandidateDelegate) -> access$200
    java.lang.Thread access$202(org.ice4j.socket.GoogleRelayedCandidateDelegate,java.lang.Thread) -> access$202
    boolean access$300(org.ice4j.socket.GoogleRelayedCandidateDelegate) -> access$300
    void access$400(org.ice4j.socket.GoogleRelayedCandidateDelegate) -> access$400
org.ice4j.socket.GoogleRelayedCandidateDelegate$1 -> org.ice4j.socket.GoogleRelayedCandidateDelegate$1:
    org.ice4j.socket.GoogleRelayedCandidateDelegate this$0 -> this$0
    void run() -> run
org.ice4j.socket.GoogleRelayedCandidateSocket -> org.ice4j.socket.GoogleRelayedCandidateSocket:
    java.util.logging.Logger logger -> logger
    boolean closed -> closed
    org.ice4j.ice.GoogleRelayedCandidate relayedCandidate -> relayedCandidate
    org.ice4j.socket.GoogleRelayedCandidateDelegate socketDelegate -> socketDelegate
    org.ice4j.socket.GoogleRelayedCandidateSocket$TCPOutputStream outputStream -> outputStream
    void close() -> close
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.InetSocketAddress getLocalSocketAddress() -> getLocalSocketAddress
    org.ice4j.ice.GoogleRelayedCandidate getRelayedCandidate() -> getRelayedCandidate
    void processSuccess(org.ice4j.message.Response,org.ice4j.message.Request) -> processSuccess
    void processResponse(org.ice4j.StunResponseEvent) -> processResponse
    void receive(java.net.DatagramPacket) -> receive
    void send(java.net.DatagramPacket) -> send
    java.io.OutputStream getOutputStream() -> getOutputStream
    java.net.SocketAddress getLocalSocketAddress() -> getLocalSocketAddress
org.ice4j.socket.GoogleRelayedCandidateSocket$TCPOutputStream -> org.ice4j.socket.GoogleRelayedCandidateSocket$TCPOutputStream:
    org.ice4j.TransportAddress target -> target
    org.ice4j.socket.GoogleRelayedCandidateSocket this$0 -> this$0
    void close() -> close
    void flush() -> flush
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void write(int) -> write
org.ice4j.socket.IceSocketWrapper -> org.ice4j.socket.IceSocketWrapper:
    void send(java.net.DatagramPacket) -> send
    void receive(java.net.DatagramPacket) -> receive
    void close() -> close
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.SocketAddress getLocalSocketAddress() -> getLocalSocketAddress
    java.net.Socket getTCPSocket() -> getTCPSocket
    java.net.DatagramSocket getUDPSocket() -> getUDPSocket
org.ice4j.socket.IceTcpServerSocketWrapper -> org.ice4j.socket.IceTcpServerSocketWrapper:
    java.util.logging.Logger logger -> logger
    java.lang.Thread acceptThread -> acceptThread
    java.net.ServerSocket serverSocket -> serverSocket
    boolean isRun -> isRun
    org.ice4j.ice.Component component -> component
    java.util.List sockets -> sockets
    void send(java.net.DatagramPacket) -> send
    void receive(java.net.DatagramPacket) -> receive
    void close() -> close
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.SocketAddress getLocalSocketAddress() -> getLocalSocketAddress
    java.net.Socket getTCPSocket() -> getTCPSocket
    java.net.DatagramSocket getUDPSocket() -> getUDPSocket
    boolean access$102(org.ice4j.socket.IceTcpServerSocketWrapper,boolean) -> access$102
    boolean access$100(org.ice4j.socket.IceTcpServerSocketWrapper) -> access$100
    java.net.ServerSocket access$200(org.ice4j.socket.IceTcpServerSocketWrapper) -> access$200
    org.ice4j.ice.Component access$300(org.ice4j.socket.IceTcpServerSocketWrapper) -> access$300
    java.util.List access$400(org.ice4j.socket.IceTcpServerSocketWrapper) -> access$400
    java.util.logging.Logger access$500() -> access$500
org.ice4j.socket.IceTcpServerSocketWrapper$1 -> org.ice4j.socket.IceTcpServerSocketWrapper$1:
org.ice4j.socket.IceTcpServerSocketWrapper$ThreadAccept -> org.ice4j.socket.IceTcpServerSocketWrapper$ThreadAccept:
    org.ice4j.socket.IceTcpServerSocketWrapper this$0 -> this$0
    void run() -> run
org.ice4j.socket.IceTcpSocketWrapper -> org.ice4j.socket.IceTcpSocketWrapper:
    java.net.Socket socket -> socket
    java.io.InputStream inputStream -> inputStream
    java.io.OutputStream outputStream -> outputStream
    void send(java.net.DatagramPacket) -> send
    void receive(java.net.DatagramPacket) -> receive
    void close() -> close
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.SocketAddress getLocalSocketAddress() -> getLocalSocketAddress
    java.net.Socket getTCPSocket() -> getTCPSocket
    java.net.DatagramSocket getUDPSocket() -> getUDPSocket
org.ice4j.socket.IceUdpSocketWrapper -> org.ice4j.socket.IceUdpSocketWrapper:
    java.net.DatagramSocket socket -> socket
    void send(java.net.DatagramPacket) -> send
    void receive(java.net.DatagramPacket) -> receive
    void close() -> close
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.SocketAddress getLocalSocketAddress() -> getLocalSocketAddress
    java.net.Socket getTCPSocket() -> getTCPSocket
    java.net.DatagramSocket getUDPSocket() -> getUDPSocket
org.ice4j.socket.MultiplexedDatagramSocket -> org.ice4j.socket.MultiplexedDatagramSocket:
    org.ice4j.socket.DatagramPacketFilter filter -> filter
    org.ice4j.socket.MultiplexingDatagramSocket multiplexing -> multiplexing
    java.util.List received -> received
    void close() -> close
    org.ice4j.socket.DatagramPacketFilter getFilter() -> getFilter
    void receive(java.net.DatagramPacket) -> receive
org.ice4j.socket.MultiplexedSocket -> org.ice4j.socket.MultiplexedSocket:
    org.ice4j.socket.DatagramPacketFilter filter -> filter
    org.ice4j.socket.MultiplexingSocket multiplexing -> multiplexing
    java.util.List received -> received
    void close() -> close
    org.ice4j.socket.DatagramPacketFilter getFilter() -> getFilter
    void receive(java.net.DatagramPacket) -> receive
org.ice4j.socket.MultiplexingDatagramSocket -> org.ice4j.socket.MultiplexingDatagramSocket:
    java.util.logging.Logger logger -> logger
    org.ice4j.socket.MultiplexedDatagramSocket[] NO_SOCKETS -> NO_SOCKETS
    boolean inReceive -> inReceive
    java.util.List received -> received
    int receiveBufferSize -> receiveBufferSize
    java.lang.Object receiveSyncRoot -> receiveSyncRoot
    boolean setReceiveBufferSize -> setReceiveBufferSize
    org.ice4j.socket.MultiplexedDatagramSocket[] sockets -> sockets
    java.lang.Object socketsSyncRoot -> socketsSyncRoot
    int soTimeout -> soTimeout
    java.net.DatagramPacket clone(java.net.DatagramPacket) -> clone
    void close(org.ice4j.socket.MultiplexedDatagramSocket) -> close
    void copy(java.net.DatagramPacket,java.net.DatagramPacket) -> copy
    org.ice4j.socket.MultiplexedDatagramSocket getSocket(org.ice4j.socket.DatagramPacketFilter) -> getSocket
    org.ice4j.socket.MultiplexedDatagramSocket getSocket(org.ice4j.socket.DatagramPacketFilter,boolean) -> getSocket
    void receive(java.net.DatagramPacket) -> receive
    void receive(java.util.List,java.net.DatagramPacket,int) -> receive
    void receive(org.ice4j.socket.MultiplexedDatagramSocket,java.net.DatagramPacket) -> receive
    void setReceiveBufferSize(int) -> setReceiveBufferSize
    void setSoTimeout(int) -> setSoTimeout
    int getSoTimeout() -> getSoTimeout
org.ice4j.socket.MultiplexingSocket -> org.ice4j.socket.MultiplexingSocket:
    java.util.logging.Logger logger -> logger
    org.ice4j.socket.MultiplexedSocket[] NO_SOCKETS -> NO_SOCKETS
    boolean inReceive -> inReceive
    java.util.List received -> received
    org.ice4j.socket.TCPInputStream inputStream -> inputStream
    org.ice4j.socket.TCPOutputStream outputStream -> outputStream
    java.lang.Object receiveSyncRoot -> receiveSyncRoot
    org.ice4j.socket.MultiplexedSocket[] sockets -> sockets
    java.lang.Object socketsSyncRoot -> socketsSyncRoot
    int soTimeout -> soTimeout
    void receive(java.net.DatagramPacket) -> receive
    void receive(org.ice4j.socket.MultiplexedSocket,java.net.DatagramPacket) -> receive
    void receive(java.util.List,java.net.DatagramPacket,int) -> receive
    void close() -> close
    void close(org.ice4j.socket.MultiplexedSocket) -> close
    org.ice4j.socket.MultiplexedSocket getSocket(org.ice4j.socket.DatagramPacketFilter) -> getSocket
    void addReceivedPacket(java.net.DatagramPacket) -> addReceivedPacket
    java.io.InputStream getInputStream() -> getInputStream
    java.io.OutputStream getOutputStream() -> getOutputStream
    java.io.InputStream getOriginalInputStream() -> getOriginalInputStream
    java.io.OutputStream getOriginalOutputStream() -> getOriginalOutputStream
    void setSoTimeout(int) -> setSoTimeout
    int getSoTimeout() -> getSoTimeout
org.ice4j.socket.RelayedCandidateDatagramSocket -> org.ice4j.socket.RelayedCandidateDatagramSocket:
    java.lang.String TAG -> TAG
    java.util.logging.Logger logger -> logger
    char CHANNEL_NUMBER_NOT_SPECIFIED -> CHANNEL_NUMBER_NOT_SPECIFIED
    int CHANNELDATA_CHANNELNUMBER_LENGTH -> CHANNELDATA_CHANNELNUMBER_LENGTH
    int CHANNELDATA_LENGTH_LENGTH -> CHANNELDATA_LENGTH_LENGTH
    char MAX_CHANNEL_NUMBER -> MAX_CHANNEL_NUMBER
    char MIN_CHANNEL_NUMBER -> MIN_CHANNEL_NUMBER
    long PERMISSION_LIFETIME -> PERMISSION_LIFETIME
    long PERMISSION_LIFETIME_LEEWAY -> PERMISSION_LIFETIME_LEEWAY
    java.net.DatagramSocket channelDataSocket -> channelDataSocket
    java.util.List channels -> channels
    boolean closed -> closed
    org.ice4j.socket.DatagramPacketFilter connectivityCheckRecognizer -> connectivityCheckRecognizer
    char nextChannelNumber -> nextChannelNumber
    java.util.List packetsToReceive -> packetsToReceive
    java.util.List packetsToSend -> packetsToSend
    java.lang.Thread receiveChannelDataThread -> receiveChannelDataThread
    org.ice4j.ice.RelayedCandidate relayedCandidate -> relayedCandidate
    java.lang.Thread sendThread -> sendThread
    org.ice4j.ice.harvest.TurnCandidateHarvest turnCandidateHarvest -> turnCandidateHarvest
    java.util.List channelObservers -> channelObservers
    org.ice4j.TransportAddress hostAddress -> hostAddress
    org.ice4j.TransportAddress getHostAddress() -> getHostAddress
    org.ice4j.TransportAddress getStunServer() -> getStunServer
    boolean channelDataSocketAccept(java.net.DatagramPacket) -> channelDataSocketAccept
    boolean channelDataSocketAcceptMethod(char) -> channelDataSocketAcceptMethod
    void close() -> close
    void createReceiveChannelDataThread() -> createReceiveChannelDataThread
    void createSendThread() -> createSendThread
    java.net.InetAddress getLocalAddress() -> getLocalAddress
    int getLocalPort() -> getLocalPort
    java.net.InetSocketAddress getLocalSocketAddress() -> getLocalSocketAddress
    char getNextChannelNumber() -> getNextChannelNumber
    org.ice4j.ice.RelayedCandidate getRelayedCandidate() -> getRelayedCandidate
    void handleMessageEvent(org.ice4j.StunMessageEvent) -> handleMessageEvent
    boolean processErrorOrFailure(org.ice4j.message.Response,org.ice4j.message.Request) -> processErrorOrFailure
    void processSuccess(org.ice4j.message.Response,org.ice4j.message.Request) -> processSuccess
    void receive(java.net.DatagramPacket) -> receive
    void runInReceiveChannelDataThread() -> runInReceiveChannelDataThread
    void runInSendThread() -> runInSendThread
    void send(java.net.DatagramPacket) -> send
    void setChannelBound(org.ice4j.message.Request,boolean) -> setChannelBound
    void setChannelNumberIsConfirmed(org.ice4j.message.Request,boolean) -> setChannelNumberIsConfirmed
    void registerChannelObserver(org.ice4j.socket.RelayedCandidateDatagramSocket$IRelayedCandiateChannelObserver) -> registerChannelObserver
    void unRegisterChannelObserver(org.ice4j.socket.RelayedCandidateDatagramSocket$IRelayedCandiateChannelObserver) -> unRegisterChannelObserver
    org.ice4j.socket.RelayedCandidateDatagramSocket$Channel bindChannel(org.ice4j.TransportAddress) -> bindChannel
    void registerChannelBoundNotification() -> registerChannelBoundNotification
    java.net.SocketAddress getLocalSocketAddress() -> getLocalSocketAddress
    boolean access$000(org.ice4j.socket.RelayedCandidateDatagramSocket,java.net.DatagramPacket) -> access$000
    boolean access$100(org.ice4j.socket.RelayedCandidateDatagramSocket,char) -> access$100
    void access$200(org.ice4j.socket.RelayedCandidateDatagramSocket) -> access$200
    java.util.List access$300(org.ice4j.socket.RelayedCandidateDatagramSocket) -> access$300
    java.lang.Thread access$400(org.ice4j.socket.RelayedCandidateDatagramSocket) -> access$400
    java.lang.Thread access$402(org.ice4j.socket.RelayedCandidateDatagramSocket,java.lang.Thread) -> access$402
    boolean access$500(org.ice4j.socket.RelayedCandidateDatagramSocket) -> access$500
    void access$600(org.ice4j.socket.RelayedCandidateDatagramSocket) -> access$600
    void access$700(org.ice4j.socket.RelayedCandidateDatagramSocket) -> access$700
    java.util.List access$800(org.ice4j.socket.RelayedCandidateDatagramSocket) -> access$800
    java.lang.Thread access$900(org.ice4j.socket.RelayedCandidateDatagramSocket) -> access$900
    java.lang.Thread access$902(org.ice4j.socket.RelayedCandidateDatagramSocket,java.lang.Thread) -> access$902
    void access$1000(org.ice4j.socket.RelayedCandidateDatagramSocket) -> access$1000
    org.ice4j.ice.harvest.TurnCandidateHarvest access$1100(org.ice4j.socket.RelayedCandidateDatagramSocket) -> access$1100
    char access$1200(org.ice4j.socket.RelayedCandidateDatagramSocket) -> access$1200
    java.lang.String access$1300() -> access$1300
    java.net.DatagramSocket access$1400(org.ice4j.socket.RelayedCandidateDatagramSocket) -> access$1400
org.ice4j.socket.RelayedCandidateDatagramSocket$1 -> org.ice4j.socket.RelayedCandidateDatagramSocket$1:
    org.ice4j.socket.RelayedCandidateDatagramSocket this$0 -> this$0
    boolean accept(java.net.DatagramPacket) -> accept
    boolean acceptMethod(char) -> acceptMethod
org.ice4j.socket.RelayedCandidateDatagramSocket$2 -> org.ice4j.socket.RelayedCandidateDatagramSocket$2:
    org.ice4j.socket.RelayedCandidateDatagramSocket this$0 -> this$0
    void run() -> run
org.ice4j.socket.RelayedCandidateDatagramSocket$3 -> org.ice4j.socket.RelayedCandidateDatagramSocket$3:
    org.ice4j.socket.RelayedCandidateDatagramSocket this$0 -> this$0
    void run() -> run
org.ice4j.socket.RelayedCandidateDatagramSocket$Channel -> org.ice4j.socket.RelayedCandidateDatagramSocket$Channel:
    long bindingTimeStamp -> bindingTimeStamp
    byte[] bindingTransactionID -> bindingTransactionID
    boolean bound -> bound
    byte[] channelData -> channelData
    boolean channelDataIsPreferred -> channelDataIsPreferred
    java.net.DatagramPacket channelDataPacket -> channelDataPacket
    char channelNumber -> channelNumber
    boolean channelNumberIsConfirmed -> channelNumberIsConfirmed
    org.ice4j.TransportAddress peerAddress -> peerAddress
    org.ice4j.socket.RelayedCandidateDatagramSocket this$0 -> this$0
    void bind() -> bind
    boolean channelNumberEquals(char) -> channelNumberEquals
    char getChannelNumber() -> getChannelNumber
    boolean getChannelDataIsPreferred() -> getChannelDataIsPreferred
    boolean isBinding() -> isBinding
    boolean isBound() -> isBound
    boolean peerAddressEquals(org.ice4j.TransportAddress) -> peerAddressEquals
    void send(java.net.DatagramPacket,org.ice4j.TransportAddress) -> send
    void setBound(boolean,byte[]) -> setBound
    void setChannelDataIsPreferred(boolean) -> setChannelDataIsPreferred
    void setChannelNumberIsConfirmed(boolean,byte[]) -> setChannelNumberIsConfirmed
org.ice4j.socket.RelayedCandidateDatagramSocket$IRelayedCandiateChannelObserver -> org.ice4j.socket.RelayedCandidateDatagramSocket$IRelayedCandiateChannelObserver:
    void channelBound(org.ice4j.socket.RelayedCandidateDatagramSocket$Channel) -> channelBound
    void channelSetConfirmed(org.ice4j.socket.RelayedCandidateDatagramSocket$Channel) -> channelSetConfirmed
org.ice4j.socket.RtcpDemuxPacketFilter -> org.ice4j.socket.RtcpDemuxPacketFilter:
    boolean accept(java.net.DatagramPacket) -> accept
org.ice4j.socket.SafeCloseDatagramSocket -> org.ice4j.socket.SafeCloseDatagramSocket:
    int inReceive -> inReceive
    java.lang.Object inReceiveSyncRoot -> inReceiveSyncRoot
    void close() -> close
    void receive(java.net.DatagramPacket) -> receive
org.ice4j.socket.StunDatagramPacketFilter -> org.ice4j.socket.StunDatagramPacketFilter:
    org.ice4j.TransportAddress stunServer -> stunServer
    boolean accept(java.net.DatagramPacket) -> accept
    boolean acceptMethod(char) -> acceptMethod
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean isStunPacket(java.net.DatagramPacket) -> isStunPacket
org.ice4j.socket.TCPInputStream -> org.ice4j.socket.TCPInputStream:
    java.util.List packets -> packets
    byte[] currentPacket -> currentPacket
    int currentPacketOffset -> currentPacketOffset
    int currentPacketLength -> currentPacketLength
    java.lang.Object readSyncRoot -> readSyncRoot
    int available() -> available
    void close() -> close
    void mark(int) -> mark
    boolean markSupported() -> markSupported
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    void reset() -> reset
    long skip(long) -> skip
    int read() -> read
    byte[] getNextPacket() -> getNextPacket
    void addPacket(byte[]) -> addPacket
org.ice4j.socket.TCPOutputStream -> org.ice4j.socket.TCPOutputStream:
    java.io.OutputStream outputStream -> outputStream
    void close() -> close
    void flush() -> flush
    void write(byte[]) -> write
    void write(byte[],int,int) -> write
    void write(int) -> write
org.ice4j.socket.TurnDatagramPacketFilter -> org.ice4j.socket.TurnDatagramPacketFilter:
    boolean accept(java.net.DatagramPacket) -> accept
    boolean acceptMethod(char) -> acceptMethod
org.ice4j.stack.ChannelDataEventHandler -> org.ice4j.stack.ChannelDataEventHandler:
    void handleMessageEvent(org.ice4j.ChannelDataMessageEvent) -> handleMessageEvent
org.ice4j.stack.Connector -> org.ice4j.stack.Connector:
    java.util.logging.Logger logger -> logger
    org.ice4j.stack.MessageQueue messageQueue -> messageQueue
    org.ice4j.socket.IceSocketWrapper sock -> sock
    java.lang.Object sockLock -> sockLock
    boolean running -> running
    org.ice4j.stack.ErrorHandler errorHandler -> errorHandler
    org.ice4j.TransportAddress listenAddress -> listenAddress
    void start() -> start
    org.ice4j.socket.IceSocketWrapper getSocket() -> getSocket
    void run() -> run
    void stop() -> stop
    void sendMessage(byte[],org.ice4j.TransportAddress) -> sendMessage
    java.lang.String toString() -> toString
    org.ice4j.TransportAddress getListenAddress() -> getListenAddress
org.ice4j.stack.ErrorHandler -> org.ice4j.stack.ErrorHandler:
    void handleError(java.lang.String,java.lang.Throwable) -> handleError
    void handleFatalError(java.lang.Runnable,java.lang.String,java.lang.Throwable) -> handleFatalError
org.ice4j.stack.EventDispatcher -> org.ice4j.stack.EventDispatcher:
    java.util.List messageListeners -> messageListeners
    java.util.Map children -> children
    void addIndicationListener(org.ice4j.TransportAddress,org.ice4j.stack.MessageEventHandler) -> addIndicationListener
    void addOldIndicationListener(org.ice4j.TransportAddress,org.ice4j.stack.MessageEventHandler) -> addOldIndicationListener
    void addMessageListener(org.ice4j.stack.EventDispatcher$MessageTypeEventHandler) -> addMessageListener
    void addMessageListener(org.ice4j.TransportAddress,org.ice4j.stack.EventDispatcher$MessageTypeEventHandler) -> addMessageListener
    void addRequestListener(org.ice4j.stack.RequestListener) -> addRequestListener
    void addRequestListener(org.ice4j.TransportAddress,org.ice4j.stack.RequestListener) -> addRequestListener
    void removeMessageListener(org.ice4j.stack.EventDispatcher$MessageTypeEventHandler) -> removeMessageListener
    void removeMessageListener(org.ice4j.TransportAddress,org.ice4j.stack.EventDispatcher$MessageTypeEventHandler) -> removeMessageListener
    void removeRequestListener(org.ice4j.stack.RequestListener) -> removeRequestListener
    void removeRequestListener(org.ice4j.TransportAddress,org.ice4j.stack.RequestListener) -> removeRequestListener
    void fireMessageEvent(org.ice4j.StunMessageEvent) -> fireMessageEvent
    boolean hasRequestListeners(org.ice4j.TransportAddress) -> hasRequestListeners
    void removeAllListeners() -> removeAllListeners
org.ice4j.stack.EventDispatcher$IndicationEventHandler -> org.ice4j.stack.EventDispatcher$IndicationEventHandler:
    void handleMessageEvent(org.ice4j.StunMessageEvent) -> handleMessageEvent
org.ice4j.stack.EventDispatcher$MessageTypeEventHandler -> org.ice4j.stack.EventDispatcher$MessageTypeEventHandler:
    java.lang.Object delegate -> delegate
    char messageType -> messageType
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.ice4j.stack.EventDispatcher$OldIndicationEventHandler -> org.ice4j.stack.EventDispatcher$OldIndicationEventHandler:
    void handleMessageEvent(org.ice4j.StunMessageEvent) -> handleMessageEvent
org.ice4j.stack.EventDispatcher$RequestListenerMessageEventHandler -> org.ice4j.stack.EventDispatcher$RequestListenerMessageEventHandler:
    void handleMessageEvent(org.ice4j.StunMessageEvent) -> handleMessageEvent
org.ice4j.stack.MessageEventHandler -> org.ice4j.stack.MessageEventHandler:
    void handleMessageEvent(org.ice4j.StunMessageEvent) -> handleMessageEvent
org.ice4j.stack.MessageProcessor -> org.ice4j.stack.MessageProcessor:
    java.util.logging.Logger logger -> logger
    org.ice4j.stack.ErrorHandler errorHandler -> errorHandler
    org.ice4j.stack.MessageQueue messageQueue -> messageQueue
    org.ice4j.stack.MessageEventHandler messageEventHandler -> messageEventHandler
    org.ice4j.stack.NetAccessManager netAccessManager -> netAccessManager
    boolean running -> running
    java.lang.Thread runningThread -> runningThread
    void run() -> run
    void start() -> start
    void stop() -> stop
    boolean isRunning() -> isRunning
org.ice4j.stack.MessageQueue -> org.ice4j.stack.MessageQueue:
    java.util.logging.Logger logger -> logger
    java.util.Vector queue -> queue
    int size -> size
    int getSize() -> getSize
    boolean isEmpty() -> isEmpty
    void add(org.ice4j.stack.RawMessage) -> add
    org.ice4j.stack.RawMessage remove() -> remove
    void waitWhileEmpty() -> waitWhileEmpty
org.ice4j.stack.NetAccessManager -> org.ice4j.stack.NetAccessManager:
    java.util.logging.Logger logger -> logger
    java.util.Map netUDPAccessPoints -> netUDPAccessPoints
    java.util.Map netTCPAccessPoints -> netTCPAccessPoints
    org.ice4j.stack.MessageQueue messageQueue -> messageQueue
    java.util.Vector messageProcessors -> messageProcessors
    org.ice4j.stack.MessageEventHandler messageEventHandler -> messageEventHandler
    org.ice4j.stack.PeerUdpMessageEventHandler peerUdpMessageEventHandler -> peerUdpMessageEventHandler
    org.ice4j.stack.ChannelDataEventHandler channelDataEventHandler -> channelDataEventHandler
    int initialThreadPoolSize -> initialThreadPoolSize
    org.ice4j.stack.StunStack stunStack -> stunStack
    org.ice4j.stack.MessageEventHandler getMessageEventHandler() -> getMessageEventHandler
    org.ice4j.stack.PeerUdpMessageEventHandler getUdpMessageEventHandler() -> getUdpMessageEventHandler
    org.ice4j.stack.ChannelDataEventHandler getChannelDataMessageEventHandler() -> getChannelDataMessageEventHandler
    org.ice4j.stack.MessageQueue getMessageQueue() -> getMessageQueue
    org.ice4j.stack.StunStack getStunStack() -> getStunStack
    void handleError(java.lang.String,java.lang.Throwable) -> handleError
    void handleFatalError(java.lang.Runnable,java.lang.String,java.lang.Throwable) -> handleFatalError
    void addSocket(org.ice4j.socket.IceSocketWrapper) -> addSocket
    void removeSocket(org.ice4j.TransportAddress) -> removeSocket
    void stop() -> stop
    void setThreadPoolSize(int) -> setThreadPoolSize
    void initThreadPool() -> initThreadPool
    void fillUpThreadPool(int) -> fillUpThreadPool
    void shrinkThreadPool(int) -> shrinkThreadPool
    void sendMessage(org.ice4j.message.Message,org.ice4j.TransportAddress,org.ice4j.TransportAddress) -> sendMessage
    void sendMessage(org.ice4j.message.ChannelData,org.ice4j.TransportAddress,org.ice4j.TransportAddress) -> sendMessage
    void sendMessage(byte[],org.ice4j.TransportAddress,org.ice4j.TransportAddress) -> sendMessage
org.ice4j.stack.NetAccessManager$1 -> org.ice4j.stack.NetAccessManager$1:
    int[] $SwitchMap$org$ice4j$Transport -> $SwitchMap$org$ice4j$Transport
org.ice4j.stack.PacketLogger -> org.ice4j.stack.PacketLogger:
    void logPacket(byte[],int,byte[],int,byte[],boolean) -> logPacket
    boolean isEnabled() -> isEnabled
org.ice4j.stack.PeerUdpMessageEventHandler -> org.ice4j.stack.PeerUdpMessageEventHandler:
    void handleMessageEvent(org.ice4j.PeerUdpMessageEvent) -> handleMessageEvent
org.ice4j.stack.RawMessage -> org.ice4j.stack.RawMessage:
    byte[] messageBytes -> messageBytes
    int messageLength -> messageLength
    org.ice4j.TransportAddress remoteAddress -> remoteAddress
    org.ice4j.TransportAddress localAddress -> localAddress
    byte[] getBytes() -> getBytes
    int getMessageLength() -> getMessageLength
    org.ice4j.TransportAddress getRemoteAddress() -> getRemoteAddress
    org.ice4j.TransportAddress getLocalAddress() -> getLocalAddress
org.ice4j.stack.RequestListener -> org.ice4j.stack.RequestListener:
    void processRequest(org.ice4j.StunMessageEvent) -> processRequest
org.ice4j.stack.StunClientTransaction -> org.ice4j.stack.StunClientTransaction:
    java.util.logging.Logger logger -> logger
    int DEFAULT_MAX_RETRANSMISSIONS -> DEFAULT_MAX_RETRANSMISSIONS
    int DEFAULT_MAX_WAIT_INTERVAL -> DEFAULT_MAX_WAIT_INTERVAL
    int DEFAULT_ORIGINAL_WAIT_INTERVAL -> DEFAULT_ORIGINAL_WAIT_INTERVAL
    java.util.concurrent.ExecutorService retransmissionThreadPool -> retransmissionThreadPool
    int maxRetransmissions -> maxRetransmissions
    int originalWaitInterval -> originalWaitInterval
    int maxWaitInterval -> maxWaitInterval
    org.ice4j.stack.StunStack stackCallback -> stackCallback
    org.ice4j.message.Request request -> request
    org.ice4j.TransportAddress requestDestination -> requestDestination
    org.ice4j.stack.TransactionID transactionID -> transactionID
    org.ice4j.TransportAddress localAddress -> localAddress
    org.ice4j.ResponseCollector responseCollector -> responseCollector
    boolean cancelled -> cancelled
    java.util.concurrent.locks.Lock lock -> lock
    java.util.concurrent.locks.Condition lockCondition -> lockCondition
    void run() -> run
    void runLocked() -> runLocked
    void sendRequest() -> sendRequest
    void sendRequest0() -> sendRequest0
    org.ice4j.message.Request getRequest() -> getRequest
    void waitFor(long) -> waitFor
    void cancel(boolean) -> cancel
    void cancel() -> cancel
    void handleResponse(org.ice4j.StunMessageEvent) -> handleResponse
    org.ice4j.stack.TransactionID getTransactionID() -> getTransactionID
    void initTransactionConfiguration() -> initTransactionConfiguration
    org.ice4j.TransportAddress getLocalAddress() -> getLocalAddress
    org.ice4j.TransportAddress getRemoteAddress() -> getRemoteAddress
org.ice4j.stack.StunClientTransaction$1 -> org.ice4j.stack.StunClientTransaction$1:
    java.util.concurrent.ThreadFactory defaultThreadFactory -> defaultThreadFactory
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.ice4j.stack.StunServerTransaction -> org.ice4j.stack.StunServerTransaction:
    long LIFETIME -> LIFETIME
    org.ice4j.stack.StunStack stackCallback -> stackCallback
    org.ice4j.TransportAddress responseDestination -> responseDestination
    org.ice4j.TransportAddress requestSource -> requestSource
    org.ice4j.message.Response response -> response
    org.ice4j.TransportAddress localListeningAddress -> localListeningAddress
    org.ice4j.TransportAddress localSendingAddress -> localSendingAddress
    org.ice4j.stack.TransactionID transactionID -> transactionID
    long expirationTime -> expirationTime
    boolean expired -> expired
    boolean isRetransmitting -> isRetransmitting
    void start() -> start
    void sendResponse(org.ice4j.message.Response,org.ice4j.TransportAddress,org.ice4j.TransportAddress) -> sendResponse
    void retransmitResponse() -> retransmitResponse
    void expire() -> expire
    boolean isExpired() -> isExpired
    boolean isExpired(long) -> isExpired
    org.ice4j.stack.TransactionID getTransactionID() -> getTransactionID
    boolean isRetransmitting() -> isRetransmitting
    org.ice4j.TransportAddress getSendingAddress() -> getSendingAddress
    org.ice4j.TransportAddress getResponseDestinationAddress() -> getResponseDestinationAddress
    org.ice4j.TransportAddress getLocalListeningAddress() -> getLocalListeningAddress
    org.ice4j.TransportAddress getRequestSourceAddress() -> getRequestSourceAddress
    org.ice4j.message.Response getResponse() -> getResponse
org.ice4j.stack.StunStack -> org.ice4j.stack.StunStack:
    int DEFAULT_THREAD_POOL_SIZE -> DEFAULT_THREAD_POOL_SIZE
    java.util.logging.Logger logger -> logger
    javax.crypto.Mac mac -> mac
    org.ice4j.stack.NetAccessManager netAccessManager -> netAccessManager
    org.ice4j.security.CredentialsManager credentialsManager -> credentialsManager
    java.util.Hashtable clientTransactions -> clientTransactions
    java.lang.Thread serverTransactionExpireThread -> serverTransactionExpireThread
    java.util.Hashtable serverTransactions -> serverTransactions
    org.ice4j.stack.EventDispatcher eventDispatcher -> eventDispatcher
    org.ice4j.stack.PacketLogger packetLogger -> packetLogger
    void setThreadPoolSize(int) -> setThreadPoolSize
    void addSocket(org.ice4j.socket.IceSocketWrapper) -> addSocket
    void removeSocket(org.ice4j.TransportAddress) -> removeSocket
    org.ice4j.stack.StunClientTransaction getClientTransaction(byte[]) -> getClientTransaction
    org.ice4j.stack.StunServerTransaction getServerTransaction(byte[]) -> getServerTransaction
    org.ice4j.stack.StunServerTransaction getServerTransaction(org.ice4j.stack.TransactionID) -> getServerTransaction
    void cancelTransaction(org.ice4j.stack.TransactionID) -> cancelTransaction
    void cancelTransactionsForAddress(org.ice4j.TransportAddress) -> cancelTransactionsForAddress
    org.ice4j.stack.NetAccessManager getNetAccessManager() -> getNetAccessManager
    void sendChannelData(org.ice4j.message.ChannelData,org.ice4j.TransportAddress,org.ice4j.TransportAddress) -> sendChannelData
    void sendUdpMessage(org.ice4j.stack.RawMessage,org.ice4j.TransportAddress,org.ice4j.TransportAddress) -> sendUdpMessage
    void sendIndication(org.ice4j.message.Indication,org.ice4j.TransportAddress,org.ice4j.TransportAddress) -> sendIndication
    org.ice4j.stack.TransactionID sendRequest(org.ice4j.message.Request,org.ice4j.TransportAddress,org.ice4j.TransportAddress,org.ice4j.ResponseCollector) -> sendRequest
    org.ice4j.stack.TransactionID sendRequest(org.ice4j.message.Request,org.ice4j.TransportAddress,org.ice4j.TransportAddress,org.ice4j.ResponseCollector,org.ice4j.stack.TransactionID) -> sendRequest
    org.ice4j.stack.TransactionID sendRequest(org.ice4j.message.Request,org.ice4j.TransportAddress,org.ice4j.TransportAddress,org.ice4j.ResponseCollector,org.ice4j.stack.TransactionID,int,int,int) -> sendRequest
    org.ice4j.stack.TransactionID sendRequest(org.ice4j.message.Request,org.ice4j.TransportAddress,java.net.DatagramSocket,org.ice4j.ResponseCollector) -> sendRequest
    void sendResponse(byte[],org.ice4j.message.Response,org.ice4j.TransportAddress,org.ice4j.TransportAddress) -> sendResponse
    void addIndicationListener(org.ice4j.TransportAddress,org.ice4j.stack.MessageEventHandler) -> addIndicationListener
    void addOldIndicationListener(org.ice4j.TransportAddress,org.ice4j.stack.MessageEventHandler) -> addOldIndicationListener
    void addRequestListener(org.ice4j.stack.RequestListener) -> addRequestListener
    void removeIndicationListener(org.ice4j.TransportAddress,org.ice4j.stack.MessageEventHandler) -> removeIndicationListener
    void removeRequestListener(org.ice4j.stack.RequestListener) -> removeRequestListener
    void addRequestListener(org.ice4j.TransportAddress,org.ice4j.stack.RequestListener) -> addRequestListener
    void removeClientTransaction(org.ice4j.stack.StunClientTransaction) -> removeClientTransaction
    void removeServerTransaction(org.ice4j.stack.StunServerTransaction) -> removeServerTransaction
    void handleMessageEvent(org.ice4j.StunMessageEvent) -> handleMessageEvent
    org.ice4j.security.CredentialsManager getCredentialsManager() -> getCredentialsManager
    void shutDown() -> shutDown
    void validateRequestAttributes(org.ice4j.StunMessageEvent) -> validateRequestAttributes
    boolean validateMessageIntegrity(org.ice4j.attribute.MessageIntegrityAttribute,java.lang.String,boolean,org.ice4j.stack.RawMessage) -> validateMessageIntegrity
    java.lang.String toHexString(byte[]) -> toHexString
    boolean validateUsername(java.lang.String) -> validateUsername
    org.ice4j.stack.PacketLogger getPacketLogger() -> getPacketLogger
    void setPacketLogger(org.ice4j.stack.PacketLogger) -> setPacketLogger
    boolean isPacketLoggerEnabled() -> isPacketLoggerEnabled
    void maybeStartServerTransactionExpireThread() -> maybeStartServerTransactionExpireThread
    void runInServerTransactionExpireThread() -> runInServerTransactionExpireThread
    org.ice4j.message.Response createCorrespondingErrorResponse(char,char,java.lang.String,char[]) -> createCorrespondingErrorResponse
    void access$000(org.ice4j.stack.StunStack) -> access$000
org.ice4j.stack.StunStack$1 -> org.ice4j.stack.StunStack$1:
    org.ice4j.stack.StunStack this$0 -> this$0
    void run() -> run
org.ice4j.stack.TransactionID -> org.ice4j.stack.TransactionID:
    int RFC5389_TRANSACTION_ID_LENGTH -> RFC5389_TRANSACTION_ID_LENGTH
    int RFC3489_TRANSACTION_ID_LENGTH -> RFC3489_TRANSACTION_ID_LENGTH
    byte[] transactionID -> transactionID
    java.lang.Object applicationData -> applicationData
    java.util.Random random -> random
    int hashCode -> hashCode
    org.ice4j.stack.TransactionID createNewTransactionID() -> createNewTransactionID
    org.ice4j.stack.TransactionID createNewRFC3489TransactionID() -> createNewRFC3489TransactionID
    void generateTransactionID(org.ice4j.stack.TransactionID,int) -> generateTransactionID
    org.ice4j.stack.TransactionID createTransactionID(org.ice4j.stack.StunStack,byte[]) -> createTransactionID
    byte[] getBytes() -> getBytes
    boolean isRFC3489Compatible() -> isRFC3489Compatible
    boolean equals(java.lang.Object) -> equals
    boolean equals(byte[]) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String toString(byte[]) -> toString
    void setApplicationData(java.lang.Object) -> setApplicationData
    java.lang.Object getApplicationData() -> getApplicationData
org.ice4j.stunclient.BlockingRequestSender -> org.ice4j.stunclient.BlockingRequestSender:
    java.util.logging.Logger logger -> logger
    org.ice4j.stack.StunStack stunStack -> stunStack
    org.ice4j.TransportAddress localAddress -> localAddress
    org.ice4j.StunMessageEvent responseEvent -> responseEvent
    boolean ended -> ended
    java.lang.Object sendLock -> sendLock
    void processFailure(org.ice4j.BaseStunMessageEvent) -> processFailure
    void processResponse(org.ice4j.StunResponseEvent) -> processResponse
    org.ice4j.StunMessageEvent sendRequestAndWaitForResponse(org.ice4j.message.Request,org.ice4j.TransportAddress) -> sendRequestAndWaitForResponse
    org.ice4j.StunMessageEvent sendRequestAndWaitForResponse(org.ice4j.message.Request,org.ice4j.TransportAddress,org.ice4j.stack.TransactionID) -> sendRequestAndWaitForResponse
org.ice4j.stunclient.NetworkConfigurationDiscoveryProcess -> org.ice4j.stunclient.NetworkConfigurationDiscoveryProcess:
    java.util.logging.Logger logger -> logger
    boolean started -> started
    org.ice4j.TransportAddress localAddress -> localAddress
    org.ice4j.TransportAddress serverAddress -> serverAddress
    org.ice4j.stunclient.BlockingRequestSender requestSender -> requestSender
    org.ice4j.socket.IceSocketWrapper sock -> sock
    org.ice4j.stack.StunStack stunStack -> stunStack
    void shutDown() -> shutDown
    void start() -> start
    org.ice4j.stunclient.StunDiscoveryReport determineAddress() -> determineAddress
    org.ice4j.StunMessageEvent doTestI(org.ice4j.TransportAddress) -> doTestI
    org.ice4j.StunMessageEvent doTestII(org.ice4j.TransportAddress) -> doTestII
    org.ice4j.StunMessageEvent doTestIII(org.ice4j.TransportAddress) -> doTestIII
    void checkStarted() -> checkStarted
org.ice4j.stunclient.SimpleAddressDetector -> org.ice4j.stunclient.SimpleAddressDetector:
    java.util.logging.Logger logger -> logger
    org.ice4j.stack.StunStack stunStack -> stunStack
    org.ice4j.TransportAddress serverAddress -> serverAddress
    org.ice4j.stunclient.BlockingRequestSender requestSender -> requestSender
    org.ice4j.TransportAddress getServerAddress() -> getServerAddress
    void shutDown() -> shutDown
    void start() -> start
    org.ice4j.TransportAddress getMappingFor(org.ice4j.socket.IceSocketWrapper) -> getMappingFor
org.ice4j.stunclient.StunDiscoveryReport -> org.ice4j.stunclient.StunDiscoveryReport:
    java.lang.String UNKNOWN -> UNKNOWN
    java.lang.String OPEN_INTERNET -> OPEN_INTERNET
    java.lang.String UDP_BLOCKING_FIREWALL -> UDP_BLOCKING_FIREWALL
    java.lang.String SYMMETRIC_UDP_FIREWALL -> SYMMETRIC_UDP_FIREWALL
    java.lang.String FULL_CONE_NAT -> FULL_CONE_NAT
    java.lang.String SYMMETRIC_NAT -> SYMMETRIC_NAT
    java.lang.String RESTRICTED_CONE_NAT -> RESTRICTED_CONE_NAT
    java.lang.String PORT_RESTRICTED_CONE_NAT -> PORT_RESTRICTED_CONE_NAT
    java.lang.String natType -> natType
    org.ice4j.TransportAddress publicAddress -> publicAddress
    java.lang.String getNatType() -> getNatType
    void setNatType(java.lang.String) -> setNatType
    org.ice4j.TransportAddress getPublicAddress() -> getPublicAddress
    void setPublicAddress(org.ice4j.TransportAddress) -> setPublicAddress
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.ice4j.util.Ice4jLogFormatter -> org.ice4j.util.Ice4jLogFormatter:
    long startTime -> startTime
    java.lang.String lineSeparator -> lineSeparator
    java.text.DecimalFormat twoDigFmt -> twoDigFmt
    java.text.DecimalFormat threeDigFmt -> threeDigFmt
    java.lang.String format(java.util.logging.LogRecord) -> format
    int inferCaller(java.util.logging.LogRecord) -> inferCaller
org.jivesoftware.smack.AbstractConnectionListener -> org.jivesoftware.smack.AbstractConnectionListener:
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectingIn(int) -> reconnectingIn
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
    void reconnectionSuccessful() -> reconnectionSuccessful
org.jivesoftware.smack.AccountManager -> org.jivesoftware.smack.AccountManager:
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smack.packet.Registration info -> info
    boolean accountCreationSupported -> accountCreationSupported
    void setSupportsAccountCreation(boolean) -> setSupportsAccountCreation
    boolean supportsAccountCreation() -> supportsAccountCreation
    java.util.Collection getAccountAttributes() -> getAccountAttributes
    java.lang.String getAccountAttribute(java.lang.String) -> getAccountAttribute
    java.lang.String getAccountInstructions() -> getAccountInstructions
    void createAccount(java.lang.String,java.lang.String) -> createAccount
    void createAccount(java.lang.String,java.lang.String,java.util.Map) -> createAccount
    void changePassword(java.lang.String) -> changePassword
    void deleteAccount() -> deleteAccount
    void getRegistrationInfo() -> getRegistrationInfo
org.jivesoftware.smack.AndroidConnectionConfiguration -> org.jivesoftware.smack.AndroidConnectionConfiguration:
    int DEFAULT_TIMEOUT -> DEFAULT_TIMEOUT
    void AndroidInit() -> AndroidInit
    void AndroidInit(java.lang.String,int) -> AndroidInit
org.jivesoftware.smack.AndroidConnectionConfiguration$1DnsSrvLookupRunnable -> org.jivesoftware.smack.AndroidConnectionConfiguration$1DnsSrvLookupRunnable:
    java.lang.String serviceName -> serviceName
    java.util.List addresses -> addresses
    org.jivesoftware.smack.AndroidConnectionConfiguration this$0 -> this$0
    void run() -> run
    java.util.List getHostAddresses() -> getHostAddresses
org.jivesoftware.smack.Chat -> org.jivesoftware.smack.Chat:
    org.jivesoftware.smack.ChatManager chatManager -> chatManager
    java.lang.String threadID -> threadID
    java.lang.String participant -> participant
    java.util.Set listeners -> listeners
    java.lang.String getThreadID() -> getThreadID
    java.lang.String getParticipant() -> getParticipant
    void sendMessage(java.lang.String) -> sendMessage
    void sendMessage(org.jivesoftware.smack.packet.Message) -> sendMessage
    void addMessageListener(org.jivesoftware.smack.MessageListener) -> addMessageListener
    void removeMessageListener(org.jivesoftware.smack.MessageListener) -> removeMessageListener
    java.util.Collection getListeners() -> getListeners
    org.jivesoftware.smack.PacketCollector createCollector() -> createCollector
    void deliver(org.jivesoftware.smack.packet.Message) -> deliver
    boolean equals(java.lang.Object) -> equals
org.jivesoftware.smack.ChatManager -> org.jivesoftware.smack.ChatManager:
    java.lang.String prefix -> prefix
    long id -> id
    java.util.Map threadChats -> threadChats
    java.util.Map jidChats -> jidChats
    java.util.Map baseJidChats -> baseJidChats
    java.util.Set chatManagerListeners -> chatManagerListeners
    java.util.Map interceptors -> interceptors
    org.jivesoftware.smack.Connection connection -> connection
    java.lang.String nextID() -> nextID
    org.jivesoftware.smack.Chat createChat(java.lang.String,org.jivesoftware.smack.MessageListener) -> createChat
    org.jivesoftware.smack.Chat createChat(java.lang.String,java.lang.String,org.jivesoftware.smack.MessageListener) -> createChat
    org.jivesoftware.smack.Chat createChat(java.lang.String,java.lang.String,boolean) -> createChat
    org.jivesoftware.smack.Chat createChat(org.jivesoftware.smack.packet.Message) -> createChat
    org.jivesoftware.smack.Chat getUserChat(java.lang.String) -> getUserChat
    org.jivesoftware.smack.Chat getThreadChat(java.lang.String) -> getThreadChat
    void addChatListener(org.jivesoftware.smack.ChatManagerListener) -> addChatListener
    void removeChatListener(org.jivesoftware.smack.ChatManagerListener) -> removeChatListener
    java.util.Collection getChatListeners() -> getChatListeners
    void deliverMessage(org.jivesoftware.smack.Chat,org.jivesoftware.smack.packet.Message) -> deliverMessage
    void sendMessage(org.jivesoftware.smack.Chat,org.jivesoftware.smack.packet.Message) -> sendMessage
    org.jivesoftware.smack.PacketCollector createPacketCollector(org.jivesoftware.smack.Chat) -> createPacketCollector
    void addOutgoingMessageInterceptor(org.jivesoftware.smack.PacketInterceptor) -> addOutgoingMessageInterceptor
    void addOutgoingMessageInterceptor(org.jivesoftware.smack.PacketInterceptor,org.jivesoftware.smack.filter.PacketFilter) -> addOutgoingMessageInterceptor
    org.jivesoftware.smack.Chat access$000(org.jivesoftware.smack.ChatManager,java.lang.String) -> access$000
    org.jivesoftware.smack.Chat access$100(org.jivesoftware.smack.ChatManager,org.jivesoftware.smack.packet.Message) -> access$100
    void access$200(org.jivesoftware.smack.ChatManager,org.jivesoftware.smack.Chat,org.jivesoftware.smack.packet.Message) -> access$200
org.jivesoftware.smack.ChatManager$1 -> org.jivesoftware.smack.ChatManager$1:
    org.jivesoftware.smack.ChatManager this$0 -> this$0
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.ChatManager$2 -> org.jivesoftware.smack.ChatManager$2:
    org.jivesoftware.smack.ChatManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.ChatManagerListener -> org.jivesoftware.smack.ChatManagerListener:
    void chatCreated(org.jivesoftware.smack.Chat,boolean) -> chatCreated
org.jivesoftware.smack.Connection -> org.jivesoftware.smack.Connection:
    java.util.concurrent.atomic.AtomicInteger connectionCounter -> connectionCounter
    java.util.Set connectionEstablishedListeners -> connectionEstablishedListeners
    java.util.List compressionHandlers -> compressionHandlers
    boolean DEBUG_ENABLED -> DEBUG_ENABLED
    org.jivesoftware.smack.ReconnectionManager reconnectionManager -> reconnectionManager
    java.util.Collection connectionListeners -> connectionListeners
    java.util.Collection collectors -> collectors
    java.util.Map recvListeners -> recvListeners
    java.util.Map sendListeners -> sendListeners
    java.util.Map interceptors -> interceptors
    org.jivesoftware.smack.AccountManager accountManager -> accountManager
    org.jivesoftware.smack.ChatManager chatManager -> chatManager
    org.jivesoftware.smack.debugger.SmackDebugger debugger -> debugger
    java.io.Reader reader -> reader
    java.io.Writer writer -> writer
    org.jivesoftware.smack.RosterStorage rosterStorage -> rosterStorage
    org.jivesoftware.smack.SASLAuthentication saslAuthentication -> saslAuthentication
    int connectionCounterValue -> connectionCounterValue
    org.jivesoftware.smack.ConnectionConfiguration config -> config
    java.lang.String serviceCapsNode -> serviceCapsNode
    org.jivesoftware.smack.compression.XMPPInputOutputStream compressionHandler -> compressionHandler
    boolean released -> released
    void release() -> release
    boolean isReleased() -> isReleased
    org.jivesoftware.smack.ConnectionConfiguration getConfiguration() -> getConfiguration
    java.lang.String getServiceName() -> getServiceName
    java.lang.String getHost() -> getHost
    int getPort() -> getPort
    java.lang.String getUser() -> getUser
    java.lang.String getConnectionID() -> getConnectionID
    boolean isConnected() -> isConnected
    boolean isAuthenticated() -> isAuthenticated
    boolean isAnonymous() -> isAnonymous
    boolean isSecureConnection() -> isSecureConnection
    boolean isReconnectionAllowed() -> isReconnectionAllowed
    boolean isUsingCompression() -> isUsingCompression
    void connect() -> connect
    void login(java.lang.String,java.lang.String) -> login
    void login(java.lang.String,java.lang.String,java.lang.String) -> login
    void loginAnonymously() -> loginAnonymously
    void sendPacket(org.jivesoftware.smack.packet.Packet) -> sendPacket
    org.jivesoftware.smack.AccountManager getAccountManager() -> getAccountManager
    org.jivesoftware.smack.ChatManager getChatManager() -> getChatManager
    org.jivesoftware.smack.Roster getRoster() -> getRoster
    void setRosterStorage(org.jivesoftware.smack.RosterStorage) -> setRosterStorage
    org.jivesoftware.smack.SASLAuthentication getSASLAuthentication() -> getSASLAuthentication
    void disconnect() -> disconnect
    void disconnect(org.jivesoftware.smack.packet.Presence) -> disconnect
    void addConnectionCreationListener(org.jivesoftware.smack.ConnectionCreationListener) -> addConnectionCreationListener
    void removeConnectionCreationListener(org.jivesoftware.smack.ConnectionCreationListener) -> removeConnectionCreationListener
    java.util.Collection getConnectionCreationListeners() -> getConnectionCreationListeners
    void addConnectionListener(org.jivesoftware.smack.ConnectionListener) -> addConnectionListener
    void removeConnectionListener(org.jivesoftware.smack.ConnectionListener) -> removeConnectionListener
    java.util.Collection getConnectionListeners() -> getConnectionListeners
    org.jivesoftware.smack.PacketCollector createPacketCollector(org.jivesoftware.smack.filter.PacketFilter) -> createPacketCollector
    void removePacketCollector(org.jivesoftware.smack.PacketCollector) -> removePacketCollector
    java.util.Collection getPacketCollectors() -> getPacketCollectors
    void addPacketListener(org.jivesoftware.smack.PacketListener,org.jivesoftware.smack.filter.PacketFilter) -> addPacketListener
    void removePacketListener(org.jivesoftware.smack.PacketListener) -> removePacketListener
    java.util.Map getPacketListeners() -> getPacketListeners
    void addPacketSendingListener(org.jivesoftware.smack.PacketListener,org.jivesoftware.smack.filter.PacketFilter) -> addPacketSendingListener
    void removePacketSendingListener(org.jivesoftware.smack.PacketListener) -> removePacketSendingListener
    java.util.Map getPacketSendingListeners() -> getPacketSendingListeners
    void firePacketSendingListeners(org.jivesoftware.smack.packet.Packet) -> firePacketSendingListeners
    void addPacketInterceptor(org.jivesoftware.smack.PacketInterceptor,org.jivesoftware.smack.filter.PacketFilter) -> addPacketInterceptor
    void removePacketInterceptor(org.jivesoftware.smack.PacketInterceptor) -> removePacketInterceptor
    boolean isSendPresence() -> isSendPresence
    java.util.Map getPacketInterceptors() -> getPacketInterceptors
    void firePacketInterceptors(org.jivesoftware.smack.packet.Packet) -> firePacketInterceptors
    void initDebugger() -> initDebugger
    void setServiceCapsNode(java.lang.String) -> setServiceCapsNode
    java.lang.String getServiceCapsNode() -> getServiceCapsNode
org.jivesoftware.smack.Connection$InterceptorWrapper -> org.jivesoftware.smack.Connection$InterceptorWrapper:
    org.jivesoftware.smack.PacketInterceptor packetInterceptor -> packetInterceptor
    org.jivesoftware.smack.filter.PacketFilter packetFilter -> packetFilter
    boolean equals(java.lang.Object) -> equals
    void notifyListener(org.jivesoftware.smack.packet.Packet) -> notifyListener
org.jivesoftware.smack.Connection$ListenerWrapper -> org.jivesoftware.smack.Connection$ListenerWrapper:
    org.jivesoftware.smack.PacketListener packetListener -> packetListener
    org.jivesoftware.smack.filter.PacketFilter packetFilter -> packetFilter
    void notifyListener(org.jivesoftware.smack.packet.Packet) -> notifyListener
org.jivesoftware.smack.ConnectionConfiguration -> org.jivesoftware.smack.ConnectionConfiguration:
    java.lang.String serviceName -> serviceName
    java.lang.String host -> host
    int port -> port
    java.util.List hostAddresses -> hostAddresses
    java.lang.String truststorePath -> truststorePath
    java.lang.String truststoreType -> truststoreType
    java.lang.String truststorePassword -> truststorePassword
    java.lang.String keystorePath -> keystorePath
    java.lang.String keystoreType -> keystoreType
    java.lang.String pkcs11Library -> pkcs11Library
    boolean verifyChainEnabled -> verifyChainEnabled
    boolean verifyRootCAEnabled -> verifyRootCAEnabled
    boolean selfSignedCertificateEnabled -> selfSignedCertificateEnabled
    boolean expiredCertificatesCheckEnabled -> expiredCertificatesCheckEnabled
    boolean notMatchingDomainCheckEnabled -> notMatchingDomainCheckEnabled
    boolean isRosterVersioningAvailable -> isRosterVersioningAvailable
    javax.net.ssl.SSLContext customSSLContext -> customSSLContext
    boolean compressionEnabled -> compressionEnabled
    boolean saslAuthenticationEnabled -> saslAuthenticationEnabled
    org.apache.harmony.javax.security.auth.callback.CallbackHandler callbackHandler -> callbackHandler
    boolean debuggerEnabled -> debuggerEnabled
    boolean reconnectionAllowed -> reconnectionAllowed
    javax.net.SocketFactory socketFactory -> socketFactory
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String resource -> resource
    boolean sendPresence -> sendPresence
    boolean rosterLoadedAtLogin -> rosterLoadedAtLogin
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode securityMode -> securityMode
    org.jivesoftware.smack.proxy.ProxyInfo proxy -> proxy
    void init(java.lang.String,org.jivesoftware.smack.proxy.ProxyInfo) -> init
    void setServiceName(java.lang.String) -> setServiceName
    java.lang.String getServiceName() -> getServiceName
    java.lang.String getHost() -> getHost
    int getPort() -> getPort
    void setUsedHostAddress(org.jivesoftware.smack.util.dns.HostAddress) -> setUsedHostAddress
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode getSecurityMode() -> getSecurityMode
    void setSecurityMode(org.jivesoftware.smack.ConnectionConfiguration$SecurityMode) -> setSecurityMode
    java.lang.String getTruststorePath() -> getTruststorePath
    void setTruststorePath(java.lang.String) -> setTruststorePath
    java.lang.String getTruststoreType() -> getTruststoreType
    void setTruststoreType(java.lang.String) -> setTruststoreType
    java.lang.String getTruststorePassword() -> getTruststorePassword
    void setTruststorePassword(java.lang.String) -> setTruststorePassword
    java.lang.String getKeystorePath() -> getKeystorePath
    void setKeystorePath(java.lang.String) -> setKeystorePath
    java.lang.String getKeystoreType() -> getKeystoreType
    void setKeystoreType(java.lang.String) -> setKeystoreType
    java.lang.String getPKCS11Library() -> getPKCS11Library
    void setPKCS11Library(java.lang.String) -> setPKCS11Library
    boolean isVerifyChainEnabled() -> isVerifyChainEnabled
    void setVerifyChainEnabled(boolean) -> setVerifyChainEnabled
    boolean isVerifyRootCAEnabled() -> isVerifyRootCAEnabled
    void setVerifyRootCAEnabled(boolean) -> setVerifyRootCAEnabled
    boolean isSelfSignedCertificateEnabled() -> isSelfSignedCertificateEnabled
    void setSelfSignedCertificateEnabled(boolean) -> setSelfSignedCertificateEnabled
    boolean isExpiredCertificatesCheckEnabled() -> isExpiredCertificatesCheckEnabled
    void setExpiredCertificatesCheckEnabled(boolean) -> setExpiredCertificatesCheckEnabled
    boolean isNotMatchingDomainCheckEnabled() -> isNotMatchingDomainCheckEnabled
    void setNotMatchingDomainCheckEnabled(boolean) -> setNotMatchingDomainCheckEnabled
    javax.net.ssl.SSLContext getCustomSSLContext() -> getCustomSSLContext
    void setCustomSSLContext(javax.net.ssl.SSLContext) -> setCustomSSLContext
    boolean isCompressionEnabled() -> isCompressionEnabled
    void setCompressionEnabled(boolean) -> setCompressionEnabled
    boolean isSASLAuthenticationEnabled() -> isSASLAuthenticationEnabled
    void setSASLAuthenticationEnabled(boolean) -> setSASLAuthenticationEnabled
    boolean isDebuggerEnabled() -> isDebuggerEnabled
    void setDebuggerEnabled(boolean) -> setDebuggerEnabled
    void setReconnectionAllowed(boolean) -> setReconnectionAllowed
    boolean isReconnectionAllowed() -> isReconnectionAllowed
    void setSocketFactory(javax.net.SocketFactory) -> setSocketFactory
    void setSendPresence(boolean) -> setSendPresence
    boolean isRosterLoadedAtLogin() -> isRosterLoadedAtLogin
    void setRosterLoadedAtLogin(boolean) -> setRosterLoadedAtLogin
    org.apache.harmony.javax.security.auth.callback.CallbackHandler getCallbackHandler() -> getCallbackHandler
    void setCallbackHandler(org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> setCallbackHandler
    javax.net.SocketFactory getSocketFactory() -> getSocketFactory
    java.util.List getHostAddresses() -> getHostAddresses
    void addHostAddress(java.lang.String,int) -> addHostAddress
    java.lang.String getUsername() -> getUsername
    java.lang.String getPassword() -> getPassword
    java.lang.String getResource() -> getResource
    boolean isRosterVersioningAvailable() -> isRosterVersioningAvailable
    void setRosterVersioningAvailable(boolean) -> setRosterVersioningAvailable
    boolean isSendPresence() -> isSendPresence
    void setLoginInfo(java.lang.String,java.lang.String,java.lang.String) -> setLoginInfo
    void initHostAddresses(java.lang.String,int) -> initHostAddresses
org.jivesoftware.smack.ConnectionConfiguration$SecurityMode -> org.jivesoftware.smack.ConnectionConfiguration$SecurityMode:
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode required -> required
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode enabled -> enabled
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode disabled -> disabled
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode[] $VALUES -> $VALUES
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode[] values() -> values
    org.jivesoftware.smack.ConnectionConfiguration$SecurityMode valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.ConnectionCreationListener -> org.jivesoftware.smack.ConnectionCreationListener:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smack.ConnectionListener -> org.jivesoftware.smack.ConnectionListener:
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectingIn(int) -> reconnectingIn
    void reconnectionSuccessful() -> reconnectionSuccessful
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
org.jivesoftware.smack.MessageListener -> org.jivesoftware.smack.MessageListener:
    void processMessage(org.jivesoftware.smack.Chat,org.jivesoftware.smack.packet.Message) -> processMessage
org.jivesoftware.smack.NonSASLAuthentication -> org.jivesoftware.smack.NonSASLAuthentication:
    org.jivesoftware.smack.Connection connection -> connection
    java.lang.String authenticate(java.lang.String,java.lang.String,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> authenticate
    java.lang.String authenticate(java.lang.String,java.lang.String,java.lang.String) -> authenticate
    java.lang.String authenticateAnonymously() -> authenticateAnonymously
org.jivesoftware.smack.OpenTrustManager -> org.jivesoftware.smack.OpenTrustManager:
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
org.jivesoftware.smack.PacketCollector -> org.jivesoftware.smack.PacketCollector:
    org.jivesoftware.smack.filter.PacketFilter packetFilter -> packetFilter
    java.util.concurrent.ArrayBlockingQueue resultQueue -> resultQueue
    org.jivesoftware.smack.Connection connection -> connection
    boolean cancelled -> cancelled
    void cancel() -> cancel
    org.jivesoftware.smack.filter.PacketFilter getPacketFilter() -> getPacketFilter
    org.jivesoftware.smack.packet.Packet pollResult() -> pollResult
    org.jivesoftware.smack.packet.Packet nextResult() -> nextResult
    org.jivesoftware.smack.packet.Packet nextResult(long) -> nextResult
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.PacketInterceptor -> org.jivesoftware.smack.PacketInterceptor:
    void interceptPacket(org.jivesoftware.smack.packet.Packet) -> interceptPacket
org.jivesoftware.smack.PacketListener -> org.jivesoftware.smack.PacketListener:
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.PacketReader -> org.jivesoftware.smack.PacketReader:
    java.lang.Thread readerThread -> readerThread
    java.util.concurrent.ExecutorService listenerExecutor -> listenerExecutor
    org.jivesoftware.smack.XMPPConnection connection -> connection
    org.xmlpull.v1.XmlPullParser parser -> parser
    boolean done -> done
    java.lang.String connectionID -> connectionID
    boolean featuresAreParsed -> featuresAreParsed
    void init() -> init
    void startup() -> startup
    void shutdown() -> shutdown
    void resetParser() -> resetParser
    void parsePackets(java.lang.Thread) -> parsePackets
    void releaseConnectionIDLock() -> releaseConnectionIDLock
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    void parseFeatures(org.xmlpull.v1.XmlPullParser) -> parseFeatures
    void access$000(org.jivesoftware.smack.PacketReader,java.lang.Thread) -> access$000
    org.jivesoftware.smack.XMPPConnection access$100(org.jivesoftware.smack.PacketReader) -> access$100
org.jivesoftware.smack.PacketReader$1 -> org.jivesoftware.smack.PacketReader$1:
    org.jivesoftware.smack.PacketReader this$0 -> this$0
    void run() -> run
org.jivesoftware.smack.PacketReader$2 -> org.jivesoftware.smack.PacketReader$2:
    org.jivesoftware.smack.PacketReader this$0 -> this$0
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.jivesoftware.smack.PacketReader$ListenerNotification -> org.jivesoftware.smack.PacketReader$ListenerNotification:
    org.jivesoftware.smack.packet.Packet packet -> packet
    org.jivesoftware.smack.PacketReader this$0 -> this$0
    void run() -> run
org.jivesoftware.smack.PacketWriter -> org.jivesoftware.smack.PacketWriter:
    java.lang.Thread writerThread -> writerThread
    java.lang.Thread keepAliveThread -> keepAliveThread
    java.io.Writer writer -> writer
    org.jivesoftware.smack.XMPPConnection connection -> connection
    java.util.concurrent.BlockingQueue queue -> queue
    boolean done -> done
    void init() -> init
    void sendPacket(org.jivesoftware.smack.packet.Packet) -> sendPacket
    void startup() -> startup
    void setWriter(java.io.Writer) -> setWriter
    void shutdown() -> shutdown
    org.jivesoftware.smack.packet.Packet nextPacket() -> nextPacket
    void writePackets(java.lang.Thread) -> writePackets
    void openStream() -> openStream
    void access$000(org.jivesoftware.smack.PacketWriter,java.lang.Thread) -> access$000
org.jivesoftware.smack.PacketWriter$1 -> org.jivesoftware.smack.PacketWriter$1:
    org.jivesoftware.smack.PacketWriter this$0 -> this$0
    void run() -> run
org.jivesoftware.smack.PrivacyList -> org.jivesoftware.smack.PrivacyList:
    boolean isActiveList -> isActiveList
    boolean isDefaultList -> isDefaultList
    java.lang.String listName -> listName
    java.util.List items -> items
    boolean isActiveList() -> isActiveList
    boolean isDefaultList() -> isDefaultList
    java.util.List getItems() -> getItems
    java.lang.String toString() -> toString
org.jivesoftware.smack.PrivacyListListener -> org.jivesoftware.smack.PrivacyListListener:
    void setPrivacyList(java.lang.String,java.util.List) -> setPrivacyList
    void updatedPrivacyList(java.lang.String) -> updatedPrivacyList
org.jivesoftware.smack.PrivacyListManager -> org.jivesoftware.smack.PrivacyListManager:
    java.util.Map instances -> instances
    java.lang.ref.WeakReference connection -> connection
    java.util.List listeners -> listeners
    org.jivesoftware.smack.filter.PacketFilter packetFilter -> packetFilter
    java.lang.String getUser() -> getUser
    org.jivesoftware.smack.PrivacyListManager getInstanceFor(org.jivesoftware.smack.Connection) -> getInstanceFor
    org.jivesoftware.smack.packet.Privacy getRequest(org.jivesoftware.smack.packet.Privacy) -> getRequest
    org.jivesoftware.smack.packet.Packet setRequest(org.jivesoftware.smack.packet.Privacy) -> setRequest
    org.jivesoftware.smack.packet.Privacy getPrivacyWithListNames() -> getPrivacyWithListNames
    org.jivesoftware.smack.PrivacyList getActiveList() -> getActiveList
    org.jivesoftware.smack.PrivacyList getDefaultList() -> getDefaultList
    java.util.List getPrivacyListItems(java.lang.String) -> getPrivacyListItems
    org.jivesoftware.smack.PrivacyList getPrivacyList(java.lang.String) -> getPrivacyList
    org.jivesoftware.smack.PrivacyList[] getPrivacyLists() -> getPrivacyLists
    void setActiveListName(java.lang.String) -> setActiveListName
    void declineActiveList() -> declineActiveList
    void setDefaultListName(java.lang.String) -> setDefaultListName
    void declineDefaultList() -> declineDefaultList
    void createPrivacyList(java.lang.String,java.util.List) -> createPrivacyList
    void updatePrivacyList(java.lang.String,java.util.List) -> updatePrivacyList
    void deletePrivacyList(java.lang.String) -> deletePrivacyList
    void addListener(org.jivesoftware.smack.PrivacyListListener) -> addListener
    java.util.List access$000(org.jivesoftware.smack.PrivacyListManager) -> access$000
org.jivesoftware.smack.PrivacyListManager$1 -> org.jivesoftware.smack.PrivacyListManager$1:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smack.PrivacyListManager$2 -> org.jivesoftware.smack.PrivacyListManager$2:
    org.jivesoftware.smack.Connection val$connection -> val$connection
    org.jivesoftware.smack.PrivacyListManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.PrivacyListManager$2$1 -> org.jivesoftware.smack.PrivacyListManager$2$1:
    org.jivesoftware.smack.PrivacyListManager$2 this$1 -> this$1
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.ReconnectionManager -> org.jivesoftware.smack.ReconnectionManager:
    java.lang.String TAG -> TAG
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smack.ReconnectionManager$ReconnectionThread reconnectionThread -> reconnectionThread
    int randomBase -> randomBase
    boolean done -> done
    boolean isReconnectionAllowed() -> isReconnectionAllowed
    void reconnect() -> reconnect
    void notifyReconnectionFailed(java.lang.Exception) -> notifyReconnectionFailed
    void notifyAttemptToReconnectIn(int) -> notifyAttemptToReconnectIn
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectingIn(int) -> reconnectingIn
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
    void reconnectionSuccessful() -> reconnectionSuccessful
    boolean isDone() -> isDone
    int access$100(org.jivesoftware.smack.ReconnectionManager) -> access$100
    org.jivesoftware.smack.Connection access$200(org.jivesoftware.smack.ReconnectionManager) -> access$200
org.jivesoftware.smack.ReconnectionManager$1 -> org.jivesoftware.smack.ReconnectionManager$1:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smack.ReconnectionManager$ReconnectionThread -> org.jivesoftware.smack.ReconnectionManager$ReconnectionThread:
    int attempts -> attempts
    org.jivesoftware.smack.ReconnectionManager this$0 -> this$0
    void resetAttempts() -> resetAttempts
    int timeDelay() -> timeDelay
    void run() -> run
org.jivesoftware.smack.Roster -> org.jivesoftware.smack.Roster:
    org.jivesoftware.smack.Roster$SubscriptionMode defaultSubscriptionMode -> defaultSubscriptionMode
    org.jivesoftware.smack.RosterStorage persistentStorage -> persistentStorage
    org.jivesoftware.smack.Connection connection -> connection
    java.util.Map groups -> groups
    java.util.Map entries -> entries
    java.util.List unfiledEntries -> unfiledEntries
    java.util.List rosterListeners -> rosterListeners
    java.util.Map presenceMap -> presenceMap
    boolean rosterInitialized -> rosterInitialized
    org.jivesoftware.smack.Roster$PresencePacketListener presencePacketListener -> presencePacketListener
    org.jivesoftware.smack.Roster$SubscriptionMode subscriptionMode -> subscriptionMode
    java.lang.String requestPacketId -> requestPacketId
    org.jivesoftware.smack.Roster$SubscriptionMode getDefaultSubscriptionMode() -> getDefaultSubscriptionMode
    void setDefaultSubscriptionMode(org.jivesoftware.smack.Roster$SubscriptionMode) -> setDefaultSubscriptionMode
    org.jivesoftware.smack.Roster$SubscriptionMode getSubscriptionMode() -> getSubscriptionMode
    void setSubscriptionMode(org.jivesoftware.smack.Roster$SubscriptionMode) -> setSubscriptionMode
    void reload() -> reload
    void addRosterListener(org.jivesoftware.smack.RosterListener) -> addRosterListener
    void removeRosterListener(org.jivesoftware.smack.RosterListener) -> removeRosterListener
    org.jivesoftware.smack.RosterGroup createGroup(java.lang.String) -> createGroup
    void createEntry(java.lang.String,java.lang.String,java.lang.String[]) -> createEntry
    void insertRosterItems(java.util.List) -> insertRosterItems
    void insertRosterItem(org.jivesoftware.smack.packet.RosterPacket$Item,java.util.Collection,java.util.Collection,java.util.Collection) -> insertRosterItem
    void removeEntry(org.jivesoftware.smack.RosterEntry) -> removeEntry
    int getEntryCount() -> getEntryCount
    java.util.Collection getEntries() -> getEntries
    int getUnfiledEntryCount() -> getUnfiledEntryCount
    java.util.Collection getUnfiledEntries() -> getUnfiledEntries
    org.jivesoftware.smack.RosterEntry getEntry(java.lang.String) -> getEntry
    boolean contains(java.lang.String) -> contains
    org.jivesoftware.smack.RosterGroup getGroup(java.lang.String) -> getGroup
    int getGroupCount() -> getGroupCount
    java.util.Collection getGroups() -> getGroups
    org.jivesoftware.smack.packet.Presence getPresence(java.lang.String) -> getPresence
    org.jivesoftware.smack.packet.Presence getPresenceResource(java.lang.String) -> getPresenceResource
    java.util.Iterator getPresences(java.lang.String) -> getPresences
    java.lang.String getPresenceMapKey(java.lang.String) -> getPresenceMapKey
    void setOfflinePresences() -> setOfflinePresences
    void fireRosterChangedEvent(java.util.Collection,java.util.Collection,java.util.Collection) -> fireRosterChangedEvent
    void fireRosterPresenceEvent(org.jivesoftware.smack.packet.Presence) -> fireRosterPresenceEvent
    void access$200(org.jivesoftware.smack.Roster) -> access$200
    org.jivesoftware.smack.Connection access$300(org.jivesoftware.smack.Roster) -> access$300
    java.lang.String access$400(org.jivesoftware.smack.Roster,java.lang.String) -> access$400
    java.util.Map access$500(org.jivesoftware.smack.Roster) -> access$500
    java.util.Map access$600(org.jivesoftware.smack.Roster) -> access$600
    void access$700(org.jivesoftware.smack.Roster,org.jivesoftware.smack.packet.Presence) -> access$700
    org.jivesoftware.smack.Roster$SubscriptionMode access$800(org.jivesoftware.smack.Roster) -> access$800
    org.jivesoftware.smack.RosterStorage access$900(org.jivesoftware.smack.Roster) -> access$900
    void access$1000(org.jivesoftware.smack.Roster,org.jivesoftware.smack.packet.RosterPacket$Item,java.util.Collection,java.util.Collection,java.util.Collection) -> access$1000
    void access$1100(org.jivesoftware.smack.Roster,java.util.Collection,java.util.Collection,java.util.Collection) -> access$1100
    org.jivesoftware.smack.RosterStorage access$902(org.jivesoftware.smack.Roster,org.jivesoftware.smack.RosterStorage) -> access$902
org.jivesoftware.smack.Roster$1 -> org.jivesoftware.smack.Roster$1:
    org.jivesoftware.smack.Roster this$0 -> this$0
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
org.jivesoftware.smack.Roster$2 -> org.jivesoftware.smack.Roster$2:
    org.jivesoftware.smack.ConnectionListener val$connectionListener -> val$connectionListener
    org.jivesoftware.smack.Roster this$0 -> this$0
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smack.Roster$PresencePacketListener -> org.jivesoftware.smack.Roster$PresencePacketListener:
    org.jivesoftware.smack.Roster this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.Roster$RosterPacketListener -> org.jivesoftware.smack.Roster$RosterPacketListener:
    org.jivesoftware.smack.Roster this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.Roster$RosterResultListener -> org.jivesoftware.smack.Roster$RosterResultListener:
    org.jivesoftware.smack.Roster this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.Roster$SubscriptionMode -> org.jivesoftware.smack.Roster$SubscriptionMode:
    org.jivesoftware.smack.Roster$SubscriptionMode accept_all -> accept_all
    org.jivesoftware.smack.Roster$SubscriptionMode reject_all -> reject_all
    org.jivesoftware.smack.Roster$SubscriptionMode manual -> manual
    org.jivesoftware.smack.Roster$SubscriptionMode[] $VALUES -> $VALUES
    org.jivesoftware.smack.Roster$SubscriptionMode[] values() -> values
    org.jivesoftware.smack.Roster$SubscriptionMode valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.RosterEntry -> org.jivesoftware.smack.RosterEntry:
    java.lang.String user -> user
    java.lang.String name -> name
    org.jivesoftware.smack.packet.RosterPacket$ItemType type -> type
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus status -> status
    org.jivesoftware.smack.Roster roster -> roster
    org.jivesoftware.smack.Connection connection -> connection
    java.lang.String getUser() -> getUser
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    void updateState(java.lang.String,org.jivesoftware.smack.packet.RosterPacket$ItemType,org.jivesoftware.smack.packet.RosterPacket$ItemStatus) -> updateState
    java.util.Collection getGroups() -> getGroups
    org.jivesoftware.smack.packet.RosterPacket$ItemType getType() -> getType
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus getStatus() -> getStatus
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean equalsDeep(java.lang.Object) -> equalsDeep
    org.jivesoftware.smack.packet.RosterPacket$Item toRosterItem(org.jivesoftware.smack.RosterEntry) -> toRosterItem
org.jivesoftware.smack.RosterGroup -> org.jivesoftware.smack.RosterGroup:
    java.lang.String name -> name
    org.jivesoftware.smack.Connection connection -> connection
    java.util.List entries -> entries
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    int getEntryCount() -> getEntryCount
    java.util.Collection getEntries() -> getEntries
    org.jivesoftware.smack.RosterEntry getEntry(java.lang.String) -> getEntry
    boolean contains(org.jivesoftware.smack.RosterEntry) -> contains
    boolean contains(java.lang.String) -> contains
    void addEntry(org.jivesoftware.smack.RosterEntry) -> addEntry
    void removeEntry(org.jivesoftware.smack.RosterEntry) -> removeEntry
    void addEntryLocal(org.jivesoftware.smack.RosterEntry) -> addEntryLocal
    void removeEntryLocal(org.jivesoftware.smack.RosterEntry) -> removeEntryLocal
org.jivesoftware.smack.RosterListener -> org.jivesoftware.smack.RosterListener:
    void entriesAdded(java.util.Collection) -> entriesAdded
    void entriesUpdated(java.util.Collection) -> entriesUpdated
    void entriesDeleted(java.util.Collection) -> entriesDeleted
    void presenceChanged(org.jivesoftware.smack.packet.Presence) -> presenceChanged
org.jivesoftware.smack.RosterStorage -> org.jivesoftware.smack.RosterStorage:
    java.util.List getEntries() -> getEntries
    org.jivesoftware.smack.packet.RosterPacket$Item getEntry(java.lang.String) -> getEntry
    int getEntryCount() -> getEntryCount
    java.lang.String getRosterVersion() -> getRosterVersion
    void addEntry(org.jivesoftware.smack.packet.RosterPacket$Item,java.lang.String) -> addEntry
    void removeEntry(java.lang.String,java.lang.String) -> removeEntry
    void updateLocalEntry(org.jivesoftware.smack.packet.RosterPacket$Item) -> updateLocalEntry
org.jivesoftware.smack.SASLAuthentication -> org.jivesoftware.smack.SASLAuthentication:
    long PACKET_TIMER_OUT_TIME -> PACKET_TIMER_OUT_TIME
    java.util.Map implementedMechanisms -> implementedMechanisms
    java.util.List mechanismsPreferences -> mechanismsPreferences
    org.jivesoftware.smack.Connection connection -> connection
    java.util.Collection serverMechanisms -> serverMechanisms
    org.jivesoftware.smack.sasl.SASLMechanism currentMechanism -> currentMechanism
    boolean saslNegotiated -> saslNegotiated
    boolean saslFailed -> saslFailed
    boolean resourceBinded -> resourceBinded
    boolean sessionSupported -> sessionSupported
    java.lang.String errorCondition -> errorCondition
    void registerSASLMechanism(java.lang.String,java.lang.Class) -> registerSASLMechanism
    void unregisterSASLMechanism(java.lang.String) -> unregisterSASLMechanism
    void supportSASLMechanism(java.lang.String) -> supportSASLMechanism
    void supportSASLMechanism(java.lang.String,int) -> supportSASLMechanism
    void unsupportSASLMechanism(java.lang.String) -> unsupportSASLMechanism
    java.util.List getRegisterSASLMechanisms() -> getRegisterSASLMechanisms
    boolean hasAnonymousAuthentication() -> hasAnonymousAuthentication
    boolean hasNonAnonymousAuthentication() -> hasNonAnonymousAuthentication
    java.lang.String authenticate(java.lang.String,java.lang.String,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> authenticate
    void throwExceptionIfConnectionDisconnected() -> throwExceptionIfConnectionDisconnected
    java.lang.String authenticate(java.lang.String,java.lang.String,java.lang.String) -> authenticate
    java.lang.String authenticateAnonymously() -> authenticateAnonymously
    java.lang.String bindResourceAndEstablishSession(java.lang.String) -> bindResourceAndEstablishSession
    void setAvailableSASLMethods(java.util.Collection) -> setAvailableSASLMethods
    boolean isAuthenticated() -> isAuthenticated
    void challengeReceived(java.lang.String) -> challengeReceived
    void authenticated() -> authenticated
    void authenticationFailed() -> authenticationFailed
    void authenticationFailed(java.lang.String) -> authenticationFailed
    void bindingRequired() -> bindingRequired
    void send(org.jivesoftware.smack.packet.Packet) -> send
    void sessionsSupported() -> sessionsSupported
    void init() -> init
org.jivesoftware.smack.ServerTrustManager -> org.jivesoftware.smack.ServerTrustManager:
    java.util.regex.Pattern cnPattern -> cnPattern
    org.jivesoftware.smack.ConnectionConfiguration configuration -> configuration
    java.lang.String server -> server
    java.security.KeyStore trustStore -> trustStore
    java.util.Map stores -> stores
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.util.List getPeerIdentity(java.security.cert.X509Certificate) -> getPeerIdentity
    java.util.List getSubjectAlternativeNames(java.security.cert.X509Certificate) -> getSubjectAlternativeNames
org.jivesoftware.smack.ServerTrustManager$KeyStoreOptions -> org.jivesoftware.smack.ServerTrustManager$KeyStoreOptions:
    java.lang.String type -> type
    java.lang.String path -> path
    java.lang.String password -> password
    java.lang.String getType() -> getType
    java.lang.String getPath() -> getPath
    java.lang.String getPassword() -> getPassword
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.jivesoftware.smack.SmackAndroid -> org.jivesoftware.smack.SmackAndroid:
    org.jivesoftware.smack.SmackAndroid sSmackAndroid -> sSmackAndroid
    android.content.BroadcastReceiver mConnectivityChangedReceiver -> mConnectivityChangedReceiver
    android.content.Context mCtx -> mCtx
    org.jivesoftware.smack.SmackAndroid init(android.content.Context) -> init
    void onDestroy() -> onDestroy
    void maybeRegisterReceiver() -> maybeRegisterReceiver
org.jivesoftware.smack.SmackAndroid$ConnectivtyChangedReceiver -> org.jivesoftware.smack.SmackAndroid$ConnectivtyChangedReceiver:
    org.jivesoftware.smack.SmackAndroid this$0 -> this$0
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.jivesoftware.smack.SmackConfiguration -> org.jivesoftware.smack.SmackConfiguration:
    java.lang.String SMACK_VERSION -> SMACK_VERSION
    int packetReplyTimeout -> packetReplyTimeout
    java.util.Vector defaultMechs -> defaultMechs
    boolean localSocks5ProxyEnabled -> localSocks5ProxyEnabled
    int localSocks5ProxyPort -> localSocks5ProxyPort
    int packetCollectorSize -> packetCollectorSize
    int defaultPingInterval -> defaultPingInterval
    org.jivesoftware.smack.parsing.ParsingExceptionCallback defaultCallback -> defaultCallback
    boolean autoEnableEntityCaps -> autoEnableEntityCaps
    java.lang.String getVersion() -> getVersion
    int getPacketReplyTimeout() -> getPacketReplyTimeout
    void setPacketReplyTimeout(int) -> setPacketReplyTimeout
    int getPacketCollectorSize() -> getPacketCollectorSize
    void setPacketCollectorSize(int) -> setPacketCollectorSize
    void addSaslMech(java.lang.String) -> addSaslMech
    void addSaslMechs(java.util.Collection) -> addSaslMechs
    void removeSaslMech(java.lang.String) -> removeSaslMech
    void removeSaslMechs(java.util.Collection) -> removeSaslMechs
    java.util.List getSaslMechs() -> getSaslMechs
    boolean isLocalSocks5ProxyEnabled() -> isLocalSocks5ProxyEnabled
    void setLocalSocks5ProxyEnabled(boolean) -> setLocalSocks5ProxyEnabled
    int getLocalSocks5ProxyPort() -> getLocalSocks5ProxyPort
    void setLocalSocks5ProxyPort(int) -> setLocalSocks5ProxyPort
    int getDefaultPingInterval() -> getDefaultPingInterval
    void setDefaultPingInterval(int) -> setDefaultPingInterval
    boolean autoEnableEntityCaps() -> autoEnableEntityCaps
    void setAutoEnableEntityCaps(boolean) -> setAutoEnableEntityCaps
    void setDefaultParsingExceptionCallback(org.jivesoftware.smack.parsing.ParsingExceptionCallback) -> setDefaultParsingExceptionCallback
    org.jivesoftware.smack.parsing.ParsingExceptionCallback getDefaultParsingExceptionCallback() -> getDefaultParsingExceptionCallback
    void parseClassToLoad(org.xmlpull.v1.XmlPullParser) -> parseClassToLoad
    int parseIntProperty(org.xmlpull.v1.XmlPullParser,int) -> parseIntProperty
    java.lang.ClassLoader[] getClassLoaders() -> getClassLoaders
org.jivesoftware.smack.UserAuthentication -> org.jivesoftware.smack.UserAuthentication:
    java.lang.String authenticate(java.lang.String,java.lang.String,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> authenticate
    java.lang.String authenticate(java.lang.String,java.lang.String,java.lang.String) -> authenticate
    java.lang.String authenticateAnonymously() -> authenticateAnonymously
org.jivesoftware.smack.XMPPConnection -> org.jivesoftware.smack.XMPPConnection:
    java.lang.String TAG -> TAG
    java.net.Socket socket -> socket
    java.lang.String connectionID -> connectionID
    java.lang.String user -> user
    boolean connected -> connected
    boolean socketClosed -> socketClosed
    boolean authenticated -> authenticated
    boolean wasAuthenticated -> wasAuthenticated
    boolean anonymous -> anonymous
    boolean usingTLS -> usingTLS
    org.jivesoftware.smack.parsing.ParsingExceptionCallback parsingExceptionCallback -> parsingExceptionCallback
    org.jivesoftware.smack.PacketWriter packetWriter -> packetWriter
    org.jivesoftware.smack.PacketReader packetReader -> packetReader
    org.jivesoftware.smack.Roster roster -> roster
    java.util.Collection compressionMethods -> compressionMethods
    boolean serverAckdCompression -> serverAckdCompression
    java.lang.Object mutex -> mutex
    java.lang.String getConnectionID() -> getConnectionID
    java.lang.String getUser() -> getUser
    void setParsingExceptionCallback(org.jivesoftware.smack.parsing.ParsingExceptionCallback) -> setParsingExceptionCallback
    org.jivesoftware.smack.parsing.ParsingExceptionCallback getParsingExceptionCallback() -> getParsingExceptionCallback
    void login(java.lang.String,java.lang.String,java.lang.String) -> login
    void loginAnonymously() -> loginAnonymously
    org.jivesoftware.smack.Roster getRosterWithoutLoad() -> getRosterWithoutLoad
    org.jivesoftware.smack.Roster getRoster() -> getRoster
    boolean isConnected() -> isConnected
    boolean isSecureConnection() -> isSecureConnection
    boolean isSocketClosed() -> isSocketClosed
    boolean isAuthenticated() -> isAuthenticated
    boolean isAnonymous() -> isAnonymous
    void release() -> release
    void shutdown(org.jivesoftware.smack.packet.Presence) -> shutdown
    void disconnect(org.jivesoftware.smack.packet.Presence) -> disconnect
    void sendPacket(org.jivesoftware.smack.packet.Packet) -> sendPacket
    void addPacketWriterInterceptor(org.jivesoftware.smack.PacketInterceptor,org.jivesoftware.smack.filter.PacketFilter) -> addPacketWriterInterceptor
    void removePacketWriterInterceptor(org.jivesoftware.smack.PacketInterceptor) -> removePacketWriterInterceptor
    void addPacketWriterListener(org.jivesoftware.smack.PacketListener,org.jivesoftware.smack.filter.PacketFilter) -> addPacketWriterListener
    void removePacketWriterListener(org.jivesoftware.smack.PacketListener) -> removePacketWriterListener
    void connectUsingConfiguration(org.jivesoftware.smack.ConnectionConfiguration) -> connectUsingConfiguration
    void initConnection() -> initConnection
    void initReaderAndWriter() -> initReaderAndWriter
    boolean isUsingTLS() -> isUsingTLS
    void startTLSReceived(boolean) -> startTLSReceived
    void proceedTLSReceived() -> proceedTLSReceived
    void setAvailableCompressionMethods(java.util.Collection) -> setAvailableCompressionMethods
    org.jivesoftware.smack.compression.XMPPInputOutputStream maybeGetCompressionHandler() -> maybeGetCompressionHandler
    boolean isUsingCompression() -> isUsingCompression
    boolean useCompression() -> useCompression
    void requestStreamCompression(java.lang.String) -> requestStreamCompression
    void startStreamCompression() -> startStreamCompression
    void streamCompressionDenied() -> streamCompressionDenied
    void connect() -> connect
    void setWasAuthenticated(boolean) -> setWasAuthenticated
    void setRosterStorage(org.jivesoftware.smack.RosterStorage) -> setRosterStorage
    void notifyConnectionError(java.lang.Exception) -> notifyConnectionError
    void notifyReconnection() -> notifyReconnection
    java.lang.String getIP() -> getIP
    void cancelAllWaiting() -> cancelAllWaiting
org.jivesoftware.smack.XMPPException -> org.jivesoftware.smack.XMPPException:
    org.jivesoftware.smack.packet.StreamError streamError -> streamError
    org.jivesoftware.smack.packet.XMPPError error -> error
    java.lang.Throwable wrappedThrowable -> wrappedThrowable
    org.jivesoftware.smack.packet.XMPPError getXMPPError() -> getXMPPError
    org.jivesoftware.smack.packet.StreamError getStreamError() -> getStreamError
    java.lang.Throwable getWrappedThrowable() -> getWrappedThrowable
    void printStackTrace() -> printStackTrace
    void printStackTrace(java.io.PrintStream) -> printStackTrace
    void printStackTrace(java.io.PrintWriter) -> printStackTrace
    java.lang.String getMessage() -> getMessage
    java.lang.String toString() -> toString
org.jivesoftware.smack.compression.Java7ZlibInputOutputStream -> org.jivesoftware.smack.compression.Java7ZlibInputOutputStream:
    java.lang.reflect.Method method -> method
    boolean supported -> supported
    int compressionLevel -> compressionLevel
    boolean isSupported() -> isSupported
    java.io.InputStream getInputStream(java.io.InputStream) -> getInputStream
    java.io.OutputStream getOutputStream(java.io.OutputStream) -> getOutputStream
    boolean access$000() -> access$000
    java.lang.reflect.Method access$100() -> access$100
org.jivesoftware.smack.compression.Java7ZlibInputOutputStream$1 -> org.jivesoftware.smack.compression.Java7ZlibInputOutputStream$1:
    org.jivesoftware.smack.compression.Java7ZlibInputOutputStream this$0 -> this$0
    int available() -> available
org.jivesoftware.smack.compression.Java7ZlibInputOutputStream$2 -> org.jivesoftware.smack.compression.Java7ZlibInputOutputStream$2:
    org.jivesoftware.smack.compression.Java7ZlibInputOutputStream this$0 -> this$0
    void flush() -> flush
org.jivesoftware.smack.compression.JzlibInputOutputStream -> org.jivesoftware.smack.compression.JzlibInputOutputStream:
    java.lang.Class zoClass -> zoClass
    java.lang.Class ziClass -> ziClass
    boolean isSupported() -> isSupported
    java.io.InputStream getInputStream(java.io.InputStream) -> getInputStream
    java.io.OutputStream getOutputStream(java.io.OutputStream) -> getOutputStream
org.jivesoftware.smack.compression.XMPPInputOutputStream -> org.jivesoftware.smack.compression.XMPPInputOutputStream:
    java.lang.String compressionMethod -> compressionMethod
    java.lang.String getCompressionMethod() -> getCompressionMethod
    boolean isSupported() -> isSupported
    java.io.InputStream getInputStream(java.io.InputStream) -> getInputStream
    java.io.OutputStream getOutputStream(java.io.OutputStream) -> getOutputStream
org.jivesoftware.smack.debugger.ConsoleDebugger -> org.jivesoftware.smack.debugger.ConsoleDebugger:
    boolean printInterpreted -> printInterpreted
    java.text.SimpleDateFormat dateFormatter -> dateFormatter
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smack.PacketListener listener -> listener
    org.jivesoftware.smack.ConnectionListener connListener -> connListener
    java.io.Writer writer -> writer
    java.io.Reader reader -> reader
    org.jivesoftware.smack.util.ReaderListener readerListener -> readerListener
    org.jivesoftware.smack.util.WriterListener writerListener -> writerListener
    void createDebug() -> createDebug
    java.io.Reader newConnectionReader(java.io.Reader) -> newConnectionReader
    java.io.Writer newConnectionWriter(java.io.Writer) -> newConnectionWriter
    void userHasLogged(java.lang.String) -> userHasLogged
    java.io.Reader getReader() -> getReader
    java.io.Writer getWriter() -> getWriter
    org.jivesoftware.smack.PacketListener getReaderListener() -> getReaderListener
    org.jivesoftware.smack.PacketListener getWriterListener() -> getWriterListener
    java.text.SimpleDateFormat access$000(org.jivesoftware.smack.debugger.ConsoleDebugger) -> access$000
    org.jivesoftware.smack.Connection access$100(org.jivesoftware.smack.debugger.ConsoleDebugger) -> access$100
org.jivesoftware.smack.debugger.ConsoleDebugger$1 -> org.jivesoftware.smack.debugger.ConsoleDebugger$1:
    org.jivesoftware.smack.debugger.ConsoleDebugger this$0 -> this$0
    void read(java.lang.String) -> read
org.jivesoftware.smack.debugger.ConsoleDebugger$2 -> org.jivesoftware.smack.debugger.ConsoleDebugger$2:
    org.jivesoftware.smack.debugger.ConsoleDebugger this$0 -> this$0
    void write(java.lang.String) -> write
org.jivesoftware.smack.debugger.ConsoleDebugger$3 -> org.jivesoftware.smack.debugger.ConsoleDebugger$3:
    org.jivesoftware.smack.debugger.ConsoleDebugger this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.debugger.ConsoleDebugger$4 -> org.jivesoftware.smack.debugger.ConsoleDebugger$4:
    org.jivesoftware.smack.debugger.ConsoleDebugger this$0 -> this$0
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
    void reconnectionSuccessful() -> reconnectionSuccessful
    void reconnectingIn(int) -> reconnectingIn
org.jivesoftware.smack.debugger.FileDebugger -> org.jivesoftware.smack.debugger.FileDebugger:
    boolean printInterpreted -> printInterpreted
    java.text.SimpleDateFormat dateFormatter -> dateFormatter
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smack.PacketListener listener -> listener
    org.jivesoftware.smack.ConnectionListener connListener -> connListener
    java.io.Writer writer -> writer
    java.io.Reader reader -> reader
    org.jivesoftware.smack.util.ReaderListener readerListener -> readerListener
    org.jivesoftware.smack.util.WriterListener writerListener -> writerListener
    java.lang.String TAG -> TAG
    void createDebug() -> createDebug
    java.io.Reader newConnectionReader(java.io.Reader) -> newConnectionReader
    java.io.Writer newConnectionWriter(java.io.Writer) -> newConnectionWriter
    void userHasLogged(java.lang.String) -> userHasLogged
    java.io.Reader getReader() -> getReader
    java.io.Writer getWriter() -> getWriter
    org.jivesoftware.smack.PacketListener getReaderListener() -> getReaderListener
    org.jivesoftware.smack.PacketListener getWriterListener() -> getWriterListener
    org.jivesoftware.smack.Connection access$000(org.jivesoftware.smack.debugger.FileDebugger) -> access$000
org.jivesoftware.smack.debugger.FileDebugger$1 -> org.jivesoftware.smack.debugger.FileDebugger$1:
    org.jivesoftware.smack.debugger.FileDebugger this$0 -> this$0
    void read(java.lang.String) -> read
org.jivesoftware.smack.debugger.FileDebugger$2 -> org.jivesoftware.smack.debugger.FileDebugger$2:
    org.jivesoftware.smack.debugger.FileDebugger this$0 -> this$0
    void write(java.lang.String) -> write
org.jivesoftware.smack.debugger.FileDebugger$3 -> org.jivesoftware.smack.debugger.FileDebugger$3:
    org.jivesoftware.smack.debugger.FileDebugger this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smack.debugger.FileDebugger$4 -> org.jivesoftware.smack.debugger.FileDebugger$4:
    org.jivesoftware.smack.debugger.FileDebugger this$0 -> this$0
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
    void reconnectionSuccessful() -> reconnectionSuccessful
    void reconnectingIn(int) -> reconnectingIn
org.jivesoftware.smack.debugger.SmackDebugger -> org.jivesoftware.smack.debugger.SmackDebugger:
    void userHasLogged(java.lang.String) -> userHasLogged
    java.io.Reader getReader() -> getReader
    java.io.Writer getWriter() -> getWriter
    java.io.Reader newConnectionReader(java.io.Reader) -> newConnectionReader
    java.io.Writer newConnectionWriter(java.io.Writer) -> newConnectionWriter
    org.jivesoftware.smack.PacketListener getReaderListener() -> getReaderListener
    org.jivesoftware.smack.PacketListener getWriterListener() -> getWriterListener
org.jivesoftware.smack.filter.AndFilter -> org.jivesoftware.smack.filter.AndFilter:
    java.util.List filters -> filters
    void addFilter(org.jivesoftware.smack.filter.PacketFilter) -> addFilter
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
    java.lang.String toString() -> toString
org.jivesoftware.smack.filter.FromContainsFilter -> org.jivesoftware.smack.filter.FromContainsFilter:
    java.lang.String from -> from
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.filter.FromMatchesFilter -> org.jivesoftware.smack.filter.FromMatchesFilter:
    java.lang.String address -> address
    boolean matchBareJID -> matchBareJID
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
    java.lang.String toString() -> toString
org.jivesoftware.smack.filter.IQTypeFilter -> org.jivesoftware.smack.filter.IQTypeFilter:
    org.jivesoftware.smack.packet.IQ$Type type -> type
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.filter.MessageTypeFilter -> org.jivesoftware.smack.filter.MessageTypeFilter:
    org.jivesoftware.smack.packet.Message$Type type -> type
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.filter.NotFilter -> org.jivesoftware.smack.filter.NotFilter:
    org.jivesoftware.smack.filter.PacketFilter filter -> filter
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.filter.OrFilter -> org.jivesoftware.smack.filter.OrFilter:
    int size -> size
    org.jivesoftware.smack.filter.PacketFilter[] filters -> filters
    void addFilter(org.jivesoftware.smack.filter.PacketFilter) -> addFilter
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
    java.lang.String toString() -> toString
org.jivesoftware.smack.filter.PacketExtensionFilter -> org.jivesoftware.smack.filter.PacketExtensionFilter:
    java.lang.String elementName -> elementName
    java.lang.String namespace -> namespace
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.filter.PacketFilter -> org.jivesoftware.smack.filter.PacketFilter:
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.filter.PacketIDFilter -> org.jivesoftware.smack.filter.PacketIDFilter:
    java.lang.String packetID -> packetID
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
    java.lang.String toString() -> toString
org.jivesoftware.smack.filter.PacketTypeFilter -> org.jivesoftware.smack.filter.PacketTypeFilter:
    java.lang.Class packetType -> packetType
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
    java.lang.String toString() -> toString
org.jivesoftware.smack.filter.ThreadFilter -> org.jivesoftware.smack.filter.ThreadFilter:
    java.lang.String thread -> thread
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.filter.ToContainsFilter -> org.jivesoftware.smack.filter.ToContainsFilter:
    java.lang.String to -> to
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smack.packet.Authentication -> org.jivesoftware.smack.packet.Authentication:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String digest -> digest
    java.lang.String resource -> resource
    java.lang.String getUsername() -> getUsername
    void setUsername(java.lang.String) -> setUsername
    java.lang.String getPassword() -> getPassword
    void setPassword(java.lang.String) -> setPassword
    java.lang.String getDigest() -> getDigest
    void setDigest(java.lang.String,java.lang.String) -> setDigest
    void setDigest(java.lang.String) -> setDigest
    java.lang.String getResource() -> getResource
    void setResource(java.lang.String) -> setResource
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.packet.Bind -> org.jivesoftware.smack.packet.Bind:
    java.lang.String resource -> resource
    java.lang.String jid -> jid
    java.lang.String getResource() -> getResource
    void setResource(java.lang.String) -> setResource
    java.lang.String getJid() -> getJid
    void setJid(java.lang.String) -> setJid
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.packet.DefaultPacketExtension -> org.jivesoftware.smack.packet.DefaultPacketExtension:
    java.lang.String elementName -> elementName
    java.lang.String namespace -> namespace
    java.util.Map map -> map
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
    java.util.Collection getNames() -> getNames
    java.lang.String getValue(java.lang.String) -> getValue
    void setValue(java.lang.String,java.lang.String) -> setValue
org.jivesoftware.smack.packet.IQ -> org.jivesoftware.smack.packet.IQ:
    org.jivesoftware.smack.packet.IQ$Type type -> type
    org.jivesoftware.smack.packet.IQ$Type getType() -> getType
    void setType(org.jivesoftware.smack.packet.IQ$Type) -> setType
    java.lang.String toXML() -> toXML
    java.lang.String getChildElementXML() -> getChildElementXML
    org.jivesoftware.smack.packet.IQ createResultIQ(org.jivesoftware.smack.packet.IQ) -> createResultIQ
    org.jivesoftware.smack.packet.IQ createErrorResponse(org.jivesoftware.smack.packet.IQ,org.jivesoftware.smack.packet.XMPPError) -> createErrorResponse
org.jivesoftware.smack.packet.IQ$1 -> org.jivesoftware.smack.packet.IQ$1:
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.packet.IQ$2 -> org.jivesoftware.smack.packet.IQ$2:
    org.jivesoftware.smack.packet.IQ val$request -> val$request
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.packet.IQ$Type -> org.jivesoftware.smack.packet.IQ$Type:
    org.jivesoftware.smack.packet.IQ$Type GET -> GET
    org.jivesoftware.smack.packet.IQ$Type SET -> SET
    org.jivesoftware.smack.packet.IQ$Type RESULT -> RESULT
    org.jivesoftware.smack.packet.IQ$Type ERROR -> ERROR
    java.lang.String value -> value
    org.jivesoftware.smack.packet.IQ$Type fromString(java.lang.String) -> fromString
    java.lang.String toString() -> toString
org.jivesoftware.smack.packet.Message -> org.jivesoftware.smack.packet.Message:
    org.jivesoftware.smack.packet.Message$Type type -> type
    java.lang.String thread -> thread
    java.lang.String language -> language
    java.util.Set subjects -> subjects
    java.util.Set bodies -> bodies
    org.jivesoftware.smack.packet.Message$Type getType() -> getType
    void setType(org.jivesoftware.smack.packet.Message$Type) -> setType
    java.lang.String getSubject() -> getSubject
    java.lang.String getSubject(java.lang.String) -> getSubject
    org.jivesoftware.smack.packet.Message$Subject getMessageSubject(java.lang.String) -> getMessageSubject
    java.util.Collection getSubjects() -> getSubjects
    void setSubject(java.lang.String) -> setSubject
    org.jivesoftware.smack.packet.Message$Subject addSubject(java.lang.String,java.lang.String) -> addSubject
    boolean removeSubject(java.lang.String) -> removeSubject
    boolean removeSubject(org.jivesoftware.smack.packet.Message$Subject) -> removeSubject
    java.util.Collection getSubjectLanguages() -> getSubjectLanguages
    java.lang.String getBody() -> getBody
    java.lang.String getBody(java.lang.String) -> getBody
    org.jivesoftware.smack.packet.Message$Body getMessageBody(java.lang.String) -> getMessageBody
    java.util.Collection getBodies() -> getBodies
    void setBody(java.lang.String) -> setBody
    org.jivesoftware.smack.packet.Message$Body addBody(java.lang.String,java.lang.String) -> addBody
    boolean removeBody(java.lang.String) -> removeBody
    boolean removeBody(org.jivesoftware.smack.packet.Message$Body) -> removeBody
    java.util.Collection getBodyLanguages() -> getBodyLanguages
    java.lang.String getThread() -> getThread
    void setThread(java.lang.String) -> setThread
    java.lang.String getLanguage() -> getLanguage
    void setLanguage(java.lang.String) -> setLanguage
    java.lang.String determineLanguage(java.lang.String) -> determineLanguage
    java.lang.String toXML() -> toXML
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.jivesoftware.smack.packet.Message$1 -> org.jivesoftware.smack.packet.Message$1:
org.jivesoftware.smack.packet.Message$Body -> org.jivesoftware.smack.packet.Message$Body:
    java.lang.String message -> message
    java.lang.String language -> language
    java.lang.String getLanguage() -> getLanguage
    java.lang.String getMessage() -> getMessage
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String access$300(org.jivesoftware.smack.packet.Message$Body) -> access$300
    java.lang.String access$400(org.jivesoftware.smack.packet.Message$Body) -> access$400
org.jivesoftware.smack.packet.Message$Subject -> org.jivesoftware.smack.packet.Message$Subject:
    java.lang.String subject -> subject
    java.lang.String language -> language
    java.lang.String getLanguage() -> getLanguage
    java.lang.String getSubject() -> getSubject
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String access$000(org.jivesoftware.smack.packet.Message$Subject) -> access$000
    java.lang.String access$100(org.jivesoftware.smack.packet.Message$Subject) -> access$100
org.jivesoftware.smack.packet.Message$Type -> org.jivesoftware.smack.packet.Message$Type:
    org.jivesoftware.smack.packet.Message$Type normal -> normal
    org.jivesoftware.smack.packet.Message$Type chat -> chat
    org.jivesoftware.smack.packet.Message$Type groupchat -> groupchat
    org.jivesoftware.smack.packet.Message$Type headline -> headline
    org.jivesoftware.smack.packet.Message$Type error -> error
    org.jivesoftware.smack.packet.Message$Type[] $VALUES -> $VALUES
    org.jivesoftware.smack.packet.Message$Type[] values() -> values
    org.jivesoftware.smack.packet.Message$Type valueOf(java.lang.String) -> valueOf
    org.jivesoftware.smack.packet.Message$Type fromString(java.lang.String) -> fromString
org.jivesoftware.smack.packet.Packet -> org.jivesoftware.smack.packet.Packet:
    java.lang.String DEFAULT_LANGUAGE -> DEFAULT_LANGUAGE
    java.lang.String DEFAULT_XML_NS -> DEFAULT_XML_NS
    java.lang.String ID_NOT_AVAILABLE -> ID_NOT_AVAILABLE
    java.text.DateFormat XEP_0082_UTC_FORMAT -> XEP_0082_UTC_FORMAT
    java.lang.String prefix -> prefix
    long id -> id
    java.lang.String xmlns -> xmlns
    java.lang.String packetID -> packetID
    java.lang.String to -> to
    java.lang.String from -> from
    java.util.List packetExtensions -> packetExtensions
    java.util.Map properties -> properties
    org.jivesoftware.smack.packet.XMPPError error -> error
    java.lang.String nextID() -> nextID
    void setDefaultXmlns(java.lang.String) -> setDefaultXmlns
    java.lang.String getPacketID() -> getPacketID
    void setPacketID(java.lang.String) -> setPacketID
    java.lang.String getTo() -> getTo
    void setTo(java.lang.String) -> setTo
    java.lang.String getFrom() -> getFrom
    void setFrom(java.lang.String) -> setFrom
    org.jivesoftware.smack.packet.XMPPError getError() -> getError
    void setError(org.jivesoftware.smack.packet.XMPPError) -> setError
    java.util.Collection getExtensions() -> getExtensions
    org.jivesoftware.smack.packet.PacketExtension getExtension(java.lang.String) -> getExtension
    org.jivesoftware.smack.packet.PacketExtension getExtension(java.lang.String,java.lang.String) -> getExtension
    void addExtension(org.jivesoftware.smack.packet.PacketExtension) -> addExtension
    void addExtensions(java.util.Collection) -> addExtensions
    void removeExtension(org.jivesoftware.smack.packet.PacketExtension) -> removeExtension
    java.lang.Object getProperty(java.lang.String) -> getProperty
    void setProperty(java.lang.String,java.lang.Object) -> setProperty
    void deleteProperty(java.lang.String) -> deleteProperty
    java.util.Collection getPropertyNames() -> getPropertyNames
    java.lang.String toXML() -> toXML
    java.lang.String getExtensionsXML() -> getExtensionsXML
    java.lang.String getXmlns() -> getXmlns
    java.lang.String getDefaultLanguage() -> getDefaultLanguage
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.jivesoftware.smack.packet.PacketExtension -> org.jivesoftware.smack.packet.PacketExtension:
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smack.packet.Presence -> org.jivesoftware.smack.packet.Presence:
    org.jivesoftware.smack.packet.Presence$Type type -> type
    java.lang.String status -> status
    int priority -> priority
    org.jivesoftware.smack.packet.Presence$Mode mode -> mode
    java.lang.String language -> language
    boolean isAvailable() -> isAvailable
    boolean isAway() -> isAway
    org.jivesoftware.smack.packet.Presence$Type getType() -> getType
    void setType(org.jivesoftware.smack.packet.Presence$Type) -> setType
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> setStatus
    int getPriority() -> getPriority
    void setPriority(int) -> setPriority
    org.jivesoftware.smack.packet.Presence$Mode getMode() -> getMode
    void setMode(org.jivesoftware.smack.packet.Presence$Mode) -> setMode
    java.lang.String getLanguage() -> getLanguage
    void setLanguage(java.lang.String) -> setLanguage
    java.lang.String toXML() -> toXML
    java.lang.String toString() -> toString
org.jivesoftware.smack.packet.Presence$Mode -> org.jivesoftware.smack.packet.Presence$Mode:
    org.jivesoftware.smack.packet.Presence$Mode chat -> chat
    org.jivesoftware.smack.packet.Presence$Mode available -> available
    org.jivesoftware.smack.packet.Presence$Mode away -> away
    org.jivesoftware.smack.packet.Presence$Mode xa -> xa
    org.jivesoftware.smack.packet.Presence$Mode dnd -> dnd
    org.jivesoftware.smack.packet.Presence$Mode[] $VALUES -> $VALUES
    org.jivesoftware.smack.packet.Presence$Mode[] values() -> values
    org.jivesoftware.smack.packet.Presence$Mode valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.packet.Presence$Type -> org.jivesoftware.smack.packet.Presence$Type:
    org.jivesoftware.smack.packet.Presence$Type available -> available
    org.jivesoftware.smack.packet.Presence$Type unavailable -> unavailable
    org.jivesoftware.smack.packet.Presence$Type subscribe -> subscribe
    org.jivesoftware.smack.packet.Presence$Type subscribed -> subscribed
    org.jivesoftware.smack.packet.Presence$Type unsubscribe -> unsubscribe
    org.jivesoftware.smack.packet.Presence$Type unsubscribed -> unsubscribed
    org.jivesoftware.smack.packet.Presence$Type error -> error
    org.jivesoftware.smack.packet.Presence$Type[] $VALUES -> $VALUES
    org.jivesoftware.smack.packet.Presence$Type[] values() -> values
    org.jivesoftware.smack.packet.Presence$Type valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.packet.Privacy -> org.jivesoftware.smack.packet.Privacy:
    boolean declineActiveList -> declineActiveList
    java.lang.String activeName -> activeName
    boolean declineDefaultList -> declineDefaultList
    java.lang.String defaultName -> defaultName
    java.util.Map itemLists -> itemLists
    java.util.List setPrivacyList(java.lang.String,java.util.List) -> setPrivacyList
    java.util.List setActivePrivacyList() -> setActivePrivacyList
    void deletePrivacyList(java.lang.String) -> deletePrivacyList
    java.util.List getActivePrivacyList() -> getActivePrivacyList
    java.util.List getDefaultPrivacyList() -> getDefaultPrivacyList
    java.util.List getPrivacyList(java.lang.String) -> getPrivacyList
    org.jivesoftware.smack.packet.PrivacyItem getItem(java.lang.String,int) -> getItem
    boolean changeDefaultList(java.lang.String) -> changeDefaultList
    void deleteList(java.lang.String) -> deleteList
    java.lang.String getActiveName() -> getActiveName
    void setActiveName(java.lang.String) -> setActiveName
    java.lang.String getDefaultName() -> getDefaultName
    void setDefaultName(java.lang.String) -> setDefaultName
    java.util.Map getItemLists() -> getItemLists
    boolean isDeclineActiveList() -> isDeclineActiveList
    void setDeclineActiveList(boolean) -> setDeclineActiveList
    boolean isDeclineDefaultList() -> isDeclineDefaultList
    void setDeclineDefaultList(boolean) -> setDeclineDefaultList
    java.util.Set getPrivacyListNames() -> getPrivacyListNames
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.packet.PrivacyItem -> org.jivesoftware.smack.packet.PrivacyItem:
    boolean allow -> allow
    int order -> order
    org.jivesoftware.smack.packet.PrivacyItem$PrivacyRule rule -> rule
    boolean filterIQ -> filterIQ
    boolean filterMessage -> filterMessage
    boolean filterPresence_in -> filterPresence_in
    boolean filterPresence_out -> filterPresence_out
    boolean isAllow() -> isAllow
    void setAllow(boolean) -> setAllow
    boolean isFilterIQ() -> isFilterIQ
    void setFilterIQ(boolean) -> setFilterIQ
    boolean isFilterMessage() -> isFilterMessage
    void setFilterMessage(boolean) -> setFilterMessage
    boolean isFilterPresence_in() -> isFilterPresence_in
    void setFilterPresence_in(boolean) -> setFilterPresence_in
    boolean isFilterPresence_out() -> isFilterPresence_out
    void setFilterPresence_out(boolean) -> setFilterPresence_out
    int getOrder() -> getOrder
    void setOrder(int) -> setOrder
    void setValue(java.lang.String) -> setValue
    org.jivesoftware.smack.packet.PrivacyItem$Type getType() -> getType
    java.lang.String getValue() -> getValue
    boolean isFilterEverything() -> isFilterEverything
    org.jivesoftware.smack.packet.PrivacyItem$PrivacyRule getRule() -> getRule
    void setRule(org.jivesoftware.smack.packet.PrivacyItem$PrivacyRule) -> setRule
    java.lang.String toXML() -> toXML
org.jivesoftware.smack.packet.PrivacyItem$PrivacyRule -> org.jivesoftware.smack.packet.PrivacyItem$PrivacyRule:
    org.jivesoftware.smack.packet.PrivacyItem$Type type -> type
    java.lang.String value -> value
    java.lang.String SUBSCRIPTION_BOTH -> SUBSCRIPTION_BOTH
    java.lang.String SUBSCRIPTION_TO -> SUBSCRIPTION_TO
    java.lang.String SUBSCRIPTION_FROM -> SUBSCRIPTION_FROM
    java.lang.String SUBSCRIPTION_NONE -> SUBSCRIPTION_NONE
    org.jivesoftware.smack.packet.PrivacyItem$PrivacyRule fromString(java.lang.String) -> fromString
    org.jivesoftware.smack.packet.PrivacyItem$Type getType() -> getType
    void setType(org.jivesoftware.smack.packet.PrivacyItem$Type) -> setType
    java.lang.String getValue() -> getValue
    void setValue(java.lang.String) -> setValue
    void setSuscriptionValue(java.lang.String) -> setSuscriptionValue
    boolean isSuscription() -> isSuscription
org.jivesoftware.smack.packet.PrivacyItem$Type -> org.jivesoftware.smack.packet.PrivacyItem$Type:
    org.jivesoftware.smack.packet.PrivacyItem$Type group -> group
    org.jivesoftware.smack.packet.PrivacyItem$Type jid -> jid
    org.jivesoftware.smack.packet.PrivacyItem$Type subscription -> subscription
    org.jivesoftware.smack.packet.PrivacyItem$Type[] $VALUES -> $VALUES
    org.jivesoftware.smack.packet.PrivacyItem$Type[] values() -> values
    org.jivesoftware.smack.packet.PrivacyItem$Type valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.packet.Registration -> org.jivesoftware.smack.packet.Registration:
    java.lang.String instructions -> instructions
    java.util.Map attributes -> attributes
    java.util.List requiredFields -> requiredFields
    boolean registered -> registered
    boolean remove -> remove
    java.lang.String getInstructions() -> getInstructions
    void setInstructions(java.lang.String) -> setInstructions
    java.util.Map getAttributes() -> getAttributes
    void setAttributes(java.util.Map) -> setAttributes
    java.util.List getRequiredFields() -> getRequiredFields
    void addAttribute(java.lang.String,java.lang.String) -> addAttribute
    void setRegistered(boolean) -> setRegistered
    boolean isRegistered() -> isRegistered
    java.lang.String getField(java.lang.String) -> getField
    java.util.List getFieldNames() -> getFieldNames
    void setUsername(java.lang.String) -> setUsername
    void setPassword(java.lang.String) -> setPassword
    void setRemove(boolean) -> setRemove
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.packet.RosterPacket -> org.jivesoftware.smack.packet.RosterPacket:
    java.util.List rosterItems -> rosterItems
    java.lang.String version -> version
    void addRosterItem(org.jivesoftware.smack.packet.RosterPacket$Item) -> addRosterItem
    java.lang.String getVersion() -> getVersion
    void setVersion(java.lang.String) -> setVersion
    int getRosterItemCount() -> getRosterItemCount
    java.util.Collection getRosterItems() -> getRosterItems
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.packet.RosterPacket$Item -> org.jivesoftware.smack.packet.RosterPacket$Item:
    java.lang.String user -> user
    java.lang.String name -> name
    org.jivesoftware.smack.packet.RosterPacket$ItemType itemType -> itemType
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus itemStatus -> itemStatus
    java.util.Set groupNames -> groupNames
    java.lang.String getUser() -> getUser
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    org.jivesoftware.smack.packet.RosterPacket$ItemType getItemType() -> getItemType
    void setItemType(org.jivesoftware.smack.packet.RosterPacket$ItemType) -> setItemType
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus getItemStatus() -> getItemStatus
    void setItemStatus(org.jivesoftware.smack.packet.RosterPacket$ItemStatus) -> setItemStatus
    java.util.Set getGroupNames() -> getGroupNames
    void addGroupName(java.lang.String) -> addGroupName
    void removeGroupName(java.lang.String) -> removeGroupName
    java.lang.String toXML() -> toXML
org.jivesoftware.smack.packet.RosterPacket$ItemStatus -> org.jivesoftware.smack.packet.RosterPacket$ItemStatus:
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus SUBSCRIPTION_PENDING -> SUBSCRIPTION_PENDING
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus UNSUBSCRIPTION_PENDING -> UNSUBSCRIPTION_PENDING
    java.lang.String value -> value
    org.jivesoftware.smack.packet.RosterPacket$ItemStatus fromString(java.lang.String) -> fromString
    java.lang.String toString() -> toString
org.jivesoftware.smack.packet.RosterPacket$ItemType -> org.jivesoftware.smack.packet.RosterPacket$ItemType:
    org.jivesoftware.smack.packet.RosterPacket$ItemType none -> none
    org.jivesoftware.smack.packet.RosterPacket$ItemType to -> to
    org.jivesoftware.smack.packet.RosterPacket$ItemType from -> from
    org.jivesoftware.smack.packet.RosterPacket$ItemType both -> both
    org.jivesoftware.smack.packet.RosterPacket$ItemType remove -> remove
    org.jivesoftware.smack.packet.RosterPacket$ItemType[] $VALUES -> $VALUES
    org.jivesoftware.smack.packet.RosterPacket$ItemType[] values() -> values
    org.jivesoftware.smack.packet.RosterPacket$ItemType valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.packet.Session -> org.jivesoftware.smack.packet.Session:
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.packet.StreamError -> org.jivesoftware.smack.packet.StreamError:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String code -> code
    java.lang.String text -> text
    java.lang.String getCode() -> getCode
    java.lang.String getText() -> getText
    java.lang.String toString() -> toString
org.jivesoftware.smack.packet.XMPPError -> org.jivesoftware.smack.packet.XMPPError:
    int code -> code
    org.jivesoftware.smack.packet.XMPPError$Type type -> type
    java.lang.String condition -> condition
    java.lang.String message -> message
    java.util.List applicationExtensions -> applicationExtensions
    void init(org.jivesoftware.smack.packet.XMPPError$Condition) -> init
    java.lang.String getCondition() -> getCondition
    org.jivesoftware.smack.packet.XMPPError$Type getType() -> getType
    int getCode() -> getCode
    java.lang.String getMessage() -> getMessage
    java.lang.String toXML() -> toXML
    java.lang.String toString() -> toString
    java.util.List getExtensions() -> getExtensions
    org.jivesoftware.smack.packet.PacketExtension getExtension(java.lang.String,java.lang.String) -> getExtension
    void addExtension(org.jivesoftware.smack.packet.PacketExtension) -> addExtension
    void setExtension(java.util.List) -> setExtension
org.jivesoftware.smack.packet.XMPPError$Condition -> org.jivesoftware.smack.packet.XMPPError$Condition:
    org.jivesoftware.smack.packet.XMPPError$Condition interna_server_error -> interna_server_error
    org.jivesoftware.smack.packet.XMPPError$Condition forbidden -> forbidden
    org.jivesoftware.smack.packet.XMPPError$Condition bad_request -> bad_request
    org.jivesoftware.smack.packet.XMPPError$Condition conflict -> conflict
    org.jivesoftware.smack.packet.XMPPError$Condition feature_not_implemented -> feature_not_implemented
    org.jivesoftware.smack.packet.XMPPError$Condition gone -> gone
    org.jivesoftware.smack.packet.XMPPError$Condition item_not_found -> item_not_found
    org.jivesoftware.smack.packet.XMPPError$Condition jid_malformed -> jid_malformed
    org.jivesoftware.smack.packet.XMPPError$Condition no_acceptable -> no_acceptable
    org.jivesoftware.smack.packet.XMPPError$Condition not_allowed -> not_allowed
    org.jivesoftware.smack.packet.XMPPError$Condition not_authorized -> not_authorized
    org.jivesoftware.smack.packet.XMPPError$Condition payment_required -> payment_required
    org.jivesoftware.smack.packet.XMPPError$Condition recipient_unavailable -> recipient_unavailable
    org.jivesoftware.smack.packet.XMPPError$Condition redirect -> redirect
    org.jivesoftware.smack.packet.XMPPError$Condition registration_required -> registration_required
    org.jivesoftware.smack.packet.XMPPError$Condition remote_server_error -> remote_server_error
    org.jivesoftware.smack.packet.XMPPError$Condition remote_server_not_found -> remote_server_not_found
    org.jivesoftware.smack.packet.XMPPError$Condition remote_server_timeout -> remote_server_timeout
    org.jivesoftware.smack.packet.XMPPError$Condition resource_constraint -> resource_constraint
    org.jivesoftware.smack.packet.XMPPError$Condition service_unavailable -> service_unavailable
    org.jivesoftware.smack.packet.XMPPError$Condition subscription_required -> subscription_required
    org.jivesoftware.smack.packet.XMPPError$Condition undefined_condition -> undefined_condition
    org.jivesoftware.smack.packet.XMPPError$Condition unexpected_request -> unexpected_request
    org.jivesoftware.smack.packet.XMPPError$Condition request_timeout -> request_timeout
    java.lang.String value -> value
    java.lang.String toString() -> toString
    java.lang.String access$000(org.jivesoftware.smack.packet.XMPPError$Condition) -> access$000
org.jivesoftware.smack.packet.XMPPError$ErrorSpecification -> org.jivesoftware.smack.packet.XMPPError$ErrorSpecification:
    int code -> code
    org.jivesoftware.smack.packet.XMPPError$Type type -> type
    org.jivesoftware.smack.packet.XMPPError$Condition condition -> condition
    java.util.Map instances -> instances
    java.util.Map errorSpecifications() -> errorSpecifications
    org.jivesoftware.smack.packet.XMPPError$ErrorSpecification specFor(org.jivesoftware.smack.packet.XMPPError$Condition) -> specFor
    org.jivesoftware.smack.packet.XMPPError$Condition getCondition() -> getCondition
    org.jivesoftware.smack.packet.XMPPError$Type getType() -> getType
    int getCode() -> getCode
org.jivesoftware.smack.packet.XMPPError$Type -> org.jivesoftware.smack.packet.XMPPError$Type:
    org.jivesoftware.smack.packet.XMPPError$Type WAIT -> WAIT
    org.jivesoftware.smack.packet.XMPPError$Type CANCEL -> CANCEL
    org.jivesoftware.smack.packet.XMPPError$Type MODIFY -> MODIFY
    org.jivesoftware.smack.packet.XMPPError$Type AUTH -> AUTH
    org.jivesoftware.smack.packet.XMPPError$Type CONTINUE -> CONTINUE
    org.jivesoftware.smack.packet.XMPPError$Type[] $VALUES -> $VALUES
    org.jivesoftware.smack.packet.XMPPError$Type[] values() -> values
    org.jivesoftware.smack.packet.XMPPError$Type valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.parsing.ExceptionLoggingCallback -> org.jivesoftware.smack.parsing.ExceptionLoggingCallback:
    void handleUnparsablePacket(org.jivesoftware.smack.parsing.UnparsablePacket) -> handleUnparsablePacket
org.jivesoftware.smack.parsing.ExceptionThrowingCallback -> org.jivesoftware.smack.parsing.ExceptionThrowingCallback:
    void handleUnparsablePacket(org.jivesoftware.smack.parsing.UnparsablePacket) -> handleUnparsablePacket
org.jivesoftware.smack.parsing.ParsingExceptionCallback -> org.jivesoftware.smack.parsing.ParsingExceptionCallback:
    void handleUnparsablePacket(org.jivesoftware.smack.parsing.UnparsablePacket) -> handleUnparsablePacket
org.jivesoftware.smack.parsing.UnparsablePacket -> org.jivesoftware.smack.parsing.UnparsablePacket:
    java.lang.String content -> content
    java.lang.Exception e -> e
    java.lang.Exception getParsingException() -> getParsingException
    java.lang.String getContent() -> getContent
org.jivesoftware.smack.provider.EmbeddedExtensionProvider -> org.jivesoftware.smack.provider.EmbeddedExtensionProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smack.provider.IQProvider -> org.jivesoftware.smack.provider.IQProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smack.provider.PacketExtensionProvider -> org.jivesoftware.smack.provider.PacketExtensionProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smack.provider.PrivacyProvider -> org.jivesoftware.smack.provider.PrivacyProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    void parseList(org.xmlpull.v1.XmlPullParser,org.jivesoftware.smack.packet.Privacy) -> parseList
    org.jivesoftware.smack.packet.PrivacyItem parseItem(org.xmlpull.v1.XmlPullParser) -> parseItem
org.jivesoftware.smack.provider.ProviderManager -> org.jivesoftware.smack.provider.ProviderManager:
    org.jivesoftware.smack.provider.ProviderManager instance -> instance
    java.util.Map extensionProviders -> extensionProviders
    java.util.Map iqProviders -> iqProviders
    org.jivesoftware.smack.provider.ProviderManager getInstance() -> getInstance
    void setInstance(org.jivesoftware.smack.provider.ProviderManager) -> setInstance
    void initialize() -> initialize
    java.lang.Object getIQProvider(java.lang.String,java.lang.String) -> getIQProvider
    java.util.Collection getIQProviders() -> getIQProviders
    void addIQProvider(java.lang.String,java.lang.String,java.lang.Object) -> addIQProvider
    void removeIQProvider(java.lang.String,java.lang.String) -> removeIQProvider
    java.lang.Object getExtensionProvider(java.lang.String,java.lang.String) -> getExtensionProvider
    void addExtensionProvider(java.lang.String,java.lang.String,java.lang.Object) -> addExtensionProvider
    void removeExtensionProvider(java.lang.String,java.lang.String) -> removeExtensionProvider
    java.util.Collection getExtensionProviders() -> getExtensionProviders
    java.lang.String getProviderKey(java.lang.String,java.lang.String) -> getProviderKey
    java.lang.ClassLoader[] getClassLoaders() -> getClassLoaders
org.jivesoftware.smack.proxy.DirectSocketFactory -> org.jivesoftware.smack.proxy.DirectSocketFactory:
    int roundrobin -> roundrobin
    java.net.Socket createSocket(java.lang.String,int) -> createSocket
    java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int) -> createSocket
org.jivesoftware.smack.proxy.HTTPProxySocketFactory -> org.jivesoftware.smack.proxy.HTTPProxySocketFactory:
    org.jivesoftware.smack.proxy.ProxyInfo proxy -> proxy
    java.util.regex.Pattern RESPONSE_PATTERN -> RESPONSE_PATTERN
    java.net.Socket createSocket(java.lang.String,int) -> createSocket
    java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int) -> createSocket
    java.net.Socket httpProxifiedSocket(java.lang.String,int) -> httpProxifiedSocket
org.jivesoftware.smack.proxy.ProxyException -> org.jivesoftware.smack.proxy.ProxyException:
org.jivesoftware.smack.proxy.ProxyInfo -> org.jivesoftware.smack.proxy.ProxyInfo:
    java.lang.String proxyAddress -> proxyAddress
    int proxyPort -> proxyPort
    java.lang.String proxyUsername -> proxyUsername
    java.lang.String proxyPassword -> proxyPassword
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType proxyType -> proxyType
    org.jivesoftware.smack.proxy.ProxyInfo forHttpProxy(java.lang.String,int,java.lang.String,java.lang.String) -> forHttpProxy
    org.jivesoftware.smack.proxy.ProxyInfo forSocks4Proxy(java.lang.String,int,java.lang.String,java.lang.String) -> forSocks4Proxy
    org.jivesoftware.smack.proxy.ProxyInfo forSocks5Proxy(java.lang.String,int,java.lang.String,java.lang.String) -> forSocks5Proxy
    org.jivesoftware.smack.proxy.ProxyInfo forNoProxy() -> forNoProxy
    org.jivesoftware.smack.proxy.ProxyInfo forDefaultProxy() -> forDefaultProxy
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType getProxyType() -> getProxyType
    java.lang.String getProxyAddress() -> getProxyAddress
    int getProxyPort() -> getProxyPort
    java.lang.String getProxyUsername() -> getProxyUsername
    java.lang.String getProxyPassword() -> getProxyPassword
    javax.net.SocketFactory getSocketFactory() -> getSocketFactory
org.jivesoftware.smack.proxy.ProxyInfo$ProxyType -> org.jivesoftware.smack.proxy.ProxyInfo$ProxyType:
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType NONE -> NONE
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType HTTP -> HTTP
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType SOCKS4 -> SOCKS4
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType SOCKS5 -> SOCKS5
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType[] $VALUES -> $VALUES
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType[] values() -> values
    org.jivesoftware.smack.proxy.ProxyInfo$ProxyType valueOf(java.lang.String) -> valueOf
org.jivesoftware.smack.proxy.Socks4ProxySocketFactory -> org.jivesoftware.smack.proxy.Socks4ProxySocketFactory:
    org.jivesoftware.smack.proxy.ProxyInfo proxy -> proxy
    java.net.Socket createSocket(java.lang.String,int) -> createSocket
    java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int) -> createSocket
    java.net.Socket socks4ProxifiedSocket(java.lang.String,int) -> socks4ProxifiedSocket
org.jivesoftware.smack.proxy.Socks5ProxySocketFactory -> org.jivesoftware.smack.proxy.Socks5ProxySocketFactory:
    org.jivesoftware.smack.proxy.ProxyInfo proxy -> proxy
    java.net.Socket createSocket(java.lang.String,int) -> createSocket
    java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int) -> createSocket
    java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int) -> createSocket
    java.net.Socket socks5ProxifiedSocket(java.lang.String,int) -> socks5ProxifiedSocket
    void fill(java.io.InputStream,byte[],int) -> fill
org.jivesoftware.smack.sasl.SASLAnonymous -> org.jivesoftware.smack.sasl.SASLAnonymous:
    java.lang.String getName() -> getName
    void authenticate(java.lang.String,java.lang.String,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> authenticate
    void authenticate(java.lang.String,java.lang.String,java.lang.String) -> authenticate
    void authenticate() -> authenticate
    void challengeReceived(java.lang.String) -> challengeReceived
org.jivesoftware.smack.sasl.SASLCramMD5Mechanism -> org.jivesoftware.smack.sasl.SASLCramMD5Mechanism:
    java.lang.String getName() -> getName
org.jivesoftware.smack.sasl.SASLDigestMD5Mechanism -> org.jivesoftware.smack.sasl.SASLDigestMD5Mechanism:
    java.lang.String getName() -> getName
org.jivesoftware.smack.sasl.SASLExternalMechanism -> org.jivesoftware.smack.sasl.SASLExternalMechanism:
    java.lang.String getName() -> getName
org.jivesoftware.smack.sasl.SASLFacebookConnect -> org.jivesoftware.smack.sasl.SASLFacebookConnect:
    java.lang.String sessionKey -> sessionKey
    java.lang.String sessionSecret -> sessionSecret
    java.lang.String apiKey -> apiKey
    void authenticate() -> authenticate
    void authenticate(java.lang.String,java.lang.String,java.lang.String) -> authenticate
    void authenticate(java.lang.String,java.lang.String,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> authenticate
    java.lang.String getName() -> getName
    void challengeReceived(java.lang.String) -> challengeReceived
    java.util.Map getQueryMap(java.lang.String) -> getQueryMap
    java.lang.String convertToHex(byte[]) -> convertToHex
    java.lang.String MD5(java.lang.String) -> MD5
org.jivesoftware.smack.sasl.SASLFacebookConnect$1 -> org.jivesoftware.smack.sasl.SASLFacebookConnect$1:
    java.lang.StringBuilder val$stanza -> val$stanza
    org.jivesoftware.smack.sasl.SASLFacebookConnect this$0 -> this$0
    java.lang.String toXML() -> toXML
org.jivesoftware.smack.sasl.SASLFacebookConnect$2 -> org.jivesoftware.smack.sasl.SASLFacebookConnect$2:
    java.lang.StringBuilder val$stanza -> val$stanza
    org.jivesoftware.smack.sasl.SASLFacebookConnect this$0 -> this$0
    java.lang.String toXML() -> toXML
org.jivesoftware.smack.sasl.SASLGSSAPIMechanism -> org.jivesoftware.smack.sasl.SASLGSSAPIMechanism:
    java.lang.String getName() -> getName
    void authenticate(java.lang.String,java.lang.String,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> authenticate
    void authenticate(java.lang.String,java.lang.String,java.lang.String) -> authenticate
org.jivesoftware.smack.sasl.SASLMechanism -> org.jivesoftware.smack.sasl.SASLMechanism:
    org.jivesoftware.smack.SASLAuthentication saslAuthentication -> saslAuthentication
    org.apache.harmony.javax.security.sasl.SaslClient sc -> sc
    java.lang.String authenticationId -> authenticationId
    java.lang.String password -> password
    java.lang.String hostname -> hostname
    void authenticate(java.lang.String,java.lang.String,java.lang.String) -> authenticate
    void authenticate(java.lang.String,java.lang.String,org.apache.harmony.javax.security.auth.callback.CallbackHandler) -> authenticate
    void authenticate() -> authenticate
    void challengeReceived(java.lang.String) -> challengeReceived
    java.lang.String getName() -> getName
    org.jivesoftware.smack.SASLAuthentication getSASLAuthentication() -> getSASLAuthentication
    void handle(org.apache.harmony.javax.security.auth.callback.Callback[]) -> handle
org.jivesoftware.smack.sasl.SASLMechanism$AuthMechanism -> org.jivesoftware.smack.sasl.SASLMechanism$AuthMechanism:
    java.lang.String name -> name
    java.lang.String authenticationText -> authenticationText
    org.jivesoftware.smack.sasl.SASLMechanism this$0 -> this$0
    java.lang.String toXML() -> toXML
org.jivesoftware.smack.sasl.SASLMechanism$Challenge -> org.jivesoftware.smack.sasl.SASLMechanism$Challenge:
    java.lang.String data -> data
    java.lang.String toXML() -> toXML
org.jivesoftware.smack.sasl.SASLMechanism$Failure -> org.jivesoftware.smack.sasl.SASLMechanism$Failure:
    java.lang.String condition -> condition
    java.lang.String getCondition() -> getCondition
    java.lang.String toXML() -> toXML
org.jivesoftware.smack.sasl.SASLMechanism$Response -> org.jivesoftware.smack.sasl.SASLMechanism$Response:
    java.lang.String authenticationText -> authenticationText
    org.jivesoftware.smack.sasl.SASLMechanism this$0 -> this$0
    java.lang.String toXML() -> toXML
org.jivesoftware.smack.sasl.SASLMechanism$Success -> org.jivesoftware.smack.sasl.SASLMechanism$Success:
    java.lang.String data -> data
    java.lang.String toXML() -> toXML
org.jivesoftware.smack.sasl.SASLPlainMechanism -> org.jivesoftware.smack.sasl.SASLPlainMechanism:
    java.lang.String getName() -> getName
org.jivesoftware.smack.util.Base32Encoder -> org.jivesoftware.smack.util.Base32Encoder:
    org.jivesoftware.smack.util.Base32Encoder instance -> instance
    java.lang.String ALPHABET -> ALPHABET
    org.jivesoftware.smack.util.Base32Encoder getInstance() -> getInstance
    java.lang.String decode(java.lang.String) -> decode
    java.lang.String encode(java.lang.String) -> encode
    int lenToPadding(int) -> lenToPadding
    int paddingToLen(int) -> paddingToLen
org.jivesoftware.smack.util.Base64 -> org.jivesoftware.smack.util.Base64:
    int NO_OPTIONS -> NO_OPTIONS
    int ENCODE -> ENCODE
    int DECODE -> DECODE
    int GZIP -> GZIP
    int DONT_BREAK_LINES -> DONT_BREAK_LINES
    int URL_SAFE -> URL_SAFE
    int ORDERED -> ORDERED
    int MAX_LINE_LENGTH -> MAX_LINE_LENGTH
    byte EQUALS_SIGN -> EQUALS_SIGN
    byte NEW_LINE -> NEW_LINE
    java.lang.String PREFERRED_ENCODING -> PREFERRED_ENCODING
    byte WHITE_SPACE_ENC -> WHITE_SPACE_ENC
    byte EQUALS_SIGN_ENC -> EQUALS_SIGN_ENC
    byte[] _STANDARD_ALPHABET -> _STANDARD_ALPHABET
    byte[] _STANDARD_DECODABET -> _STANDARD_DECODABET
    byte[] _URL_SAFE_ALPHABET -> _URL_SAFE_ALPHABET
    byte[] _URL_SAFE_DECODABET -> _URL_SAFE_DECODABET
    byte[] _ORDERED_ALPHABET -> _ORDERED_ALPHABET
    byte[] _ORDERED_DECODABET -> _ORDERED_DECODABET
    byte[] getAlphabet(int) -> getAlphabet
    byte[] getDecodabet(int) -> getDecodabet
    void usage(java.lang.String) -> usage
    byte[] encode3to4(byte[],byte[],int,int) -> encode3to4
    byte[] encode3to4(byte[],int,int,byte[],int,int) -> encode3to4
    java.lang.String encodeObject(java.io.Serializable) -> encodeObject
    java.lang.String encodeObject(java.io.Serializable,int) -> encodeObject
    java.lang.String encodeBytes(byte[]) -> encodeBytes
    java.lang.String encodeBytes(byte[],int) -> encodeBytes
    java.lang.String encodeBytes(byte[],int,int) -> encodeBytes
    java.lang.String encodeBytes(byte[],int,int,int) -> encodeBytes
    int decode4to3(byte[],int,byte[],int,int) -> decode4to3
    byte[] decode(byte[],int,int,int) -> decode
    byte[] decode(java.lang.String) -> decode
    byte[] decode(java.lang.String,int) -> decode
    java.lang.Object decodeToObject(java.lang.String) -> decodeToObject
    boolean encodeToFile(byte[],java.lang.String) -> encodeToFile
    boolean decodeToFile(java.lang.String,java.lang.String) -> decodeToFile
    byte[] decodeFromFile(java.lang.String) -> decodeFromFile
    java.lang.String encodeFromFile(java.lang.String) -> encodeFromFile
    void encodeFileToFile(java.lang.String,java.lang.String) -> encodeFileToFile
    void decodeFileToFile(java.lang.String,java.lang.String) -> decodeFileToFile
    byte[] access$000(int) -> access$000
    byte[] access$100(int) -> access$100
    byte[] access$200(byte[],int,int,byte[],int,int) -> access$200
    int access$300(byte[],int,byte[],int,int) -> access$300
    byte[] access$400(byte[],byte[],int,int) -> access$400
org.jivesoftware.smack.util.Base64$InputStream -> org.jivesoftware.smack.util.Base64$InputStream:
    boolean encode -> encode
    int position -> position
    byte[] buffer -> buffer
    int bufferLength -> bufferLength
    int numSigBytes -> numSigBytes
    int lineLength -> lineLength
    boolean breakLines -> breakLines
    int options -> options
    byte[] alphabet -> alphabet
    byte[] decodabet -> decodabet
    int read() -> read
    int read(byte[],int,int) -> read
org.jivesoftware.smack.util.Base64$OutputStream -> org.jivesoftware.smack.util.Base64$OutputStream:
    boolean encode -> encode
    int position -> position
    byte[] buffer -> buffer
    int bufferLength -> bufferLength
    int lineLength -> lineLength
    boolean breakLines -> breakLines
    byte[] b4 -> b4
    boolean suspendEncoding -> suspendEncoding
    int options -> options
    byte[] alphabet -> alphabet
    byte[] decodabet -> decodabet
    void write(int) -> write
    void write(byte[],int,int) -> write
    void flushBase64() -> flushBase64
    void close() -> close
    void suspendEncoding() -> suspendEncoding
    void resumeEncoding() -> resumeEncoding
org.jivesoftware.smack.util.Base64Encoder -> org.jivesoftware.smack.util.Base64Encoder:
    org.jivesoftware.smack.util.Base64Encoder instance -> instance
    org.jivesoftware.smack.util.Base64Encoder getInstance() -> getInstance
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String decode(java.lang.String) -> decode
org.jivesoftware.smack.util.Base64FileUrlEncoder -> org.jivesoftware.smack.util.Base64FileUrlEncoder:
    org.jivesoftware.smack.util.Base64FileUrlEncoder instance -> instance
    org.jivesoftware.smack.util.Base64FileUrlEncoder getInstance() -> getInstance
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String decode(java.lang.String) -> decode
org.jivesoftware.smack.util.Cache -> org.jivesoftware.smack.util.Cache:
    java.util.Map map -> map
    org.jivesoftware.smack.util.Cache$LinkedList lastAccessedList -> lastAccessedList
    org.jivesoftware.smack.util.Cache$LinkedList ageList -> ageList
    int maxCacheSize -> maxCacheSize
    long maxLifetime -> maxLifetime
    long cacheHits -> cacheHits
    long cacheMisses -> cacheMisses
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object remove(java.lang.Object) -> remove
    java.lang.Object remove(java.lang.Object,boolean) -> remove
    void clear() -> clear
    int size() -> size
    boolean isEmpty() -> isEmpty
    java.util.Collection values() -> values
    boolean containsKey(java.lang.Object) -> containsKey
    void putAll(java.util.Map) -> putAll
    boolean containsValue(java.lang.Object) -> containsValue
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    long getCacheHits() -> getCacheHits
    long getCacheMisses() -> getCacheMisses
    int getMaxCacheSize() -> getMaxCacheSize
    void setMaxCacheSize(int) -> setMaxCacheSize
    long getMaxLifetime() -> getMaxLifetime
    void setMaxLifetime(long) -> setMaxLifetime
    void deleteExpiredEntries() -> deleteExpiredEntries
    void cullCache() -> cullCache
org.jivesoftware.smack.util.Cache$1 -> org.jivesoftware.smack.util.Cache$1:
    java.util.Collection values -> values
    org.jivesoftware.smack.util.Cache this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    int size() -> size
org.jivesoftware.smack.util.Cache$1$1 -> org.jivesoftware.smack.util.Cache$1$1:
    java.util.Iterator it -> it
    org.jivesoftware.smack.util.Cache$1 this$1 -> this$1
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
org.jivesoftware.smack.util.Cache$2 -> org.jivesoftware.smack.util.Cache$2:
    java.util.Set set -> set
    org.jivesoftware.smack.util.Cache this$0 -> this$0
    java.util.Iterator iterator() -> iterator
    int size() -> size
    java.util.Set access$000(org.jivesoftware.smack.util.Cache$2) -> access$000
org.jivesoftware.smack.util.Cache$2$1 -> org.jivesoftware.smack.util.Cache$2$1:
    java.util.Iterator it -> it
    org.jivesoftware.smack.util.Cache$2 this$1 -> this$1
    boolean hasNext() -> hasNext
    java.util.Map$Entry next() -> next
    void remove() -> remove
    java.lang.Object next() -> next
org.jivesoftware.smack.util.Cache$2$1$1 -> org.jivesoftware.smack.util.Cache$2$1$1:
    org.jivesoftware.smack.util.Cache$2$1 this$2 -> this$2
    java.lang.Object setValue(java.lang.Object) -> setValue
org.jivesoftware.smack.util.Cache$CacheObject -> org.jivesoftware.smack.util.Cache$CacheObject:
    java.lang.Object object -> object
    org.jivesoftware.smack.util.Cache$LinkedListNode lastAccessedListNode -> lastAccessedListNode
    org.jivesoftware.smack.util.Cache$LinkedListNode ageListNode -> ageListNode
    int readCount -> readCount
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.jivesoftware.smack.util.Cache$LinkedList -> org.jivesoftware.smack.util.Cache$LinkedList:
    org.jivesoftware.smack.util.Cache$LinkedListNode head -> head
    org.jivesoftware.smack.util.Cache$LinkedListNode getFirst() -> getFirst
    org.jivesoftware.smack.util.Cache$LinkedListNode getLast() -> getLast
    org.jivesoftware.smack.util.Cache$LinkedListNode addFirst(org.jivesoftware.smack.util.Cache$LinkedListNode) -> addFirst
    org.jivesoftware.smack.util.Cache$LinkedListNode addFirst(java.lang.Object) -> addFirst
    org.jivesoftware.smack.util.Cache$LinkedListNode addLast(java.lang.Object) -> addLast
    void clear() -> clear
    java.lang.String toString() -> toString
org.jivesoftware.smack.util.Cache$LinkedListNode -> org.jivesoftware.smack.util.Cache$LinkedListNode:
    org.jivesoftware.smack.util.Cache$LinkedListNode previous -> previous
    org.jivesoftware.smack.util.Cache$LinkedListNode next -> next
    java.lang.Object object -> object
    long timestamp -> timestamp
    void remove() -> remove
    java.lang.String toString() -> toString
org.jivesoftware.smack.util.DNSUtil -> org.jivesoftware.smack.util.DNSUtil:
    java.util.Map cache -> cache
    org.jivesoftware.smack.util.dns.DNSResolver dnsResolver -> dnsResolver
    void setDNSResolver(org.jivesoftware.smack.util.dns.DNSResolver) -> setDNSResolver
    org.jivesoftware.smack.util.dns.DNSResolver getDNSResolver() -> getDNSResolver
    java.util.List resolveXMPPDomain(java.lang.String) -> resolveXMPPDomain
    java.util.List resolveXMPPServerDomain(java.lang.String) -> resolveXMPPServerDomain
    java.util.List resolveDomain(java.lang.String,char) -> resolveDomain
    java.util.List sortSRVRecords(java.util.List) -> sortSRVRecords
    int bisect(int[],double) -> bisect
org.jivesoftware.smack.util.DateFormatType -> org.jivesoftware.smack.util.DateFormatType:
    org.jivesoftware.smack.util.DateFormatType XEP_0082_DATE_PROFILE -> XEP_0082_DATE_PROFILE
    org.jivesoftware.smack.util.DateFormatType XEP_0082_DATETIME_PROFILE -> XEP_0082_DATETIME_PROFILE
    org.jivesoftware.smack.util.DateFormatType XEP_0082_DATETIME_MILLIS_PROFILE -> XEP_0082_DATETIME_MILLIS_PROFILE
    org.jivesoftware.smack.util.DateFormatType XEP_0082_TIME_PROFILE -> XEP_0082_TIME_PROFILE
    org.jivesoftware.smack.util.DateFormatType XEP_0082_TIME_ZONE_PROFILE -> XEP_0082_TIME_ZONE_PROFILE
    org.jivesoftware.smack.util.DateFormatType XEP_0082_TIME_MILLIS_PROFILE -> XEP_0082_TIME_MILLIS_PROFILE
    org.jivesoftware.smack.util.DateFormatType XEP_0082_TIME_MILLIS_ZONE_PROFILE -> XEP_0082_TIME_MILLIS_ZONE_PROFILE
    org.jivesoftware.smack.util.DateFormatType XEP_0091_DATETIME -> XEP_0091_DATETIME
    java.lang.String formatString -> formatString
    org.jivesoftware.smack.util.DateFormatType[] $VALUES -> $VALUES
    org.jivesoftware.smack.util.DateFormatType[] values() -> values
    org.jivesoftware.smack.util.DateFormatType valueOf(java.lang.String) -> valueOf
    java.lang.String getFormatString() -> getFormatString
    java.text.SimpleDateFormat createFormatter() -> createFormatter
org.jivesoftware.smack.util.ObservableReader -> org.jivesoftware.smack.util.ObservableReader:
    java.io.Reader wrappedReader -> wrappedReader
    java.util.List listeners -> listeners
    int read(char[],int,int) -> read
    void close() -> close
    int read() -> read
    int read(char[]) -> read
    long skip(long) -> skip
    boolean ready() -> ready
    boolean markSupported() -> markSupported
    void mark(int) -> mark
    void reset() -> reset
    void addReaderListener(org.jivesoftware.smack.util.ReaderListener) -> addReaderListener
    void removeReaderListener(org.jivesoftware.smack.util.ReaderListener) -> removeReaderListener
org.jivesoftware.smack.util.ObservableWriter -> org.jivesoftware.smack.util.ObservableWriter:
    java.io.Writer wrappedWriter -> wrappedWriter
    java.util.List listeners -> listeners
    void write(char[],int,int) -> write
    void flush() -> flush
    void close() -> close
    void write(int) -> write
    void write(char[]) -> write
    void write(java.lang.String) -> write
    void write(java.lang.String,int,int) -> write
    void notifyListeners(java.lang.String) -> notifyListeners
    void addWriterListener(org.jivesoftware.smack.util.WriterListener) -> addWriterListener
    void removeWriterListener(org.jivesoftware.smack.util.WriterListener) -> removeWriterListener
org.jivesoftware.smack.util.PacketParserUtils -> org.jivesoftware.smack.util.PacketParserUtils:
    java.lang.String PROPERTIES_NAMESPACE -> PROPERTIES_NAMESPACE
    org.jivesoftware.smack.packet.Packet parseMessage(org.xmlpull.v1.XmlPullParser) -> parseMessage
    java.lang.String parseContent(org.xmlpull.v1.XmlPullParser) -> parseContent
    java.lang.String parseContentDepth(org.xmlpull.v1.XmlPullParser,int) -> parseContentDepth
    org.jivesoftware.smack.packet.Presence parsePresence(org.xmlpull.v1.XmlPullParser) -> parsePresence
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser,org.jivesoftware.smack.Connection) -> parseIQ
    org.jivesoftware.smack.packet.Authentication parseAuthentication(org.xmlpull.v1.XmlPullParser) -> parseAuthentication
    org.jivesoftware.smack.packet.RosterPacket parseRoster(org.xmlpull.v1.XmlPullParser) -> parseRoster
    org.jivesoftware.smack.packet.Registration parseRegistration(org.xmlpull.v1.XmlPullParser) -> parseRegistration
    org.jivesoftware.smack.packet.Bind parseResourceBinding(org.xmlpull.v1.XmlPullParser) -> parseResourceBinding
    java.util.Collection parseMechanisms(org.xmlpull.v1.XmlPullParser) -> parseMechanisms
    java.util.Collection parseCompressionMethods(org.xmlpull.v1.XmlPullParser) -> parseCompressionMethods
    java.util.Map parseProperties(org.xmlpull.v1.XmlPullParser) -> parseProperties
    org.jivesoftware.smack.sasl.SASLMechanism$Failure parseSASLFailure(org.xmlpull.v1.XmlPullParser) -> parseSASLFailure
    org.jivesoftware.smack.packet.StreamError parseStreamError(org.xmlpull.v1.XmlPullParser) -> parseStreamError
    org.jivesoftware.smack.packet.XMPPError parseError(org.xmlpull.v1.XmlPullParser) -> parseError
    org.jivesoftware.smack.packet.PacketExtension parsePacketExtension(java.lang.String,java.lang.String,org.xmlpull.v1.XmlPullParser) -> parsePacketExtension
    java.lang.String getLanguageAttribute(org.xmlpull.v1.XmlPullParser) -> getLanguageAttribute
    java.lang.Object parseWithIntrospection(java.lang.String,java.lang.Class,org.xmlpull.v1.XmlPullParser) -> parseWithIntrospection
    java.lang.Object decode(java.lang.Class,java.lang.String) -> decode
org.jivesoftware.smack.util.PacketParserUtils$1 -> org.jivesoftware.smack.util.PacketParserUtils$1:
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.util.PacketParserUtils$2 -> org.jivesoftware.smack.util.PacketParserUtils$2:
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.util.PacketParserUtils$UnparsedResultIQ -> org.jivesoftware.smack.util.PacketParserUtils$UnparsedResultIQ:
    java.lang.String str -> str
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smack.util.ReaderListener -> org.jivesoftware.smack.util.ReaderListener:
    void read(java.lang.String) -> read
org.jivesoftware.smack.util.StringEncoder -> org.jivesoftware.smack.util.StringEncoder:
    java.lang.String encode(java.lang.String) -> encode
    java.lang.String decode(java.lang.String) -> decode
org.jivesoftware.smack.util.StringUtils -> org.jivesoftware.smack.util.StringUtils:
    java.text.DateFormat XEP_0082_UTC_FORMAT -> XEP_0082_UTC_FORMAT
    java.text.DateFormat dateFormatter -> dateFormatter
    java.util.regex.Pattern datePattern -> datePattern
    java.text.DateFormat timeFormatter -> timeFormatter
    java.util.regex.Pattern timePattern -> timePattern
    java.text.DateFormat timeNoZoneFormatter -> timeNoZoneFormatter
    java.util.regex.Pattern timeNoZonePattern -> timeNoZonePattern
    java.text.DateFormat timeNoMillisFormatter -> timeNoMillisFormatter
    java.util.regex.Pattern timeNoMillisPattern -> timeNoMillisPattern
    java.text.DateFormat timeNoMillisNoZoneFormatter -> timeNoMillisNoZoneFormatter
    java.util.regex.Pattern timeNoMillisNoZonePattern -> timeNoMillisNoZonePattern
    java.text.DateFormat dateTimeFormatter -> dateTimeFormatter
    java.util.regex.Pattern dateTimePattern -> dateTimePattern
    java.text.DateFormat dateTimeNoMillisFormatter -> dateTimeNoMillisFormatter
    java.util.regex.Pattern dateTimeNoMillisPattern -> dateTimeNoMillisPattern
    java.text.DateFormat xep0091Formatter -> xep0091Formatter
    java.text.DateFormat xep0091Date6DigitFormatter -> xep0091Date6DigitFormatter
    java.text.DateFormat xep0091Date7Digit1MonthFormatter -> xep0091Date7Digit1MonthFormatter
    java.text.DateFormat xep0091Date7Digit2MonthFormatter -> xep0091Date7Digit2MonthFormatter
    java.util.regex.Pattern xep0091Pattern -> xep0091Pattern
    java.util.List couplings -> couplings
    char[] QUOTE_ENCODE -> QUOTE_ENCODE
    char[] APOS_ENCODE -> APOS_ENCODE
    char[] AMP_ENCODE -> AMP_ENCODE
    char[] LT_ENCODE -> LT_ENCODE
    char[] GT_ENCODE -> GT_ENCODE
    java.security.MessageDigest digest -> digest
    java.util.Random randGen -> randGen
    char[] numbersAndLetters -> numbersAndLetters
    java.util.Date parseXEP0082Date(java.lang.String) -> parseXEP0082Date
    java.util.Date parseDate(java.lang.String) -> parseDate
    java.util.Date handleDateWithMissingLeadingZeros(java.lang.String,int) -> handleDateWithMissingLeadingZeros
    java.util.Calendar parseXEP91Date(java.lang.String,java.text.DateFormat) -> parseXEP91Date
    java.util.List filterDatesBefore(java.util.Calendar,java.util.Calendar[]) -> filterDatesBefore
    java.util.Calendar determineNearestDate(java.util.Calendar,java.util.List) -> determineNearestDate
    java.lang.String formatXEP0082Date(java.util.Date) -> formatXEP0082Date
    java.lang.String formatDate(java.util.Date,org.jivesoftware.smack.util.DateFormatType) -> formatDate
    java.lang.String parseName(java.lang.String) -> parseName
    java.lang.String parseServer(java.lang.String) -> parseServer
    java.lang.String parseResource(java.lang.String) -> parseResource
    java.lang.String parseBareAddress(java.lang.String) -> parseBareAddress
    boolean isFullJID(java.lang.String) -> isFullJID
    java.lang.String escapeNode(java.lang.String) -> escapeNode
    java.lang.String unescapeNode(java.lang.String) -> unescapeNode
    java.lang.String escapeForXML(java.lang.String) -> escapeForXML
    java.lang.String hash(java.lang.String) -> hash
    java.lang.String encodeHex(byte[]) -> encodeHex
    java.lang.String encodeBase64(java.lang.String) -> encodeBase64
    java.lang.String encodeBase64(byte[]) -> encodeBase64
    java.lang.String encodeBase64(byte[],boolean) -> encodeBase64
    java.lang.String encodeBase64(byte[],int,int,boolean) -> encodeBase64
    byte[] decodeBase64(java.lang.String) -> decodeBase64
    java.lang.String randomString(int) -> randomString
org.jivesoftware.smack.util.StringUtils$1 -> org.jivesoftware.smack.util.StringUtils$1:
    java.util.Calendar val$now -> val$now
    int compare(java.util.Calendar,java.util.Calendar) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
org.jivesoftware.smack.util.StringUtils$PatternCouplings -> org.jivesoftware.smack.util.StringUtils$PatternCouplings:
    java.util.regex.Pattern pattern -> pattern
    java.text.DateFormat formatter -> formatter
    boolean needToConvertTimeZone -> needToConvertTimeZone
    java.lang.String convertTime(java.lang.String) -> convertTime
org.jivesoftware.smack.util.SyncPacketSend -> org.jivesoftware.smack.util.SyncPacketSend:
    org.jivesoftware.smack.packet.Packet getReply(org.jivesoftware.smack.Connection,org.jivesoftware.smack.packet.Packet,long) -> getReply
    org.jivesoftware.smack.packet.Packet getReply(org.jivesoftware.smack.Connection,org.jivesoftware.smack.packet.Packet) -> getReply
org.jivesoftware.smack.util.WriterListener -> org.jivesoftware.smack.util.WriterListener:
    void write(java.lang.String) -> write
org.jivesoftware.smack.util.collections.AbstractEmptyIterator -> org.jivesoftware.smack.util.collections.AbstractEmptyIterator:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    boolean hasPrevious() -> hasPrevious
    java.lang.Object previous() -> previous
    int nextIndex() -> nextIndex
    int previousIndex() -> previousIndex
    void add(java.lang.Object) -> add
    void set(java.lang.Object) -> set
    void remove() -> remove
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    void reset() -> reset
org.jivesoftware.smack.util.collections.AbstractHashedMap -> org.jivesoftware.smack.util.collections.AbstractHashedMap:
    java.lang.String NO_NEXT_ENTRY -> NO_NEXT_ENTRY
    java.lang.String NO_PREVIOUS_ENTRY -> NO_PREVIOUS_ENTRY
    java.lang.String REMOVE_INVALID -> REMOVE_INVALID
    java.lang.String GETKEY_INVALID -> GETKEY_INVALID
    java.lang.String GETVALUE_INVALID -> GETVALUE_INVALID
    java.lang.String SETVALUE_INVALID -> SETVALUE_INVALID
    int DEFAULT_CAPACITY -> DEFAULT_CAPACITY
    int DEFAULT_THRESHOLD -> DEFAULT_THRESHOLD
    float DEFAULT_LOAD_FACTOR -> DEFAULT_LOAD_FACTOR
    int MAXIMUM_CAPACITY -> MAXIMUM_CAPACITY
    java.lang.Object NULL -> NULL
    float loadFactor -> loadFactor
    int size -> size
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry[] data -> data
    int threshold -> threshold
    int modCount -> modCount
    org.jivesoftware.smack.util.collections.AbstractHashedMap$EntrySet entrySet -> entrySet
    org.jivesoftware.smack.util.collections.AbstractHashedMap$KeySet keySet -> keySet
    org.jivesoftware.smack.util.collections.AbstractHashedMap$Values values -> values
    void init() -> init
    java.lang.Object get(java.lang.Object) -> get
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    void putAll(java.util.Map) -> putAll
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    int hash(java.lang.Object) -> hash
    boolean isEqualKey(java.lang.Object,java.lang.Object) -> isEqualKey
    boolean isEqualValue(java.lang.Object,java.lang.Object) -> isEqualValue
    int hashIndex(int,int) -> hashIndex
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry getEntry(java.lang.Object) -> getEntry
    void updateEntry(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry,java.lang.Object) -> updateEntry
    void reuseEntry(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry,int,int,java.lang.Object,java.lang.Object) -> reuseEntry
    void addMapping(int,int,java.lang.Object,java.lang.Object) -> addMapping
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry createEntry(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry,int,java.lang.Object,java.lang.Object) -> createEntry
    void addEntry(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry,int) -> addEntry
    void removeMapping(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry,int,org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry) -> removeMapping
    void removeEntry(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry,int,org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry) -> removeEntry
    void destroyEntry(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry) -> destroyEntry
    void checkCapacity() -> checkCapacity
    void ensureCapacity(int) -> ensureCapacity
    int calculateNewCapacity(int) -> calculateNewCapacity
    int calculateThreshold(int,float) -> calculateThreshold
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry entryNext(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry) -> entryNext
    int entryHashCode(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry) -> entryHashCode
    java.lang.Object entryKey(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry) -> entryKey
    java.lang.Object entryValue(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry) -> entryValue
    org.jivesoftware.smack.util.collections.MapIterator mapIterator() -> mapIterator
    java.util.Set entrySet() -> entrySet
    java.util.Iterator createEntrySetIterator() -> createEntrySetIterator
    java.util.Set keySet() -> keySet
    java.util.Iterator createKeySetIterator() -> createKeySetIterator
    java.util.Collection values() -> values
    java.util.Iterator createValuesIterator() -> createValuesIterator
    void doWriteObject(java.io.ObjectOutputStream) -> doWriteObject
    void doReadObject(java.io.ObjectInputStream) -> doReadObject
    java.lang.Object clone() -> clone
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.jivesoftware.smack.util.collections.AbstractHashedMap$EntrySet -> org.jivesoftware.smack.util.collections.AbstractHashedMap$EntrySet:
    org.jivesoftware.smack.util.collections.AbstractHashedMap parent -> parent
    int size() -> size
    void clear() -> clear
    boolean contains(java.util.Map$Entry) -> contains
    boolean remove(java.lang.Object) -> remove
    java.util.Iterator iterator() -> iterator
org.jivesoftware.smack.util.collections.AbstractHashedMap$EntrySetIterator -> org.jivesoftware.smack.util.collections.AbstractHashedMap$EntrySetIterator:
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry next() -> next
    java.lang.Object next() -> next
org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry -> org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry:
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry next -> next
    int hashCode -> hashCode
    java.lang.Object key -> key
    java.lang.Object value -> value
    java.lang.Object getKey() -> getKey
    void setKey(java.lang.Object) -> setKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.Object access$000(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry) -> access$000
    java.lang.Object access$002(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry,java.lang.Object) -> access$002
    java.lang.Object access$102(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry,java.lang.Object) -> access$102
    java.lang.Object access$100(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry) -> access$100
org.jivesoftware.smack.util.collections.AbstractHashedMap$HashIterator -> org.jivesoftware.smack.util.collections.AbstractHashedMap$HashIterator:
    org.jivesoftware.smack.util.collections.AbstractHashedMap parent -> parent
    int hashIndex -> hashIndex
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry last -> last
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry next -> next
    int expectedModCount -> expectedModCount
    boolean hasNext() -> hasNext
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry nextEntry() -> nextEntry
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry currentEntry() -> currentEntry
    void remove() -> remove
    java.lang.String toString() -> toString
org.jivesoftware.smack.util.collections.AbstractHashedMap$HashMapIterator -> org.jivesoftware.smack.util.collections.AbstractHashedMap$HashMapIterator:
    java.lang.Object next() -> next
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
org.jivesoftware.smack.util.collections.AbstractHashedMap$KeySet -> org.jivesoftware.smack.util.collections.AbstractHashedMap$KeySet:
    org.jivesoftware.smack.util.collections.AbstractHashedMap parent -> parent
    int size() -> size
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    boolean remove(java.lang.Object) -> remove
    java.util.Iterator iterator() -> iterator
org.jivesoftware.smack.util.collections.AbstractHashedMap$KeySetIterator -> org.jivesoftware.smack.util.collections.AbstractHashedMap$KeySetIterator:
    java.lang.Object next() -> next
org.jivesoftware.smack.util.collections.AbstractHashedMap$Values -> org.jivesoftware.smack.util.collections.AbstractHashedMap$Values:
    org.jivesoftware.smack.util.collections.AbstractHashedMap parent -> parent
    int size() -> size
    void clear() -> clear
    boolean contains(java.lang.Object) -> contains
    java.util.Iterator iterator() -> iterator
org.jivesoftware.smack.util.collections.AbstractHashedMap$ValuesIterator -> org.jivesoftware.smack.util.collections.AbstractHashedMap$ValuesIterator:
    java.lang.Object next() -> next
org.jivesoftware.smack.util.collections.AbstractKeyValue -> org.jivesoftware.smack.util.collections.AbstractKeyValue:
    java.lang.Object key -> key
    java.lang.Object value -> value
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.String toString() -> toString
org.jivesoftware.smack.util.collections.AbstractMapEntry -> org.jivesoftware.smack.util.collections.AbstractMapEntry:
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.jivesoftware.smack.util.collections.AbstractReferenceMap -> org.jivesoftware.smack.util.collections.AbstractReferenceMap:
    int HARD -> HARD
    int SOFT -> SOFT
    int WEAK -> WEAK
    int keyType -> keyType
    int valueType -> valueType
    boolean purgeValues -> purgeValues
    java.lang.ref.ReferenceQueue queue -> queue
    void init() -> init
    void verify(java.lang.String,int) -> verify
    int size() -> size
    boolean isEmpty() -> isEmpty
    boolean containsKey(java.lang.Object) -> containsKey
    boolean containsValue(java.lang.Object) -> containsValue
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    java.lang.Object remove(java.lang.Object) -> remove
    void clear() -> clear
    org.jivesoftware.smack.util.collections.MapIterator mapIterator() -> mapIterator
    java.util.Set entrySet() -> entrySet
    java.util.Set keySet() -> keySet
    java.util.Collection values() -> values
    void purgeBeforeRead() -> purgeBeforeRead
    void purgeBeforeWrite() -> purgeBeforeWrite
    void purge() -> purge
    void purge(java.lang.ref.Reference) -> purge
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry getEntry(java.lang.Object) -> getEntry
    int hashEntry(java.lang.Object,java.lang.Object) -> hashEntry
    boolean isEqualKey(java.lang.Object,java.lang.Object) -> isEqualKey
    org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry createEntry(org.jivesoftware.smack.util.collections.AbstractHashedMap$HashEntry,int,java.lang.Object,java.lang.Object) -> createEntry
    java.util.Iterator createEntrySetIterator() -> createEntrySetIterator
    java.util.Iterator createKeySetIterator() -> createKeySetIterator
    java.util.Iterator createValuesIterator() -> createValuesIterator
    void doWriteObject(java.io.ObjectOutputStream) -> doWriteObject
    void doReadObject(java.io.ObjectInputStream) -> doReadObject
    java.lang.ref.ReferenceQueue access$000(org.jivesoftware.smack.util.collections.AbstractReferenceMap) -> access$000
org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntry -> org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntry:
    org.jivesoftware.smack.util.collections.AbstractReferenceMap parent -> parent
    java.lang.ref.Reference refKey -> refKey
    java.lang.ref.Reference refValue -> refValue
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.ref.Reference toReference(int,java.lang.Object,int) -> toReference
    boolean purge(java.lang.ref.Reference) -> purge
    org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntry next() -> next
org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntrySet -> org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntrySet:
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntrySetIterator -> org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntrySetIterator:
    org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntry next() -> next
    java.lang.Object next() -> next
org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceIteratorBase -> org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceIteratorBase:
    org.jivesoftware.smack.util.collections.AbstractReferenceMap parent -> parent
    int index -> index
    org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntry entry -> entry
    org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntry previous -> previous
    java.lang.Object nextKey -> nextKey
    java.lang.Object nextValue -> nextValue
    java.lang.Object currentKey -> currentKey
    java.lang.Object currentValue -> currentValue
    int expectedModCount -> expectedModCount
    boolean hasNext() -> hasNext
    void checkMod() -> checkMod
    boolean nextNull() -> nextNull
    org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntry nextEntry() -> nextEntry
    org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntry currentEntry() -> currentEntry
    org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceEntry superNext() -> superNext
    void remove() -> remove
org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceKeySet -> org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceKeySet:
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceKeySetIterator -> org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceKeySetIterator:
    java.lang.Object next() -> next
org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceMapIterator -> org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceMapIterator:
    java.lang.Object next() -> next
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    java.lang.Object setValue(java.lang.Object) -> setValue
org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceValues -> org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceValues:
    java.lang.Object[] toArray() -> toArray
    java.lang.Object[] toArray(java.lang.Object[]) -> toArray
org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceValuesIterator -> org.jivesoftware.smack.util.collections.AbstractReferenceMap$ReferenceValuesIterator:
    java.lang.Object next() -> next
org.jivesoftware.smack.util.collections.AbstractReferenceMap$SoftRef -> org.jivesoftware.smack.util.collections.AbstractReferenceMap$SoftRef:
    int hash -> hash
    int hashCode() -> hashCode
org.jivesoftware.smack.util.collections.AbstractReferenceMap$WeakRef -> org.jivesoftware.smack.util.collections.AbstractReferenceMap$WeakRef:
    int hash -> hash
    int hashCode() -> hashCode
org.jivesoftware.smack.util.collections.DefaultMapEntry -> org.jivesoftware.smack.util.collections.DefaultMapEntry:
org.jivesoftware.smack.util.collections.EmptyIterator -> org.jivesoftware.smack.util.collections.EmptyIterator:
    org.jivesoftware.smack.util.collections.ResettableIterator RESETTABLE_INSTANCE -> RESETTABLE_INSTANCE
    java.util.Iterator INSTANCE -> INSTANCE
    java.util.Iterator getInstance() -> getInstance
    void reset() -> reset
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
    void remove() -> remove
    void set(java.lang.Object) -> set
    void add(java.lang.Object) -> add
    int previousIndex() -> previousIndex
    int nextIndex() -> nextIndex
    java.lang.Object previous() -> previous
    boolean hasPrevious() -> hasPrevious
    java.lang.Object next() -> next
    boolean hasNext() -> hasNext
org.jivesoftware.smack.util.collections.EmptyMapIterator -> org.jivesoftware.smack.util.collections.EmptyMapIterator:
    org.jivesoftware.smack.util.collections.MapIterator INSTANCE -> INSTANCE
    void reset() -> reset
    java.lang.Object setValue(java.lang.Object) -> setValue
    java.lang.Object getValue() -> getValue
    java.lang.Object getKey() -> getKey
    void remove() -> remove
    void set(java.lang.Object) -> set
    void add(java.lang.Object) -> add
    int previousIndex() -> previousIndex
    int nextIndex() -> nextIndex
    java.lang.Object previous() -> previous
    boolean hasPrevious() -> hasPrevious
    java.lang.Object next() -> next
    boolean hasNext() -> hasNext
org.jivesoftware.smack.util.collections.IterableMap -> org.jivesoftware.smack.util.collections.IterableMap:
    org.jivesoftware.smack.util.collections.MapIterator mapIterator() -> mapIterator
org.jivesoftware.smack.util.collections.KeyValue -> org.jivesoftware.smack.util.collections.KeyValue:
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
org.jivesoftware.smack.util.collections.MapIterator -> org.jivesoftware.smack.util.collections.MapIterator:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.lang.Object getKey() -> getKey
    java.lang.Object getValue() -> getValue
    void remove() -> remove
    java.lang.Object setValue(java.lang.Object) -> setValue
org.jivesoftware.smack.util.collections.ReferenceMap -> org.jivesoftware.smack.util.collections.ReferenceMap:
    long serialVersionUID -> serialVersionUID
    void writeObject(java.io.ObjectOutputStream) -> writeObject
    void readObject(java.io.ObjectInputStream) -> readObject
org.jivesoftware.smack.util.collections.ResettableIterator -> org.jivesoftware.smack.util.collections.ResettableIterator:
    void reset() -> reset
org.jivesoftware.smack.util.dns.DNSJavaResolver -> org.jivesoftware.smack.util.dns.DNSJavaResolver:
    org.jivesoftware.smack.util.dns.DNSJavaResolver instance -> instance
    org.jivesoftware.smack.util.dns.DNSResolver getInstance() -> getInstance
    java.util.List lookupSRVRecords(java.lang.String) -> lookupSRVRecords
org.jivesoftware.smack.util.dns.DNSResolver -> org.jivesoftware.smack.util.dns.DNSResolver:
    java.util.List lookupSRVRecords(java.lang.String) -> lookupSRVRecords
org.jivesoftware.smack.util.dns.HostAddress -> org.jivesoftware.smack.util.dns.HostAddress:
    java.lang.String fqdn -> fqdn
    int port -> port
    java.lang.Exception exception -> exception
    java.lang.String getFQDN() -> getFQDN
    int getPort() -> getPort
    void setException(java.lang.Exception) -> setException
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String getErrorMessage() -> getErrorMessage
org.jivesoftware.smack.util.dns.SRVRecord -> org.jivesoftware.smack.util.dns.SRVRecord:
    int weight -> weight
    int priority -> priority
    int getPriority() -> getPriority
    int getWeight() -> getWeight
    int compareTo(org.jivesoftware.smack.util.dns.SRVRecord) -> compareTo
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.jivesoftware.smackx.ChatState -> org.jivesoftware.smackx.ChatState:
    org.jivesoftware.smackx.ChatState active -> active
    org.jivesoftware.smackx.ChatState composing -> composing
    org.jivesoftware.smackx.ChatState paused -> paused
    org.jivesoftware.smackx.ChatState inactive -> inactive
    org.jivesoftware.smackx.ChatState gone -> gone
    org.jivesoftware.smackx.ChatState[] $VALUES -> $VALUES
    org.jivesoftware.smackx.ChatState[] values() -> values
    org.jivesoftware.smackx.ChatState valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.ChatStateListener -> org.jivesoftware.smackx.ChatStateListener:
    void stateChanged(org.jivesoftware.smack.Chat,org.jivesoftware.smackx.ChatState) -> stateChanged
org.jivesoftware.smackx.ChatStateManager -> org.jivesoftware.smackx.ChatStateManager:
    java.util.Map managers -> managers
    org.jivesoftware.smack.filter.PacketFilter filter -> filter
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smackx.ChatStateManager$OutgoingMessageInterceptor outgoingInterceptor -> outgoingInterceptor
    org.jivesoftware.smackx.ChatStateManager$IncomingMessageInterceptor incomingInterceptor -> incomingInterceptor
    java.util.Map chatStates -> chatStates
    org.jivesoftware.smackx.ChatStateManager getInstance(org.jivesoftware.smack.Connection) -> getInstance
    void init() -> init
    void setCurrentState(org.jivesoftware.smackx.ChatState,org.jivesoftware.smack.Chat) -> setCurrentState
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean updateChatState(org.jivesoftware.smack.Chat,org.jivesoftware.smackx.ChatState) -> updateChatState
    void fireNewChatState(org.jivesoftware.smack.Chat,org.jivesoftware.smackx.ChatState) -> fireNewChatState
    org.jivesoftware.smack.Connection access$200(org.jivesoftware.smackx.ChatStateManager) -> access$200
    boolean access$300(org.jivesoftware.smackx.ChatStateManager,org.jivesoftware.smack.Chat,org.jivesoftware.smackx.ChatState) -> access$300
    void access$400(org.jivesoftware.smackx.ChatStateManager,org.jivesoftware.smack.Chat,org.jivesoftware.smackx.ChatState) -> access$400
org.jivesoftware.smackx.ChatStateManager$1 -> org.jivesoftware.smackx.ChatStateManager$1:
org.jivesoftware.smackx.ChatStateManager$IncomingMessageInterceptor -> org.jivesoftware.smackx.ChatStateManager$IncomingMessageInterceptor:
    org.jivesoftware.smackx.ChatStateManager this$0 -> this$0
    void chatCreated(org.jivesoftware.smack.Chat,boolean) -> chatCreated
    void processMessage(org.jivesoftware.smack.Chat,org.jivesoftware.smack.packet.Message) -> processMessage
org.jivesoftware.smackx.ChatStateManager$OutgoingMessageInterceptor -> org.jivesoftware.smackx.ChatStateManager$OutgoingMessageInterceptor:
    org.jivesoftware.smackx.ChatStateManager this$0 -> this$0
    void interceptPacket(org.jivesoftware.smack.packet.Packet) -> interceptPacket
org.jivesoftware.smackx.ConfigureProviderManager -> org.jivesoftware.smackx.ConfigureProviderManager:
    void configureProviderManager() -> configureProviderManager
org.jivesoftware.smackx.DefaultMessageEventRequestListener -> org.jivesoftware.smackx.DefaultMessageEventRequestListener:
    void deliveredNotificationRequested(java.lang.String,java.lang.String,org.jivesoftware.smackx.MessageEventManager) -> deliveredNotificationRequested
    void displayedNotificationRequested(java.lang.String,java.lang.String,org.jivesoftware.smackx.MessageEventManager) -> displayedNotificationRequested
    void composingNotificationRequested(java.lang.String,java.lang.String,org.jivesoftware.smackx.MessageEventManager) -> composingNotificationRequested
    void offlineNotificationRequested(java.lang.String,java.lang.String,org.jivesoftware.smackx.MessageEventManager) -> offlineNotificationRequested
org.jivesoftware.smackx.Form -> org.jivesoftware.smackx.Form:
    java.lang.String TYPE_FORM -> TYPE_FORM
    java.lang.String TYPE_SUBMIT -> TYPE_SUBMIT
    java.lang.String TYPE_CANCEL -> TYPE_CANCEL
    java.lang.String TYPE_RESULT -> TYPE_RESULT
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ELEMENT -> ELEMENT
    org.jivesoftware.smackx.packet.DataForm dataForm -> dataForm
    org.jivesoftware.smackx.Form getFormFrom(org.jivesoftware.smack.packet.Packet) -> getFormFrom
    void addField(org.jivesoftware.smackx.FormField) -> addField
    void setAnswer(java.lang.String,java.lang.String) -> setAnswer
    void setAnswer(java.lang.String,int) -> setAnswer
    void setAnswer(java.lang.String,long) -> setAnswer
    void setAnswer(java.lang.String,float) -> setAnswer
    void setAnswer(java.lang.String,double) -> setAnswer
    void setAnswer(java.lang.String,boolean) -> setAnswer
    void setAnswer(org.jivesoftware.smackx.FormField,java.lang.Object) -> setAnswer
    void setAnswer(java.lang.String,java.util.List) -> setAnswer
    void setDefaultAnswer(java.lang.String) -> setDefaultAnswer
    java.util.Iterator getFields() -> getFields
    org.jivesoftware.smackx.FormField getField(java.lang.String) -> getField
    java.lang.String getInstructions() -> getInstructions
    java.lang.String getTitle() -> getTitle
    java.lang.String getType() -> getType
    void setInstructions(java.lang.String) -> setInstructions
    void setTitle(java.lang.String) -> setTitle
    org.jivesoftware.smackx.packet.DataForm getDataFormToSend() -> getDataFormToSend
    boolean isFormType() -> isFormType
    boolean isSubmitType() -> isSubmitType
    org.jivesoftware.smackx.Form createAnswerForm() -> createAnswerForm
org.jivesoftware.smackx.FormField -> org.jivesoftware.smackx.FormField:
    java.lang.String TYPE_BOOLEAN -> TYPE_BOOLEAN
    java.lang.String TYPE_FIXED -> TYPE_FIXED
    java.lang.String TYPE_HIDDEN -> TYPE_HIDDEN
    java.lang.String TYPE_JID_MULTI -> TYPE_JID_MULTI
    java.lang.String TYPE_JID_SINGLE -> TYPE_JID_SINGLE
    java.lang.String TYPE_LIST_MULTI -> TYPE_LIST_MULTI
    java.lang.String TYPE_LIST_SINGLE -> TYPE_LIST_SINGLE
    java.lang.String TYPE_TEXT_MULTI -> TYPE_TEXT_MULTI
    java.lang.String TYPE_TEXT_PRIVATE -> TYPE_TEXT_PRIVATE
    java.lang.String TYPE_TEXT_SINGLE -> TYPE_TEXT_SINGLE
    java.lang.String description -> description
    boolean required -> required
    java.lang.String label -> label
    java.lang.String variable -> variable
    java.lang.String type -> type
    java.util.List options -> options
    java.util.List values -> values
    java.lang.String getDescription() -> getDescription
    java.lang.String getLabel() -> getLabel
    java.util.Iterator getOptions() -> getOptions
    boolean isRequired() -> isRequired
    java.lang.String getType() -> getType
    java.util.Iterator getValues() -> getValues
    java.lang.String getVariable() -> getVariable
    void setDescription(java.lang.String) -> setDescription
    void setLabel(java.lang.String) -> setLabel
    void setRequired(boolean) -> setRequired
    void setType(java.lang.String) -> setType
    void addValue(java.lang.String) -> addValue
    void addValues(java.util.List) -> addValues
    void resetValues() -> resetValues
    void addOption(org.jivesoftware.smackx.FormField$Option) -> addOption
    java.lang.String toXML() -> toXML
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.jivesoftware.smackx.FormField$Option -> org.jivesoftware.smackx.FormField$Option:
    java.lang.String label -> label
    java.lang.String value -> value
    java.lang.String getLabel() -> getLabel
    java.lang.String getValue() -> getValue
    java.lang.String toString() -> toString
    java.lang.String toXML() -> toXML
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.jivesoftware.smackx.Gateway -> org.jivesoftware.smackx.Gateway:
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smackx.ServiceDiscoveryManager sdManager -> sdManager
    org.jivesoftware.smack.Roster roster -> roster
    java.lang.String entityJID -> entityJID
    org.jivesoftware.smack.packet.Registration registerInfo -> registerInfo
    org.jivesoftware.smackx.packet.DiscoverInfo$Identity identity -> identity
    org.jivesoftware.smackx.packet.DiscoverInfo info -> info
    void discoverInfo() -> discoverInfo
    org.jivesoftware.smackx.packet.DiscoverInfo$Identity getIdentity() -> getIdentity
    org.jivesoftware.smack.packet.Registration getRegisterInfo() -> getRegisterInfo
    void refreshRegisterInfo() -> refreshRegisterInfo
    boolean canRegister() -> canRegister
    java.util.List getRequiredFields() -> getRequiredFields
    java.lang.String getName() -> getName
    java.lang.String getType() -> getType
    boolean isRegistered() -> isRegistered
    java.lang.String getField(java.lang.String) -> getField
    java.util.List getFieldNames() -> getFieldNames
    java.lang.String getUsername() -> getUsername
    java.lang.String getPassword() -> getPassword
    java.lang.String getInstructions() -> getInstructions
    void register(java.lang.String,java.lang.String,java.util.Map) -> register
    void register(java.lang.String,java.lang.String) -> register
    void unregister() -> unregister
    void login() -> login
    void login(org.jivesoftware.smack.packet.Presence) -> login
    void logout() -> logout
    java.lang.String access$100(org.jivesoftware.smackx.Gateway) -> access$100
    org.jivesoftware.smack.Roster access$200(org.jivesoftware.smackx.Gateway) -> access$200
    org.jivesoftware.smack.Connection access$300(org.jivesoftware.smackx.Gateway) -> access$300
org.jivesoftware.smackx.Gateway$1 -> org.jivesoftware.smackx.Gateway$1:
org.jivesoftware.smackx.Gateway$GatewayPresenceListener -> org.jivesoftware.smackx.Gateway$GatewayPresenceListener:
    org.jivesoftware.smackx.Gateway this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.GatewayManager -> org.jivesoftware.smackx.GatewayManager:
    java.util.Map instances -> instances
    org.jivesoftware.smackx.ServiceDiscoveryManager sdManager -> sdManager
    java.util.Map localGateways -> localGateways
    java.util.Map nonLocalGateways -> nonLocalGateways
    java.util.Map gateways -> gateways
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smack.Roster roster -> roster
    void loadLocalGateways() -> loadLocalGateways
    void discoverGateway(java.lang.String) -> discoverGateway
    void loadNonLocalGateways() -> loadNonLocalGateways
    org.jivesoftware.smackx.GatewayManager getInstanceFor(org.jivesoftware.smack.Connection) -> getInstanceFor
    java.util.List getLocalGateways() -> getLocalGateways
    java.util.List getNonLocalGateways() -> getNonLocalGateways
    void refreshNonLocalGateways() -> refreshNonLocalGateways
    org.jivesoftware.smackx.Gateway getGateway(java.lang.String) -> getGateway
org.jivesoftware.smackx.GroupChatInvitation -> org.jivesoftware.smackx.GroupChatInvitation:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String roomAddress -> roomAddress
    java.lang.String getRoomAddress() -> getRoomAddress
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.GroupChatInvitation$Provider -> org.jivesoftware.smackx.GroupChatInvitation$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.InitStaticCode -> org.jivesoftware.smackx.InitStaticCode:
    void initStaticCode(android.content.Context) -> initStaticCode
org.jivesoftware.smackx.LastActivityManager -> org.jivesoftware.smackx.LastActivityManager:
    long lastMessageSent -> lastMessageSent
    org.jivesoftware.smack.Connection connection -> connection
    void resetIdleTime() -> resetIdleTime
    long getIdleTime() -> getIdleTime
    org.jivesoftware.smackx.packet.LastActivity getLastActivity(org.jivesoftware.smack.Connection,java.lang.String) -> getLastActivity
    boolean isLastActivitySupported(org.jivesoftware.smack.Connection,java.lang.String) -> isLastActivitySupported
    void access$100(org.jivesoftware.smackx.LastActivityManager) -> access$100
    long access$200(org.jivesoftware.smackx.LastActivityManager) -> access$200
    org.jivesoftware.smack.Connection access$300(org.jivesoftware.smackx.LastActivityManager) -> access$300
org.jivesoftware.smackx.LastActivityManager$1 -> org.jivesoftware.smackx.LastActivityManager$1:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smackx.LastActivityManager$2 -> org.jivesoftware.smackx.LastActivityManager$2:
    org.jivesoftware.smackx.LastActivityManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.LastActivityManager$3 -> org.jivesoftware.smackx.LastActivityManager$3:
    org.jivesoftware.smackx.LastActivityManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.LastActivityManager$4 -> org.jivesoftware.smackx.LastActivityManager$4:
    org.jivesoftware.smackx.LastActivityManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.LastActivityManager$5 -> org.jivesoftware.smackx.LastActivityManager$5:
    int[] $SwitchMap$org$jivesoftware$smack$packet$Presence$Mode -> $SwitchMap$org$jivesoftware$smack$packet$Presence$Mode
org.jivesoftware.smackx.MessageEventManager -> org.jivesoftware.smackx.MessageEventManager:
    java.util.List messageEventNotificationListeners -> messageEventNotificationListeners
    java.util.List messageEventRequestListeners -> messageEventRequestListeners
    org.jivesoftware.smack.Connection con -> con
    org.jivesoftware.smack.filter.PacketFilter packetFilter -> packetFilter
    org.jivesoftware.smack.PacketListener packetListener -> packetListener
    void addNotificationsRequests(org.jivesoftware.smack.packet.Message,boolean,boolean,boolean,boolean) -> addNotificationsRequests
    void addMessageEventRequestListener(org.jivesoftware.smackx.MessageEventRequestListener) -> addMessageEventRequestListener
    void removeMessageEventRequestListener(org.jivesoftware.smackx.MessageEventRequestListener) -> removeMessageEventRequestListener
    void addMessageEventNotificationListener(org.jivesoftware.smackx.MessageEventNotificationListener) -> addMessageEventNotificationListener
    void removeMessageEventNotificationListener(org.jivesoftware.smackx.MessageEventNotificationListener) -> removeMessageEventNotificationListener
    void fireMessageEventRequestListeners(java.lang.String,java.lang.String,java.lang.String) -> fireMessageEventRequestListeners
    void fireMessageEventNotificationListeners(java.lang.String,java.lang.String,java.lang.String) -> fireMessageEventNotificationListeners
    void init() -> init
    void sendDeliveredNotification(java.lang.String,java.lang.String) -> sendDeliveredNotification
    void sendDisplayedNotification(java.lang.String,java.lang.String) -> sendDisplayedNotification
    void sendComposingNotification(java.lang.String,java.lang.String) -> sendComposingNotification
    void sendCancelledNotification(java.lang.String,java.lang.String) -> sendCancelledNotification
    void destroy() -> destroy
    void finalize() -> finalize
    void access$000(org.jivesoftware.smackx.MessageEventManager,java.lang.String,java.lang.String,java.lang.String) -> access$000
    void access$100(org.jivesoftware.smackx.MessageEventManager,java.lang.String,java.lang.String,java.lang.String) -> access$100
org.jivesoftware.smackx.MessageEventManager$1 -> org.jivesoftware.smackx.MessageEventManager$1:
    org.jivesoftware.smackx.MessageEventManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.MessageEventNotificationListener -> org.jivesoftware.smackx.MessageEventNotificationListener:
    void deliveredNotification(java.lang.String,java.lang.String) -> deliveredNotification
    void displayedNotification(java.lang.String,java.lang.String) -> displayedNotification
    void composingNotification(java.lang.String,java.lang.String) -> composingNotification
    void offlineNotification(java.lang.String,java.lang.String) -> offlineNotification
    void cancelledNotification(java.lang.String,java.lang.String) -> cancelledNotification
org.jivesoftware.smackx.MessageEventRequestListener -> org.jivesoftware.smackx.MessageEventRequestListener:
    void deliveredNotificationRequested(java.lang.String,java.lang.String,org.jivesoftware.smackx.MessageEventManager) -> deliveredNotificationRequested
    void displayedNotificationRequested(java.lang.String,java.lang.String,org.jivesoftware.smackx.MessageEventManager) -> displayedNotificationRequested
    void composingNotificationRequested(java.lang.String,java.lang.String,org.jivesoftware.smackx.MessageEventManager) -> composingNotificationRequested
    void offlineNotificationRequested(java.lang.String,java.lang.String,org.jivesoftware.smackx.MessageEventManager) -> offlineNotificationRequested
org.jivesoftware.smackx.MultipleRecipientInfo -> org.jivesoftware.smackx.MultipleRecipientInfo:
    org.jivesoftware.smackx.packet.MultipleAddresses extension -> extension
    java.util.List getTOAddresses() -> getTOAddresses
    java.util.List getCCAddresses() -> getCCAddresses
    java.lang.String getReplyRoom() -> getReplyRoom
    boolean shouldNotReply() -> shouldNotReply
    org.jivesoftware.smackx.packet.MultipleAddresses$Address getReplyAddress() -> getReplyAddress
org.jivesoftware.smackx.MultipleRecipientManager -> org.jivesoftware.smackx.MultipleRecipientManager:
    org.jivesoftware.smack.util.Cache services -> services
    void send(org.jivesoftware.smack.Connection,org.jivesoftware.smack.packet.Packet,java.util.List,java.util.List,java.util.List) -> send
    void send(org.jivesoftware.smack.Connection,org.jivesoftware.smack.packet.Packet,java.util.List,java.util.List,java.util.List,java.lang.String,java.lang.String,boolean) -> send
    void reply(org.jivesoftware.smack.Connection,org.jivesoftware.smack.packet.Message,org.jivesoftware.smack.packet.Message) -> reply
    org.jivesoftware.smackx.MultipleRecipientInfo getMultipleRecipientInfo(org.jivesoftware.smack.packet.Packet) -> getMultipleRecipientInfo
    void sendToIndividualRecipients(org.jivesoftware.smack.Connection,org.jivesoftware.smack.packet.Packet,java.util.List,java.util.List,java.util.List) -> sendToIndividualRecipients
    void sendThroughService(org.jivesoftware.smack.Connection,org.jivesoftware.smack.packet.Packet,java.util.List,java.util.List,java.util.List,java.lang.String,java.lang.String,boolean,java.lang.String) -> sendThroughService
    java.lang.String getMultipleRecipienServiceAddress(org.jivesoftware.smack.Connection) -> getMultipleRecipienServiceAddress
org.jivesoftware.smackx.MultipleRecipientManager$PacketCopy -> org.jivesoftware.smackx.MultipleRecipientManager$PacketCopy:
    java.lang.String text -> text
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.NodeInformationProvider -> org.jivesoftware.smackx.NodeInformationProvider:
    java.util.List getNodeItems() -> getNodeItems
    java.util.List getNodeFeatures() -> getNodeFeatures
    java.util.List getNodeIdentities() -> getNodeIdentities
    java.util.List getNodePacketExtensions() -> getNodePacketExtensions
org.jivesoftware.smackx.OfflineMessageHeader -> org.jivesoftware.smackx.OfflineMessageHeader:
    java.lang.String user -> user
    java.lang.String jid -> jid
    java.lang.String stamp -> stamp
    java.lang.String getUser() -> getUser
    java.lang.String getJid() -> getJid
    java.lang.String getStamp() -> getStamp
org.jivesoftware.smackx.OfflineMessageManager -> org.jivesoftware.smackx.OfflineMessageManager:
    java.lang.String namespace -> namespace
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smack.filter.PacketFilter packetFilter -> packetFilter
    boolean supportsFlexibleRetrieval() -> supportsFlexibleRetrieval
    int getMessageCount() -> getMessageCount
    java.util.Iterator getHeaders() -> getHeaders
    java.util.Iterator getMessages(java.util.List) -> getMessages
    java.util.Iterator getMessages() -> getMessages
    void deleteMessages(java.util.List) -> deleteMessages
    void deleteMessages() -> deleteMessages
org.jivesoftware.smackx.OfflineMessageManager$1 -> org.jivesoftware.smackx.OfflineMessageManager$1:
    java.util.List val$nodes -> val$nodes
    org.jivesoftware.smackx.OfflineMessageManager this$0 -> this$0
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smackx.PEPListener -> org.jivesoftware.smackx.PEPListener:
    void eventReceived(java.lang.String,org.jivesoftware.smackx.packet.PEPEvent) -> eventReceived
org.jivesoftware.smackx.PEPManager -> org.jivesoftware.smackx.PEPManager:
    java.util.List pepListeners -> pepListeners
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smack.filter.PacketFilter packetFilter -> packetFilter
    org.jivesoftware.smack.PacketListener packetListener -> packetListener
    void addPEPListener(org.jivesoftware.smackx.PEPListener) -> addPEPListener
    void removePEPListener(org.jivesoftware.smackx.PEPListener) -> removePEPListener
    void publish(org.jivesoftware.smackx.packet.PEPItem) -> publish
    void firePEPListeners(java.lang.String,org.jivesoftware.smackx.packet.PEPEvent) -> firePEPListeners
    void init() -> init
    void destroy() -> destroy
    void finalize() -> finalize
    void access$000(org.jivesoftware.smackx.PEPManager,java.lang.String,org.jivesoftware.smackx.packet.PEPEvent) -> access$000
org.jivesoftware.smackx.PEPManager$1 -> org.jivesoftware.smackx.PEPManager$1:
    org.jivesoftware.smackx.PEPManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.PrivateDataManager -> org.jivesoftware.smackx.PrivateDataManager:
    java.util.Map privateDataProviders -> privateDataProviders
    org.jivesoftware.smack.Connection connection -> connection
    java.lang.String user -> user
    org.jivesoftware.smackx.provider.PrivateDataProvider getPrivateDataProvider(java.lang.String,java.lang.String) -> getPrivateDataProvider
    void addPrivateDataProvider(java.lang.String,java.lang.String,org.jivesoftware.smackx.provider.PrivateDataProvider) -> addPrivateDataProvider
    void removePrivateDataProvider(java.lang.String,java.lang.String) -> removePrivateDataProvider
    org.jivesoftware.smackx.packet.PrivateData getPrivateData(java.lang.String,java.lang.String) -> getPrivateData
    void setPrivateData(org.jivesoftware.smackx.packet.PrivateData) -> setPrivateData
    java.lang.String getProviderKey(java.lang.String,java.lang.String) -> getProviderKey
org.jivesoftware.smackx.PrivateDataManager$1 -> org.jivesoftware.smackx.PrivateDataManager$1:
    java.lang.String val$elementName -> val$elementName
    java.lang.String val$namespace -> val$namespace
    org.jivesoftware.smackx.PrivateDataManager this$0 -> this$0
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.PrivateDataManager$2 -> org.jivesoftware.smackx.PrivateDataManager$2:
    org.jivesoftware.smackx.packet.PrivateData val$privateData -> val$privateData
    org.jivesoftware.smackx.PrivateDataManager this$0 -> this$0
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.PrivateDataManager$PrivateDataIQProvider -> org.jivesoftware.smackx.PrivateDataManager$PrivateDataIQProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.PrivateDataManager$PrivateDataResult -> org.jivesoftware.smackx.PrivateDataManager$PrivateDataResult:
    org.jivesoftware.smackx.packet.PrivateData privateData -> privateData
    org.jivesoftware.smackx.packet.PrivateData getPrivateData() -> getPrivateData
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.RemoteRosterEntry -> org.jivesoftware.smackx.RemoteRosterEntry:
    java.lang.String user -> user
    java.lang.String name -> name
    java.util.List groupNames -> groupNames
    java.lang.String getUser() -> getUser
    java.lang.String getName() -> getName
    java.util.Iterator getGroupNames() -> getGroupNames
    java.lang.String[] getGroupArrayNames() -> getGroupArrayNames
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.ReportedData -> org.jivesoftware.smackx.ReportedData:
    java.util.List columns -> columns
    java.util.List rows -> rows
    java.lang.String title -> title
    org.jivesoftware.smackx.ReportedData getReportedDataFrom(org.jivesoftware.smack.packet.Packet) -> getReportedDataFrom
    void addRow(org.jivesoftware.smackx.ReportedData$Row) -> addRow
    void addColumn(org.jivesoftware.smackx.ReportedData$Column) -> addColumn
    java.util.Iterator getRows() -> getRows
    java.util.Iterator getColumns() -> getColumns
    java.lang.String getTitle() -> getTitle
org.jivesoftware.smackx.ReportedData$Column -> org.jivesoftware.smackx.ReportedData$Column:
    java.lang.String label -> label
    java.lang.String variable -> variable
    java.lang.String type -> type
    java.lang.String getLabel() -> getLabel
    java.lang.String getType() -> getType
    java.lang.String getVariable() -> getVariable
org.jivesoftware.smackx.ReportedData$Field -> org.jivesoftware.smackx.ReportedData$Field:
    java.lang.String variable -> variable
    java.util.List values -> values
    java.lang.String getVariable() -> getVariable
    java.util.Iterator getValues() -> getValues
org.jivesoftware.smackx.ReportedData$Row -> org.jivesoftware.smackx.ReportedData$Row:
    java.util.List fields -> fields
    java.util.Iterator getValues(java.lang.String) -> getValues
    java.util.Iterator getFields() -> getFields
org.jivesoftware.smackx.RosterExchangeListener -> org.jivesoftware.smackx.RosterExchangeListener:
    void entriesReceived(java.lang.String,java.util.Iterator) -> entriesReceived
org.jivesoftware.smackx.RosterExchangeManager -> org.jivesoftware.smackx.RosterExchangeManager:
    java.util.List rosterExchangeListeners -> rosterExchangeListeners
    org.jivesoftware.smack.Connection con -> con
    org.jivesoftware.smack.filter.PacketFilter packetFilter -> packetFilter
    org.jivesoftware.smack.PacketListener packetListener -> packetListener
    void addRosterListener(org.jivesoftware.smackx.RosterExchangeListener) -> addRosterListener
    void removeRosterListener(org.jivesoftware.smackx.RosterExchangeListener) -> removeRosterListener
    void send(org.jivesoftware.smack.Roster,java.lang.String) -> send
    void send(org.jivesoftware.smack.RosterEntry,java.lang.String) -> send
    void send(org.jivesoftware.smack.RosterGroup,java.lang.String) -> send
    void fireRosterExchangeListeners(java.lang.String,java.util.Iterator) -> fireRosterExchangeListeners
    void init() -> init
    void destroy() -> destroy
    void finalize() -> finalize
    void access$000(org.jivesoftware.smackx.RosterExchangeManager,java.lang.String,java.util.Iterator) -> access$000
org.jivesoftware.smackx.RosterExchangeManager$1 -> org.jivesoftware.smackx.RosterExchangeManager$1:
    org.jivesoftware.smackx.RosterExchangeManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.ServiceDiscoveryManager -> org.jivesoftware.smackx.ServiceDiscoveryManager:
    java.lang.String DEFAULT_IDENTITY_NAME -> DEFAULT_IDENTITY_NAME
    java.lang.String DEFAULT_IDENTITY_CATEGORY -> DEFAULT_IDENTITY_CATEGORY
    java.lang.String DEFAULT_IDENTITY_TYPE -> DEFAULT_IDENTITY_TYPE
    org.jivesoftware.smackx.packet.DiscoverInfo$Identity defaultIdentity -> defaultIdentity
    java.util.Set identities -> identities
    org.jivesoftware.smackx.packet.DiscoverInfo$Identity identity -> identity
    org.jivesoftware.smackx.entitycaps.EntityCapsManager capsManager -> capsManager
    java.util.Map instances -> instances
    java.lang.ref.WeakReference connection -> connection
    java.util.Set features -> features
    org.jivesoftware.smackx.packet.DataForm extendedInfo -> extendedInfo
    java.util.Map nodeInformationProviders -> nodeInformationProviders
    void setDefaultIdentity(org.jivesoftware.smackx.packet.DiscoverInfo$Identity) -> setDefaultIdentity
    java.lang.String getIdentityName() -> getIdentityName
    void setIdentityName(java.lang.String) -> setIdentityName
    java.lang.String getIdentityType() -> getIdentityType
    void setIdentityType(java.lang.String) -> setIdentityType
    void addIdentity(org.jivesoftware.smackx.packet.DiscoverInfo$Identity) -> addIdentity
    boolean removeIdentity(org.jivesoftware.smackx.packet.DiscoverInfo$Identity) -> removeIdentity
    java.util.Set getIdentities() -> getIdentities
    org.jivesoftware.smackx.ServiceDiscoveryManager getInstanceFor(org.jivesoftware.smack.Connection) -> getInstanceFor
    void addDiscoverInfoTo(org.jivesoftware.smackx.packet.DiscoverInfo) -> addDiscoverInfoTo
    org.jivesoftware.smackx.NodeInformationProvider getNodeInformationProvider(java.lang.String) -> getNodeInformationProvider
    void setNodeInformationProvider(java.lang.String,org.jivesoftware.smackx.NodeInformationProvider) -> setNodeInformationProvider
    void removeNodeInformationProvider(java.lang.String) -> removeNodeInformationProvider
    java.util.Iterator getFeatures() -> getFeatures
    java.util.List getFeaturesList() -> getFeaturesList
    void addFeature(java.lang.String) -> addFeature
    void removeFeature(java.lang.String) -> removeFeature
    boolean includesFeature(java.lang.String) -> includesFeature
    void setExtendedInfo(org.jivesoftware.smackx.packet.DataForm) -> setExtendedInfo
    org.jivesoftware.smackx.packet.DataForm getExtendedInfo() -> getExtendedInfo
    java.util.List getExtendedInfoAsList() -> getExtendedInfoAsList
    void removeExtendedInfo() -> removeExtendedInfo
    org.jivesoftware.smackx.packet.DiscoverInfo discoverInfo(java.lang.String) -> discoverInfo
    org.jivesoftware.smackx.packet.DiscoverInfo discoverInfo(java.lang.String,java.lang.String) -> discoverInfo
    org.jivesoftware.smackx.packet.DiscoverItems discoverItems(java.lang.String) -> discoverItems
    org.jivesoftware.smackx.packet.DiscoverItems discoverItems(java.lang.String,java.lang.String) -> discoverItems
    boolean canPublishItems(java.lang.String) -> canPublishItems
    boolean canPublishItems(org.jivesoftware.smackx.packet.DiscoverInfo) -> canPublishItems
    void publishItems(java.lang.String,org.jivesoftware.smackx.packet.DiscoverItems) -> publishItems
    void publishItems(java.lang.String,java.lang.String,org.jivesoftware.smackx.packet.DiscoverItems) -> publishItems
    void setEntityCapsManager(org.jivesoftware.smackx.entitycaps.EntityCapsManager) -> setEntityCapsManager
    void renewEntityCapsVersion() -> renewEntityCapsVersion
    java.lang.ref.WeakReference access$000(org.jivesoftware.smackx.ServiceDiscoveryManager) -> access$000
    org.jivesoftware.smackx.NodeInformationProvider access$100(org.jivesoftware.smackx.ServiceDiscoveryManager,java.lang.String) -> access$100
org.jivesoftware.smackx.ServiceDiscoveryManager$1 -> org.jivesoftware.smackx.ServiceDiscoveryManager$1:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smackx.ServiceDiscoveryManager$2 -> org.jivesoftware.smackx.ServiceDiscoveryManager$2:
    org.jivesoftware.smackx.ServiceDiscoveryManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.ServiceDiscoveryManager$3 -> org.jivesoftware.smackx.ServiceDiscoveryManager$3:
    org.jivesoftware.smackx.ServiceDiscoveryManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.SharedGroupManager -> org.jivesoftware.smackx.SharedGroupManager:
    java.util.List getSharedGroups(org.jivesoftware.smack.Connection) -> getSharedGroups
org.jivesoftware.smackx.XHTMLManager -> org.jivesoftware.smackx.XHTMLManager:
    java.lang.String namespace -> namespace
    java.util.Iterator getBodies(org.jivesoftware.smack.packet.Message) -> getBodies
    void addBody(org.jivesoftware.smack.packet.Message,java.lang.String) -> addBody
    boolean isXHTMLMessage(org.jivesoftware.smack.packet.Message) -> isXHTMLMessage
    void setServiceEnabled(org.jivesoftware.smack.Connection,boolean) -> setServiceEnabled
    boolean isServiceEnabled(org.jivesoftware.smack.Connection) -> isServiceEnabled
    boolean isServiceEnabled(org.jivesoftware.smack.Connection,java.lang.String) -> isServiceEnabled
org.jivesoftware.smackx.XHTMLManager$1 -> org.jivesoftware.smackx.XHTMLManager$1:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smackx.XHTMLText -> org.jivesoftware.smackx.XHTMLText:
    java.lang.StringBuilder text -> text
    void appendOpenAnchorTag(java.lang.String,java.lang.String) -> appendOpenAnchorTag
    void appendCloseAnchorTag() -> appendCloseAnchorTag
    void appendOpenBlockQuoteTag(java.lang.String) -> appendOpenBlockQuoteTag
    void appendCloseBlockQuoteTag() -> appendCloseBlockQuoteTag
    void appendOpenBodyTag(java.lang.String,java.lang.String) -> appendOpenBodyTag
    java.lang.String closeBodyTag() -> closeBodyTag
    void appendBrTag() -> appendBrTag
    void appendOpenCiteTag() -> appendOpenCiteTag
    void appendOpenCodeTag() -> appendOpenCodeTag
    void appendCloseCodeTag() -> appendCloseCodeTag
    void appendOpenEmTag() -> appendOpenEmTag
    void appendCloseEmTag() -> appendCloseEmTag
    void appendOpenHeaderTag(int,java.lang.String) -> appendOpenHeaderTag
    void appendCloseHeaderTag(int) -> appendCloseHeaderTag
    void appendImageTag(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> appendImageTag
    void appendLineItemTag(java.lang.String) -> appendLineItemTag
    void appendOpenOrderedListTag(java.lang.String) -> appendOpenOrderedListTag
    void appendCloseOrderedListTag() -> appendCloseOrderedListTag
    void appendOpenUnorderedListTag(java.lang.String) -> appendOpenUnorderedListTag
    void appendCloseUnorderedListTag() -> appendCloseUnorderedListTag
    void appendOpenParagraphTag(java.lang.String) -> appendOpenParagraphTag
    void appendCloseParagraphTag() -> appendCloseParagraphTag
    void appendOpenInlinedQuoteTag(java.lang.String) -> appendOpenInlinedQuoteTag
    void appendCloseInlinedQuoteTag() -> appendCloseInlinedQuoteTag
    void appendOpenSpanTag(java.lang.String) -> appendOpenSpanTag
    void appendCloseSpanTag() -> appendCloseSpanTag
    void appendOpenStrongTag() -> appendOpenStrongTag
    void appendCloseStrongTag() -> appendCloseStrongTag
    void append(java.lang.String) -> append
    java.lang.String toString() -> toString
org.jivesoftware.smackx.bookmark.BookmarkManager -> org.jivesoftware.smackx.bookmark.BookmarkManager:
    java.util.Map bookmarkManagerMap -> bookmarkManagerMap
    org.jivesoftware.smackx.PrivateDataManager privateDataManager -> privateDataManager
    org.jivesoftware.smackx.bookmark.Bookmarks bookmarks -> bookmarks
    java.lang.Object bookmarkLock -> bookmarkLock
    org.jivesoftware.smackx.bookmark.BookmarkManager getBookmarkManager(org.jivesoftware.smack.Connection) -> getBookmarkManager
    java.util.Collection getBookmarkedConferences() -> getBookmarkedConferences
    void addBookmarkedConference(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String) -> addBookmarkedConference
    void removeBookmarkedConference(java.lang.String) -> removeBookmarkedConference
    java.util.Collection getBookmarkedURLs() -> getBookmarkedURLs
    void addBookmarkedURL(java.lang.String,java.lang.String,boolean) -> addBookmarkedURL
    void removeBookmarkedURL(java.lang.String) -> removeBookmarkedURL
    org.jivesoftware.smackx.bookmark.Bookmarks retrieveBookmarks() -> retrieveBookmarks
org.jivesoftware.smackx.bookmark.BookmarkedConference -> org.jivesoftware.smackx.bookmark.BookmarkedConference:
    java.lang.String name -> name
    boolean autoJoin -> autoJoin
    java.lang.String jid -> jid
    java.lang.String nickname -> nickname
    java.lang.String password -> password
    boolean isShared -> isShared
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    boolean isAutoJoin() -> isAutoJoin
    void setAutoJoin(boolean) -> setAutoJoin
    java.lang.String getJid() -> getJid
    java.lang.String getNickname() -> getNickname
    void setNickname(java.lang.String) -> setNickname
    java.lang.String getPassword() -> getPassword
    void setPassword(java.lang.String) -> setPassword
    boolean equals(java.lang.Object) -> equals
    void setShared(boolean) -> setShared
    boolean isShared() -> isShared
org.jivesoftware.smackx.bookmark.BookmarkedURL -> org.jivesoftware.smackx.bookmark.BookmarkedURL:
    java.lang.String name -> name
    java.lang.String URL -> URL
    boolean isRss -> isRss
    boolean isShared -> isShared
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getURL() -> getURL
    void setRss(boolean) -> setRss
    boolean isRss() -> isRss
    boolean equals(java.lang.Object) -> equals
    void setShared(boolean) -> setShared
    boolean isShared() -> isShared
org.jivesoftware.smackx.bookmark.Bookmarks -> org.jivesoftware.smackx.bookmark.Bookmarks:
    java.util.List bookmarkedURLS -> bookmarkedURLS
    java.util.List bookmarkedConferences -> bookmarkedConferences
    void addBookmarkedURL(org.jivesoftware.smackx.bookmark.BookmarkedURL) -> addBookmarkedURL
    void removeBookmarkedURL(org.jivesoftware.smackx.bookmark.BookmarkedURL) -> removeBookmarkedURL
    void clearBookmarkedURLS() -> clearBookmarkedURLS
    void addBookmarkedConference(org.jivesoftware.smackx.bookmark.BookmarkedConference) -> addBookmarkedConference
    void removeBookmarkedConference(org.jivesoftware.smackx.bookmark.BookmarkedConference) -> removeBookmarkedConference
    void clearBookmarkedConferences() -> clearBookmarkedConferences
    java.util.List getBookmarkedURLS() -> getBookmarkedURLS
    java.util.List getBookmarkedConferences() -> getBookmarkedConferences
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
    org.jivesoftware.smackx.bookmark.BookmarkedURL getURLStorage(org.xmlpull.v1.XmlPullParser) -> getURLStorage
    org.jivesoftware.smackx.bookmark.BookmarkedConference getConferenceStorage(org.xmlpull.v1.XmlPullParser) -> getConferenceStorage
    org.jivesoftware.smackx.bookmark.BookmarkedURL access$000(org.xmlpull.v1.XmlPullParser) -> access$000
    org.jivesoftware.smackx.bookmark.BookmarkedConference access$100(org.xmlpull.v1.XmlPullParser) -> access$100
org.jivesoftware.smackx.bookmark.Bookmarks$Provider -> org.jivesoftware.smackx.bookmark.Bookmarks$Provider:
    org.jivesoftware.smackx.packet.PrivateData parsePrivateData(org.xmlpull.v1.XmlPullParser) -> parsePrivateData
org.jivesoftware.smackx.bookmark.SharedBookmark -> org.jivesoftware.smackx.bookmark.SharedBookmark:
    boolean isShared() -> isShared
org.jivesoftware.smackx.bytestreams.BytestreamListener -> org.jivesoftware.smackx.bytestreams.BytestreamListener:
    void incomingBytestreamRequest(org.jivesoftware.smackx.bytestreams.BytestreamRequest) -> incomingBytestreamRequest
org.jivesoftware.smackx.bytestreams.BytestreamManager -> org.jivesoftware.smackx.bytestreams.BytestreamManager:
    void addIncomingBytestreamListener(org.jivesoftware.smackx.bytestreams.BytestreamListener) -> addIncomingBytestreamListener
    void removeIncomingBytestreamListener(org.jivesoftware.smackx.bytestreams.BytestreamListener) -> removeIncomingBytestreamListener
    void addIncomingBytestreamListener(org.jivesoftware.smackx.bytestreams.BytestreamListener,java.lang.String) -> addIncomingBytestreamListener
    void removeIncomingBytestreamListener(java.lang.String) -> removeIncomingBytestreamListener
    org.jivesoftware.smackx.bytestreams.BytestreamSession establishSession(java.lang.String) -> establishSession
    org.jivesoftware.smackx.bytestreams.BytestreamSession establishSession(java.lang.String,java.lang.String) -> establishSession
org.jivesoftware.smackx.bytestreams.BytestreamRequest -> org.jivesoftware.smackx.bytestreams.BytestreamRequest:
    java.lang.String getFrom() -> getFrom
    java.lang.String getSessionID() -> getSessionID
    org.jivesoftware.smackx.bytestreams.BytestreamSession accept() -> accept
    void reject() -> reject
org.jivesoftware.smackx.bytestreams.BytestreamSession -> org.jivesoftware.smackx.bytestreams.BytestreamSession:
    java.io.InputStream getInputStream() -> getInputStream
    java.io.OutputStream getOutputStream() -> getOutputStream
    void close() -> close
    int getReadTimeout() -> getReadTimeout
    void setReadTimeout(int) -> setReadTimeout
org.jivesoftware.smackx.bytestreams.ibb.CloseListener -> org.jivesoftware.smackx.bytestreams.ibb.CloseListener:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager manager -> manager
    org.jivesoftware.smack.filter.PacketFilter closeFilter -> closeFilter
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    org.jivesoftware.smack.filter.PacketFilter getFilter() -> getFilter
org.jivesoftware.smackx.bytestreams.ibb.DataListener -> org.jivesoftware.smackx.bytestreams.ibb.DataListener:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager manager -> manager
    org.jivesoftware.smack.filter.PacketFilter dataFilter -> dataFilter
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    org.jivesoftware.smack.filter.PacketFilter getFilter() -> getFilter
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamListener -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamListener:
    void incomingBytestreamRequest(org.jivesoftware.smackx.bytestreams.BytestreamRequest) -> incomingBytestreamRequest
    void incomingBytestreamRequest(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamRequest) -> incomingBytestreamRequest
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager:
    java.lang.String NAMESPACE -> NAMESPACE
    int MAXIMUM_BLOCK_SIZE -> MAXIMUM_BLOCK_SIZE
    java.lang.String SESSION_ID_PREFIX -> SESSION_ID_PREFIX
    java.util.Random randomGenerator -> randomGenerator
    java.util.Map managers -> managers
    org.jivesoftware.smack.Connection connection -> connection
    java.util.Map userListeners -> userListeners
    java.util.List allRequestListeners -> allRequestListeners
    org.jivesoftware.smackx.bytestreams.ibb.InitiationListener initiationListener -> initiationListener
    org.jivesoftware.smackx.bytestreams.ibb.DataListener dataListener -> dataListener
    org.jivesoftware.smackx.bytestreams.ibb.CloseListener closeListener -> closeListener
    java.util.Map sessions -> sessions
    int defaultBlockSize -> defaultBlockSize
    int maximumBlockSize -> maximumBlockSize
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType stanza -> stanza
    java.util.List ignoredBytestreamRequests -> ignoredBytestreamRequests
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager getByteStreamManager(org.jivesoftware.smack.Connection) -> getByteStreamManager
    void addIncomingBytestreamListener(org.jivesoftware.smackx.bytestreams.BytestreamListener) -> addIncomingBytestreamListener
    void removeIncomingBytestreamListener(org.jivesoftware.smackx.bytestreams.BytestreamListener) -> removeIncomingBytestreamListener
    void addIncomingBytestreamListener(org.jivesoftware.smackx.bytestreams.BytestreamListener,java.lang.String) -> addIncomingBytestreamListener
    void removeIncomingBytestreamListener(java.lang.String) -> removeIncomingBytestreamListener
    void ignoreBytestreamRequestOnce(java.lang.String) -> ignoreBytestreamRequestOnce
    int getDefaultBlockSize() -> getDefaultBlockSize
    void setDefaultBlockSize(int) -> setDefaultBlockSize
    int getMaximumBlockSize() -> getMaximumBlockSize
    void setMaximumBlockSize(int) -> setMaximumBlockSize
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType getStanza() -> getStanza
    void setStanza(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType) -> setStanza
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession establishSession(java.lang.String) -> establishSession
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession establishSession(java.lang.String,java.lang.String) -> establishSession
    void replyRejectPacket(org.jivesoftware.smack.packet.IQ) -> replyRejectPacket
    void replyResourceConstraintPacket(org.jivesoftware.smack.packet.IQ) -> replyResourceConstraintPacket
    void replyItemNotFoundPacket(org.jivesoftware.smack.packet.IQ) -> replyItemNotFoundPacket
    java.lang.String getNextSessionID() -> getNextSessionID
    org.jivesoftware.smack.Connection getConnection() -> getConnection
    org.jivesoftware.smackx.bytestreams.BytestreamListener getUserListener(java.lang.String) -> getUserListener
    java.util.List getAllRequestListeners() -> getAllRequestListeners
    java.util.Map getSessions() -> getSessions
    java.util.List getIgnoredBytestreamRequests() -> getIgnoredBytestreamRequests
    void disableService() -> disableService
    org.jivesoftware.smackx.bytestreams.BytestreamSession establishSession(java.lang.String,java.lang.String) -> establishSession
    org.jivesoftware.smackx.bytestreams.BytestreamSession establishSession(java.lang.String) -> establishSession
    void access$000(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager) -> access$000
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$1 -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$1:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$1$1 -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$1$1:
    org.jivesoftware.smack.Connection val$connection -> val$connection
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$1 this$0 -> this$0
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectionSuccessful() -> reconnectionSuccessful
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType IQ -> IQ
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType MESSAGE -> MESSAGE
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType[] $VALUES -> $VALUES
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType[] values() -> values
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamRequest -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamRequest:
    org.jivesoftware.smackx.bytestreams.ibb.packet.Open byteStreamRequest -> byteStreamRequest
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager manager -> manager
    java.lang.String getFrom() -> getFrom
    java.lang.String getSessionID() -> getSessionID
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession accept() -> accept
    void reject() -> reject
    org.jivesoftware.smackx.bytestreams.BytestreamSession accept() -> accept
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession:
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smackx.bytestreams.ibb.packet.Open byteStreamRequest -> byteStreamRequest
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBInputStream inputStream -> inputStream
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBOutputStream outputStream -> outputStream
    java.lang.String remoteJID -> remoteJID
    boolean closeBothStreamsEnabled -> closeBothStreamsEnabled
    boolean isClosed -> isClosed
    java.io.InputStream getInputStream() -> getInputStream
    java.io.OutputStream getOutputStream() -> getOutputStream
    int getReadTimeout() -> getReadTimeout
    void setReadTimeout(int) -> setReadTimeout
    boolean isCloseBothStreamsEnabled() -> isCloseBothStreamsEnabled
    void setCloseBothStreamsEnabled(boolean) -> setCloseBothStreamsEnabled
    void close() -> close
    void closeByPeer(org.jivesoftware.smackx.bytestreams.ibb.packet.Close) -> closeByPeer
    void closeByLocal(boolean) -> closeByLocal
    org.jivesoftware.smack.Connection access$800(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession) -> access$800
    java.lang.String access$1000(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession) -> access$1000
    org.jivesoftware.smackx.bytestreams.ibb.packet.Open access$1100(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession) -> access$1100
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$1 -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$1:
    int[] $SwitchMap$org$jivesoftware$smackx$bytestreams$ibb$InBandBytestreamManager$StanzaType -> $SwitchMap$org$jivesoftware$smackx$bytestreams$ibb$InBandBytestreamManager$StanzaType
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBDataPacketFilter -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBDataPacketFilter:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession this$0 -> this$0
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBInputStream -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBInputStream:
    org.jivesoftware.smack.PacketListener dataPacketListener -> dataPacketListener
    java.util.concurrent.BlockingQueue dataQueue -> dataQueue
    byte[] buffer -> buffer
    int bufferPointer -> bufferPointer
    long seq -> seq
    boolean isClosed -> isClosed
    boolean closeInvoked -> closeInvoked
    int readTimeout -> readTimeout
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession this$0 -> this$0
    org.jivesoftware.smack.PacketListener getDataPacketListener() -> getDataPacketListener
    org.jivesoftware.smack.filter.PacketFilter getDataPacketFilter() -> getDataPacketFilter
    int read() -> read
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    boolean loadBuffer() -> loadBuffer
    void checkClosed() -> checkClosed
    boolean markSupported() -> markSupported
    void close() -> close
    void closeInternal() -> closeInternal
    void cleanup() -> cleanup
    int access$400(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBInputStream) -> access$400
    int access$402(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBInputStream,int) -> access$402
    void access$500(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBInputStream) -> access$500
    void access$600(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBInputStream) -> access$600
    boolean access$700(org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBInputStream) -> access$700
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBOutputStream -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IBBOutputStream:
    byte[] buffer -> buffer
    int bufferPointer -> bufferPointer
    long seq -> seq
    boolean isClosed -> isClosed
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession this$0 -> this$0
    void writeToXML(org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension) -> writeToXML
    void write(int) -> write
    void write(byte[],int,int) -> write
    void write(byte[]) -> write
    void writeOut(byte[],int,int) -> writeOut
    void flush() -> flush
    void flushBuffer() -> flushBuffer
    void close() -> close
    void closeInternal(boolean) -> closeInternal
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IQIBBInputStream -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IQIBBInputStream:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession this$0 -> this$0
    org.jivesoftware.smack.PacketListener getDataPacketListener() -> getDataPacketListener
    org.jivesoftware.smack.filter.PacketFilter getDataPacketFilter() -> getDataPacketFilter
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IQIBBInputStream$1 -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IQIBBInputStream$1:
    long lastSequence -> lastSequence
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IQIBBInputStream this$1 -> this$1
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IQIBBOutputStream -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$IQIBBOutputStream:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession this$0 -> this$0
    void writeToXML(org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension) -> writeToXML
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$MessageIBBInputStream -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$MessageIBBInputStream:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession this$0 -> this$0
    org.jivesoftware.smack.PacketListener getDataPacketListener() -> getDataPacketListener
    org.jivesoftware.smack.filter.PacketFilter getDataPacketFilter() -> getDataPacketFilter
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$MessageIBBInputStream$1 -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$MessageIBBInputStream$1:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$MessageIBBInputStream this$1 -> this$1
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$MessageIBBOutputStream -> org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession$MessageIBBOutputStream:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamSession this$0 -> this$0
    void writeToXML(org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension) -> writeToXML
org.jivesoftware.smackx.bytestreams.ibb.InitiationListener -> org.jivesoftware.smackx.bytestreams.ibb.InitiationListener:
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager manager -> manager
    org.jivesoftware.smack.filter.PacketFilter initFilter -> initFilter
    java.util.concurrent.ExecutorService initiationListenerExecutor -> initiationListenerExecutor
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    void processRequest(org.jivesoftware.smack.packet.Packet) -> processRequest
    org.jivesoftware.smack.filter.PacketFilter getFilter() -> getFilter
    void shutdown() -> shutdown
    void access$000(org.jivesoftware.smackx.bytestreams.ibb.InitiationListener,org.jivesoftware.smack.packet.Packet) -> access$000
org.jivesoftware.smackx.bytestreams.ibb.InitiationListener$1 -> org.jivesoftware.smackx.bytestreams.ibb.InitiationListener$1:
    org.jivesoftware.smack.packet.Packet val$packet -> val$packet
    org.jivesoftware.smackx.bytestreams.ibb.InitiationListener this$0 -> this$0
    void run() -> run
org.jivesoftware.smackx.bytestreams.ibb.packet.Close -> org.jivesoftware.smackx.bytestreams.ibb.packet.Close:
    java.lang.String sessionID -> sessionID
    java.lang.String getSessionID() -> getSessionID
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.bytestreams.ibb.packet.Data -> org.jivesoftware.smackx.bytestreams.ibb.packet.Data:
    org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension dataPacketExtension -> dataPacketExtension
    org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension getDataPacketExtension() -> getDataPacketExtension
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension -> org.jivesoftware.smackx.bytestreams.ibb.packet.DataPacketExtension:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String sessionID -> sessionID
    long seq -> seq
    java.lang.String data -> data
    byte[] decodedData -> decodedData
    java.lang.String getSessionID() -> getSessionID
    long getSeq() -> getSeq
    java.lang.String getData() -> getData
    byte[] getDecodedData() -> getDecodedData
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.bytestreams.ibb.packet.Open -> org.jivesoftware.smackx.bytestreams.ibb.packet.Open:
    java.lang.String sessionID -> sessionID
    int blockSize -> blockSize
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType stanza -> stanza
    java.lang.String getSessionID() -> getSessionID
    int getBlockSize() -> getBlockSize
    org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager$StanzaType getStanza() -> getStanza
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.bytestreams.ibb.provider.CloseIQProvider -> org.jivesoftware.smackx.bytestreams.ibb.provider.CloseIQProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.bytestreams.ibb.provider.DataPacketProvider -> org.jivesoftware.smackx.bytestreams.ibb.provider.DataPacketProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.bytestreams.ibb.provider.OpenIQProvider -> org.jivesoftware.smackx.bytestreams.ibb.provider.OpenIQProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.bytestreams.socks5.InitiationListener -> org.jivesoftware.smackx.bytestreams.socks5.InitiationListener:
    org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager manager -> manager
    org.jivesoftware.smack.filter.PacketFilter initFilter -> initFilter
    java.util.concurrent.ExecutorService initiationListenerExecutor -> initiationListenerExecutor
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    void processRequest(org.jivesoftware.smack.packet.Packet) -> processRequest
    org.jivesoftware.smack.filter.PacketFilter getFilter() -> getFilter
    void shutdown() -> shutdown
    void access$000(org.jivesoftware.smackx.bytestreams.socks5.InitiationListener,org.jivesoftware.smack.packet.Packet) -> access$000
org.jivesoftware.smackx.bytestreams.socks5.InitiationListener$1 -> org.jivesoftware.smackx.bytestreams.socks5.InitiationListener$1:
    org.jivesoftware.smack.packet.Packet val$packet -> val$packet
    org.jivesoftware.smackx.bytestreams.socks5.InitiationListener this$0 -> this$0
    void run() -> run
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamListener -> org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamListener:
    void incomingBytestreamRequest(org.jivesoftware.smackx.bytestreams.BytestreamRequest) -> incomingBytestreamRequest
    void incomingBytestreamRequest(org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest) -> incomingBytestreamRequest
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager -> org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String SESSION_ID_PREFIX -> SESSION_ID_PREFIX
    java.util.Random randomGenerator -> randomGenerator
    java.util.Map managers -> managers
    org.jivesoftware.smack.Connection connection -> connection
    java.util.Map userListeners -> userListeners
    java.util.List allRequestListeners -> allRequestListeners
    org.jivesoftware.smackx.bytestreams.socks5.InitiationListener initiationListener -> initiationListener
    int targetResponseTimeout -> targetResponseTimeout
    int proxyConnectionTimeout -> proxyConnectionTimeout
    java.util.List proxyBlacklist -> proxyBlacklist
    java.lang.String lastWorkingProxy -> lastWorkingProxy
    boolean proxyPrioritizationEnabled -> proxyPrioritizationEnabled
    java.util.List ignoredBytestreamRequests -> ignoredBytestreamRequests
    org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager getBytestreamManager(org.jivesoftware.smack.Connection) -> getBytestreamManager
    void addIncomingBytestreamListener(org.jivesoftware.smackx.bytestreams.BytestreamListener) -> addIncomingBytestreamListener
    void removeIncomingBytestreamListener(org.jivesoftware.smackx.bytestreams.BytestreamListener) -> removeIncomingBytestreamListener
    void addIncomingBytestreamListener(org.jivesoftware.smackx.bytestreams.BytestreamListener,java.lang.String) -> addIncomingBytestreamListener
    void removeIncomingBytestreamListener(java.lang.String) -> removeIncomingBytestreamListener
    void ignoreBytestreamRequestOnce(java.lang.String) -> ignoreBytestreamRequestOnce
    void disableService() -> disableService
    int getTargetResponseTimeout() -> getTargetResponseTimeout
    void setTargetResponseTimeout(int) -> setTargetResponseTimeout
    int getProxyConnectionTimeout() -> getProxyConnectionTimeout
    void setProxyConnectionTimeout(int) -> setProxyConnectionTimeout
    boolean isProxyPrioritizationEnabled() -> isProxyPrioritizationEnabled
    void setProxyPrioritizationEnabled(boolean) -> setProxyPrioritizationEnabled
    org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamSession establishSession(java.lang.String) -> establishSession
    org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamSession establishSession(java.lang.String,java.lang.String) -> establishSession
    boolean supportsSocks5(java.lang.String) -> supportsSocks5
    java.util.List determineProxies() -> determineProxies
    java.util.List determineStreamHostInfos(java.util.List) -> determineStreamHostInfos
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream createStreamHostRequest(java.lang.String) -> createStreamHostRequest
    java.util.List getLocalStreamHost() -> getLocalStreamHost
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream createBytestreamInitiation(java.lang.String,java.lang.String,java.util.List) -> createBytestreamInitiation
    void replyRejectPacket(org.jivesoftware.smack.packet.IQ) -> replyRejectPacket
    void activate() -> activate
    void enableService() -> enableService
    java.lang.String getNextSessionID() -> getNextSessionID
    org.jivesoftware.smack.Connection getConnection() -> getConnection
    org.jivesoftware.smackx.bytestreams.BytestreamListener getUserListener(java.lang.String) -> getUserListener
    java.util.List getAllRequestListeners() -> getAllRequestListeners
    java.util.List getIgnoredBytestreamRequests() -> getIgnoredBytestreamRequests
    org.jivesoftware.smackx.bytestreams.BytestreamSession establishSession(java.lang.String,java.lang.String) -> establishSession
    org.jivesoftware.smackx.bytestreams.BytestreamSession establishSession(java.lang.String) -> establishSession
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager$1 -> org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager$1:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager$1$1 -> org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager$1$1:
    org.jivesoftware.smack.Connection val$connection -> val$connection
    org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager$1 this$0 -> this$0
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectionSuccessful() -> reconnectionSuccessful
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest -> org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamRequest:
    long BLACKLIST_LIFETIME -> BLACKLIST_LIFETIME
    int BLACKLIST_MAX_SIZE -> BLACKLIST_MAX_SIZE
    org.jivesoftware.smack.util.Cache ADDRESS_BLACKLIST -> ADDRESS_BLACKLIST
    int CONNECTION_FAILURE_THRESHOLD -> CONNECTION_FAILURE_THRESHOLD
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream bytestreamRequest -> bytestreamRequest
    org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamManager manager -> manager
    int totalConnectTimeout -> totalConnectTimeout
    int minimumConnectTimeout -> minimumConnectTimeout
    int getConnectFailureThreshold() -> getConnectFailureThreshold
    void setConnectFailureThreshold(int) -> setConnectFailureThreshold
    int getTotalConnectTimeout() -> getTotalConnectTimeout
    void setTotalConnectTimeout(int) -> setTotalConnectTimeout
    int getMinimumConnectTimeout() -> getMinimumConnectTimeout
    void setMinimumConnectTimeout(int) -> setMinimumConnectTimeout
    java.lang.String getFrom() -> getFrom
    java.lang.String getSessionID() -> getSessionID
    org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamSession accept() -> accept
    void reject() -> reject
    void cancelRequest() -> cancelRequest
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream createUsedHostResponse(org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHost) -> createUsedHostResponse
    void incrementConnectionFailures(java.lang.String) -> incrementConnectionFailures
    int getConnectionFailures(java.lang.String) -> getConnectionFailures
    org.jivesoftware.smackx.bytestreams.BytestreamSession accept() -> accept
org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamSession -> org.jivesoftware.smackx.bytestreams.socks5.Socks5BytestreamSession:
    java.net.Socket socket -> socket
    boolean isDirect -> isDirect
    boolean isDirect() -> isDirect
    boolean isMediated() -> isMediated
    java.io.InputStream getInputStream() -> getInputStream
    java.io.OutputStream getOutputStream() -> getOutputStream
    int getReadTimeout() -> getReadTimeout
    void setReadTimeout(int) -> setReadTimeout
    void close() -> close
org.jivesoftware.smackx.bytestreams.socks5.Socks5Client -> org.jivesoftware.smackx.bytestreams.socks5.Socks5Client:
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHost streamHost -> streamHost
    java.lang.String digest -> digest
    java.net.Socket getSocket(int) -> getSocket
    boolean establish(java.net.Socket) -> establish
    byte[] createSocks5ConnectRequest() -> createSocks5ConnectRequest
org.jivesoftware.smackx.bytestreams.socks5.Socks5Client$1 -> org.jivesoftware.smackx.bytestreams.socks5.Socks5Client$1:
    org.jivesoftware.smackx.bytestreams.socks5.Socks5Client this$0 -> this$0
    java.net.Socket call() -> call
    java.lang.Object call() -> call
org.jivesoftware.smackx.bytestreams.socks5.Socks5ClientForInitiator -> org.jivesoftware.smackx.bytestreams.socks5.Socks5ClientForInitiator:
    org.jivesoftware.smack.Connection connection -> connection
    java.lang.String sessionID -> sessionID
    java.lang.String target -> target
    java.net.Socket getSocket(int) -> getSocket
    void activate() -> activate
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream createStreamHostActivation() -> createStreamHostActivation
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy -> org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy:
    org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy socks5Server -> socks5Server
    org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy$Socks5ServerProcess serverProcess -> serverProcess
    java.lang.Thread serverThread -> serverThread
    java.net.ServerSocket serverSocket -> serverSocket
    java.util.Map connectionMap -> connectionMap
    java.util.List allowedConnections -> allowedConnections
    java.util.Set localAddresses -> localAddresses
    org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy getSocks5Proxy() -> getSocks5Proxy
    void start() -> start
    void stop() -> stop
    void addLocalAddress(java.lang.String) -> addLocalAddress
    void removeLocalAddress(java.lang.String) -> removeLocalAddress
    java.util.List getLocalAddresses() -> getLocalAddresses
    void replaceLocalAddresses(java.util.List) -> replaceLocalAddresses
    int getPort() -> getPort
    java.net.Socket getSocket(java.lang.String) -> getSocket
    void addTransfer(java.lang.String) -> addTransfer
    void removeTransfer(java.lang.String) -> removeTransfer
    boolean isRunning() -> isRunning
    java.net.ServerSocket access$100(org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy) -> access$100
    java.util.List access$200(org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy) -> access$200
    java.util.Map access$300(org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy) -> access$300
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy$1 -> org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy$1:
org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy$Socks5ServerProcess -> org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy$Socks5ServerProcess:
    org.jivesoftware.smackx.bytestreams.socks5.Socks5Proxy this$0 -> this$0
    void run() -> run
    void establishConnection(java.net.Socket) -> establishConnection
org.jivesoftware.smackx.bytestreams.socks5.Socks5Utils -> org.jivesoftware.smackx.bytestreams.socks5.Socks5Utils:
    java.lang.String createDigest(java.lang.String,java.lang.String,java.lang.String) -> createDigest
    byte[] receiveSocks5Message(java.io.DataInputStream) -> receiveSocks5Message
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream -> org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream:
    java.lang.String sessionID -> sessionID
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode mode -> mode
    java.util.List streamHosts -> streamHosts
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHostUsed usedHost -> usedHost
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Activate toActivate -> toActivate
    void setSessionID(java.lang.String) -> setSessionID
    java.lang.String getSessionID() -> getSessionID
    void setMode(org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode) -> setMode
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode getMode() -> getMode
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHost addStreamHost(java.lang.String,java.lang.String) -> addStreamHost
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHost addStreamHost(java.lang.String,java.lang.String,int) -> addStreamHost
    void addStreamHost(org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHost) -> addStreamHost
    java.util.Collection getStreamHosts() -> getStreamHosts
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHost getStreamHost(java.lang.String) -> getStreamHost
    int countStreamHosts() -> countStreamHosts
    void setUsedHost(java.lang.String) -> setUsedHost
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHostUsed getUsedHost() -> getUsedHost
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Activate getToActivate() -> getToActivate
    void setToActivate(java.lang.String) -> setToActivate
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Activate -> org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Activate:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ELEMENTNAME -> ELEMENTNAME
    java.lang.String target -> target
    java.lang.String getTarget() -> getTarget
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getElementName() -> getElementName
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode -> org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode:
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode tcp -> tcp
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode udp -> udp
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode[] $VALUES -> $VALUES
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode[] values() -> values
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode valueOf(java.lang.String) -> valueOf
    org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$Mode fromName(java.lang.String) -> fromName
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHost -> org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHost:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ELEMENTNAME -> ELEMENTNAME
    java.lang.String JID -> JID
    java.lang.String addy -> addy
    int port -> port
    java.lang.String getJID() -> getJID
    java.lang.String getAddress() -> getAddress
    void setPort(int) -> setPort
    int getPort() -> getPort
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getElementName() -> getElementName
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHostUsed -> org.jivesoftware.smackx.bytestreams.socks5.packet.Bytestream$StreamHostUsed:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ELEMENTNAME -> ELEMENTNAME
    java.lang.String JID -> JID
    java.lang.String getJID() -> getJID
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getElementName() -> getElementName
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.bytestreams.socks5.provider.BytestreamsProvider -> org.jivesoftware.smackx.bytestreams.socks5.provider.BytestreamsProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.carbons.Carbon -> org.jivesoftware.smackx.carbons.Carbon:
    java.lang.String NAMESPACE -> NAMESPACE
    org.jivesoftware.smackx.carbons.Carbon$Direction dir -> dir
    org.jivesoftware.smackx.forward.Forwarded fwd -> fwd
    org.jivesoftware.smackx.carbons.Carbon$Direction getDirection() -> getDirection
    org.jivesoftware.smackx.forward.Forwarded getForwarded() -> getForwarded
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.carbons.Carbon$Direction -> org.jivesoftware.smackx.carbons.Carbon$Direction:
    org.jivesoftware.smackx.carbons.Carbon$Direction received -> received
    org.jivesoftware.smackx.carbons.Carbon$Direction sent -> sent
    org.jivesoftware.smackx.carbons.Carbon$Direction[] $VALUES -> $VALUES
    org.jivesoftware.smackx.carbons.Carbon$Direction[] values() -> values
    org.jivesoftware.smackx.carbons.Carbon$Direction valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.carbons.Carbon$Private -> org.jivesoftware.smackx.carbons.Carbon$Private:
    java.lang.String ELEMENT -> ELEMENT
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.carbons.Carbon$Provider -> org.jivesoftware.smackx.carbons.Carbon$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.carbons.CarbonManager -> org.jivesoftware.smackx.carbons.CarbonManager:
    java.util.Map instances -> instances
    org.jivesoftware.smack.Connection connection -> connection
    boolean enabled_state -> enabled_state
    org.jivesoftware.smackx.carbons.CarbonManager getInstanceFor(org.jivesoftware.smack.Connection) -> getInstanceFor
    org.jivesoftware.smack.packet.IQ carbonsEnabledIQ(boolean) -> carbonsEnabledIQ
    boolean isSupportedByServer() -> isSupportedByServer
    void sendCarbonsEnabled(boolean) -> sendCarbonsEnabled
    boolean setCarbonsEnabled(boolean) -> setCarbonsEnabled
    boolean enableCarbons() -> enableCarbons
    boolean disableCarbons() -> disableCarbons
    boolean getCarbonsEnabled() -> getCarbonsEnabled
    org.jivesoftware.smackx.carbons.Carbon getCarbon(org.jivesoftware.smack.packet.Message) -> getCarbon
    void disableCarbons(org.jivesoftware.smack.packet.Message) -> disableCarbons
    boolean access$002(org.jivesoftware.smackx.carbons.CarbonManager,boolean) -> access$002
    org.jivesoftware.smack.Connection access$100(org.jivesoftware.smackx.carbons.CarbonManager) -> access$100
org.jivesoftware.smackx.carbons.CarbonManager$1 -> org.jivesoftware.smackx.carbons.CarbonManager$1:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smackx.carbons.CarbonManager$2 -> org.jivesoftware.smackx.carbons.CarbonManager$2:
    boolean val$new_state -> val$new_state
    org.jivesoftware.smackx.carbons.CarbonManager this$0 -> this$0
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.carbons.CarbonManager$3 -> org.jivesoftware.smackx.carbons.CarbonManager$3:
    boolean val$new_state -> val$new_state
    org.jivesoftware.smackx.carbons.CarbonManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.commands.AdHocCommand -> org.jivesoftware.smackx.commands.AdHocCommand:
    org.jivesoftware.smackx.packet.AdHocCommandData data -> data
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition getSpecificErrorCondition(org.jivesoftware.smack.packet.XMPPError) -> getSpecificErrorCondition
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    void setNode(java.lang.String) -> setNode
    java.lang.String getNode() -> getNode
    java.lang.String getOwnerJID() -> getOwnerJID
    java.util.List getNotes() -> getNotes
    void addNote(org.jivesoftware.smackx.commands.AdHocCommandNote) -> addNote
    java.lang.String getRaw() -> getRaw
    org.jivesoftware.smackx.Form getForm() -> getForm
    void setForm(org.jivesoftware.smackx.Form) -> setForm
    void execute() -> execute
    void next(org.jivesoftware.smackx.Form) -> next
    void complete(org.jivesoftware.smackx.Form) -> complete
    void prev() -> prev
    void cancel() -> cancel
    java.util.List getActions() -> getActions
    void addActionAvailable(org.jivesoftware.smackx.commands.AdHocCommand$Action) -> addActionAvailable
    org.jivesoftware.smackx.commands.AdHocCommand$Action getExecuteAction() -> getExecuteAction
    void setExecuteAction(org.jivesoftware.smackx.commands.AdHocCommand$Action) -> setExecuteAction
    org.jivesoftware.smackx.commands.AdHocCommand$Status getStatus() -> getStatus
    void setData(org.jivesoftware.smackx.packet.AdHocCommandData) -> setData
    org.jivesoftware.smackx.packet.AdHocCommandData getData() -> getData
    boolean isValidAction(org.jivesoftware.smackx.commands.AdHocCommand$Action) -> isValidAction
org.jivesoftware.smackx.commands.AdHocCommand$Action -> org.jivesoftware.smackx.commands.AdHocCommand$Action:
    org.jivesoftware.smackx.commands.AdHocCommand$Action execute -> execute
    org.jivesoftware.smackx.commands.AdHocCommand$Action cancel -> cancel
    org.jivesoftware.smackx.commands.AdHocCommand$Action prev -> prev
    org.jivesoftware.smackx.commands.AdHocCommand$Action next -> next
    org.jivesoftware.smackx.commands.AdHocCommand$Action complete -> complete
    org.jivesoftware.smackx.commands.AdHocCommand$Action unknown -> unknown
    org.jivesoftware.smackx.commands.AdHocCommand$Action[] $VALUES -> $VALUES
    org.jivesoftware.smackx.commands.AdHocCommand$Action[] values() -> values
    org.jivesoftware.smackx.commands.AdHocCommand$Action valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition -> org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition:
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition badAction -> badAction
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition malformedAction -> malformedAction
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition badLocale -> badLocale
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition badPayload -> badPayload
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition badSessionid -> badSessionid
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition sessionExpired -> sessionExpired
    java.lang.String value -> value
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition[] $VALUES -> $VALUES
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition[] values() -> values
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
org.jivesoftware.smackx.commands.AdHocCommand$Status -> org.jivesoftware.smackx.commands.AdHocCommand$Status:
    org.jivesoftware.smackx.commands.AdHocCommand$Status executing -> executing
    org.jivesoftware.smackx.commands.AdHocCommand$Status completed -> completed
    org.jivesoftware.smackx.commands.AdHocCommand$Status canceled -> canceled
    org.jivesoftware.smackx.commands.AdHocCommand$Status[] $VALUES -> $VALUES
    org.jivesoftware.smackx.commands.AdHocCommand$Status[] values() -> values
    org.jivesoftware.smackx.commands.AdHocCommand$Status valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.commands.AdHocCommandManager -> org.jivesoftware.smackx.commands.AdHocCommandManager:
    java.lang.String DISCO_NAMESPACE -> DISCO_NAMESPACE
    java.lang.String discoNode -> discoNode
    int SESSION_TIMEOUT -> SESSION_TIMEOUT
    java.util.Map instances -> instances
    java.lang.ref.WeakReference connection -> connection
    java.util.Map commands -> commands
    java.util.Map executingCommands -> executingCommands
    org.jivesoftware.smackx.ServiceDiscoveryManager serviceDiscoveryManager -> serviceDiscoveryManager
    java.lang.Thread sessionsSweeper -> sessionsSweeper
    org.jivesoftware.smackx.commands.AdHocCommandManager getAddHocCommandsManager(org.jivesoftware.smack.Connection) -> getAddHocCommandsManager
    void registerCommand(java.lang.String,java.lang.String,java.lang.Class) -> registerCommand
    void registerCommand(java.lang.String,java.lang.String,org.jivesoftware.smackx.commands.LocalCommandFactory) -> registerCommand
    org.jivesoftware.smackx.packet.DiscoverItems discoverCommands(java.lang.String) -> discoverCommands
    void publishCommands(java.lang.String) -> publishCommands
    org.jivesoftware.smackx.commands.RemoteCommand getRemoteCommand(java.lang.String,java.lang.String) -> getRemoteCommand
    void processAdHocCommand(org.jivesoftware.smackx.packet.AdHocCommandData) -> processAdHocCommand
    void respondError(org.jivesoftware.smackx.packet.AdHocCommandData,org.jivesoftware.smack.packet.XMPPError$Condition) -> respondError
    void respondError(org.jivesoftware.smackx.packet.AdHocCommandData,org.jivesoftware.smack.packet.XMPPError$Condition,org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition) -> respondError
    void respondError(org.jivesoftware.smackx.packet.AdHocCommandData,org.jivesoftware.smack.packet.XMPPError) -> respondError
    org.jivesoftware.smackx.commands.LocalCommand newInstanceOfCmd(java.lang.String,java.lang.String) -> newInstanceOfCmd
    java.util.Collection getRegisteredCommands() -> getRegisteredCommands
    java.util.Collection access$000(org.jivesoftware.smackx.commands.AdHocCommandManager) -> access$000
    void access$100(org.jivesoftware.smackx.commands.AdHocCommandManager,org.jivesoftware.smackx.packet.AdHocCommandData) -> access$100
    java.util.Map access$200(org.jivesoftware.smackx.commands.AdHocCommandManager) -> access$200
org.jivesoftware.smackx.commands.AdHocCommandManager$1 -> org.jivesoftware.smackx.commands.AdHocCommandManager$1:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smackx.commands.AdHocCommandManager$2 -> org.jivesoftware.smackx.commands.AdHocCommandManager$2:
    org.jivesoftware.smackx.commands.AdHocCommandManager this$0 -> this$0
    java.util.List getNodeItems() -> getNodeItems
    java.util.List getNodeFeatures() -> getNodeFeatures
    java.util.List getNodeIdentities() -> getNodeIdentities
    java.util.List getNodePacketExtensions() -> getNodePacketExtensions
org.jivesoftware.smackx.commands.AdHocCommandManager$3 -> org.jivesoftware.smackx.commands.AdHocCommandManager$3:
    org.jivesoftware.smackx.commands.AdHocCommandManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.commands.AdHocCommandManager$4 -> org.jivesoftware.smackx.commands.AdHocCommandManager$4:
    java.lang.Class val$clazz -> val$clazz
    org.jivesoftware.smackx.commands.AdHocCommandManager this$0 -> this$0
    org.jivesoftware.smackx.commands.LocalCommand getInstance() -> getInstance
org.jivesoftware.smackx.commands.AdHocCommandManager$5 -> org.jivesoftware.smackx.commands.AdHocCommandManager$5:
    java.lang.String val$name -> val$name
    org.jivesoftware.smackx.commands.AdHocCommandManager this$0 -> this$0
    java.util.List getNodeItems() -> getNodeItems
    java.util.List getNodeFeatures() -> getNodeFeatures
    java.util.List getNodeIdentities() -> getNodeIdentities
    java.util.List getNodePacketExtensions() -> getNodePacketExtensions
org.jivesoftware.smackx.commands.AdHocCommandManager$6 -> org.jivesoftware.smackx.commands.AdHocCommandManager$6:
    org.jivesoftware.smackx.commands.AdHocCommandManager this$0 -> this$0
    void run() -> run
org.jivesoftware.smackx.commands.AdHocCommandManager$AdHocCommandInfo -> org.jivesoftware.smackx.commands.AdHocCommandManager$AdHocCommandInfo:
    java.lang.String node -> node
    java.lang.String name -> name
    java.lang.String ownerJID -> ownerJID
    org.jivesoftware.smackx.commands.LocalCommandFactory factory -> factory
    org.jivesoftware.smackx.commands.LocalCommand getCommandInstance() -> getCommandInstance
    java.lang.String getName() -> getName
    java.lang.String getNode() -> getNode
    java.lang.String getOwnerJID() -> getOwnerJID
org.jivesoftware.smackx.commands.AdHocCommandNote -> org.jivesoftware.smackx.commands.AdHocCommandNote:
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type type -> type
    java.lang.String value -> value
    java.lang.String getValue() -> getValue
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type getType() -> getType
org.jivesoftware.smackx.commands.AdHocCommandNote$Type -> org.jivesoftware.smackx.commands.AdHocCommandNote$Type:
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type info -> info
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type warn -> warn
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type error -> error
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type[] $VALUES -> $VALUES
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type[] values() -> values
    org.jivesoftware.smackx.commands.AdHocCommandNote$Type valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.commands.LocalCommand -> org.jivesoftware.smackx.commands.LocalCommand:
    long creationDate -> creationDate
    java.lang.String sessionID -> sessionID
    java.lang.String ownerJID -> ownerJID
    int currenStage -> currenStage
    void setSessionID(java.lang.String) -> setSessionID
    java.lang.String getSessionID() -> getSessionID
    void setOwnerJID(java.lang.String) -> setOwnerJID
    java.lang.String getOwnerJID() -> getOwnerJID
    long getCreationDate() -> getCreationDate
    boolean isLastStage() -> isLastStage
    boolean hasPermission(java.lang.String) -> hasPermission
    int getCurrentStage() -> getCurrentStage
    void setData(org.jivesoftware.smackx.packet.AdHocCommandData) -> setData
    void incrementStage() -> incrementStage
    void decrementStage() -> decrementStage
org.jivesoftware.smackx.commands.LocalCommandFactory -> org.jivesoftware.smackx.commands.LocalCommandFactory:
    org.jivesoftware.smackx.commands.LocalCommand getInstance() -> getInstance
org.jivesoftware.smackx.commands.RemoteCommand -> org.jivesoftware.smackx.commands.RemoteCommand:
    org.jivesoftware.smack.Connection connection -> connection
    java.lang.String jid -> jid
    java.lang.String sessionID -> sessionID
    long packetReplyTimeout -> packetReplyTimeout
    void cancel() -> cancel
    void complete(org.jivesoftware.smackx.Form) -> complete
    void execute() -> execute
    void execute(org.jivesoftware.smackx.Form) -> execute
    void next(org.jivesoftware.smackx.Form) -> next
    void prev() -> prev
    void executeAction(org.jivesoftware.smackx.commands.AdHocCommand$Action,long) -> executeAction
    void executeAction(org.jivesoftware.smackx.commands.AdHocCommand$Action,org.jivesoftware.smackx.Form,long) -> executeAction
    java.lang.String getOwnerJID() -> getOwnerJID
    long getPacketReplyTimeout() -> getPacketReplyTimeout
    void setPacketReplyTimeout(long) -> setPacketReplyTimeout
org.jivesoftware.smackx.entitycaps.EntityCapsManager -> org.jivesoftware.smackx.entitycaps.EntityCapsManager:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ELEMENT -> ELEMENT
    java.lang.String ENTITY_NODE -> ENTITY_NODE
    java.util.Map SUPPORTED_HASHES -> SUPPORTED_HASHES
    org.jivesoftware.smackx.entitycaps.cache.EntityCapsPersistentCache persistentCache -> persistentCache
    java.util.Map instances -> instances
    java.util.Map caps -> caps
    java.util.Map jidCaps -> jidCaps
    java.lang.ref.WeakReference weakRefConnection -> weakRefConnection
    org.jivesoftware.smackx.ServiceDiscoveryManager sdm -> sdm
    boolean entityCapsEnabled -> entityCapsEnabled
    java.lang.String currentCapsVersion -> currentCapsVersion
    boolean presenceSend -> presenceSend
    java.util.Queue lastLocalCapsVersions -> lastLocalCapsVersions
    void addDiscoverInfoByNode(java.lang.String,org.jivesoftware.smackx.packet.DiscoverInfo) -> addDiscoverInfoByNode
    java.lang.String getNodeVersionByJid(java.lang.String) -> getNodeVersionByJid
    org.jivesoftware.smackx.entitycaps.EntityCapsManager$NodeVerHash getNodeVerHashByJid(java.lang.String) -> getNodeVerHashByJid
    org.jivesoftware.smackx.packet.DiscoverInfo getDiscoverInfoByUser(java.lang.String) -> getDiscoverInfoByUser
    org.jivesoftware.smackx.packet.DiscoverInfo getDiscoveryInfoByNodeVer(java.lang.String) -> getDiscoveryInfoByNodeVer
    void setPersistentCache(org.jivesoftware.smackx.entitycaps.cache.EntityCapsPersistentCache) -> setPersistentCache
    void setJidCapsMaxCacheSize(int) -> setJidCapsMaxCacheSize
    void setCapsMaxCacheSize(int) -> setCapsMaxCacheSize
    org.jivesoftware.smackx.entitycaps.EntityCapsManager getInstanceFor(org.jivesoftware.smack.Connection) -> getInstanceFor
    void enableEntityCaps() -> enableEntityCaps
    void disableEntityCaps() -> disableEntityCaps
    boolean entityCapsEnabled() -> entityCapsEnabled
    void removeUserCapsNode(java.lang.String) -> removeUserCapsNode
    java.lang.String getCapsVersion() -> getCapsVersion
    java.lang.String getLocalNodeVer() -> getLocalNodeVer
    boolean areEntityCapsSupported(java.lang.String) -> areEntityCapsSupported
    boolean areEntityCapsSupportedByServer() -> areEntityCapsSupportedByServer
    void updateLocalEntityCaps() -> updateLocalEntityCaps
    boolean verifyDiscoverInfoVersion(java.lang.String,java.lang.String,org.jivesoftware.smackx.packet.DiscoverInfo) -> verifyDiscoverInfoVersion
    boolean verifyPacketExtensions(org.jivesoftware.smackx.packet.DiscoverInfo) -> verifyPacketExtensions
    java.lang.String generateVerificationString(org.jivesoftware.smackx.packet.DiscoverInfo,java.lang.String) -> generateVerificationString
    void formFieldValuesToCaps(java.util.Iterator,java.lang.StringBuilder) -> formFieldValuesToCaps
    boolean access$102(org.jivesoftware.smackx.entitycaps.EntityCapsManager,boolean) -> access$102
    java.util.Map access$200() -> access$200
    boolean access$300(org.jivesoftware.smackx.entitycaps.EntityCapsManager) -> access$300
    org.jivesoftware.smackx.ServiceDiscoveryManager access$400(org.jivesoftware.smackx.entitycaps.EntityCapsManager) -> access$400
org.jivesoftware.smackx.entitycaps.EntityCapsManager$1 -> org.jivesoftware.smackx.entitycaps.EntityCapsManager$1:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smackx.entitycaps.EntityCapsManager$2 -> org.jivesoftware.smackx.entitycaps.EntityCapsManager$2:
    org.jivesoftware.smackx.entitycaps.EntityCapsManager this$0 -> this$0
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
    void reconnectingIn(int) -> reconnectingIn
    void reconnectionSuccessful() -> reconnectionSuccessful
org.jivesoftware.smackx.entitycaps.EntityCapsManager$3 -> org.jivesoftware.smackx.entitycaps.EntityCapsManager$3:
    org.jivesoftware.smackx.entitycaps.EntityCapsManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.entitycaps.EntityCapsManager$4 -> org.jivesoftware.smackx.entitycaps.EntityCapsManager$4:
    org.jivesoftware.smackx.entitycaps.EntityCapsManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.entitycaps.EntityCapsManager$5 -> org.jivesoftware.smackx.entitycaps.EntityCapsManager$5:
    org.jivesoftware.smackx.entitycaps.EntityCapsManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.entitycaps.EntityCapsManager$6 -> org.jivesoftware.smackx.entitycaps.EntityCapsManager$6:
    org.jivesoftware.smackx.entitycaps.EntityCapsManager this$0 -> this$0
    void interceptPacket(org.jivesoftware.smack.packet.Packet) -> interceptPacket
org.jivesoftware.smackx.entitycaps.EntityCapsManager$7 -> org.jivesoftware.smackx.entitycaps.EntityCapsManager$7:
    java.util.List features -> features
    java.util.List packetExtensions -> packetExtensions
    java.util.List val$identities -> val$identities
    org.jivesoftware.smackx.entitycaps.EntityCapsManager this$0 -> this$0
    java.util.List getNodeItems() -> getNodeItems
    java.util.List getNodeFeatures() -> getNodeFeatures
    java.util.List getNodeIdentities() -> getNodeIdentities
    java.util.List getNodePacketExtensions() -> getNodePacketExtensions
org.jivesoftware.smackx.entitycaps.EntityCapsManager$8 -> org.jivesoftware.smackx.entitycaps.EntityCapsManager$8:
    int compare(org.jivesoftware.smackx.FormField,org.jivesoftware.smackx.FormField) -> compare
    int compare(java.lang.Object,java.lang.Object) -> compare
org.jivesoftware.smackx.entitycaps.EntityCapsManager$NodeVerHash -> org.jivesoftware.smackx.entitycaps.EntityCapsManager$NodeVerHash:
    java.lang.String node -> node
    java.lang.String hash -> hash
    java.lang.String ver -> ver
    java.lang.String nodeVer -> nodeVer
    java.lang.String getNodeVer() -> getNodeVer
    java.lang.String getNode() -> getNode
    java.lang.String getHash() -> getHash
    java.lang.String getVer() -> getVer
    java.lang.String access$000(org.jivesoftware.smackx.entitycaps.EntityCapsManager$NodeVerHash) -> access$000
org.jivesoftware.smackx.entitycaps.cache.EntityCapsPersistentCache -> org.jivesoftware.smackx.entitycaps.cache.EntityCapsPersistentCache:
    void addDiscoverInfoByNodePersistent(java.lang.String,org.jivesoftware.smackx.packet.DiscoverInfo) -> addDiscoverInfoByNodePersistent
    void replay() -> replay
    void emptyCache() -> emptyCache
org.jivesoftware.smackx.entitycaps.cache.SimpleDirectoryPersistentCache -> org.jivesoftware.smackx.entitycaps.cache.SimpleDirectoryPersistentCache:
    java.io.File cacheDir -> cacheDir
    org.jivesoftware.smack.util.StringEncoder filenameEncoder -> filenameEncoder
    void addDiscoverInfoByNodePersistent(java.lang.String,org.jivesoftware.smackx.packet.DiscoverInfo) -> addDiscoverInfoByNodePersistent
    void replay() -> replay
    void emptyCache() -> emptyCache
    void writeInfoToFile(java.io.File,org.jivesoftware.smackx.packet.DiscoverInfo) -> writeInfoToFile
    org.jivesoftware.smackx.packet.DiscoverInfo restoreInfoFromFile(java.io.File) -> restoreInfoFromFile
org.jivesoftware.smackx.entitycaps.packet.CapsExtension -> org.jivesoftware.smackx.entitycaps.packet.CapsExtension:
    java.lang.String node -> node
    java.lang.String ver -> ver
    java.lang.String hash -> hash
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getNode() -> getNode
    void setNode(java.lang.String) -> setNode
    java.lang.String getVer() -> getVer
    void setVer(java.lang.String) -> setVer
    java.lang.String getHash() -> getHash
    void setHash(java.lang.String) -> setHash
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.entitycaps.provider.CapsExtensionProvider -> org.jivesoftware.smackx.entitycaps.provider.CapsExtensionProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.forward.Forwarded -> org.jivesoftware.smackx.forward.Forwarded:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    org.jivesoftware.smackx.packet.DelayInfo delay -> delay
    org.jivesoftware.smack.packet.Packet forwardedPacket -> forwardedPacket
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
    org.jivesoftware.smack.packet.Packet getForwardedPacket() -> getForwardedPacket
    org.jivesoftware.smackx.packet.DelayInfo getDelayInfo() -> getDelayInfo
org.jivesoftware.smackx.forward.Forwarded$Provider -> org.jivesoftware.smackx.forward.Forwarded$Provider:
    org.jivesoftware.smackx.provider.DelayInfoProvider dip -> dip
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.muc.Affiliate -> org.jivesoftware.smackx.muc.Affiliate:
    java.lang.String jid -> jid
    java.lang.String affiliation -> affiliation
    java.lang.String role -> role
    java.lang.String nick -> nick
    java.lang.String getJid() -> getJid
    java.lang.String getAffiliation() -> getAffiliation
    java.lang.String getRole() -> getRole
    java.lang.String getNick() -> getNick
org.jivesoftware.smackx.muc.ConnectionDetachedPacketCollector -> org.jivesoftware.smackx.muc.ConnectionDetachedPacketCollector:
    int maxPackets -> maxPackets
    java.util.concurrent.ArrayBlockingQueue resultQueue -> resultQueue
    org.jivesoftware.smack.packet.Packet pollResult() -> pollResult
    org.jivesoftware.smack.packet.Packet nextResult() -> nextResult
    org.jivesoftware.smack.packet.Packet nextResult(long) -> nextResult
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.muc.DeafOccupantInterceptor -> org.jivesoftware.smackx.muc.DeafOccupantInterceptor:
    void interceptPacket(org.jivesoftware.smack.packet.Packet) -> interceptPacket
org.jivesoftware.smackx.muc.DeafOccupantInterceptor$1 -> org.jivesoftware.smackx.muc.DeafOccupantInterceptor$1:
org.jivesoftware.smackx.muc.DeafOccupantInterceptor$DeafExtension -> org.jivesoftware.smackx.muc.DeafOccupantInterceptor$DeafExtension:
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.muc.DefaultParticipantStatusListener -> org.jivesoftware.smackx.muc.DefaultParticipantStatusListener:
    void joined(java.lang.String) -> joined
    void left(java.lang.String) -> left
    void kicked(java.lang.String,java.lang.String,java.lang.String) -> kicked
    void voiceGranted(java.lang.String) -> voiceGranted
    void voiceRevoked(java.lang.String) -> voiceRevoked
    void banned(java.lang.String,java.lang.String,java.lang.String) -> banned
    void membershipGranted(java.lang.String) -> membershipGranted
    void membershipRevoked(java.lang.String) -> membershipRevoked
    void moderatorGranted(java.lang.String) -> moderatorGranted
    void moderatorRevoked(java.lang.String) -> moderatorRevoked
    void ownershipGranted(java.lang.String) -> ownershipGranted
    void ownershipRevoked(java.lang.String) -> ownershipRevoked
    void adminGranted(java.lang.String) -> adminGranted
    void adminRevoked(java.lang.String) -> adminRevoked
    void nicknameChanged(java.lang.String,java.lang.String) -> nicknameChanged
org.jivesoftware.smackx.muc.DefaultUserStatusListener -> org.jivesoftware.smackx.muc.DefaultUserStatusListener:
    void kicked(java.lang.String,java.lang.String) -> kicked
    void voiceGranted() -> voiceGranted
    void voiceRevoked() -> voiceRevoked
    void banned(java.lang.String,java.lang.String) -> banned
    void membershipGranted() -> membershipGranted
    void membershipRevoked() -> membershipRevoked
    void moderatorGranted() -> moderatorGranted
    void moderatorRevoked() -> moderatorRevoked
    void ownershipGranted() -> ownershipGranted
    void ownershipRevoked() -> ownershipRevoked
    void adminGranted() -> adminGranted
    void adminRevoked() -> adminRevoked
org.jivesoftware.smackx.muc.DiscussionHistory -> org.jivesoftware.smackx.muc.DiscussionHistory:
    int maxChars -> maxChars
    int maxStanzas -> maxStanzas
    int seconds -> seconds
    java.util.Date since -> since
    int getMaxChars() -> getMaxChars
    int getMaxStanzas() -> getMaxStanzas
    int getSeconds() -> getSeconds
    java.util.Date getSince() -> getSince
    void setMaxChars(int) -> setMaxChars
    void setMaxStanzas(int) -> setMaxStanzas
    void setSeconds(int) -> setSeconds
    void setSince(java.util.Date) -> setSince
    boolean isConfigured() -> isConfigured
    org.jivesoftware.smackx.packet.MUCInitialPresence$History getMUCHistory() -> getMUCHistory
org.jivesoftware.smackx.muc.HostedRoom -> org.jivesoftware.smackx.muc.HostedRoom:
    java.lang.String jid -> jid
    java.lang.String name -> name
    java.lang.String getJid() -> getJid
    java.lang.String getName() -> getName
org.jivesoftware.smackx.muc.InvitationListener -> org.jivesoftware.smackx.muc.InvitationListener:
    void invitationReceived(org.jivesoftware.smack.Connection,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.jivesoftware.smack.packet.Message) -> invitationReceived
org.jivesoftware.smackx.muc.InvitationRejectionListener -> org.jivesoftware.smackx.muc.InvitationRejectionListener:
    void invitationDeclined(java.lang.String,java.lang.String) -> invitationDeclined
org.jivesoftware.smackx.muc.MultiUserChat -> org.jivesoftware.smackx.muc.MultiUserChat:
    java.lang.String discoNamespace -> discoNamespace
    java.lang.String discoNode -> discoNode
    java.util.Map joinedRooms -> joinedRooms
    org.jivesoftware.smack.Connection connection -> connection
    java.lang.String room -> room
    java.lang.String subject -> subject
    java.lang.String nickname -> nickname
    boolean joined -> joined
    java.util.Map occupantsMap -> occupantsMap
    java.util.List invitationRejectionListeners -> invitationRejectionListeners
    java.util.List subjectUpdatedListeners -> subjectUpdatedListeners
    java.util.List userStatusListeners -> userStatusListeners
    java.util.List participantStatusListeners -> participantStatusListeners
    org.jivesoftware.smack.filter.PacketFilter presenceFilter -> presenceFilter
    java.util.List presenceInterceptors -> presenceInterceptors
    org.jivesoftware.smack.filter.PacketFilter messageFilter -> messageFilter
    org.jivesoftware.smackx.muc.RoomListenerMultiplexor roomListenerMultiplexor -> roomListenerMultiplexor
    org.jivesoftware.smackx.muc.ConnectionDetachedPacketCollector messageCollector -> messageCollector
    java.util.List connectionListeners -> connectionListeners
    boolean isServiceEnabled(org.jivesoftware.smack.Connection,java.lang.String) -> isServiceEnabled
    java.util.Iterator getJoinedRooms(org.jivesoftware.smack.Connection) -> getJoinedRooms
    java.util.Iterator getJoinedRooms(org.jivesoftware.smack.Connection,java.lang.String) -> getJoinedRooms
    org.jivesoftware.smackx.muc.RoomInfo getRoomInfo(org.jivesoftware.smack.Connection,java.lang.String) -> getRoomInfo
    java.util.Collection getServiceNames(org.jivesoftware.smack.Connection) -> getServiceNames
    java.util.Collection getHostedRooms(org.jivesoftware.smack.Connection,java.lang.String) -> getHostedRooms
    java.util.Collection getPublicRooms(org.jivesoftware.smack.Connection,java.lang.String,java.lang.String) -> getPublicRooms
    java.lang.String getRoom() -> getRoom
    void create(java.lang.String) -> create
    void join(java.lang.String) -> join
    void join(java.lang.String,java.lang.String) -> join
    void join(java.lang.String,java.lang.String,org.jivesoftware.smackx.muc.DiscussionHistory,long) -> join
    boolean isJoined() -> isJoined
    void leave() -> leave
    org.jivesoftware.smackx.Form getConfigurationForm() -> getConfigurationForm
    void sendConfigurationForm(org.jivesoftware.smackx.Form) -> sendConfigurationForm
    org.jivesoftware.smackx.Form getRegistrationForm() -> getRegistrationForm
    void sendRegistrationForm(org.jivesoftware.smackx.Form) -> sendRegistrationForm
    void destroy(java.lang.String,java.lang.String) -> destroy
    void invite(java.lang.String,java.lang.String) -> invite
    void invite(org.jivesoftware.smack.packet.Message,java.lang.String,java.lang.String) -> invite
    void decline(org.jivesoftware.smack.Connection,java.lang.String,java.lang.String,java.lang.String) -> decline
    void addInvitationListener(org.jivesoftware.smack.Connection,org.jivesoftware.smackx.muc.InvitationListener) -> addInvitationListener
    void removeInvitationListener(org.jivesoftware.smack.Connection,org.jivesoftware.smackx.muc.InvitationListener) -> removeInvitationListener
    void addInvitationRejectionListener(org.jivesoftware.smackx.muc.InvitationRejectionListener) -> addInvitationRejectionListener
    void removeInvitationRejectionListener(org.jivesoftware.smackx.muc.InvitationRejectionListener) -> removeInvitationRejectionListener
    void fireInvitationRejectionListeners(java.lang.String,java.lang.String) -> fireInvitationRejectionListeners
    void addSubjectUpdatedListener(org.jivesoftware.smackx.muc.SubjectUpdatedListener) -> addSubjectUpdatedListener
    void removeSubjectUpdatedListener(org.jivesoftware.smackx.muc.SubjectUpdatedListener) -> removeSubjectUpdatedListener
    void fireSubjectUpdatedListeners(java.lang.String,java.lang.String) -> fireSubjectUpdatedListeners
    void addPresenceInterceptor(org.jivesoftware.smack.PacketInterceptor) -> addPresenceInterceptor
    void removePresenceInterceptor(org.jivesoftware.smack.PacketInterceptor) -> removePresenceInterceptor
    java.lang.String getSubject() -> getSubject
    java.lang.String getReservedNickname() -> getReservedNickname
    java.lang.String getNickname() -> getNickname
    void changeNickname(java.lang.String) -> changeNickname
    void changeAvailabilityStatus(java.lang.String,org.jivesoftware.smack.packet.Presence$Mode) -> changeAvailabilityStatus
    void kickParticipant(java.lang.String,java.lang.String) -> kickParticipant
    void grantVoice(java.util.Collection) -> grantVoice
    void grantVoice(java.lang.String) -> grantVoice
    void revokeVoice(java.util.Collection) -> revokeVoice
    void revokeVoice(java.lang.String) -> revokeVoice
    void banUsers(java.util.Collection) -> banUsers
    void banUser(java.lang.String,java.lang.String) -> banUser
    void grantMembership(java.util.Collection) -> grantMembership
    void grantMembership(java.lang.String) -> grantMembership
    void revokeMembership(java.util.Collection) -> revokeMembership
    void revokeMembership(java.lang.String) -> revokeMembership
    void grantModerator(java.util.Collection) -> grantModerator
    void grantModerator(java.lang.String) -> grantModerator
    void revokeModerator(java.util.Collection) -> revokeModerator
    void revokeModerator(java.lang.String) -> revokeModerator
    void grantOwnership(java.util.Collection) -> grantOwnership
    void grantOwnership(java.lang.String) -> grantOwnership
    void revokeOwnership(java.util.Collection) -> revokeOwnership
    void revokeOwnership(java.lang.String) -> revokeOwnership
    void grantAdmin(java.util.Collection) -> grantAdmin
    void grantAdmin(java.lang.String) -> grantAdmin
    void revokeAdmin(java.util.Collection) -> revokeAdmin
    void revokeAdmin(java.lang.String) -> revokeAdmin
    void changeAffiliationByOwner(java.lang.String,java.lang.String) -> changeAffiliationByOwner
    void changeAffiliationByOwner(java.util.Collection,java.lang.String) -> changeAffiliationByOwner
    void changeAffiliationByAdmin(java.lang.String,java.lang.String,java.lang.String) -> changeAffiliationByAdmin
    void changeAffiliationByAdmin(java.util.Collection,java.lang.String) -> changeAffiliationByAdmin
    void changeRole(java.lang.String,java.lang.String,java.lang.String) -> changeRole
    void changeRole(java.util.Collection,java.lang.String) -> changeRole
    int getOccupantsCount() -> getOccupantsCount
    java.util.Iterator getOccupants() -> getOccupants
    org.jivesoftware.smack.packet.Presence getOccupantPresence(java.lang.String) -> getOccupantPresence
    org.jivesoftware.smackx.muc.Occupant getOccupant(java.lang.String) -> getOccupant
    void addParticipantListener(org.jivesoftware.smack.PacketListener) -> addParticipantListener
    void removeParticipantListener(org.jivesoftware.smack.PacketListener) -> removeParticipantListener
    java.util.Collection getOwners() -> getOwners
    java.util.Collection getAdmins() -> getAdmins
    java.util.Collection getMembers() -> getMembers
    java.util.Collection getOutcasts() -> getOutcasts
    java.util.Collection getAffiliatesByOwner(java.lang.String) -> getAffiliatesByOwner
    java.util.Collection getAffiliatesByAdmin(java.lang.String) -> getAffiliatesByAdmin
    java.util.Collection getModerators() -> getModerators
    java.util.Collection getParticipants() -> getParticipants
    java.util.Collection getOccupants(java.lang.String) -> getOccupants
    void sendMessage(java.lang.String) -> sendMessage
    org.jivesoftware.smack.Chat createPrivateChat(java.lang.String,org.jivesoftware.smack.MessageListener) -> createPrivateChat
    org.jivesoftware.smack.packet.Message createMessage() -> createMessage
    void sendMessage(org.jivesoftware.smack.packet.Message) -> sendMessage
    org.jivesoftware.smack.packet.Message pollMessage() -> pollMessage
    org.jivesoftware.smack.packet.Message nextMessage() -> nextMessage
    org.jivesoftware.smack.packet.Message nextMessage(long) -> nextMessage
    void addMessageListener(org.jivesoftware.smack.PacketListener) -> addMessageListener
    void removeMessageListener(org.jivesoftware.smack.PacketListener) -> removeMessageListener
    void changeSubject(java.lang.String) -> changeSubject
    void userHasJoined() -> userHasJoined
    void userHasLeft() -> userHasLeft
    org.jivesoftware.smackx.packet.MUCUser getMUCUserExtension(org.jivesoftware.smack.packet.Packet) -> getMUCUserExtension
    void addUserStatusListener(org.jivesoftware.smackx.muc.UserStatusListener) -> addUserStatusListener
    void removeUserStatusListener(org.jivesoftware.smackx.muc.UserStatusListener) -> removeUserStatusListener
    void fireUserStatusListeners(java.lang.String,java.lang.Object[]) -> fireUserStatusListeners
    void addParticipantStatusListener(org.jivesoftware.smackx.muc.ParticipantStatusListener) -> addParticipantStatusListener
    void removeParticipantStatusListener(org.jivesoftware.smackx.muc.ParticipantStatusListener) -> removeParticipantStatusListener
    void fireParticipantStatusListeners(java.lang.String,java.util.List) -> fireParticipantStatusListeners
    void init() -> init
    void checkRoleModifications(java.lang.String,java.lang.String,boolean,java.lang.String) -> checkRoleModifications
    void checkAffiliationModifications(java.lang.String,java.lang.String,boolean,java.lang.String) -> checkAffiliationModifications
    void checkPresenceCode(java.lang.String,boolean,org.jivesoftware.smackx.packet.MUCUser,java.lang.String) -> checkPresenceCode
    void cleanup() -> cleanup
    void finalize() -> finalize
    java.util.Iterator access$000(org.jivesoftware.smack.Connection) -> access$000
    java.lang.String access$102(org.jivesoftware.smackx.muc.MultiUserChat,java.lang.String) -> access$102
    void access$200(org.jivesoftware.smackx.muc.MultiUserChat,java.lang.String,java.lang.String) -> access$200
    java.lang.String access$300(org.jivesoftware.smackx.muc.MultiUserChat) -> access$300
    java.lang.String access$400(org.jivesoftware.smackx.muc.MultiUserChat) -> access$400
    java.util.Map access$500(org.jivesoftware.smackx.muc.MultiUserChat) -> access$500
    org.jivesoftware.smackx.packet.MUCUser access$600(org.jivesoftware.smackx.muc.MultiUserChat,org.jivesoftware.smack.packet.Packet) -> access$600
    void access$700(org.jivesoftware.smackx.muc.MultiUserChat,java.lang.String,java.lang.String,boolean,java.lang.String) -> access$700
    void access$800(org.jivesoftware.smackx.muc.MultiUserChat,java.lang.String,java.lang.String,boolean,java.lang.String) -> access$800
    void access$900(org.jivesoftware.smackx.muc.MultiUserChat,java.lang.String,java.util.List) -> access$900
    void access$1000(org.jivesoftware.smackx.muc.MultiUserChat,java.lang.String,boolean,org.jivesoftware.smackx.packet.MUCUser,java.lang.String) -> access$1000
    void access$1100(org.jivesoftware.smackx.muc.MultiUserChat,java.lang.String,java.lang.String) -> access$1100
org.jivesoftware.smackx.muc.MultiUserChat$1 -> org.jivesoftware.smackx.muc.MultiUserChat$1:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smackx.muc.MultiUserChat$1$1 -> org.jivesoftware.smackx.muc.MultiUserChat$1$1:
    org.jivesoftware.smack.Connection val$connection -> val$connection
    org.jivesoftware.smackx.muc.MultiUserChat$1 this$0 -> this$0
    java.util.List getNodeItems() -> getNodeItems
    java.util.List getNodeFeatures() -> getNodeFeatures
    java.util.List getNodeIdentities() -> getNodeIdentities
    java.util.List getNodePacketExtensions() -> getNodePacketExtensions
org.jivesoftware.smackx.muc.MultiUserChat$2 -> org.jivesoftware.smackx.muc.MultiUserChat$2:
    java.lang.String val$subject -> val$subject
    org.jivesoftware.smackx.muc.MultiUserChat this$0 -> this$0
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smackx.muc.MultiUserChat$3 -> org.jivesoftware.smackx.muc.MultiUserChat$3:
    org.jivesoftware.smackx.muc.MultiUserChat this$0 -> this$0
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smackx.muc.MultiUserChat$4 -> org.jivesoftware.smackx.muc.MultiUserChat$4:
    org.jivesoftware.smackx.muc.MultiUserChat this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.muc.MultiUserChat$5 -> org.jivesoftware.smackx.muc.MultiUserChat$5:
    org.jivesoftware.smackx.muc.MultiUserChat this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.muc.MultiUserChat$6 -> org.jivesoftware.smackx.muc.MultiUserChat$6:
    org.jivesoftware.smackx.muc.MultiUserChat this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.muc.MultiUserChat$InvitationsMonitor -> org.jivesoftware.smackx.muc.MultiUserChat$InvitationsMonitor:
    java.util.Map monitors -> monitors
    java.util.List invitationsListeners -> invitationsListeners
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smack.filter.PacketFilter invitationFilter -> invitationFilter
    org.jivesoftware.smack.PacketListener invitationPacketListener -> invitationPacketListener
    org.jivesoftware.smackx.muc.MultiUserChat$InvitationsMonitor getInvitationsMonitor(org.jivesoftware.smack.Connection) -> getInvitationsMonitor
    void addInvitationListener(org.jivesoftware.smackx.muc.InvitationListener) -> addInvitationListener
    void removeInvitationListener(org.jivesoftware.smackx.muc.InvitationListener) -> removeInvitationListener
    void fireInvitationListeners(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.jivesoftware.smack.packet.Message) -> fireInvitationListeners
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectingIn(int) -> reconnectingIn
    void reconnectionSuccessful() -> reconnectionSuccessful
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
    void init() -> init
    void cancel() -> cancel
    void access$1200(org.jivesoftware.smackx.muc.MultiUserChat$InvitationsMonitor,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.jivesoftware.smack.packet.Message) -> access$1200
org.jivesoftware.smackx.muc.MultiUserChat$InvitationsMonitor$1 -> org.jivesoftware.smackx.muc.MultiUserChat$InvitationsMonitor$1:
    org.jivesoftware.smackx.muc.MultiUserChat$InvitationsMonitor this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.muc.Occupant -> org.jivesoftware.smackx.muc.Occupant:
    java.lang.String affiliation -> affiliation
    java.lang.String role -> role
    java.lang.String jid -> jid
    java.lang.String nick -> nick
    java.lang.String getJid() -> getJid
    java.lang.String getAffiliation() -> getAffiliation
    java.lang.String getRole() -> getRole
    java.lang.String getNick() -> getNick
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.jivesoftware.smackx.muc.PacketMultiplexListener -> org.jivesoftware.smackx.muc.PacketMultiplexListener:
    org.jivesoftware.smack.filter.PacketFilter MESSAGE_FILTER -> MESSAGE_FILTER
    org.jivesoftware.smack.filter.PacketFilter PRESENCE_FILTER -> PRESENCE_FILTER
    org.jivesoftware.smack.filter.PacketFilter SUBJECT_FILTER -> SUBJECT_FILTER
    org.jivesoftware.smack.filter.PacketFilter DECLINES_FILTER -> DECLINES_FILTER
    org.jivesoftware.smackx.muc.ConnectionDetachedPacketCollector messageCollector -> messageCollector
    org.jivesoftware.smack.PacketListener presenceListener -> presenceListener
    org.jivesoftware.smack.PacketListener subjectListener -> subjectListener
    org.jivesoftware.smack.PacketListener declinesListener -> declinesListener
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.muc.PacketMultiplexListener$1 -> org.jivesoftware.smackx.muc.PacketMultiplexListener$1:
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
org.jivesoftware.smackx.muc.ParticipantStatusListener -> org.jivesoftware.smackx.muc.ParticipantStatusListener:
    void joined(java.lang.String) -> joined
    void left(java.lang.String) -> left
    void kicked(java.lang.String,java.lang.String,java.lang.String) -> kicked
    void voiceGranted(java.lang.String) -> voiceGranted
    void voiceRevoked(java.lang.String) -> voiceRevoked
    void banned(java.lang.String,java.lang.String,java.lang.String) -> banned
    void membershipGranted(java.lang.String) -> membershipGranted
    void membershipRevoked(java.lang.String) -> membershipRevoked
    void moderatorGranted(java.lang.String) -> moderatorGranted
    void moderatorRevoked(java.lang.String) -> moderatorRevoked
    void ownershipGranted(java.lang.String) -> ownershipGranted
    void ownershipRevoked(java.lang.String) -> ownershipRevoked
    void adminGranted(java.lang.String) -> adminGranted
    void adminRevoked(java.lang.String) -> adminRevoked
    void nicknameChanged(java.lang.String,java.lang.String) -> nicknameChanged
org.jivesoftware.smackx.muc.RoomInfo -> org.jivesoftware.smackx.muc.RoomInfo:
    java.lang.String room -> room
    java.lang.String description -> description
    java.lang.String subject -> subject
    int occupantsCount -> occupantsCount
    int affiliationsCount -> affiliationsCount
    boolean membersOnly -> membersOnly
    boolean moderated -> moderated
    boolean nonanonymous -> nonanonymous
    boolean passwordProtected -> passwordProtected
    boolean persistent -> persistent
    boolean allowInvites -> allowInvites
    boolean publicRoom -> publicRoom
    java.lang.String roomName -> roomName
    int maxUsers -> maxUsers
    java.lang.String owner -> owner
    java.lang.String getRoom() -> getRoom
    java.lang.String getRoomName() -> getRoomName
    java.lang.String getOwner() -> getOwner
    java.lang.String getDescription() -> getDescription
    java.lang.String getSubject() -> getSubject
    int getOccupantsCount() -> getOccupantsCount
    int getAffiliationsCount() -> getAffiliationsCount
    boolean isMembersOnly() -> isMembersOnly
    boolean isModerated() -> isModerated
    boolean isNonanonymous() -> isNonanonymous
    boolean isPasswordProtected() -> isPasswordProtected
    boolean isPersistent() -> isPersistent
    boolean isPublic() -> isPublic
    boolean isAllowInvites() -> isAllowInvites
    int getMaxUsers() -> getMaxUsers
org.jivesoftware.smackx.muc.RoomListenerMultiplexor -> org.jivesoftware.smackx.muc.RoomListenerMultiplexor:
    java.util.Map monitors -> monitors
    org.jivesoftware.smack.Connection connection -> connection
    org.jivesoftware.smackx.muc.RoomListenerMultiplexor$RoomMultiplexFilter filter -> filter
    org.jivesoftware.smackx.muc.RoomListenerMultiplexor$RoomMultiplexListener listener -> listener
    org.jivesoftware.smackx.muc.RoomListenerMultiplexor getRoomMultiplexor(org.jivesoftware.smack.Connection) -> getRoomMultiplexor
    void addRoom(java.lang.String,org.jivesoftware.smackx.muc.PacketMultiplexListener) -> addRoom
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectingIn(int) -> reconnectingIn
    void reconnectionSuccessful() -> reconnectionSuccessful
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
    void init() -> init
    void removeRoom(java.lang.String) -> removeRoom
    void cancel() -> cancel
org.jivesoftware.smackx.muc.RoomListenerMultiplexor$1 -> org.jivesoftware.smackx.muc.RoomListenerMultiplexor$1:
org.jivesoftware.smackx.muc.RoomListenerMultiplexor$RoomMultiplexFilter -> org.jivesoftware.smackx.muc.RoomListenerMultiplexor$RoomMultiplexFilter:
    java.util.Map roomAddressTable -> roomAddressTable
    boolean accept(org.jivesoftware.smack.packet.Packet) -> accept
    void addRoom(java.lang.String) -> addRoom
    void removeRoom(java.lang.String) -> removeRoom
org.jivesoftware.smackx.muc.RoomListenerMultiplexor$RoomMultiplexListener -> org.jivesoftware.smackx.muc.RoomListenerMultiplexor$RoomMultiplexListener:
    java.util.Map roomListenersByAddress -> roomListenersByAddress
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    void addRoom(java.lang.String,org.jivesoftware.smackx.muc.PacketMultiplexListener) -> addRoom
    void removeRoom(java.lang.String) -> removeRoom
org.jivesoftware.smackx.muc.SubjectUpdatedListener -> org.jivesoftware.smackx.muc.SubjectUpdatedListener:
    void subjectUpdated(java.lang.String,java.lang.String) -> subjectUpdated
org.jivesoftware.smackx.muc.UserStatusListener -> org.jivesoftware.smackx.muc.UserStatusListener:
    void kicked(java.lang.String,java.lang.String) -> kicked
    void voiceGranted() -> voiceGranted
    void voiceRevoked() -> voiceRevoked
    void banned(java.lang.String,java.lang.String) -> banned
    void membershipGranted() -> membershipGranted
    void membershipRevoked() -> membershipRevoked
    void moderatorGranted() -> moderatorGranted
    void moderatorRevoked() -> moderatorRevoked
    void ownershipGranted() -> ownershipGranted
    void ownershipRevoked() -> ownershipRevoked
    void adminGranted() -> adminGranted
    void adminRevoked() -> adminRevoked
org.jivesoftware.smackx.packet.AdHocCommandData -> org.jivesoftware.smackx.packet.AdHocCommandData:
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String node -> node
    java.lang.String sessionID -> sessionID
    java.util.List notes -> notes
    org.jivesoftware.smackx.packet.DataForm form -> form
    org.jivesoftware.smackx.commands.AdHocCommand$Action action -> action
    org.jivesoftware.smackx.commands.AdHocCommand$Status status -> status
    java.util.ArrayList actions -> actions
    org.jivesoftware.smackx.commands.AdHocCommand$Action executeAction -> executeAction
    java.lang.String lang -> lang
    java.lang.String getChildElementXML() -> getChildElementXML
    java.lang.String getId() -> getId
    void setId(java.lang.String) -> setId
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getNode() -> getNode
    void setNode(java.lang.String) -> setNode
    java.util.List getNotes() -> getNotes
    void addNote(org.jivesoftware.smackx.commands.AdHocCommandNote) -> addNote
    void remveNote(org.jivesoftware.smackx.commands.AdHocCommandNote) -> remveNote
    org.jivesoftware.smackx.packet.DataForm getForm() -> getForm
    void setForm(org.jivesoftware.smackx.packet.DataForm) -> setForm
    org.jivesoftware.smackx.commands.AdHocCommand$Action getAction() -> getAction
    void setAction(org.jivesoftware.smackx.commands.AdHocCommand$Action) -> setAction
    org.jivesoftware.smackx.commands.AdHocCommand$Status getStatus() -> getStatus
    void setStatus(org.jivesoftware.smackx.commands.AdHocCommand$Status) -> setStatus
    java.util.List getActions() -> getActions
    void addAction(org.jivesoftware.smackx.commands.AdHocCommand$Action) -> addAction
    void setExecuteAction(org.jivesoftware.smackx.commands.AdHocCommand$Action) -> setExecuteAction
    org.jivesoftware.smackx.commands.AdHocCommand$Action getExecuteAction() -> getExecuteAction
    void setSessionID(java.lang.String) -> setSessionID
    java.lang.String getSessionID() -> getSessionID
org.jivesoftware.smackx.packet.AdHocCommandData$SpecificError -> org.jivesoftware.smackx.packet.AdHocCommandData$SpecificError:
    java.lang.String namespace -> namespace
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition condition -> condition
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    org.jivesoftware.smackx.commands.AdHocCommand$SpecificErrorCondition getCondition() -> getCondition
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.AttentionExtension -> org.jivesoftware.smackx.packet.AttentionExtension:
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.AttentionExtension$Provider -> org.jivesoftware.smackx.packet.AttentionExtension$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.packet.ChatStateExtension -> org.jivesoftware.smackx.packet.ChatStateExtension:
    org.jivesoftware.smackx.ChatState state -> state
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.ChatStateExtension$Provider -> org.jivesoftware.smackx.packet.ChatStateExtension$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.packet.DataForm -> org.jivesoftware.smackx.packet.DataForm:
    java.lang.String type -> type
    java.lang.String title -> title
    java.util.List instructions -> instructions
    org.jivesoftware.smackx.packet.DataForm$ReportedData reportedData -> reportedData
    java.util.List items -> items
    java.util.List fields -> fields
    java.lang.String getType() -> getType
    java.lang.String getTitle() -> getTitle
    java.util.Iterator getInstructions() -> getInstructions
    org.jivesoftware.smackx.packet.DataForm$ReportedData getReportedData() -> getReportedData
    java.util.Iterator getItems() -> getItems
    java.util.Iterator getFields() -> getFields
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    void setTitle(java.lang.String) -> setTitle
    void setInstructions(java.util.List) -> setInstructions
    void setReportedData(org.jivesoftware.smackx.packet.DataForm$ReportedData) -> setReportedData
    void addField(org.jivesoftware.smackx.FormField) -> addField
    void addInstruction(java.lang.String) -> addInstruction
    void addItem(org.jivesoftware.smackx.packet.DataForm$Item) -> addItem
    boolean hasHiddenFormTypeField() -> hasHiddenFormTypeField
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.DataForm$Item -> org.jivesoftware.smackx.packet.DataForm$Item:
    java.util.List fields -> fields
    java.util.Iterator getFields() -> getFields
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.DataForm$ReportedData -> org.jivesoftware.smackx.packet.DataForm$ReportedData:
    java.util.List fields -> fields
    java.util.Iterator getFields() -> getFields
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.DefaultPrivateData -> org.jivesoftware.smackx.packet.DefaultPrivateData:
    java.lang.String elementName -> elementName
    java.lang.String namespace -> namespace
    java.util.Map map -> map
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
    java.util.Iterator getNames() -> getNames
    java.lang.String getValue(java.lang.String) -> getValue
    void setValue(java.lang.String,java.lang.String) -> setValue
org.jivesoftware.smackx.packet.DelayInfo -> org.jivesoftware.smackx.packet.DelayInfo:
    org.jivesoftware.smackx.packet.DelayInformation wrappedInfo -> wrappedInfo
    java.lang.String getFrom() -> getFrom
    java.lang.String getReason() -> getReason
    java.util.Date getStamp() -> getStamp
    void setFrom(java.lang.String) -> setFrom
    void setReason(java.lang.String) -> setReason
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.DelayInformation -> org.jivesoftware.smackx.packet.DelayInformation:
    java.text.DateFormat XEP_0091_UTC_FORMAT -> XEP_0091_UTC_FORMAT
    java.util.Date stamp -> stamp
    java.lang.String from -> from
    java.lang.String reason -> reason
    java.lang.String getFrom() -> getFrom
    void setFrom(java.lang.String) -> setFrom
    java.util.Date getStamp() -> getStamp
    java.lang.String getReason() -> getReason
    void setReason(java.lang.String) -> setReason
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.DiscoverInfo -> org.jivesoftware.smackx.packet.DiscoverInfo:
    java.lang.String NAMESPACE -> NAMESPACE
    java.util.List features -> features
    java.util.List identities -> identities
    java.lang.String node -> node
    void addFeature(java.lang.String) -> addFeature
    void addFeatures(java.util.Collection) -> addFeatures
    void addFeature(org.jivesoftware.smackx.packet.DiscoverInfo$Feature) -> addFeature
    java.util.Iterator getFeatures() -> getFeatures
    void addIdentity(org.jivesoftware.smackx.packet.DiscoverInfo$Identity) -> addIdentity
    void addIdentities(java.util.Collection) -> addIdentities
    java.util.Iterator getIdentities() -> getIdentities
    java.lang.String getNode() -> getNode
    void setNode(java.lang.String) -> setNode
    boolean containsFeature(java.lang.String) -> containsFeature
    java.lang.String getChildElementXML() -> getChildElementXML
    boolean containsDuplicateIdentities() -> containsDuplicateIdentities
    boolean containsDuplicateFeatures() -> containsDuplicateFeatures
org.jivesoftware.smackx.packet.DiscoverInfo$Feature -> org.jivesoftware.smackx.packet.DiscoverInfo$Feature:
    java.lang.String variable -> variable
    java.lang.String getVar() -> getVar
    java.lang.String toXML() -> toXML
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.jivesoftware.smackx.packet.DiscoverInfo$Identity -> org.jivesoftware.smackx.packet.DiscoverInfo$Identity:
    java.lang.String category -> category
    java.lang.String name -> name
    java.lang.String type -> type
    java.lang.String lang -> lang
    java.lang.String getCategory() -> getCategory
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getType() -> getType
    void setType(java.lang.String) -> setType
    void setLanguage(java.lang.String) -> setLanguage
    java.lang.String getLanguage() -> getLanguage
    java.lang.String toXML() -> toXML
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(org.jivesoftware.smackx.packet.DiscoverInfo$Identity) -> compareTo
    int compareTo(java.lang.Object) -> compareTo
org.jivesoftware.smackx.packet.DiscoverItems -> org.jivesoftware.smackx.packet.DiscoverItems:
    java.lang.String NAMESPACE -> NAMESPACE
    java.util.List items -> items
    java.lang.String node -> node
    void addItem(org.jivesoftware.smackx.packet.DiscoverItems$Item) -> addItem
    void addItems(java.util.Collection) -> addItems
    java.util.Iterator getItems() -> getItems
    java.lang.String getNode() -> getNode
    void setNode(java.lang.String) -> setNode
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.packet.DiscoverItems$Item -> org.jivesoftware.smackx.packet.DiscoverItems$Item:
    java.lang.String UPDATE_ACTION -> UPDATE_ACTION
    java.lang.String REMOVE_ACTION -> REMOVE_ACTION
    java.lang.String entityID -> entityID
    java.lang.String name -> name
    java.lang.String node -> node
    java.lang.String action -> action
    java.lang.String getEntityID() -> getEntityID
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getNode() -> getNode
    void setNode(java.lang.String) -> setNode
    java.lang.String getAction() -> getAction
    void setAction(java.lang.String) -> setAction
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.Header -> org.jivesoftware.smackx.packet.Header:
    java.lang.String name -> name
    java.lang.String value -> value
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.HeadersExtension -> org.jivesoftware.smackx.packet.HeadersExtension:
    java.lang.String NAMESPACE -> NAMESPACE
    java.util.Collection headers -> headers
    java.util.Collection getHeaders() -> getHeaders
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.LastActivity -> org.jivesoftware.smackx.packet.LastActivity:
    java.lang.String NAMESPACE -> NAMESPACE
    long lastActivity -> lastActivity
    java.lang.String message -> message
    java.lang.String getChildElementXML() -> getChildElementXML
    void setLastActivity(long) -> setLastActivity
    void setMessage(java.lang.String) -> setMessage
    long getIdleTime() -> getIdleTime
    java.lang.String getStatusMessage() -> getStatusMessage
    org.jivesoftware.smackx.packet.LastActivity getLastActivity(org.jivesoftware.smack.Connection,java.lang.String) -> getLastActivity
    void access$000(org.jivesoftware.smackx.packet.LastActivity,java.lang.String) -> access$000
org.jivesoftware.smackx.packet.LastActivity$Provider -> org.jivesoftware.smackx.packet.LastActivity$Provider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.packet.MUCAdmin -> org.jivesoftware.smackx.packet.MUCAdmin:
    java.util.List items -> items
    java.util.Iterator getItems() -> getItems
    void addItem(org.jivesoftware.smackx.packet.MUCAdmin$Item) -> addItem
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.packet.MUCAdmin$Item -> org.jivesoftware.smackx.packet.MUCAdmin$Item:
    java.lang.String actor -> actor
    java.lang.String reason -> reason
    java.lang.String affiliation -> affiliation
    java.lang.String jid -> jid
    java.lang.String nick -> nick
    java.lang.String role -> role
    java.lang.String getActor() -> getActor
    java.lang.String getReason() -> getReason
    java.lang.String getAffiliation() -> getAffiliation
    java.lang.String getJid() -> getJid
    java.lang.String getNick() -> getNick
    java.lang.String getRole() -> getRole
    void setActor(java.lang.String) -> setActor
    void setReason(java.lang.String) -> setReason
    void setJid(java.lang.String) -> setJid
    void setNick(java.lang.String) -> setNick
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MUCCreatePresence -> org.jivesoftware.smackx.packet.MUCCreatePresence:
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MUCInitialPresence -> org.jivesoftware.smackx.packet.MUCInitialPresence:
    java.lang.String password -> password
    org.jivesoftware.smackx.packet.MUCInitialPresence$History history -> history
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
    org.jivesoftware.smackx.packet.MUCInitialPresence$History getHistory() -> getHistory
    java.lang.String getPassword() -> getPassword
    void setHistory(org.jivesoftware.smackx.packet.MUCInitialPresence$History) -> setHistory
    void setPassword(java.lang.String) -> setPassword
org.jivesoftware.smackx.packet.MUCInitialPresence$History -> org.jivesoftware.smackx.packet.MUCInitialPresence$History:
    int maxChars -> maxChars
    int maxStanzas -> maxStanzas
    int seconds -> seconds
    java.util.Date since -> since
    int getMaxChars() -> getMaxChars
    int getMaxStanzas() -> getMaxStanzas
    int getSeconds() -> getSeconds
    java.util.Date getSince() -> getSince
    void setMaxChars(int) -> setMaxChars
    void setMaxStanzas(int) -> setMaxStanzas
    void setSeconds(int) -> setSeconds
    void setSince(java.util.Date) -> setSince
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MUCJoinPresence -> org.jivesoftware.smackx.packet.MUCJoinPresence:
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MUCOwner -> org.jivesoftware.smackx.packet.MUCOwner:
    java.util.List items -> items
    org.jivesoftware.smackx.packet.MUCOwner$Destroy destroy -> destroy
    java.util.Iterator getItems() -> getItems
    org.jivesoftware.smackx.packet.MUCOwner$Destroy getDestroy() -> getDestroy
    void setDestroy(org.jivesoftware.smackx.packet.MUCOwner$Destroy) -> setDestroy
    void addItem(org.jivesoftware.smackx.packet.MUCOwner$Item) -> addItem
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.packet.MUCOwner$Destroy -> org.jivesoftware.smackx.packet.MUCOwner$Destroy:
    java.lang.String reason -> reason
    java.lang.String jid -> jid
    java.lang.String getJid() -> getJid
    java.lang.String getReason() -> getReason
    void setJid(java.lang.String) -> setJid
    void setReason(java.lang.String) -> setReason
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MUCOwner$Item -> org.jivesoftware.smackx.packet.MUCOwner$Item:
    java.lang.String actor -> actor
    java.lang.String reason -> reason
    java.lang.String affiliation -> affiliation
    java.lang.String jid -> jid
    java.lang.String nick -> nick
    java.lang.String role -> role
    java.lang.String getActor() -> getActor
    java.lang.String getReason() -> getReason
    java.lang.String getAffiliation() -> getAffiliation
    java.lang.String getJid() -> getJid
    java.lang.String getNick() -> getNick
    java.lang.String getRole() -> getRole
    void setActor(java.lang.String) -> setActor
    void setReason(java.lang.String) -> setReason
    void setJid(java.lang.String) -> setJid
    void setNick(java.lang.String) -> setNick
    void setRole(java.lang.String) -> setRole
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MUCUser -> org.jivesoftware.smackx.packet.MUCUser:
    org.jivesoftware.smackx.packet.MUCUser$Invite invite -> invite
    org.jivesoftware.smackx.packet.MUCUser$Decline decline -> decline
    org.jivesoftware.smackx.packet.MUCUser$Apply apply -> apply
    org.jivesoftware.smackx.packet.MUCUser$Accept accept -> accept
    org.jivesoftware.smackx.packet.MUCUser$Item item -> item
    java.lang.String password -> password
    org.jivesoftware.smackx.packet.MUCUser$Status status -> status
    org.jivesoftware.smackx.packet.MUCUser$Destroy destroy -> destroy
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
    org.jivesoftware.smackx.packet.MUCUser$Invite getInvite() -> getInvite
    org.jivesoftware.smackx.packet.MUCUser$Apply getApply() -> getApply
    org.jivesoftware.smackx.packet.MUCUser$Decline getDecline() -> getDecline
    org.jivesoftware.smackx.packet.MUCUser$Item getItem() -> getItem
    java.lang.String getPassword() -> getPassword
    org.jivesoftware.smackx.packet.MUCUser$Status getStatus() -> getStatus
    org.jivesoftware.smackx.packet.MUCUser$Destroy getDestroy() -> getDestroy
    void setInvite(org.jivesoftware.smackx.packet.MUCUser$Invite) -> setInvite
    void setApply(org.jivesoftware.smackx.packet.MUCUser$Apply) -> setApply
    org.jivesoftware.smackx.packet.MUCUser$Accept getAccept() -> getAccept
    void setAccept(org.jivesoftware.smackx.packet.MUCUser$Accept) -> setAccept
    void setDecline(org.jivesoftware.smackx.packet.MUCUser$Decline) -> setDecline
    void setItem(org.jivesoftware.smackx.packet.MUCUser$Item) -> setItem
    void setPassword(java.lang.String) -> setPassword
    void setStatus(org.jivesoftware.smackx.packet.MUCUser$Status) -> setStatus
    void setDestroy(org.jivesoftware.smackx.packet.MUCUser$Destroy) -> setDestroy
org.jivesoftware.smackx.packet.MUCUser$Accept -> org.jivesoftware.smackx.packet.MUCUser$Accept:
    java.lang.String reason -> reason
    java.lang.String from -> from
    java.lang.String to -> to
    java.lang.String fromNick -> fromNick
    java.lang.String getFrom() -> getFrom
    java.lang.String getReason() -> getReason
    java.lang.String getTo() -> getTo
    void setFrom(java.lang.String) -> setFrom
    void setReason(java.lang.String) -> setReason
    void setTo(java.lang.String) -> setTo
    java.lang.String getFromNick() -> getFromNick
    void setFromNick(java.lang.String) -> setFromNick
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MUCUser$Apply -> org.jivesoftware.smackx.packet.MUCUser$Apply:
    java.lang.String reason -> reason
    java.lang.String from -> from
    java.lang.String to -> to
    java.lang.String toNick -> toNick
    java.lang.String getFrom() -> getFrom
    java.lang.String getReason() -> getReason
    java.lang.String getTo() -> getTo
    void setFrom(java.lang.String) -> setFrom
    void setReason(java.lang.String) -> setReason
    void setTo(java.lang.String) -> setTo
    java.lang.String getToNick() -> getToNick
    void setToNick(java.lang.String) -> setToNick
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MUCUser$Decline -> org.jivesoftware.smackx.packet.MUCUser$Decline:
    java.lang.String reason -> reason
    java.lang.String from -> from
    java.lang.String to -> to
    java.lang.String fromNick -> fromNick
    org.jivesoftware.smackx.packet.MUCUser$MucType type -> type
    java.lang.String getFrom() -> getFrom
    java.lang.String getReason() -> getReason
    java.lang.String getTo() -> getTo
    void setFrom(java.lang.String) -> setFrom
    void setReason(java.lang.String) -> setReason
    void setTo(java.lang.String) -> setTo
    java.lang.String getFromNick() -> getFromNick
    void setFromNick(java.lang.String) -> setFromNick
    org.jivesoftware.smackx.packet.MUCUser$MucType getType() -> getType
    void setType(org.jivesoftware.smackx.packet.MUCUser$MucType) -> setType
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MUCUser$Destroy -> org.jivesoftware.smackx.packet.MUCUser$Destroy:
    java.lang.String reason -> reason
    java.lang.String jid -> jid
    java.lang.String getJid() -> getJid
    java.lang.String getReason() -> getReason
    void setJid(java.lang.String) -> setJid
    void setReason(java.lang.String) -> setReason
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MUCUser$Invite -> org.jivesoftware.smackx.packet.MUCUser$Invite:
    java.lang.String reason -> reason
    java.lang.String from -> from
    java.lang.String to -> to
    java.lang.String getFrom() -> getFrom
    java.lang.String getReason() -> getReason
    java.lang.String getTo() -> getTo
    void setFrom(java.lang.String) -> setFrom
    void setReason(java.lang.String) -> setReason
    void setTo(java.lang.String) -> setTo
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MUCUser$Item -> org.jivesoftware.smackx.packet.MUCUser$Item:
    java.lang.String actor -> actor
    java.lang.String reason -> reason
    java.lang.String affiliation -> affiliation
    java.lang.String jid -> jid
    java.lang.String nick -> nick
    java.lang.String role -> role
    java.lang.String getActor() -> getActor
    java.lang.String getReason() -> getReason
    java.lang.String getAffiliation() -> getAffiliation
    java.lang.String getJid() -> getJid
    java.lang.String getNick() -> getNick
    java.lang.String getRole() -> getRole
    void setActor(java.lang.String) -> setActor
    void setReason(java.lang.String) -> setReason
    void setJid(java.lang.String) -> setJid
    void setNick(java.lang.String) -> setNick
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MUCUser$MucType -> org.jivesoftware.smackx.packet.MUCUser$MucType:
    org.jivesoftware.smackx.packet.MUCUser$MucType Invite -> Invite
    org.jivesoftware.smackx.packet.MUCUser$MucType Apply -> Apply
    org.jivesoftware.smackx.packet.MUCUser$MucType[] $VALUES -> $VALUES
    org.jivesoftware.smackx.packet.MUCUser$MucType[] values() -> values
    org.jivesoftware.smackx.packet.MUCUser$MucType valueOf(java.lang.String) -> valueOf
org.jivesoftware.smackx.packet.MUCUser$Status -> org.jivesoftware.smackx.packet.MUCUser$Status:
    java.lang.String code -> code
    java.lang.String getCode() -> getCode
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MessageEvent -> org.jivesoftware.smackx.packet.MessageEvent:
    java.lang.String OFFLINE -> OFFLINE
    java.lang.String COMPOSING -> COMPOSING
    java.lang.String DISPLAYED -> DISPLAYED
    java.lang.String DELIVERED -> DELIVERED
    java.lang.String CANCELLED -> CANCELLED
    boolean offline -> offline
    boolean delivered -> delivered
    boolean displayed -> displayed
    boolean composing -> composing
    boolean cancelled -> cancelled
    java.lang.String packetID -> packetID
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    boolean isComposing() -> isComposing
    boolean isDelivered() -> isDelivered
    boolean isDisplayed() -> isDisplayed
    boolean isOffline() -> isOffline
    boolean isCancelled() -> isCancelled
    java.lang.String getPacketID() -> getPacketID
    java.util.Iterator getEventTypes() -> getEventTypes
    void setComposing(boolean) -> setComposing
    void setDelivered(boolean) -> setDelivered
    void setDisplayed(boolean) -> setDisplayed
    void setOffline(boolean) -> setOffline
    void setCancelled(boolean) -> setCancelled
    void setPacketID(java.lang.String) -> setPacketID
    boolean isMessageEventRequest() -> isMessageEventRequest
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MultipleAddresses -> org.jivesoftware.smackx.packet.MultipleAddresses:
    java.lang.String BCC -> BCC
    java.lang.String CC -> CC
    java.lang.String NO_REPLY -> NO_REPLY
    java.lang.String REPLY_ROOM -> REPLY_ROOM
    java.lang.String REPLY_TO -> REPLY_TO
    java.lang.String TO -> TO
    java.util.List addresses -> addresses
    void addAddress(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String) -> addAddress
    void setNoReply() -> setNoReply
    java.util.List getAddressesOfType(java.lang.String) -> getAddressesOfType
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.MultipleAddresses$1 -> org.jivesoftware.smackx.packet.MultipleAddresses$1:
org.jivesoftware.smackx.packet.MultipleAddresses$Address -> org.jivesoftware.smackx.packet.MultipleAddresses$Address:
    java.lang.String type -> type
    java.lang.String jid -> jid
    java.lang.String node -> node
    java.lang.String description -> description
    boolean delivered -> delivered
    java.lang.String uri -> uri
    java.lang.String getType() -> getType
    java.lang.String getJid() -> getJid
    void setJid(java.lang.String) -> setJid
    java.lang.String getNode() -> getNode
    void setNode(java.lang.String) -> setNode
    java.lang.String getDescription() -> getDescription
    void setDescription(java.lang.String) -> setDescription
    boolean isDelivered() -> isDelivered
    void setDelivered(boolean) -> setDelivered
    java.lang.String getUri() -> getUri
    void setUri(java.lang.String) -> setUri
    java.lang.String toXML() -> toXML
    void access$100(org.jivesoftware.smackx.packet.MultipleAddresses$Address,java.lang.String) -> access$100
    void access$200(org.jivesoftware.smackx.packet.MultipleAddresses$Address,java.lang.String) -> access$200
    void access$300(org.jivesoftware.smackx.packet.MultipleAddresses$Address,java.lang.String) -> access$300
    void access$400(org.jivesoftware.smackx.packet.MultipleAddresses$Address,boolean) -> access$400
    void access$500(org.jivesoftware.smackx.packet.MultipleAddresses$Address,java.lang.String) -> access$500
    java.lang.String access$600(org.jivesoftware.smackx.packet.MultipleAddresses$Address) -> access$600
org.jivesoftware.smackx.packet.Nick -> org.jivesoftware.smackx.packet.Nick:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ELEMENT_NAME -> ELEMENT_NAME
    java.lang.String name -> name
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.Nick$Provider -> org.jivesoftware.smackx.packet.Nick$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.packet.OfflineMessageInfo -> org.jivesoftware.smackx.packet.OfflineMessageInfo:
    java.lang.String node -> node
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getNode() -> getNode
    void setNode(java.lang.String) -> setNode
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.OfflineMessageInfo$Provider -> org.jivesoftware.smackx.packet.OfflineMessageInfo$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.packet.OfflineMessageRequest -> org.jivesoftware.smackx.packet.OfflineMessageRequest:
    java.util.List items -> items
    boolean purge -> purge
    boolean fetch -> fetch
    java.util.Iterator getItems() -> getItems
    void addItem(org.jivesoftware.smackx.packet.OfflineMessageRequest$Item) -> addItem
    boolean isPurge() -> isPurge
    void setPurge(boolean) -> setPurge
    boolean isFetch() -> isFetch
    void setFetch(boolean) -> setFetch
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.packet.OfflineMessageRequest$Item -> org.jivesoftware.smackx.packet.OfflineMessageRequest$Item:
    java.lang.String action -> action
    java.lang.String jid -> jid
    java.lang.String node -> node
    java.lang.String getNode() -> getNode
    java.lang.String getAction() -> getAction
    void setAction(java.lang.String) -> setAction
    java.lang.String getJid() -> getJid
    void setJid(java.lang.String) -> setJid
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.OfflineMessageRequest$Provider -> org.jivesoftware.smackx.packet.OfflineMessageRequest$Provider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    org.jivesoftware.smackx.packet.OfflineMessageRequest$Item parseItem(org.xmlpull.v1.XmlPullParser) -> parseItem
org.jivesoftware.smackx.packet.PEPEvent -> org.jivesoftware.smackx.packet.PEPEvent:
    org.jivesoftware.smackx.packet.PEPItem item -> item
    void addPEPItem(org.jivesoftware.smackx.packet.PEPItem) -> addPEPItem
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.PEPItem -> org.jivesoftware.smackx.packet.PEPItem:
    java.lang.String id -> id
    java.lang.String getNode() -> getNode
    java.lang.String getItemDetailsXML() -> getItemDetailsXML
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.PEPPubSub -> org.jivesoftware.smackx.packet.PEPPubSub:
    org.jivesoftware.smackx.packet.PEPItem item -> item
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.packet.PrivateData -> org.jivesoftware.smackx.packet.PrivateData:
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.RosterExchange -> org.jivesoftware.smackx.packet.RosterExchange:
    java.util.List remoteRosterEntries -> remoteRosterEntries
    void addRosterEntry(org.jivesoftware.smack.RosterEntry) -> addRosterEntry
    void addRosterEntry(org.jivesoftware.smackx.RemoteRosterEntry) -> addRosterEntry
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.util.Iterator getRosterEntries() -> getRosterEntries
    int getEntryCount() -> getEntryCount
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.SharedGroupsInfo -> org.jivesoftware.smackx.packet.SharedGroupsInfo:
    java.util.List groups -> groups
    java.util.List getGroups() -> getGroups
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.packet.SharedGroupsInfo$Provider -> org.jivesoftware.smackx.packet.SharedGroupsInfo$Provider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.packet.StreamInitiation -> org.jivesoftware.smackx.packet.StreamInitiation:
    java.lang.String id -> id
    java.lang.String mimeType -> mimeType
    org.jivesoftware.smackx.packet.StreamInitiation$File file -> file
    org.jivesoftware.smackx.packet.StreamInitiation$Feature featureNegotiation -> featureNegotiation
    void setSesssionID(java.lang.String) -> setSesssionID
    java.lang.String getSessionID() -> getSessionID
    void setMimeType(java.lang.String) -> setMimeType
    java.lang.String getMimeType() -> getMimeType
    void setFile(org.jivesoftware.smackx.packet.StreamInitiation$File) -> setFile
    org.jivesoftware.smackx.packet.StreamInitiation$File getFile() -> getFile
    void setFeatureNegotiationForm(org.jivesoftware.smackx.packet.DataForm) -> setFeatureNegotiationForm
    org.jivesoftware.smackx.packet.DataForm getFeatureNegotiationForm() -> getFeatureNegotiationForm
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.packet.StreamInitiation$Feature -> org.jivesoftware.smackx.packet.StreamInitiation$Feature:
    org.jivesoftware.smackx.packet.DataForm data -> data
    org.jivesoftware.smackx.packet.StreamInitiation this$0 -> this$0
    org.jivesoftware.smackx.packet.DataForm getData() -> getData
    java.lang.String getNamespace() -> getNamespace
    java.lang.String getElementName() -> getElementName
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.StreamInitiation$File -> org.jivesoftware.smackx.packet.StreamInitiation$File:
    java.lang.String name -> name
    long size -> size
    java.lang.String hash -> hash
    java.util.Date date -> date
    java.lang.String desc -> desc
    boolean isRanged -> isRanged
    java.lang.String getName() -> getName
    long getSize() -> getSize
    void setHash(java.lang.String) -> setHash
    java.lang.String getHash() -> getHash
    void setDate(java.util.Date) -> setDate
    java.util.Date getDate() -> getDate
    void setDesc(java.lang.String) -> setDesc
    java.lang.String getDesc() -> getDesc
    void setRanged(boolean) -> setRanged
    boolean isRanged() -> isRanged
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.packet.Time -> org.jivesoftware.smackx.packet.Time:
    java.text.SimpleDateFormat utcFormat -> utcFormat
    java.text.DateFormat displayFormat -> displayFormat
    java.lang.String utc -> utc
    java.lang.String tz -> tz
    java.lang.String display -> display
    java.util.Date getTime() -> getTime
    void setTime(java.util.Date) -> setTime
    java.lang.String getUtc() -> getUtc
    void setUtc(java.lang.String) -> setUtc
    java.lang.String getTz() -> getTz
    void setTz(java.lang.String) -> setTz
    java.lang.String getDisplay() -> getDisplay
    void setDisplay(java.lang.String) -> setDisplay
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.packet.VCard -> org.jivesoftware.smackx.packet.VCard:
    java.util.Map homePhones -> homePhones
    java.util.Map workPhones -> workPhones
    java.util.Map homeAddr -> homeAddr
    java.util.Map workAddr -> workAddr
    java.lang.String firstName -> firstName
    java.lang.String lastName -> lastName
    java.lang.String middleName -> middleName
    java.lang.String emailHome -> emailHome
    java.lang.String emailWork -> emailWork
    java.lang.String organization -> organization
    java.lang.String organizationUnit -> organizationUnit
    java.lang.String photoMimeType -> photoMimeType
    java.lang.String photoBinval -> photoBinval
    java.util.Map otherSimpleFields -> otherSimpleFields
    java.util.Map otherUnescapableFields -> otherUnescapableFields
    java.lang.String getField(java.lang.String) -> getField
    void setField(java.lang.String,java.lang.String) -> setField
    void setField(java.lang.String,java.lang.String,boolean) -> setField
    java.lang.String getFirstName() -> getFirstName
    void setFirstName(java.lang.String) -> setFirstName
    java.lang.String getLastName() -> getLastName
    void setLastName(java.lang.String) -> setLastName
    java.lang.String getMiddleName() -> getMiddleName
    void setMiddleName(java.lang.String) -> setMiddleName
    java.lang.String getNickName() -> getNickName
    void setNickName(java.lang.String) -> setNickName
    java.lang.String getEmailHome() -> getEmailHome
    void setEmailHome(java.lang.String) -> setEmailHome
    java.lang.String getEmailWork() -> getEmailWork
    void setEmailWork(java.lang.String) -> setEmailWork
    java.lang.String getJabberId() -> getJabberId
    void setJabberId(java.lang.String) -> setJabberId
    java.lang.String getOrganization() -> getOrganization
    void setOrganization(java.lang.String) -> setOrganization
    java.lang.String getOrganizationUnit() -> getOrganizationUnit
    void setOrganizationUnit(java.lang.String) -> setOrganizationUnit
    java.lang.String getAddressFieldHome(java.lang.String) -> getAddressFieldHome
    void setAddressFieldHome(java.lang.String,java.lang.String) -> setAddressFieldHome
    java.lang.String getAddressFieldWork(java.lang.String) -> getAddressFieldWork
    void setAddressFieldWork(java.lang.String,java.lang.String) -> setAddressFieldWork
    void setPhoneHome(java.lang.String,java.lang.String) -> setPhoneHome
    java.lang.String getPhoneHome(java.lang.String) -> getPhoneHome
    void setPhoneWork(java.lang.String,java.lang.String) -> setPhoneWork
    java.lang.String getPhoneWork(java.lang.String) -> getPhoneWork
    void setAvatar(java.net.URL) -> setAvatar
    void removeAvatar() -> removeAvatar
    void setAvatar(byte[]) -> setAvatar
    void setAvatar(byte[],java.lang.String) -> setAvatar
    void setAvatar(java.lang.String,java.lang.String) -> setAvatar
    byte[] getAvatar() -> getAvatar
    java.lang.String getAvatarMimeType() -> getAvatarMimeType
    byte[] getBytes(java.net.URL) -> getBytes
    byte[] getFileBytes(java.io.File) -> getFileBytes
    java.lang.String getAvatarHash() -> getAvatarHash
    void updateFN() -> updateFN
    void save(org.jivesoftware.smack.Connection) -> save
    void load(org.jivesoftware.smack.Connection) -> load
    void load(org.jivesoftware.smack.Connection,java.lang.String) -> load
    void doLoad(org.jivesoftware.smack.Connection,java.lang.String) -> doLoad
    java.lang.String getChildElementXML() -> getChildElementXML
    void copyFieldsFrom(org.jivesoftware.smackx.packet.VCard) -> copyFieldsFrom
    void checkAuthenticated(org.jivesoftware.smack.Connection,boolean) -> checkAuthenticated
    boolean hasContent() -> hasContent
    boolean hasNameField() -> hasNameField
    boolean hasOrganizationFields() -> hasOrganizationFields
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    boolean access$000(org.jivesoftware.smackx.packet.VCard) -> access$000
    boolean access$200(org.jivesoftware.smackx.packet.VCard) -> access$200
    java.lang.String access$300(org.jivesoftware.smackx.packet.VCard) -> access$300
    java.lang.String access$400(org.jivesoftware.smackx.packet.VCard) -> access$400
    java.util.Map access$500(org.jivesoftware.smackx.packet.VCard) -> access$500
    java.util.Map access$600(org.jivesoftware.smackx.packet.VCard) -> access$600
    java.util.Map access$700(org.jivesoftware.smackx.packet.VCard) -> access$700
    java.util.Map access$800(org.jivesoftware.smackx.packet.VCard) -> access$800
    java.lang.String access$900(org.jivesoftware.smackx.packet.VCard) -> access$900
    java.lang.String access$1100(org.jivesoftware.smackx.packet.VCard) -> access$1100
    java.util.Map access$1300(org.jivesoftware.smackx.packet.VCard) -> access$1300
    java.util.Map access$1400(org.jivesoftware.smackx.packet.VCard) -> access$1400
    boolean access$1500(org.jivesoftware.smackx.packet.VCard) -> access$1500
    java.lang.String access$1600(org.jivesoftware.smackx.packet.VCard) -> access$1600
    java.lang.String access$1700(org.jivesoftware.smackx.packet.VCard) -> access$1700
    java.lang.String access$1800(org.jivesoftware.smackx.packet.VCard) -> access$1800
    java.lang.String access$1900(org.jivesoftware.smackx.packet.VCard) -> access$1900
    java.lang.String access$2000(org.jivesoftware.smackx.packet.VCard) -> access$2000
org.jivesoftware.smackx.packet.VCard$ContentBuilder -> org.jivesoftware.smackx.packet.VCard$ContentBuilder:
    void addTagContent() -> addTagContent
org.jivesoftware.smackx.packet.VCard$VCardWriter -> org.jivesoftware.smackx.packet.VCard$VCardWriter:
    java.lang.StringBuilder sb -> sb
    org.jivesoftware.smackx.packet.VCard this$0 -> this$0
    void write() -> write
    void buildActualContent() -> buildActualContent
    void appendPhoto() -> appendPhoto
    void appendEmail(java.lang.String,java.lang.String) -> appendEmail
    void appendPhones(java.util.Map,java.lang.String) -> appendPhones
    void appendAddress(java.util.Map,java.lang.String) -> appendAddress
    void appendEmptyTag(java.lang.Object) -> appendEmptyTag
    void appendGenericFields() -> appendGenericFields
    void appendOrganization() -> appendOrganization
    void appendN() -> appendN
    void appendTag(java.lang.String,java.lang.String,java.lang.String,boolean,org.jivesoftware.smackx.packet.VCard$ContentBuilder) -> appendTag
    void appendTag(java.lang.String,boolean,org.jivesoftware.smackx.packet.VCard$ContentBuilder) -> appendTag
    void appendTag(java.lang.String,java.lang.String) -> appendTag
    void access$100(org.jivesoftware.smackx.packet.VCard$VCardWriter) -> access$100
    void access$1000(org.jivesoftware.smackx.packet.VCard$VCardWriter,java.lang.String,java.lang.String) -> access$1000
    void access$1200(org.jivesoftware.smackx.packet.VCard$VCardWriter,java.lang.Object) -> access$1200
    java.lang.StringBuilder access$2100(org.jivesoftware.smackx.packet.VCard$VCardWriter) -> access$2100
org.jivesoftware.smackx.packet.VCard$VCardWriter$1 -> org.jivesoftware.smackx.packet.VCard$VCardWriter$1:
    org.jivesoftware.smackx.packet.VCard$VCardWriter this$1 -> this$1
    void addTagContent() -> addTagContent
org.jivesoftware.smackx.packet.VCard$VCardWriter$2 -> org.jivesoftware.smackx.packet.VCard$VCardWriter$2:
    org.jivesoftware.smackx.packet.VCard$VCardWriter this$1 -> this$1
    void addTagContent() -> addTagContent
org.jivesoftware.smackx.packet.VCard$VCardWriter$3 -> org.jivesoftware.smackx.packet.VCard$VCardWriter$3:
    java.lang.String val$type -> val$type
    java.lang.String val$email -> val$email
    org.jivesoftware.smackx.packet.VCard$VCardWriter this$1 -> this$1
    void addTagContent() -> addTagContent
org.jivesoftware.smackx.packet.VCard$VCardWriter$4 -> org.jivesoftware.smackx.packet.VCard$VCardWriter$4:
    java.util.Map$Entry val$entry -> val$entry
    java.lang.String val$code -> val$code
    org.jivesoftware.smackx.packet.VCard$VCardWriter this$1 -> this$1
    void addTagContent() -> addTagContent
org.jivesoftware.smackx.packet.VCard$VCardWriter$5 -> org.jivesoftware.smackx.packet.VCard$VCardWriter$5:
    java.lang.String val$code -> val$code
    java.util.Map val$addr -> val$addr
    org.jivesoftware.smackx.packet.VCard$VCardWriter this$1 -> this$1
    void addTagContent() -> addTagContent
org.jivesoftware.smackx.packet.VCard$VCardWriter$6 -> org.jivesoftware.smackx.packet.VCard$VCardWriter$6:
    org.jivesoftware.smackx.packet.VCard$VCardWriter this$1 -> this$1
    void addTagContent() -> addTagContent
org.jivesoftware.smackx.packet.VCard$VCardWriter$7 -> org.jivesoftware.smackx.packet.VCard$VCardWriter$7:
    org.jivesoftware.smackx.packet.VCard$VCardWriter this$1 -> this$1
    void addTagContent() -> addTagContent
org.jivesoftware.smackx.packet.VCard$VCardWriter$8 -> org.jivesoftware.smackx.packet.VCard$VCardWriter$8:
    java.lang.String val$tagText -> val$tagText
    org.jivesoftware.smackx.packet.VCard$VCardWriter this$1 -> this$1
    void addTagContent() -> addTagContent
org.jivesoftware.smackx.packet.Version -> org.jivesoftware.smackx.packet.Version:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String os -> os
    java.lang.String getName() -> getName
    void setName(java.lang.String) -> setName
    java.lang.String getVersion() -> getVersion
    void setVersion(java.lang.String) -> setVersion
    java.lang.String getOs() -> getOs
    void setOs(java.lang.String) -> setOs
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.packet.XHTMLExtension -> org.jivesoftware.smackx.packet.XHTMLExtension:
    java.util.List bodies -> bodies
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
    java.util.Iterator getBodies() -> getBodies
    void addBody(java.lang.String) -> addBody
    int getBodiesCount() -> getBodiesCount
org.jivesoftware.smackx.ping.PingFailedListener -> org.jivesoftware.smackx.ping.PingFailedListener:
    void pingFailed() -> pingFailed
org.jivesoftware.smackx.ping.PingManager -> org.jivesoftware.smackx.ping.PingManager:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ELEMENT -> ELEMENT
    java.util.Map instances -> instances
    java.util.concurrent.ScheduledExecutorService periodicPingExecutorService -> periodicPingExecutorService
    org.jivesoftware.smack.Connection connection -> connection
    int pingInterval -> pingInterval
    java.util.Set pingFailedListeners -> pingFailedListeners
    java.util.concurrent.ScheduledFuture periodicPingTask -> periodicPingTask
    long lastSuccessfulPingByTask -> lastSuccessfulPingByTask
    long pingMinDelta -> pingMinDelta
    long lastPingStamp -> lastPingStamp
    long lastSuccessfulManualPing -> lastSuccessfulManualPing
    org.jivesoftware.smackx.ping.PingManager getInstanceFor(org.jivesoftware.smack.Connection) -> getInstanceFor
    void setPingIntervall(int) -> setPingIntervall
    int getPingIntervall() -> getPingIntervall
    void registerPingFailedListener(org.jivesoftware.smackx.ping.PingFailedListener) -> registerPingFailedListener
    void unregisterPingFailedListener(org.jivesoftware.smackx.ping.PingFailedListener) -> unregisterPingFailedListener
    void disablePingFloodProtection() -> disablePingFloodProtection
    void setPingMinimumInterval(long) -> setPingMinimumInterval
    long getPingMinimumInterval() -> getPingMinimumInterval
    org.jivesoftware.smack.packet.IQ ping(java.lang.String,long) -> ping
    org.jivesoftware.smack.packet.IQ ping(java.lang.String) -> ping
    boolean pingEntity(java.lang.String,long) -> pingEntity
    boolean pingEntity(java.lang.String) -> pingEntity
    boolean pingMyServer(long) -> pingMyServer
    boolean pingMyServer() -> pingMyServer
    boolean isPingSupported(java.lang.String) -> isPingSupported
    long getLastSuccessfulPing() -> getLastSuccessfulPing
    java.util.Set getPingFailedListeners() -> getPingFailedListeners
    void maybeSchedulePingServerTask() -> maybeSchedulePingServerTask
    void maybeStopPingServerTask() -> maybeStopPingServerTask
    void pongReceived() -> pongReceived
    long access$000(org.jivesoftware.smackx.ping.PingManager) -> access$000
    long access$100(org.jivesoftware.smackx.ping.PingManager) -> access$100
    long access$102(org.jivesoftware.smackx.ping.PingManager,long) -> access$102
    void access$200(org.jivesoftware.smackx.ping.PingManager) -> access$200
org.jivesoftware.smackx.ping.PingManager$1 -> org.jivesoftware.smackx.ping.PingManager$1:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smackx.ping.PingManager$2 -> org.jivesoftware.smackx.ping.PingManager$2:
    org.jivesoftware.smack.Connection val$connection -> val$connection
    org.jivesoftware.smackx.ping.PingManager this$0 -> this$0
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
org.jivesoftware.smackx.ping.PingManager$3 -> org.jivesoftware.smackx.ping.PingManager$3:
    org.jivesoftware.smackx.ping.PingManager this$0 -> this$0
    void connectionClosed() -> connectionClosed
    void connectionClosedOnError(java.lang.Exception) -> connectionClosedOnError
    void reconnectionSuccessful() -> reconnectionSuccessful
    void reconnectingIn(int) -> reconnectingIn
    void reconnectionFailed(java.lang.Exception) -> reconnectionFailed
org.jivesoftware.smackx.ping.ServerPingTask -> org.jivesoftware.smackx.ping.ServerPingTask:
    java.lang.ref.WeakReference weakConnection -> weakConnection
    int delta -> delta
    int tries -> tries
    void run() -> run
org.jivesoftware.smackx.ping.packet.Ping -> org.jivesoftware.smackx.ping.packet.Ping:
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.ping.packet.Pong -> org.jivesoftware.smackx.ping.packet.Pong:
    java.lang.String getChildElementXML() -> getChildElementXML
org.jivesoftware.smackx.ping.provider.PingProvider -> org.jivesoftware.smackx.ping.provider.PingProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.provider.AdHocCommandDataProvider -> org.jivesoftware.smackx.provider.AdHocCommandDataProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.provider.AdHocCommandDataProvider$BadActionError -> org.jivesoftware.smackx.provider.AdHocCommandDataProvider$BadActionError:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.AdHocCommandDataProvider$BadLocaleError -> org.jivesoftware.smackx.provider.AdHocCommandDataProvider$BadLocaleError:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.AdHocCommandDataProvider$BadPayloadError -> org.jivesoftware.smackx.provider.AdHocCommandDataProvider$BadPayloadError:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.AdHocCommandDataProvider$BadSessionIDError -> org.jivesoftware.smackx.provider.AdHocCommandDataProvider$BadSessionIDError:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.AdHocCommandDataProvider$MalformedActionError -> org.jivesoftware.smackx.provider.AdHocCommandDataProvider$MalformedActionError:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.AdHocCommandDataProvider$SessionExpiredError -> org.jivesoftware.smackx.provider.AdHocCommandDataProvider$SessionExpiredError:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.CapsExtensionProvider -> org.jivesoftware.smackx.provider.CapsExtensionProvider:
    int MAX_DEPTH -> MAX_DEPTH
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.DataFormProvider -> org.jivesoftware.smackx.provider.DataFormProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
    org.jivesoftware.smackx.FormField parseField(org.xmlpull.v1.XmlPullParser) -> parseField
    org.jivesoftware.smackx.packet.DataForm$Item parseItem(org.xmlpull.v1.XmlPullParser) -> parseItem
    org.jivesoftware.smackx.packet.DataForm$ReportedData parseReported(org.xmlpull.v1.XmlPullParser) -> parseReported
    org.jivesoftware.smackx.FormField$Option parseOption(org.xmlpull.v1.XmlPullParser) -> parseOption
org.jivesoftware.smackx.provider.DelayInfoProvider -> org.jivesoftware.smackx.provider.DelayInfoProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.DelayInformationProvider -> org.jivesoftware.smackx.provider.DelayInformationProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.DiscoverInfoProvider -> org.jivesoftware.smackx.provider.DiscoverInfoProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.provider.DiscoverItemsProvider -> org.jivesoftware.smackx.provider.DiscoverItemsProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.provider.EmbeddedExtensionProvider -> org.jivesoftware.smackx.provider.EmbeddedExtensionProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.provider.HeaderProvider -> org.jivesoftware.smackx.provider.HeaderProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.HeadersProvider -> org.jivesoftware.smackx.provider.HeadersProvider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.provider.MUCAdminProvider -> org.jivesoftware.smackx.provider.MUCAdminProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    org.jivesoftware.smackx.packet.MUCAdmin$Item parseItem(org.xmlpull.v1.XmlPullParser) -> parseItem
org.jivesoftware.smackx.provider.MUCOwnerProvider -> org.jivesoftware.smackx.provider.MUCOwnerProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    org.jivesoftware.smackx.packet.MUCOwner$Item parseItem(org.xmlpull.v1.XmlPullParser) -> parseItem
    org.jivesoftware.smackx.packet.MUCOwner$Destroy parseDestroy(org.xmlpull.v1.XmlPullParser) -> parseDestroy
org.jivesoftware.smackx.provider.MUCUserProvider -> org.jivesoftware.smackx.provider.MUCUserProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
    org.jivesoftware.smackx.packet.MUCUser$Item parseItem(org.xmlpull.v1.XmlPullParser) -> parseItem
    org.jivesoftware.smackx.packet.MUCUser$Invite parseInvite(org.xmlpull.v1.XmlPullParser) -> parseInvite
    org.jivesoftware.smackx.packet.MUCUser$Apply parseApply(org.xmlpull.v1.XmlPullParser) -> parseApply
    org.jivesoftware.smackx.packet.MUCUser$Accept parseAccept(org.xmlpull.v1.XmlPullParser) -> parseAccept
    org.jivesoftware.smackx.packet.MUCUser$Decline parseDecline(org.xmlpull.v1.XmlPullParser) -> parseDecline
    org.jivesoftware.smackx.packet.MUCUser$Destroy parseDestroy(org.xmlpull.v1.XmlPullParser) -> parseDestroy
org.jivesoftware.smackx.provider.MessageEventProvider -> org.jivesoftware.smackx.provider.MessageEventProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.MultipleAddressesProvider -> org.jivesoftware.smackx.provider.MultipleAddressesProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.PEPProvider -> org.jivesoftware.smackx.provider.PEPProvider:
    java.util.Map nodeParsers -> nodeParsers
    org.jivesoftware.smack.packet.PacketExtension pepItem -> pepItem
    void registerPEPParserExtension(java.lang.String,org.jivesoftware.smack.provider.PacketExtensionProvider) -> registerPEPParserExtension
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.PrivateDataProvider -> org.jivesoftware.smackx.provider.PrivateDataProvider:
    org.jivesoftware.smackx.packet.PrivateData parsePrivateData(org.xmlpull.v1.XmlPullParser) -> parsePrivateData
org.jivesoftware.smackx.provider.RosterExchangeProvider -> org.jivesoftware.smackx.provider.RosterExchangeProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.provider.StreamInitiationProvider -> org.jivesoftware.smackx.provider.StreamInitiationProvider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.provider.VCardProvider -> org.jivesoftware.smackx.provider.VCardProvider:
    java.lang.String PREFERRED_ENCODING -> PREFERRED_ENCODING
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
    org.jivesoftware.smackx.packet.VCard createVCardFromXML(java.lang.String) -> createVCardFromXML
org.jivesoftware.smackx.provider.VCardProvider$VCardReader -> org.jivesoftware.smackx.provider.VCardProvider$VCardReader:
    org.jivesoftware.smackx.packet.VCard vCard -> vCard
    org.w3c.dom.Document document -> document
    void initializeFields() -> initializeFields
    void setupPhoto() -> setupPhoto
    void setupEmails() -> setupEmails
    void setupPhones() -> setupPhones
    boolean isWorkHome(java.lang.String) -> isWorkHome
    void setupAddresses() -> setupAddresses
    java.lang.String getTagContents(java.lang.String) -> getTagContents
    void setupSimpleFields() -> setupSimpleFields
    java.lang.String getTextContent(org.w3c.dom.Node) -> getTextContent
    void appendText(java.lang.StringBuilder,org.w3c.dom.Node) -> appendText
org.jivesoftware.smackx.provider.XHTMLExtensionProvider -> org.jivesoftware.smackx.provider.XHTMLExtensionProvider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.receipts.DeliveryReceipt -> org.jivesoftware.smackx.receipts.DeliveryReceipt:
    java.lang.String NAMESPACE -> NAMESPACE
    java.lang.String ELEMENT -> ELEMENT
    java.lang.String id -> id
    java.lang.String getId() -> getId
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.receipts.DeliveryReceipt$Provider -> org.jivesoftware.smackx.receipts.DeliveryReceipt$Provider:
    org.jivesoftware.smack.packet.PacketExtension createReturnExtension(java.lang.String,java.lang.String,java.util.Map,java.util.List) -> createReturnExtension
org.jivesoftware.smackx.receipts.DeliveryReceiptManager -> org.jivesoftware.smackx.receipts.DeliveryReceiptManager:
    java.util.Map instances -> instances
    org.jivesoftware.smack.Connection connection -> connection
    boolean auto_receipts_enabled -> auto_receipts_enabled
    java.util.Set receiptReceivedListeners -> receiptReceivedListeners
    org.jivesoftware.smackx.receipts.DeliveryReceiptManager getInstanceFor(org.jivesoftware.smack.Connection) -> getInstanceFor
    boolean isSupported(java.lang.String) -> isSupported
    void processPacket(org.jivesoftware.smack.packet.Packet) -> processPacket
    void setAutoReceiptsEnabled(boolean) -> setAutoReceiptsEnabled
    void enableAutoReceipts() -> enableAutoReceipts
    void disableAutoReceipts() -> disableAutoReceipts
    boolean getAutoReceiptsEnabled() -> getAutoReceiptsEnabled
    void addReceiptReceivedListener(org.jivesoftware.smackx.receipts.ReceiptReceivedListener) -> addReceiptReceivedListener
    void removeReceiptReceivedListener(org.jivesoftware.smackx.receipts.ReceiptReceivedListener) -> removeReceiptReceivedListener
    boolean hasDeliveryReceiptRequest(org.jivesoftware.smack.packet.Packet) -> hasDeliveryReceiptRequest
    void addDeliveryReceiptRequest(org.jivesoftware.smack.packet.Message) -> addDeliveryReceiptRequest
org.jivesoftware.smackx.receipts.DeliveryReceiptManager$1 -> org.jivesoftware.smackx.receipts.DeliveryReceiptManager$1:
    void connectionCreated(org.jivesoftware.smack.Connection) -> connectionCreated
org.jivesoftware.smackx.receipts.DeliveryReceiptRequest -> org.jivesoftware.smackx.receipts.DeliveryReceiptRequest:
    java.lang.String ELEMENT -> ELEMENT
    java.lang.String getElementName() -> getElementName
    java.lang.String getNamespace() -> getNamespace
    java.lang.String toXML() -> toXML
org.jivesoftware.smackx.receipts.DeliveryReceiptRequest$Provider -> org.jivesoftware.smackx.receipts.DeliveryReceiptRequest$Provider:
    org.jivesoftware.smack.packet.PacketExtension parseExtension(org.xmlpull.v1.XmlPullParser) -> parseExtension
org.jivesoftware.smackx.receipts.ReceiptReceivedListener -> org.jivesoftware.smackx.receipts.ReceiptReceivedListener:
    void onReceiptReceived(java.lang.String,java.lang.String,java.lang.String) -> onReceiptReceived
org.jivesoftware.smackx.search.SimpleUserSearch -> org.jivesoftware.smackx.search.SimpleUserSearch:
    org.jivesoftware.smackx.Form form -> form
    org.jivesoftware.smackx.ReportedData data -> data
    void setForm(org.jivesoftware.smackx.Form) -> setForm
    org.jivesoftware.smackx.ReportedData getReportedData() -> getReportedData
    java.lang.String getChildElementXML() -> getChildElementXML
    java.lang.String getItemsToSearch() -> getItemsToSearch
    java.lang.String getSingleValue(org.jivesoftware.smackx.FormField) -> getSingleValue
    void parseItems(org.xmlpull.v1.XmlPullParser) -> parseItems
org.jivesoftware.smackx.search.UserSearch -> org.jivesoftware.smackx.search.UserSearch:
    java.lang.String getChildElementXML() -> getChildElementXML
    org.jivesoftware.smackx.Form getSearchForm(org.jivesoftware.smack.Connection,java.lang.String) -> getSearchForm
    org.jivesoftware.smackx.ReportedData sendSearchForm(org.jivesoftware.smack.Connection,org.jivesoftware.smackx.Form,java.lang.String) -> sendSearchForm
    org.jivesoftware.smackx.ReportedData sendSimpleSearchForm(org.jivesoftware.smack.Connection,org.jivesoftware.smackx.Form,java.lang.String) -> sendSimpleSearchForm
    void buildDataForm(org.jivesoftware.smackx.search.SimpleUserSearch,java.lang.String,org.xmlpull.v1.XmlPullParser) -> buildDataForm
    void access$000(org.jivesoftware.smackx.search.SimpleUserSearch,java.lang.String,org.xmlpull.v1.XmlPullParser) -> access$000
org.jivesoftware.smackx.search.UserSearch$Provider -> org.jivesoftware.smackx.search.UserSearch$Provider:
    org.jivesoftware.smack.packet.IQ parseIQ(org.xmlpull.v1.XmlPullParser) -> parseIQ
org.jivesoftware.smackx.search.UserSearchManager -> org.jivesoftware.smackx.search.UserSearchManager:
    org.jivesoftware.smack.Connection con -> con
    org.jivesoftware.smackx.search.UserSearch userSearch -> userSearch
    org.jivesoftware.smackx.Form getSearchForm(java.lang.String) -> getSearchForm
    org.jivesoftware.smackx.ReportedData getSearchResults(org.jivesoftware.smackx.Form,java.lang.String) -> getSearchResults
    java.util.Collection getSearchServices() -> getSearchServices
org.slf4j.ILoggerFactory -> org.slf4j.ILoggerFactory:
    org.slf4j.Logger getLogger(java.lang.String) -> getLogger
org.slf4j.IMarkerFactory -> org.slf4j.IMarkerFactory:
    org.slf4j.Marker getMarker(java.lang.String) -> getMarker
    boolean exists(java.lang.String) -> exists
    boolean detachMarker(java.lang.String) -> detachMarker
    org.slf4j.Marker getDetachedMarker(java.lang.String) -> getDetachedMarker
org.slf4j.Logger -> org.slf4j.Logger:
    java.lang.String ROOT_LOGGER_NAME -> ROOT_LOGGER_NAME
    java.lang.String getName() -> getName
    boolean isTraceEnabled() -> isTraceEnabled
    void trace(java.lang.String) -> trace
    void trace(java.lang.String,java.lang.Object) -> trace
    void trace(java.lang.String,java.lang.Object,java.lang.Object) -> trace
    void trace(java.lang.String,java.lang.Object[]) -> trace
    void trace(java.lang.String,java.lang.Throwable) -> trace
    boolean isTraceEnabled(org.slf4j.Marker) -> isTraceEnabled
    void trace(org.slf4j.Marker,java.lang.String) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Object) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> trace
    boolean isDebugEnabled() -> isDebugEnabled
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.Object) -> debug
    void debug(java.lang.String,java.lang.Object,java.lang.Object) -> debug
    void debug(java.lang.String,java.lang.Object[]) -> debug
    void debug(java.lang.String,java.lang.Throwable) -> debug
    boolean isDebugEnabled(org.slf4j.Marker) -> isDebugEnabled
    void debug(org.slf4j.Marker,java.lang.String) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Object) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> debug
    boolean isInfoEnabled() -> isInfoEnabled
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.Object) -> info
    void info(java.lang.String,java.lang.Object,java.lang.Object) -> info
    void info(java.lang.String,java.lang.Object[]) -> info
    void info(java.lang.String,java.lang.Throwable) -> info
    boolean isInfoEnabled(org.slf4j.Marker) -> isInfoEnabled
    void info(org.slf4j.Marker,java.lang.String) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Object) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> info
    boolean isWarnEnabled() -> isWarnEnabled
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.Object) -> warn
    void warn(java.lang.String,java.lang.Object[]) -> warn
    void warn(java.lang.String,java.lang.Object,java.lang.Object) -> warn
    void warn(java.lang.String,java.lang.Throwable) -> warn
    boolean isWarnEnabled(org.slf4j.Marker) -> isWarnEnabled
    void warn(org.slf4j.Marker,java.lang.String) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Object) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> warn
    boolean isErrorEnabled() -> isErrorEnabled
    void error(java.lang.String) -> error
    void error(java.lang.String,java.lang.Object) -> error
    void error(java.lang.String,java.lang.Object,java.lang.Object) -> error
    void error(java.lang.String,java.lang.Object[]) -> error
    void error(java.lang.String,java.lang.Throwable) -> error
    boolean isErrorEnabled(org.slf4j.Marker) -> isErrorEnabled
    void error(org.slf4j.Marker,java.lang.String) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Object) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> error
org.slf4j.LoggerFactory -> org.slf4j.LoggerFactory:
    java.lang.String CODES_PREFIX -> CODES_PREFIX
    java.lang.String NO_STATICLOGGERBINDER_URL -> NO_STATICLOGGERBINDER_URL
    java.lang.String MULTIPLE_BINDINGS_URL -> MULTIPLE_BINDINGS_URL
    java.lang.String NULL_LF_URL -> NULL_LF_URL
    java.lang.String VERSION_MISMATCH -> VERSION_MISMATCH
    java.lang.String SUBSTITUTE_LOGGER_URL -> SUBSTITUTE_LOGGER_URL
    java.lang.String UNSUCCESSFUL_INIT_URL -> UNSUCCESSFUL_INIT_URL
    java.lang.String UNSUCCESSFUL_INIT_MSG -> UNSUCCESSFUL_INIT_MSG
    int UNINITIALIZED -> UNINITIALIZED
    int ONGOING_INITIALIZATION -> ONGOING_INITIALIZATION
    int FAILED_INITIALIZATION -> FAILED_INITIALIZATION
    int SUCCESSFUL_INITIALIZATION -> SUCCESSFUL_INITIALIZATION
    int NOP_FALLBACK_INITIALIZATION -> NOP_FALLBACK_INITIALIZATION
    int INITIALIZATION_STATE -> INITIALIZATION_STATE
    org.slf4j.helpers.SubstituteLoggerFactory TEMP_FACTORY -> TEMP_FACTORY
    org.slf4j.helpers.NOPLoggerFactory NOP_FALLBACK_FACTORY -> NOP_FALLBACK_FACTORY
    java.lang.String[] API_COMPATIBILITY_LIST -> API_COMPATIBILITY_LIST
    java.lang.String STATIC_LOGGER_BINDER_PATH -> STATIC_LOGGER_BINDER_PATH
    void reset() -> reset
    void performInitialization() -> performInitialization
    boolean messageContainsOrgSlf4jImplStaticLoggerBinder(java.lang.String) -> messageContainsOrgSlf4jImplStaticLoggerBinder
    void bind() -> bind
    void failedBinding(java.lang.Throwable) -> failedBinding
    void emitSubstituteLoggerWarning() -> emitSubstituteLoggerWarning
    void versionSanityCheck() -> versionSanityCheck
    java.util.Set findPossibleStaticLoggerBinderPathSet() -> findPossibleStaticLoggerBinderPathSet
    boolean isAmbiguousStaticLoggerBinderPathSet(java.util.Set) -> isAmbiguousStaticLoggerBinderPathSet
    void reportMultipleBindingAmbiguity(java.util.Set) -> reportMultipleBindingAmbiguity
    void reportActualBinding(java.util.Set) -> reportActualBinding
    org.slf4j.Logger getLogger(java.lang.String) -> getLogger
    org.slf4j.Logger getLogger(java.lang.Class) -> getLogger
    org.slf4j.ILoggerFactory getILoggerFactory() -> getILoggerFactory
org.slf4j.MDC -> org.slf4j.MDC:
    java.lang.String NULL_MDCA_URL -> NULL_MDCA_URL
    java.lang.String NO_STATIC_MDC_BINDER_URL -> NO_STATIC_MDC_BINDER_URL
    org.slf4j.spi.MDCAdapter mdcAdapter -> mdcAdapter
    void put(java.lang.String,java.lang.String) -> put
    java.lang.String get(java.lang.String) -> get
    void remove(java.lang.String) -> remove
    void clear() -> clear
    java.util.Map getCopyOfContextMap() -> getCopyOfContextMap
    void setContextMap(java.util.Map) -> setContextMap
    org.slf4j.spi.MDCAdapter getMDCAdapter() -> getMDCAdapter
org.slf4j.Marker -> org.slf4j.Marker:
    java.lang.String ANY_MARKER -> ANY_MARKER
    java.lang.String ANY_NON_NULL_MARKER -> ANY_NON_NULL_MARKER
    java.lang.String getName() -> getName
    void add(org.slf4j.Marker) -> add
    boolean remove(org.slf4j.Marker) -> remove
    boolean hasChildren() -> hasChildren
    boolean hasReferences() -> hasReferences
    java.util.Iterator iterator() -> iterator
    boolean contains(org.slf4j.Marker) -> contains
    boolean contains(java.lang.String) -> contains
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.slf4j.MarkerFactory -> org.slf4j.MarkerFactory:
    org.slf4j.IMarkerFactory markerFactory -> markerFactory
    org.slf4j.Marker getMarker(java.lang.String) -> getMarker
    org.slf4j.Marker getDetachedMarker(java.lang.String) -> getDetachedMarker
    org.slf4j.IMarkerFactory getIMarkerFactory() -> getIMarkerFactory
org.slf4j.helpers.BasicMDCAdapter -> org.slf4j.helpers.BasicMDCAdapter:
    java.lang.InheritableThreadLocal inheritableThreadLocal -> inheritableThreadLocal
    boolean IS_JDK14 -> IS_JDK14
    boolean isJDK14() -> isJDK14
    void put(java.lang.String,java.lang.String) -> put
    java.lang.String get(java.lang.String) -> get
    void remove(java.lang.String) -> remove
    void clear() -> clear
    java.util.Set getKeys() -> getKeys
    java.util.Map getCopyOfContextMap() -> getCopyOfContextMap
    void setContextMap(java.util.Map) -> setContextMap
org.slf4j.helpers.BasicMarker -> org.slf4j.helpers.BasicMarker:
    long serialVersionUID -> serialVersionUID
    java.lang.String name -> name
    java.util.List refereceList -> refereceList
    java.lang.String OPEN -> OPEN
    java.lang.String CLOSE -> CLOSE
    java.lang.String SEP -> SEP
    java.lang.String getName() -> getName
    void add(org.slf4j.Marker) -> add
    boolean hasReferences() -> hasReferences
    boolean hasChildren() -> hasChildren
    java.util.Iterator iterator() -> iterator
    boolean remove(org.slf4j.Marker) -> remove
    boolean contains(org.slf4j.Marker) -> contains
    boolean contains(java.lang.String) -> contains
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.slf4j.helpers.BasicMarkerFactory -> org.slf4j.helpers.BasicMarkerFactory:
    java.util.Map markerMap -> markerMap
    org.slf4j.Marker getMarker(java.lang.String) -> getMarker
    boolean exists(java.lang.String) -> exists
    boolean detachMarker(java.lang.String) -> detachMarker
    org.slf4j.Marker getDetachedMarker(java.lang.String) -> getDetachedMarker
org.slf4j.helpers.FormattingTuple -> org.slf4j.helpers.FormattingTuple:
    org.slf4j.helpers.FormattingTuple NULL -> NULL
    java.lang.String message -> message
    java.lang.Throwable throwable -> throwable
    java.lang.Object[] argArray -> argArray
    java.lang.Object[] trimmedCopy(java.lang.Object[]) -> trimmedCopy
    java.lang.String getMessage() -> getMessage
    java.lang.Object[] getArgArray() -> getArgArray
    java.lang.Throwable getThrowable() -> getThrowable
org.slf4j.helpers.MarkerIgnoringBase -> org.slf4j.helpers.MarkerIgnoringBase:
    long serialVersionUID -> serialVersionUID
    boolean isTraceEnabled(org.slf4j.Marker) -> isTraceEnabled
    void trace(org.slf4j.Marker,java.lang.String) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Object) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> trace
    void trace(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> trace
    boolean isDebugEnabled(org.slf4j.Marker) -> isDebugEnabled
    void debug(org.slf4j.Marker,java.lang.String) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Object) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> debug
    void debug(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> debug
    boolean isInfoEnabled(org.slf4j.Marker) -> isInfoEnabled
    void info(org.slf4j.Marker,java.lang.String) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Object) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> info
    void info(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> info
    boolean isWarnEnabled(org.slf4j.Marker) -> isWarnEnabled
    void warn(org.slf4j.Marker,java.lang.String) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Object) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> warn
    void warn(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> warn
    boolean isErrorEnabled(org.slf4j.Marker) -> isErrorEnabled
    void error(org.slf4j.Marker,java.lang.String) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Object) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Object,java.lang.Object) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Object[]) -> error
    void error(org.slf4j.Marker,java.lang.String,java.lang.Throwable) -> error
    java.lang.String toString() -> toString
    java.lang.String getName() -> getName
org.slf4j.helpers.MessageFormatter -> org.slf4j.helpers.MessageFormatter:
    char DELIM_START -> DELIM_START
    char DELIM_STOP -> DELIM_STOP
    java.lang.String DELIM_STR -> DELIM_STR
    char ESCAPE_CHAR -> ESCAPE_CHAR
    org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object) -> format
    org.slf4j.helpers.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object) -> format
    java.lang.Throwable getThrowableCandidate(java.lang.Object[]) -> getThrowableCandidate
    org.slf4j.helpers.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[]) -> arrayFormat
    boolean isEscapedDelimeter(java.lang.String,int) -> isEscapedDelimeter
    boolean isDoubleEscaped(java.lang.String,int) -> isDoubleEscaped
    void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map) -> deeplyAppendParameter
    void safeObjectAppend(java.lang.StringBuffer,java.lang.Object) -> safeObjectAppend
    void objectArrayAppend(java.lang.StringBuffer,java.lang.Object[],java.util.Map) -> objectArrayAppend
    void booleanArrayAppend(java.lang.StringBuffer,boolean[]) -> booleanArrayAppend
    void byteArrayAppend(java.lang.StringBuffer,byte[]) -> byteArrayAppend
    void charArrayAppend(java.lang.StringBuffer,char[]) -> charArrayAppend
    void shortArrayAppend(java.lang.StringBuffer,short[]) -> shortArrayAppend
    void intArrayAppend(java.lang.StringBuffer,int[]) -> intArrayAppend
    void longArrayAppend(java.lang.StringBuffer,long[]) -> longArrayAppend
    void floatArrayAppend(java.lang.StringBuffer,float[]) -> floatArrayAppend
    void doubleArrayAppend(java.lang.StringBuffer,double[]) -> doubleArrayAppend
org.slf4j.helpers.NOPLogger -> org.slf4j.helpers.NOPLogger:
    long serialVersionUID -> serialVersionUID
    org.slf4j.helpers.NOPLogger NOP_LOGGER -> NOP_LOGGER
    java.lang.String getName() -> getName
    boolean isTraceEnabled() -> isTraceEnabled
    void trace(java.lang.String) -> trace
    void trace(java.lang.String,java.lang.Object) -> trace
    void trace(java.lang.String,java.lang.Object,java.lang.Object) -> trace
    void trace(java.lang.String,java.lang.Object[]) -> trace
    void trace(java.lang.String,java.lang.Throwable) -> trace
    boolean isDebugEnabled() -> isDebugEnabled
    void debug(java.lang.String) -> debug
    void debug(java.lang.String,java.lang.Object) -> debug
    void debug(java.lang.String,java.lang.Object,java.lang.Object) -> debug
    void debug(java.lang.String,java.lang.Object[]) -> debug
    void debug(java.lang.String,java.lang.Throwable) -> debug
    boolean isInfoEnabled() -> isInfoEnabled
    void info(java.lang.String) -> info
    void info(java.lang.String,java.lang.Object) -> info
    void info(java.lang.String,java.lang.Object,java.lang.Object) -> info
    void info(java.lang.String,java.lang.Object[]) -> info
    void info(java.lang.String,java.lang.Throwable) -> info
    boolean isWarnEnabled() -> isWarnEnabled
    void warn(java.lang.String) -> warn
    void warn(java.lang.String,java.lang.Object) -> warn
    void warn(java.lang.String,java.lang.Object,java.lang.Object) -> warn
    void warn(java.lang.String,java.lang.Object[]) -> warn
    void warn(java.lang.String,java.lang.Throwable) -> warn
    boolean isErrorEnabled() -> isErrorEnabled
    void error(java.lang.String) -> error
    void error(java.lang.String,java.lang.Object) -> error
    void error(java.lang.String,java.lang.Object,java.lang.Object) -> error
    void error(java.lang.String,java.lang.Object[]) -> error
    void error(java.lang.String,java.lang.Throwable) -> error
org.slf4j.helpers.NOPLoggerFactory -> org.slf4j.helpers.NOPLoggerFactory:
    org.slf4j.Logger getLogger(java.lang.String) -> getLogger
org.slf4j.helpers.NOPMDCAdapter -> org.slf4j.helpers.NOPMDCAdapter:
    void clear() -> clear
    java.lang.String get(java.lang.String) -> get
    void put(java.lang.String,java.lang.String) -> put
    void remove(java.lang.String) -> remove
    java.util.Map getCopyOfContextMap() -> getCopyOfContextMap
    void setContextMap(java.util.Map) -> setContextMap
org.slf4j.helpers.NamedLoggerBase -> org.slf4j.helpers.NamedLoggerBase:
    long serialVersionUID -> serialVersionUID
    java.lang.String name -> name
    java.lang.String getName() -> getName
    java.lang.Object readResolve() -> readResolve
org.slf4j.helpers.SubstituteLoggerFactory -> org.slf4j.helpers.SubstituteLoggerFactory:
    java.util.List loggerNameList -> loggerNameList
    org.slf4j.Logger getLogger(java.lang.String) -> getLogger
    java.util.List getLoggerNameList() -> getLoggerNameList
org.slf4j.helpers.Util -> org.slf4j.helpers.Util:
    void report(java.lang.String,java.lang.Throwable) -> report
    void report(java.lang.String) -> report
org.slf4j.spi.LocationAwareLogger -> org.slf4j.spi.LocationAwareLogger:
    int TRACE_INT -> TRACE_INT
    int DEBUG_INT -> DEBUG_INT
    int INFO_INT -> INFO_INT
    int WARN_INT -> WARN_INT
    int ERROR_INT -> ERROR_INT
    void log(org.slf4j.Marker,java.lang.String,int,java.lang.String,java.lang.Object[],java.lang.Throwable) -> log
org.slf4j.spi.LoggerFactoryBinder -> org.slf4j.spi.LoggerFactoryBinder:
    org.slf4j.ILoggerFactory getLoggerFactory() -> getLoggerFactory
    java.lang.String getLoggerFactoryClassStr() -> getLoggerFactoryClassStr
org.slf4j.spi.MDCAdapter -> org.slf4j.spi.MDCAdapter:
    void put(java.lang.String,java.lang.String) -> put
    java.lang.String get(java.lang.String) -> get
    void remove(java.lang.String) -> remove
    void clear() -> clear
    java.util.Map getCopyOfContextMap() -> getCopyOfContextMap
    void setContextMap(java.util.Map) -> setContextMap
org.slf4j.spi.MarkerFactoryBinder -> org.slf4j.spi.MarkerFactoryBinder:
    org.slf4j.IMarkerFactory getMarkerFactory() -> getMarkerFactory
    java.lang.String getMarkerFactoryClassStr() -> getMarkerFactoryClassStr
org.webrtc.voiceengine.AudioManagerAndroid -> org.webrtc.voiceengine.AudioManagerAndroid:
    int DEFAULT_SAMPLING_RATE -> DEFAULT_SAMPLING_RATE
    int DEFAULT_FRAMES_PER_BUFFER -> DEFAULT_FRAMES_PER_BUFFER
    int mNativeOutputSampleRate -> mNativeOutputSampleRate
    boolean mAudioLowLatencySupported -> mAudioLowLatencySupported
    int mAudioLowLatencyOutputFrameSize -> mAudioLowLatencyOutputFrameSize
    int getNativeOutputSampleRate() -> getNativeOutputSampleRate
    boolean isAudioLowLatencySupported() -> isAudioLowLatencySupported
    int getAudioLowLatencyOutputFrameSize() -> getAudioLowLatencyOutputFrameSize
org.webrtc.voiceengine.WebRtcAudioRecord -> org.webrtc.voiceengine.WebRtcAudioRecord:
    android.media.AudioRecord _audioRecord -> _audioRecord
    android.content.Context _context -> _context
    java.nio.ByteBuffer _recBuffer -> _recBuffer
    byte[] _tempBufRec -> _tempBufRec
    java.util.concurrent.locks.ReentrantLock _recLock -> _recLock
    boolean _doRecInit -> _doRecInit
    boolean _isRecording -> _isRecording
    int _bufferedRecSamples -> _bufferedRecSamples
    java.lang.String logTag -> logTag
    int InitRecording(int,int) -> InitRecording
    int StartRecording() -> StartRecording
    int StopRecording() -> StopRecording
    int RecordAudio(int) -> RecordAudio
    void DoLog(java.lang.String) -> DoLog
    void DoLogErr(java.lang.String) -> DoLogErr
org.webrtc.voiceengine.WebRtcAudioTrack -> org.webrtc.voiceengine.WebRtcAudioTrack:
    android.media.AudioTrack _audioTrack -> _audioTrack
    android.content.Context _context -> _context
    android.media.AudioManager _audioManager -> _audioManager
    java.nio.ByteBuffer _playBuffer -> _playBuffer
    byte[] _tempBufPlay -> _tempBufPlay
    java.util.concurrent.locks.ReentrantLock _playLock -> _playLock
    boolean _doPlayInit -> _doPlayInit
    boolean _doRecInit -> _doRecInit
    boolean _isRecording -> _isRecording
    boolean _isPlaying -> _isPlaying
    int _bufferedPlaySamples -> _bufferedPlaySamples
    int _playPosition -> _playPosition
    java.lang.String logTag -> logTag
    int InitPlayback(int) -> InitPlayback
    int StartPlayback() -> StartPlayback
    int StopPlayback() -> StopPlayback
    int PlayAudio(int) -> PlayAudio
    int SetPlayoutSpeaker(boolean) -> SetPlayoutSpeaker
    int SetPlayoutVolume(int) -> SetPlayoutVolume
    int GetPlayoutVolume() -> GetPlayoutVolume
    void DoLog(java.lang.String) -> DoLog
    void DoLogErr(java.lang.String) -> DoLogErr
u.aly.a -> e.a.a:
    int a -> a
    int b -> b
    java.lang.String c -> c
    java.util.List d -> d
    u.aly.ar e -> e
    boolean a() -> a
    java.lang.String b() -> b
    boolean c() -> c
    boolean g() -> g
    u.aly.ar d() -> d
    java.util.List e() -> e
    void a(java.util.List) -> a
    java.lang.String a(java.lang.String) -> a
    java.lang.String f() -> f
    void a(u.aly.as) -> a
u.aly.ab -> e.a.b:
    java.util.HashMap b(java.util.Map) -> b
    void a(u.aly.bf,java.lang.String) -> a
u.aly.ac -> e.a.c:
    java.lang.String a(java.lang.Throwable) -> a
    void a(u.aly.bf,java.lang.String) -> a
u.aly.ae -> e.a.d:
    void a(org.json.JSONArray) -> a
u.aly.af -> e.a.e:
    void a(u.aly.bf,java.lang.String) -> a
u.aly.ag -> e.a.f:
    u.aly.ag a -> a
    u.aly.ag b -> b
    u.aly.ag c -> c
    u.aly.ag d -> d
    int e -> e
    u.aly.ag[] f -> f
    u.aly.ag[] values() -> values
    u.aly.ag valueOf(java.lang.String) -> valueOf
    int a() -> a
    u.aly.ag a(int) -> a
u.aly.ah -> e.a.g:
    u.aly.dd c -> c
    u.aly.ct d -> d
    java.util.Map e -> e
    long a -> a
    byte g -> f
    java.util.Map b -> b
    boolean e() -> a
    void a(boolean) -> a
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.String toString() -> toString
    void f() -> b
    u.aly.dd h() -> c
    u.aly.ct i() -> d
u.aly.ah$1 -> e.a.h:
u.aly.ah$a -> e.a.i:
    void a(u.aly.cy,u.aly.ah) -> a
    void b(u.aly.cy,u.aly.ah) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.ah$b -> e.a.j:
    u.aly.ah$a a() -> a
    u.aly.dg b() -> b
u.aly.ah$c -> e.a.k:
    void a(u.aly.cy,u.aly.ah) -> a
    void b(u.aly.cy,u.aly.ah) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.ah$d -> e.a.l:
    u.aly.ah$c a() -> a
    u.aly.dg b() -> b
u.aly.ah$e -> e.a.m:
    u.aly.ah$e a -> a
    java.util.Map b -> b
    short c -> c
    java.lang.String d -> d
    u.aly.ah$e[] e -> e
    u.aly.ah$e[] values() -> values
    u.aly.ah$e valueOf(java.lang.String) -> valueOf
    short a() -> a
    java.lang.String b() -> b
u.aly.ai -> e.a.n:
    u.aly.dd l -> l
    u.aly.ct m -> m
    u.aly.ct n -> n
    u.aly.ct o -> o
    u.aly.ct p -> p
    u.aly.ct q -> q
    u.aly.ct r -> r
    u.aly.ct s -> s
    u.aly.ct t -> t
    u.aly.ct u -> u
    u.aly.ct v -> v
    java.util.Map w -> w
    java.lang.String a -> a
    java.lang.String b -> b
    int c -> c
    java.lang.String d -> d
    u.aly.bc e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    int j -> j
    byte z -> x
    u.aly.ai$e[] A -> y
    java.util.Map k -> k
    u.aly.ai a(java.lang.String) -> a
    void a(boolean) -> a
    u.aly.ai b(java.lang.String) -> b
    boolean i() -> a
    void b(boolean) -> b
    u.aly.ai a(int) -> a
    boolean l() -> b
    void c(boolean) -> c
    u.aly.ai c(java.lang.String) -> c
    boolean o() -> c
    void d(boolean) -> d
    u.aly.ai a(u.aly.bc) -> a
    void e(boolean) -> e
    u.aly.ai d(java.lang.String) -> d
    void f(boolean) -> f
    u.aly.ai e(java.lang.String) -> e
    void g(boolean) -> g
    u.aly.ai f(java.lang.String) -> f
    boolean A() -> d
    void h(boolean) -> h
    u.aly.ai g(java.lang.String) -> g
    boolean D() -> e
    void i(boolean) -> i
    u.aly.ai c(int) -> b
    boolean G() -> f
    void j(boolean) -> j
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.String toString() -> toString
    void H() -> g
    u.aly.dd I() -> h
    u.aly.ct J() -> i
    u.aly.ct K() -> j
    u.aly.ct L() -> k
    u.aly.ct M() -> l
    u.aly.ct N() -> m
    u.aly.ct O() -> n
    u.aly.ct P() -> o
    u.aly.ct Q() -> p
    u.aly.ct R() -> q
    u.aly.ct S() -> r
u.aly.ai$1 -> e.a.o:
u.aly.ai$a -> e.a.p:
    void a(u.aly.cy,u.aly.ai) -> a
    void b(u.aly.cy,u.aly.ai) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.ai$b -> e.a.q:
    u.aly.ai$a a() -> a
    u.aly.dg b() -> b
u.aly.ai$c -> e.a.r:
    void a(u.aly.cy,u.aly.ai) -> a
    void b(u.aly.cy,u.aly.ai) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.ai$d -> e.a.s:
    u.aly.ai$c a() -> a
    u.aly.dg b() -> b
u.aly.ai$e -> e.a.t:
    u.aly.ai$e a -> a
    u.aly.ai$e b -> b
    u.aly.ai$e c -> c
    u.aly.ai$e d -> d
    u.aly.ai$e e -> e
    u.aly.ai$e f -> f
    u.aly.ai$e g -> g
    u.aly.ai$e h -> h
    u.aly.ai$e i -> i
    u.aly.ai$e j -> j
    java.util.Map k -> k
    short l -> l
    java.lang.String m -> m
    u.aly.ai$e[] n -> n
    u.aly.ai$e[] values() -> values
    u.aly.ai$e valueOf(java.lang.String) -> valueOf
    short a() -> a
    java.lang.String b() -> b
u.aly.aj -> e.a.u:
    u.aly.dd e -> e
    u.aly.ct f -> f
    u.aly.ct g -> g
    u.aly.ct h -> h
    java.util.Map i -> i
    int a -> a
    int b -> b
    int c -> c
    byte m -> j
    u.aly.aj$e[] n -> k
    java.util.Map d -> d
    u.aly.aj a(int) -> a
    boolean e() -> a
    void a(boolean) -> a
    u.aly.aj c(int) -> b
    boolean i() -> b
    void b(boolean) -> b
    u.aly.aj d(int) -> c
    boolean l() -> c
    void c(boolean) -> c
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.String toString() -> toString
    void m() -> d
    u.aly.dd n() -> e
    u.aly.ct o() -> f
    u.aly.ct p() -> g
    u.aly.ct q() -> h
u.aly.aj$1 -> e.a.v:
u.aly.aj$a -> e.a.w:
    void a(u.aly.cy,u.aly.aj) -> a
    void b(u.aly.cy,u.aly.aj) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.aj$b -> e.a.x:
    u.aly.aj$a a() -> a
    u.aly.dg b() -> b
u.aly.aj$c -> e.a.y:
    void a(u.aly.cy,u.aly.aj) -> a
    void b(u.aly.cy,u.aly.aj) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.aj$d -> e.a.z:
    u.aly.aj$c a() -> a
    u.aly.dg b() -> b
u.aly.aj$e -> e.a.aa:
    u.aly.aj$e a -> a
    u.aly.aj$e b -> b
    u.aly.aj$e c -> c
    java.util.Map d -> d
    short e -> e
    java.lang.String f -> f
    u.aly.aj$e[] g -> g
    u.aly.aj$e[] values() -> values
    u.aly.aj$e valueOf(java.lang.String) -> valueOf
    short a() -> a
    java.lang.String b() -> b
u.aly.ak -> e.a.ab:
    u.aly.dd s -> s
    u.aly.ct t -> t
    u.aly.ct u -> u
    u.aly.ct v -> v
    u.aly.ct w -> w
    u.aly.ct x -> x
    u.aly.ct y -> y
    u.aly.ct z -> z
    u.aly.ct A -> A
    u.aly.ct B -> B
    u.aly.ct C -> C
    u.aly.ct D -> D
    u.aly.ct E -> E
    u.aly.ct F -> F
    u.aly.ct G -> G
    u.aly.ct H -> H
    u.aly.ct I -> I
    u.aly.ct J -> J
    java.util.Map K -> K
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    java.lang.String e -> e
    java.lang.String f -> f
    java.lang.String g -> g
    java.lang.String h -> h
    u.aly.ba i -> i
    boolean j -> j
    boolean k -> k
    java.lang.String l -> l
    java.lang.String m -> m
    long n -> n
    java.lang.String o -> o
    java.lang.String p -> p
    java.lang.String q -> q
    byte O -> L
    u.aly.ak$e[] P -> M
    java.util.Map r -> r
    u.aly.ak a(java.lang.String) -> a
    boolean e() -> a
    void a(boolean) -> a
    u.aly.ak b(java.lang.String) -> b
    boolean i() -> b
    void b(boolean) -> b
    u.aly.ak c(java.lang.String) -> c
    boolean l() -> c
    void c(boolean) -> c
    boolean o() -> d
    void d(boolean) -> d
    u.aly.ak e(java.lang.String) -> d
    boolean r() -> e
    void e(boolean) -> e
    u.aly.ak f(java.lang.String) -> e
    boolean u() -> f
    void f(boolean) -> f
    u.aly.ak g(java.lang.String) -> f
    boolean x() -> g
    void g(boolean) -> g
    u.aly.ak h(java.lang.String) -> g
    boolean A() -> h
    void h(boolean) -> h
    u.aly.ak a(u.aly.ba) -> a
    boolean D() -> i
    void i(boolean) -> i
    boolean G() -> j
    void k(boolean) -> j
    boolean J() -> k
    void m(boolean) -> k
    u.aly.ak i(java.lang.String) -> h
    boolean M() -> l
    void n(boolean) -> l
    u.aly.ak j(java.lang.String) -> i
    boolean P() -> m
    void o(boolean) -> m
    u.aly.ak a(long) -> a
    boolean S() -> n
    void p(boolean) -> n
    u.aly.ak k(java.lang.String) -> j
    boolean V() -> o
    void q(boolean) -> o
    u.aly.ak l(java.lang.String) -> k
    boolean Y() -> p
    void r(boolean) -> p
    u.aly.ak m(java.lang.String) -> l
    boolean ab() -> q
    void s(boolean) -> q
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.String toString() -> toString
    void ac() -> r
    u.aly.dd ad() -> s
    u.aly.ct ae() -> t
    u.aly.ct af() -> u
    u.aly.ct ag() -> v
    u.aly.ct ah() -> w
    u.aly.ct ai() -> x
    u.aly.ct aj() -> y
    u.aly.ct ak() -> z
    u.aly.ct al() -> A
    u.aly.ct am() -> B
    u.aly.ct an() -> C
    u.aly.ct ao() -> D
    u.aly.ct ap() -> E
    u.aly.ct aq() -> F
    u.aly.ct ar() -> G
    u.aly.ct as() -> H
    u.aly.ct at() -> I
    u.aly.ct au() -> J
u.aly.ak$1 -> e.a.ac:
u.aly.ak$a -> e.a.ad:
    void a(u.aly.cy,u.aly.ak) -> a
    void b(u.aly.cy,u.aly.ak) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.ak$b -> e.a.ae:
    u.aly.ak$a a() -> a
    u.aly.dg b() -> b
u.aly.ak$c -> e.a.af:
    void a(u.aly.cy,u.aly.ak) -> a
    void b(u.aly.cy,u.aly.ak) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.ak$d -> e.a.ag:
    u.aly.ak$c a() -> a
    u.aly.dg b() -> b
u.aly.ak$e -> e.a.ah:
    u.aly.ak$e a -> a
    u.aly.ak$e b -> b
    u.aly.ak$e c -> c
    u.aly.ak$e d -> d
    u.aly.ak$e e -> e
    u.aly.ak$e f -> f
    u.aly.ak$e g -> g
    u.aly.ak$e h -> h
    u.aly.ak$e i -> i
    u.aly.ak$e j -> j
    u.aly.ak$e k -> k
    u.aly.ak$e l -> l
    u.aly.ak$e m -> m
    u.aly.ak$e n -> n
    u.aly.ak$e o -> o
    u.aly.ak$e p -> p
    u.aly.ak$e q -> q
    java.util.Map r -> r
    short s -> s
    java.lang.String t -> t
    u.aly.ak$e[] u -> u
    u.aly.ak$e[] values() -> values
    u.aly.ak$e valueOf(java.lang.String) -> valueOf
    short a() -> a
    java.lang.String b() -> b
u.aly.am -> e.a.ai:
    u.aly.dd e -> e
    u.aly.ct f -> f
    u.aly.ct g -> g
    u.aly.ct h -> h
    java.util.Map i -> i
    long a -> a
    java.lang.String b -> b
    u.aly.an c -> c
    byte k -> j
    u.aly.am$e[] l -> k
    java.util.Map d -> d
    u.aly.am a(long) -> a
    boolean e() -> a
    void b(boolean) -> a
    u.aly.am a(java.lang.String) -> a
    void c(boolean) -> b
    u.aly.am a(u.aly.an) -> a
    boolean l() -> b
    void d(boolean) -> c
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.String toString() -> toString
    void m() -> c
    u.aly.dd n() -> d
    u.aly.ct o() -> e
    u.aly.ct p() -> f
    u.aly.ct q() -> g
u.aly.am$1 -> e.a.aj:
u.aly.am$a -> e.a.ak:
    void a(u.aly.cy,u.aly.am) -> a
    void b(u.aly.cy,u.aly.am) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.am$b -> e.a.al:
    u.aly.am$a a() -> a
    u.aly.dg b() -> b
u.aly.am$c -> e.a.am:
    void a(u.aly.cy,u.aly.am) -> a
    void b(u.aly.cy,u.aly.am) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.am$d -> e.a.an:
    u.aly.am$c a() -> a
    u.aly.dg b() -> b
u.aly.am$e -> e.a.ao:
    u.aly.am$e a -> a
    u.aly.am$e b -> b
    u.aly.am$e c -> c
    java.util.Map d -> d
    short e -> e
    java.lang.String f -> f
    u.aly.am$e[] g -> g
    u.aly.am$e[] values() -> values
    u.aly.am$e valueOf(java.lang.String) -> valueOf
    short a() -> a
    java.lang.String b() -> b
u.aly.an -> e.a.ap:
    u.aly.an a -> a
    u.aly.an b -> b
    int c -> c
    u.aly.an[] d -> d
    u.aly.an[] values() -> values
    u.aly.an valueOf(java.lang.String) -> valueOf
    int a() -> a
    u.aly.an a(int) -> a
u.aly.ao -> e.a.aq:
    u.aly.dd g -> g
    u.aly.ct h -> h
    u.aly.ct i -> i
    u.aly.ct j -> j
    u.aly.ct k -> k
    u.aly.ct l -> l
    java.util.Map m -> m
    java.lang.String a -> a
    java.util.Map b -> b
    long c -> c
    int d -> d
    long e -> e
    byte q -> n
    u.aly.ao$e[] r -> o
    java.util.Map f -> f
    u.aly.ao a(java.lang.String) -> a
    void a(boolean) -> a
    u.aly.ao a(java.util.Map) -> a
    void b(boolean) -> b
    u.aly.ao a(long) -> a
    boolean m() -> a
    void c(boolean) -> c
    u.aly.ao a(int) -> a
    boolean p() -> b
    void d(boolean) -> d
    u.aly.ao b(long) -> b
    boolean s() -> c
    void e(boolean) -> e
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.String toString() -> toString
    void t() -> d
    u.aly.dd u() -> e
    u.aly.ct v() -> f
    u.aly.ct w() -> g
    u.aly.ct x() -> h
    u.aly.ct y() -> i
    u.aly.ct z() -> j
u.aly.ao$1 -> e.a.ar:
u.aly.ao$a -> e.a.as:
    void a(u.aly.cy,u.aly.ao) -> a
    void b(u.aly.cy,u.aly.ao) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.ao$b -> e.a.at:
    u.aly.ao$a a() -> a
    u.aly.dg b() -> b
u.aly.ao$c -> e.a.au:
    void a(u.aly.cy,u.aly.ao) -> a
    void b(u.aly.cy,u.aly.ao) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.ao$d -> e.a.av:
    u.aly.ao$c a() -> a
    u.aly.dg b() -> b
u.aly.ao$e -> e.a.aw:
    u.aly.ao$e a -> a
    u.aly.ao$e b -> b
    u.aly.ao$e c -> c
    u.aly.ao$e d -> d
    u.aly.ao$e e -> e
    java.util.Map f -> f
    short g -> g
    java.lang.String h -> h
    u.aly.ao$e[] i -> i
    u.aly.ao$e[] values() -> values
    u.aly.ao$e valueOf(java.lang.String) -> valueOf
    short a() -> a
    java.lang.String b() -> b
u.aly.ap -> e.a.ax:
    u.aly.ap a -> a
    u.aly.ap b -> b
    u.aly.ap c -> c
    int d -> d
    u.aly.ap[] e -> e
    u.aly.ap[] values() -> values
    u.aly.ap valueOf(java.lang.String) -> valueOf
    int a() -> a
    u.aly.ap a(int) -> a
u.aly.aq -> e.a.ay:
    u.aly.dd f -> f
    u.aly.ct g -> g
    u.aly.ct h -> h
    u.aly.ct i -> i
    u.aly.ct j -> j
    java.util.Map k -> k
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    long d -> d
    byte m -> l
    u.aly.aq$e[] n -> m
    java.util.Map e -> e
    u.aly.aq a(java.lang.String) -> a
    void a(boolean) -> a
    u.aly.aq b(java.lang.String) -> b
    boolean i() -> a
    void b(boolean) -> b
    u.aly.aq c(java.lang.String) -> c
    void c(boolean) -> c
    u.aly.aq a(long) -> a
    boolean o() -> b
    void d(boolean) -> d
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.String toString() -> toString
    void p() -> c
    u.aly.dd q() -> d
    u.aly.ct r() -> e
    u.aly.ct s() -> f
    u.aly.ct t() -> g
    u.aly.ct u() -> h
u.aly.aq$1 -> e.a.az:
u.aly.aq$a -> e.a.ba:
    void a(u.aly.cy,u.aly.aq) -> a
    void b(u.aly.cy,u.aly.aq) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.aq$b -> e.a.bb:
    u.aly.aq$a a() -> a
    u.aly.dg b() -> b
u.aly.aq$c -> e.a.bc:
    void a(u.aly.cy,u.aly.aq) -> a
    void b(u.aly.cy,u.aly.aq) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.aq$d -> e.a.bd:
    u.aly.aq$c a() -> a
    u.aly.dg b() -> b
u.aly.aq$e -> e.a.be:
    u.aly.aq$e a -> a
    u.aly.aq$e b -> b
    u.aly.aq$e c -> c
    u.aly.aq$e d -> d
    java.util.Map e -> e
    short f -> f
    java.lang.String g -> g
    u.aly.aq$e[] h -> h
    u.aly.aq$e[] values() -> values
    u.aly.aq$e valueOf(java.lang.String) -> valueOf
    short a() -> a
    java.lang.String b() -> b
u.aly.ar -> e.a.bf:
    u.aly.dd e -> e
    u.aly.ct f -> f
    u.aly.ct g -> g
    u.aly.ct h -> h
    java.util.Map i -> i
    java.lang.String a -> a
    long b -> b
    int c -> c
    byte l -> j
    java.util.Map d -> d
    java.lang.String c() -> a
    u.aly.ar a(java.lang.String) -> a
    void a(boolean) -> a
    long f() -> b
    u.aly.ar a(long) -> a
    boolean i() -> c
    void b(boolean) -> b
    int j() -> d
    u.aly.ar a(int) -> a
    boolean l() -> e
    void c(boolean) -> c
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.String toString() -> toString
    void m() -> f
    u.aly.dd n() -> g
    u.aly.ct o() -> h
    u.aly.ct p() -> i
    u.aly.ct q() -> j
u.aly.ar$1 -> e.a.bg:
u.aly.ar$a -> e.a.bh:
    void a(u.aly.cy,u.aly.ar) -> a
    void b(u.aly.cy,u.aly.ar) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.ar$b -> e.a.bi:
    u.aly.ar$a a() -> a
    u.aly.dg b() -> b
u.aly.ar$c -> e.a.bj:
    void a(u.aly.cy,u.aly.ar) -> a
    void b(u.aly.cy,u.aly.ar) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.ar$d -> e.a.bk:
    u.aly.ar$c a() -> a
    u.aly.dg b() -> b
u.aly.ar$e -> e.a.bl:
    u.aly.ar$e a -> a
    u.aly.ar$e b -> b
    u.aly.ar$e c -> c
    java.util.Map d -> d
    short e -> e
    java.lang.String f -> f
    u.aly.ar$e[] g -> g
    u.aly.ar$e[] values() -> values
    u.aly.ar$e valueOf(java.lang.String) -> valueOf
    short a() -> a
    java.lang.String b() -> b
u.aly.as -> e.a.bm:
    u.aly.dd e -> e
    u.aly.ct f -> f
    u.aly.ct g -> g
    u.aly.ct h -> h
    java.util.Map i -> i
    java.util.Map a -> a
    java.util.List b -> b
    java.lang.String c -> c
    u.aly.as$e[] j -> j
    java.util.Map d -> d
    java.util.Map d() -> a
    u.aly.as a(java.util.Map) -> a
    void a(boolean) -> a
    java.util.List j() -> b
    u.aly.as a(java.util.List) -> a
    boolean l() -> c
    void b(boolean) -> b
    boolean o() -> d
    void c(boolean) -> c
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.String toString() -> toString
    void p() -> e
    u.aly.dd q() -> f
    u.aly.ct r() -> g
    u.aly.ct s() -> h
    u.aly.ct t() -> i
u.aly.as$1 -> e.a.bn:
u.aly.as$a -> e.a.bo:
    void a(u.aly.cy,u.aly.as) -> a
    void b(u.aly.cy,u.aly.as) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.as$b -> e.a.bp:
    u.aly.as$a a() -> a
    u.aly.dg b() -> b
u.aly.as$c -> e.a.bq:
    void a(u.aly.cy,u.aly.as) -> a
    void b(u.aly.cy,u.aly.as) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.as$d -> e.a.br:
    u.aly.as$c a() -> a
    u.aly.dg b() -> b
u.aly.as$e -> e.a.bs:
    u.aly.as$e a -> a
    u.aly.as$e b -> b
    u.aly.as$e c -> c
    java.util.Map d -> d
    short e -> e
    java.lang.String f -> f
    u.aly.as$e[] g -> g
    u.aly.as$e[] values() -> values
    u.aly.as$e valueOf(java.lang.String) -> valueOf
    short a() -> a
    java.lang.String b() -> b
u.aly.at -> e.a.bt:
    u.aly.dd e -> e
    u.aly.ct f -> f
    u.aly.ct g -> g
    u.aly.ct h -> h
    java.util.Map i -> i
    java.util.Map a -> a
    int b -> b
    java.lang.String c -> c
    byte k -> j
    java.util.Map d -> d
    java.util.Map d() -> a
    void a(boolean) -> a
    int h() -> b
    u.aly.at a(int) -> a
    boolean j() -> c
    void b(boolean) -> b
    java.lang.String k() -> d
    u.aly.at a(java.lang.String) -> a
    void c(boolean) -> c
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.String toString() -> toString
    void n() -> e
    u.aly.dd o() -> f
    u.aly.ct p() -> g
    u.aly.ct q() -> h
    u.aly.ct r() -> i
u.aly.at$1 -> e.a.bu:
u.aly.at$a -> e.a.bv:
    void a(u.aly.cy,u.aly.at) -> a
    void b(u.aly.cy,u.aly.at) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.at$b -> e.a.bw:
    u.aly.at$a a() -> a
    u.aly.dg b() -> b
u.aly.at$c -> e.a.bx:
    void a(u.aly.cy,u.aly.at) -> a
    void b(u.aly.cy,u.aly.at) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.at$d -> e.a.by:
    u.aly.at$c a() -> a
    u.aly.dg b() -> b
u.aly.at$e -> e.a.bz:
    u.aly.at$e a -> a
    u.aly.at$e b -> b
    u.aly.at$e c -> c
    java.util.Map d -> d
    short e -> e
    java.lang.String f -> f
    u.aly.at$e[] g -> g
    u.aly.at$e[] values() -> values
    u.aly.at$e valueOf(java.lang.String) -> valueOf
    short a() -> a
    java.lang.String b() -> b
u.aly.au -> e.a.ca:
    u.aly.dd e -> e
    u.aly.ct f -> f
    u.aly.ct g -> g
    u.aly.ct h -> h
    java.util.Map i -> i
    java.lang.String a -> a
    long b -> b
    java.lang.String c -> c
    byte k -> j
    u.aly.au$e[] l -> k
    java.util.Map d -> d
    java.lang.String c() -> a
    boolean e() -> b
    void a(boolean) -> a
    long f() -> c
    boolean i() -> d
    void b(boolean) -> b
    java.lang.String j() -> e
    void c(boolean) -> c
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.String toString() -> toString
    void m() -> f
    u.aly.dd n() -> g
    u.aly.ct o() -> h
    u.aly.ct p() -> i
    u.aly.ct q() -> j
u.aly.au$1 -> e.a.cb:
u.aly.au$a -> e.a.cc:
    void a(u.aly.cy,u.aly.au) -> a
    void b(u.aly.cy,u.aly.au) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.au$b -> e.a.cd:
    u.aly.au$a a() -> a
    u.aly.dg b() -> b
u.aly.au$c -> e.a.ce:
    void a(u.aly.cy,u.aly.au) -> a
    void b(u.aly.cy,u.aly.au) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.au$d -> e.a.cf:
    u.aly.au$c a() -> a
    u.aly.dg b() -> b
u.aly.au$e -> e.a.cg:
    u.aly.au$e a -> a
    u.aly.au$e b -> b
    u.aly.au$e c -> c
    java.util.Map d -> d
    short e -> e
    java.lang.String f -> f
    u.aly.au$e[] g -> g
    u.aly.au$e[] values() -> values
    u.aly.au$e valueOf(java.lang.String) -> valueOf
    short a() -> a
    java.lang.String b() -> b
u.aly.av -> e.a.ch:
    u.aly.dd f -> f
    u.aly.ct g -> g
    u.aly.ct h -> h
    u.aly.ct i -> i
    u.aly.ct j -> j
    java.util.Map k -> k
    java.lang.String a -> a
    java.util.List b -> b
    java.util.List c -> c
    java.util.List d -> d
    u.aly.av$e[] l -> l
    java.util.Map e -> e
    java.lang.String c() -> a
    u.aly.av a(java.lang.String) -> a
    void a(boolean) -> a
    void a(u.aly.am) -> a
    boolean k() -> b
    void b(boolean) -> b
    void a(u.aly.ao) -> a
    boolean p() -> c
    void c(boolean) -> c
    boolean u() -> d
    void d(boolean) -> d
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.String toString() -> toString
    void v() -> e
    u.aly.dd w() -> f
    u.aly.ct x() -> g
    u.aly.ct y() -> h
    u.aly.ct z() -> i
    u.aly.ct A() -> j
u.aly.av$1 -> e.a.ci:
u.aly.av$a -> e.a.cj:
    void a(u.aly.cy,u.aly.av) -> a
    void b(u.aly.cy,u.aly.av) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.av$b -> e.a.ck:
    u.aly.av$a a() -> a
    u.aly.dg b() -> b
u.aly.av$c -> e.a.cl:
    void a(u.aly.cy,u.aly.av) -> a
    void b(u.aly.cy,u.aly.av) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.av$d -> e.a.cm:
    u.aly.av$c a() -> a
    u.aly.dg b() -> b
u.aly.av$e -> e.a.cn:
    u.aly.av$e a -> a
    u.aly.av$e b -> b
    u.aly.av$e c -> c
    u.aly.av$e d -> d
    java.util.Map e -> e
    short f -> f
    java.lang.String g -> g
    u.aly.av$e[] h -> h
    u.aly.av$e[] values() -> values
    u.aly.av$e valueOf(java.lang.String) -> valueOf
    short a() -> a
    java.lang.String b() -> b
u.aly.aw -> e.a.co:
    u.aly.dd e -> e
    u.aly.ct f -> f
    u.aly.ct g -> g
    u.aly.ct h -> h
    java.util.Map i -> i
    double a -> a
    double b -> b
    long c -> c
    byte m -> j
    java.util.Map d -> d
    boolean e() -> a
    void a(boolean) -> a
    boolean i() -> b
    void b(boolean) -> b
    boolean l() -> c
    void c(boolean) -> c
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.String toString() -> toString
    void m() -> d
    u.aly.dd n() -> e
    u.aly.ct o() -> f
    u.aly.ct p() -> g
    u.aly.ct q() -> h
u.aly.aw$1 -> e.a.cp:
u.aly.aw$a -> e.a.cq:
    void a(u.aly.cy,u.aly.aw) -> a
    void b(u.aly.cy,u.aly.aw) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.aw$b -> e.a.cr:
    u.aly.aw$a a() -> a
    u.aly.dg b() -> b
u.aly.aw$c -> e.a.cs:
    void a(u.aly.cy,u.aly.aw) -> a
    void b(u.aly.cy,u.aly.aw) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.aw$d -> e.a.ct:
    u.aly.aw$c a() -> a
    u.aly.dg b() -> b
u.aly.aw$e -> e.a.cu:
    u.aly.aw$e a -> a
    u.aly.aw$e b -> b
    u.aly.aw$e c -> c
    java.util.Map d -> d
    short e -> e
    java.lang.String f -> f
    u.aly.aw$e[] g -> g
    u.aly.aw$e[] values() -> values
    u.aly.aw$e valueOf(java.lang.String) -> valueOf
    short a() -> a
    java.lang.String b() -> b
u.aly.ax -> e.a.cv:
    u.aly.dd m -> m
    u.aly.ct n -> n
    u.aly.ct o -> o
    u.aly.ct p -> p
    u.aly.ct q -> q
    u.aly.ct r -> r
    u.aly.ct s -> s
    u.aly.ct t -> t
    u.aly.ct u -> u
    u.aly.ct v -> v
    u.aly.ct w -> w
    u.aly.ct x -> x
    java.util.Map y -> y
    int a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    double d -> d
    double e -> e
    java.lang.String f -> f
    int g -> g
    java.lang.String h -> h
    u.aly.ag i -> i
    java.lang.String j -> j
    u.aly.bg k -> k
    byte D -> z
    u.aly.ax$e[] E -> A
    java.util.Map l -> l
    u.aly.ax a(int) -> a
    boolean e() -> a
    void a(boolean) -> a
    u.aly.ax a(java.lang.String) -> a
    boolean i() -> b
    void b(boolean) -> b
    u.aly.ax b(java.lang.String) -> b
    boolean l() -> c
    void c(boolean) -> c
    boolean o() -> d
    void d(boolean) -> d
    boolean r() -> e
    void e(boolean) -> e
    u.aly.ax c(java.lang.String) -> c
    boolean u() -> f
    void f(boolean) -> f
    boolean x() -> g
    void g(boolean) -> g
    boolean A() -> h
    void h(boolean) -> h
    u.aly.ax a(u.aly.ag) -> a
    boolean D() -> i
    void i(boolean) -> i
    u.aly.ax e(java.lang.String) -> d
    boolean G() -> j
    void j(boolean) -> j
    u.aly.ax a(u.aly.bg) -> a
    boolean J() -> k
    void k(boolean) -> k
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.String toString() -> toString
    void K() -> l
    u.aly.dd L() -> m
    u.aly.ct M() -> n
    u.aly.ct N() -> o
    u.aly.ct O() -> p
    u.aly.ct P() -> q
    u.aly.ct Q() -> r
    u.aly.ct R() -> s
    u.aly.ct S() -> t
    u.aly.ct T() -> u
    u.aly.ct U() -> v
    u.aly.ct V() -> w
    u.aly.ct W() -> x
u.aly.ax$1 -> e.a.cw:
u.aly.ax$a -> e.a.cx:
    void a(u.aly.cy,u.aly.ax) -> a
    void b(u.aly.cy,u.aly.ax) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.ax$b -> e.a.cy:
    u.aly.ax$a a() -> a
    u.aly.dg b() -> b
u.aly.ax$c -> e.a.cz:
    void a(u.aly.cy,u.aly.ax) -> a
    void b(u.aly.cy,u.aly.ax) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.ax$d -> e.a.da:
    u.aly.ax$c a() -> a
    u.aly.dg b() -> b
u.aly.ax$e -> e.a.db:
    u.aly.ax$e a -> a
    u.aly.ax$e b -> b
    u.aly.ax$e c -> c
    u.aly.ax$e d -> d
    u.aly.ax$e e -> e
    u.aly.ax$e f -> f
    u.aly.ax$e g -> g
    u.aly.ax$e h -> h
    u.aly.ax$e i -> i
    u.aly.ax$e j -> j
    u.aly.ax$e k -> k
    java.util.Map l -> l
    short m -> m
    java.lang.String n -> n
    u.aly.ax$e[] o -> o
    u.aly.ax$e[] values() -> values
    u.aly.ax$e valueOf(java.lang.String) -> valueOf
    short a() -> a
    java.lang.String b() -> b
u.aly.ay -> e.a.dc:
    u.aly.dd d -> d
    u.aly.ct e -> e
    u.aly.ct f -> f
    java.util.Map g -> g
    java.lang.String a -> a
    long b -> b
    byte i -> h
    java.util.Map c -> c
    u.aly.ay a(java.lang.String) -> a
    void a(boolean) -> a
    u.aly.ay a(long) -> a
    boolean i() -> a
    void b(boolean) -> b
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.String toString() -> toString
    void j() -> b
    u.aly.dd k() -> c
    u.aly.ct l() -> d
    u.aly.ct m() -> e
u.aly.ay$1 -> e.a.dd:
u.aly.ay$a -> e.a.de:
    void a(u.aly.cy,u.aly.ay) -> a
    void b(u.aly.cy,u.aly.ay) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.ay$b -> e.a.df:
    u.aly.ay$a a() -> a
    u.aly.dg b() -> b
u.aly.ay$c -> e.a.dg:
    void a(u.aly.cy,u.aly.ay) -> a
    void b(u.aly.cy,u.aly.ay) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.ay$d -> e.a.dh:
    u.aly.ay$c a() -> a
    u.aly.dg b() -> b
u.aly.ay$e -> e.a.di:
    u.aly.ay$e a -> a
    u.aly.ay$e b -> b
    java.util.Map c -> c
    short d -> d
    java.lang.String e -> e
    u.aly.ay$e[] f -> f
    u.aly.ay$e[] values() -> values
    u.aly.ay$e valueOf(java.lang.String) -> valueOf
    short a() -> a
    java.lang.String b() -> b
u.aly.az -> e.a.dj:
    u.aly.dd d -> d
    u.aly.ct e -> e
    u.aly.ct f -> f
    java.util.Map a -> a
    java.lang.Object a(u.aly.cy,u.aly.ct) -> a
    void c(u.aly.cy) -> c
    java.lang.Object a(u.aly.cy,short) -> a
    void d(u.aly.cy) -> d
    u.aly.ct a(u.aly.az$a) -> a
    u.aly.dd c() -> a
    u.aly.az$a a(short) -> a
    void b(java.lang.String) -> a
    void b(long) -> a
    boolean equals(java.lang.Object) -> equals
    boolean a(u.aly.az) -> a
    int hashCode() -> hashCode
    u.aly.cg b(short) -> b
    u.aly.ct a(u.aly.cg) -> a
u.aly.az$1 -> e.a.dk:
    int[] a -> a
u.aly.az$a -> e.a.dl:
    u.aly.az$a a -> a
    u.aly.az$a b -> b
    java.util.Map c -> c
    short d -> d
    java.lang.String e -> e
    u.aly.az$a[] f -> f
    u.aly.az$a[] values() -> values
    u.aly.az$a valueOf(java.lang.String) -> valueOf
    u.aly.az$a a(int) -> a
    u.aly.az$a b(int) -> b
    short a() -> a
    java.lang.String b() -> b
u.aly.b -> e.a.dm:
    android.content.Context b -> a
    java.lang.String f() -> f
u.aly.ba -> e.a.dn:
    u.aly.dd d -> d
    u.aly.ct e -> e
    u.aly.ct f -> f
    java.util.Map g -> g
    int a -> a
    int b -> b
    byte j -> h
    java.util.Map c -> c
    boolean e() -> a
    void a(boolean) -> a
    boolean i() -> b
    void b(boolean) -> b
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.String toString() -> toString
    void j() -> c
    u.aly.dd k() -> d
    u.aly.ct l() -> e
    u.aly.ct m() -> f
u.aly.ba$1 -> e.a.do:
u.aly.ba$a -> e.a.dp:
    void a(u.aly.cy,u.aly.ba) -> a
    void b(u.aly.cy,u.aly.ba) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.ba$b -> e.a.dq:
    u.aly.ba$a a() -> a
    u.aly.dg b() -> b
u.aly.ba$c -> e.a.dr:
    void a(u.aly.cy,u.aly.ba) -> a
    void b(u.aly.cy,u.aly.ba) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.ba$d -> e.a.ds:
    u.aly.ba$c a() -> a
    u.aly.dg b() -> b
u.aly.ba$e -> e.a.dt:
    u.aly.ba$e a -> a
    u.aly.ba$e b -> b
    java.util.Map c -> c
    short d -> d
    java.lang.String e -> e
    u.aly.ba$e[] f -> f
    u.aly.ba$e[] values() -> values
    u.aly.ba$e valueOf(java.lang.String) -> valueOf
    short a() -> a
    java.lang.String b() -> b
u.aly.bb -> e.a.du:
    u.aly.dd e -> e
    u.aly.ct f -> f
    u.aly.ct g -> g
    u.aly.ct h -> h
    java.util.Map i -> i
    int a -> a
    java.lang.String b -> b
    u.aly.at c -> c
    byte k -> j
    u.aly.bb$e[] l -> k
    java.util.Map d -> d
    boolean e() -> a
    void a(boolean) -> a
    java.lang.String f() -> b
    boolean i() -> c
    void b(boolean) -> b
    u.aly.at j() -> d
    boolean l() -> e
    void c(boolean) -> c
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.String toString() -> toString
    void m() -> f
    u.aly.dd n() -> g
    u.aly.ct o() -> h
    u.aly.ct p() -> i
    u.aly.ct q() -> j
u.aly.bb$1 -> e.a.dv:
u.aly.bb$a -> e.a.dw:
    void a(u.aly.cy,u.aly.bb) -> a
    void b(u.aly.cy,u.aly.bb) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.bb$b -> e.a.dx:
    u.aly.bb$a a() -> a
    u.aly.dg b() -> b
u.aly.bb$c -> e.a.dy:
    void a(u.aly.cy,u.aly.bb) -> a
    void b(u.aly.cy,u.aly.bb) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.bb$d -> e.a.dz:
    u.aly.bb$c a() -> a
    u.aly.dg b() -> b
u.aly.bb$e -> e.a.ea:
    u.aly.bb$e a -> a
    u.aly.bb$e b -> b
    u.aly.bb$e c -> c
    java.util.Map d -> d
    short e -> e
    java.lang.String f -> f
    u.aly.bb$e[] g -> g
    u.aly.bb$e[] values() -> values
    u.aly.bb$e valueOf(java.lang.String) -> valueOf
    short a() -> a
    java.lang.String b() -> b
u.aly.bc -> e.a.eb:
    u.aly.bc a -> a
    u.aly.bc b -> b
    u.aly.bc c -> c
    u.aly.bc d -> d
    int e -> e
    u.aly.bc[] f -> f
    u.aly.bc[] values() -> values
    u.aly.bc valueOf(java.lang.String) -> valueOf
    int a() -> a
    u.aly.bc a(int) -> a
u.aly.bd -> e.a.ec:
    u.aly.dd i -> i
    u.aly.ct j -> j
    u.aly.ct k -> k
    u.aly.ct l -> l
    u.aly.ct m -> m
    u.aly.ct n -> n
    u.aly.ct o -> o
    u.aly.ct p -> p
    java.util.Map q -> q
    java.lang.String a -> a
    long b -> b
    long c -> c
    long d -> d
    java.util.List e -> e
    java.util.List f -> f
    u.aly.be g -> g
    byte u -> r
    u.aly.bd$e[] v -> s
    java.util.Map h -> h
    u.aly.bd a(java.lang.String) -> a
    void a(boolean) -> a
    u.aly.bd a(long) -> a
    boolean i() -> a
    void b(boolean) -> b
    u.aly.bd b(long) -> b
    boolean l() -> b
    void c(boolean) -> c
    u.aly.bd c(long) -> c
    boolean o() -> c
    void d(boolean) -> d
    int p() -> d
    u.aly.bd a(java.util.List) -> a
    boolean t() -> e
    void e(boolean) -> e
    void a(u.aly.aw) -> a
    u.aly.bd b(java.util.List) -> b
    boolean y() -> f
    void f(boolean) -> f
    u.aly.bd a(u.aly.be) -> a
    boolean B() -> g
    void g(boolean) -> g
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.String toString() -> toString
    void C() -> h
    u.aly.dd D() -> i
    u.aly.ct E() -> j
    u.aly.ct F() -> k
    u.aly.ct G() -> l
    u.aly.ct H() -> m
    u.aly.ct I() -> n
    u.aly.ct J() -> o
    u.aly.ct K() -> p
u.aly.bd$1 -> e.a.ed:
u.aly.bd$a -> e.a.ee:
    void a(u.aly.cy,u.aly.bd) -> a
    void b(u.aly.cy,u.aly.bd) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.bd$b -> e.a.ef:
    u.aly.bd$a a() -> a
    u.aly.dg b() -> b
u.aly.bd$c -> e.a.eg:
    void a(u.aly.cy,u.aly.bd) -> a
    void b(u.aly.cy,u.aly.bd) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.bd$d -> e.a.eh:
    u.aly.bd$c a() -> a
    u.aly.dg b() -> b
u.aly.bd$e -> e.a.ei:
    u.aly.bd$e a -> a
    u.aly.bd$e b -> b
    u.aly.bd$e c -> c
    u.aly.bd$e d -> d
    u.aly.bd$e e -> e
    u.aly.bd$e f -> f
    u.aly.bd$e g -> g
    java.util.Map h -> h
    short i -> i
    java.lang.String j -> j
    u.aly.bd$e[] k -> k
    u.aly.bd$e[] values() -> values
    u.aly.bd$e valueOf(java.lang.String) -> valueOf
    short a() -> a
    java.lang.String b() -> b
u.aly.be -> e.a.ej:
    u.aly.dd d -> d
    u.aly.ct e -> e
    u.aly.ct f -> f
    java.util.Map g -> g
    int a -> a
    int b -> b
    byte j -> h
    java.util.Map c -> c
    u.aly.be a(int) -> a
    boolean e() -> a
    void a(boolean) -> a
    u.aly.be c(int) -> b
    boolean i() -> b
    void b(boolean) -> b
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.String toString() -> toString
    void j() -> c
    u.aly.dd k() -> d
    u.aly.ct l() -> e
    u.aly.ct m() -> f
u.aly.be$1 -> e.a.ek:
u.aly.be$a -> e.a.el:
    void a(u.aly.cy,u.aly.be) -> a
    void b(u.aly.cy,u.aly.be) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.be$b -> e.a.em:
    u.aly.be$a a() -> a
    u.aly.dg b() -> b
u.aly.be$c -> e.a.en:
    void a(u.aly.cy,u.aly.be) -> a
    void b(u.aly.cy,u.aly.be) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.be$d -> e.a.eo:
    u.aly.be$c a() -> a
    u.aly.dg b() -> b
u.aly.be$e -> e.a.ep:
    u.aly.be$e a -> a
    u.aly.be$e b -> b
    java.util.Map c -> c
    short d -> d
    java.lang.String e -> e
    u.aly.be$e[] f -> f
    u.aly.be$e[] values() -> values
    u.aly.be$e valueOf(java.lang.String) -> valueOf
    short a() -> a
    java.lang.String b() -> b
u.aly.bf -> e.a.eq:
    u.aly.dd k -> k
    u.aly.ct l -> l
    u.aly.ct m -> m
    u.aly.ct n -> n
    u.aly.ct o -> o
    u.aly.ct p -> p
    u.aly.ct q -> q
    u.aly.ct r -> r
    u.aly.ct s -> s
    u.aly.ct t -> t
    java.util.Map u -> u
    u.aly.aj a -> a
    u.aly.ai b -> b
    u.aly.ak c -> c
    u.aly.ax d -> d
    u.aly.ah e -> e
    java.util.List f -> f
    java.util.List g -> g
    u.aly.at h -> h
    u.aly.as i -> i
    u.aly.bf$e[] v -> v
    java.util.Map j -> j
    u.aly.bf a(u.aly.aj) -> a
    void a(boolean) -> a
    u.aly.bf a(u.aly.ai) -> a
    void b(boolean) -> b
    u.aly.bf a(u.aly.ak) -> a
    void c(boolean) -> c
    u.aly.bf a(u.aly.ax) -> a
    void d(boolean) -> d
    u.aly.bf a(u.aly.ah) -> a
    boolean r() -> a
    void e(boolean) -> e
    int s() -> b
    void a(u.aly.av) -> a
    java.util.List u() -> c
    boolean w() -> d
    void f(boolean) -> f
    void a(u.aly.bd) -> a
    java.util.List z() -> e
    boolean B() -> f
    void g(boolean) -> g
    u.aly.bf a(u.aly.at) -> a
    boolean E() -> g
    void h(boolean) -> h
    u.aly.bf a(u.aly.as) -> a
    boolean H() -> h
    void i(boolean) -> i
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.String toString() -> toString
    void I() -> i
    u.aly.dd J() -> j
    u.aly.ct K() -> k
    u.aly.ct L() -> l
    u.aly.ct M() -> m
    u.aly.ct N() -> n
    u.aly.ct O() -> o
    u.aly.ct P() -> p
    u.aly.ct Q() -> q
    u.aly.ct R() -> r
    u.aly.ct S() -> s
u.aly.bf$1 -> e.a.er:
u.aly.bf$a -> e.a.es:
    void a(u.aly.cy,u.aly.bf) -> a
    void b(u.aly.cy,u.aly.bf) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.bf$b -> e.a.et:
    u.aly.bf$a a() -> a
    u.aly.dg b() -> b
u.aly.bf$c -> e.a.eu:
    void a(u.aly.cy,u.aly.bf) -> a
    void b(u.aly.cy,u.aly.bf) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.bf$d -> e.a.ev:
    u.aly.bf$c a() -> a
    u.aly.dg b() -> b
u.aly.bf$e -> e.a.ew:
    u.aly.bf$e a -> a
    u.aly.bf$e b -> b
    u.aly.bf$e c -> c
    u.aly.bf$e d -> d
    u.aly.bf$e e -> e
    u.aly.bf$e f -> f
    u.aly.bf$e g -> g
    u.aly.bf$e h -> h
    u.aly.bf$e i -> i
    java.util.Map j -> j
    short k -> k
    java.lang.String l -> l
    u.aly.bf$e[] m -> m
    u.aly.bf$e[] values() -> values
    u.aly.bf$e valueOf(java.lang.String) -> valueOf
    short a() -> a
    java.lang.String b() -> b
u.aly.bg -> e.a.ex:
    u.aly.dd f -> f
    u.aly.ct g -> g
    u.aly.ct h -> h
    u.aly.ct i -> i
    u.aly.ct j -> j
    java.util.Map k -> k
    u.aly.ap a -> a
    int b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    byte m -> l
    u.aly.bg$e[] n -> m
    java.util.Map e -> e
    u.aly.bg a(u.aly.ap) -> a
    boolean e() -> a
    void a(boolean) -> a
    u.aly.bg a(int) -> a
    boolean i() -> b
    void b(boolean) -> b
    u.aly.bg a(java.lang.String) -> a
    boolean l() -> c
    void c(boolean) -> c
    u.aly.bg b(java.lang.String) -> b
    boolean o() -> d
    void d(boolean) -> d
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.String toString() -> toString
    void p() -> e
    u.aly.dd q() -> f
    u.aly.ct r() -> g
    u.aly.ct s() -> h
    u.aly.ct t() -> i
    u.aly.ct u() -> j
u.aly.bg$1 -> e.a.ey:
u.aly.bg$a -> e.a.ez:
    void a(u.aly.cy,u.aly.bg) -> a
    void b(u.aly.cy,u.aly.bg) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.bg$b -> e.a.fa:
    u.aly.bg$a a() -> a
    u.aly.dg b() -> b
u.aly.bg$c -> e.a.fb:
    void a(u.aly.cy,u.aly.bg) -> a
    void b(u.aly.cy,u.aly.bg) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.bg$d -> e.a.fc:
    u.aly.bg$c a() -> a
    u.aly.dg b() -> b
u.aly.bg$e -> e.a.fd:
    u.aly.bg$e a -> a
    u.aly.bg$e b -> b
    u.aly.bg$e c -> c
    u.aly.bg$e d -> d
    java.util.Map e -> e
    short f -> f
    java.lang.String g -> g
    u.aly.bg$e[] h -> h
    u.aly.bg$e[] values() -> values
    u.aly.bg$e valueOf(java.lang.String) -> valueOf
    short a() -> a
    java.lang.String b() -> b
u.aly.bh -> e.a.fe:
    u.aly.dd k -> k
    u.aly.ct l -> l
    u.aly.ct m -> m
    u.aly.ct n -> n
    u.aly.ct o -> o
    u.aly.ct p -> p
    u.aly.ct q -> q
    u.aly.ct r -> r
    u.aly.ct s -> s
    u.aly.ct t -> t
    java.util.Map u -> u
    java.lang.String a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    int d -> d
    int e -> e
    int f -> f
    java.nio.ByteBuffer g -> g
    java.lang.String h -> h
    java.lang.String i -> i
    byte y -> v
    java.util.Map j -> j
    u.aly.bh a(java.lang.String) -> a
    void a(boolean) -> a
    u.aly.bh b(java.lang.String) -> b
    void b(boolean) -> b
    u.aly.bh c(java.lang.String) -> c
    void c(boolean) -> c
    u.aly.bh a(int) -> a
    boolean o() -> a
    void d(boolean) -> d
    u.aly.bh c(int) -> b
    boolean r() -> b
    void e(boolean) -> e
    u.aly.bh d(int) -> c
    boolean u() -> c
    void f(boolean) -> f
    u.aly.bh a(byte[]) -> a
    u.aly.bh a(java.nio.ByteBuffer) -> a
    void g(boolean) -> g
    u.aly.bh d(java.lang.String) -> d
    void h(boolean) -> h
    u.aly.bh e(java.lang.String) -> e
    void i(boolean) -> i
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.String toString() -> toString
    void F() -> d
    u.aly.dd G() -> e
    u.aly.ct H() -> f
    u.aly.ct I() -> g
    u.aly.ct J() -> h
    u.aly.ct K() -> i
    u.aly.ct L() -> j
    u.aly.ct M() -> k
    u.aly.ct N() -> l
    u.aly.ct O() -> m
    u.aly.ct P() -> n
u.aly.bh$1 -> e.a.ff:
u.aly.bh$a -> e.a.fg:
    void a(u.aly.cy,u.aly.bh) -> a
    void b(u.aly.cy,u.aly.bh) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.bh$b -> e.a.fh:
    u.aly.bh$a a() -> a
    u.aly.dg b() -> b
u.aly.bh$c -> e.a.fi:
    void a(u.aly.cy,u.aly.bh) -> a
    void b(u.aly.cy,u.aly.bh) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.bh$d -> e.a.fj:
    u.aly.bh$c a() -> a
    u.aly.dg b() -> b
u.aly.bh$e -> e.a.fk:
    u.aly.bh$e a -> a
    u.aly.bh$e b -> b
    u.aly.bh$e c -> c
    u.aly.bh$e d -> d
    u.aly.bh$e e -> e
    u.aly.bh$e f -> f
    u.aly.bh$e g -> g
    u.aly.bh$e h -> h
    u.aly.bh$e i -> i
    java.util.Map j -> j
    short k -> k
    java.lang.String l -> l
    u.aly.bh$e[] m -> m
    u.aly.bh$e[] values() -> values
    u.aly.bh$e valueOf(java.lang.String) -> valueOf
    short a() -> a
    java.lang.String b() -> b
u.aly.bi -> e.a.fl:
    java.lang.String a -> a
    java.lang.String c(android.content.Context) -> a
    java.lang.String d(android.content.Context) -> b
    boolean a(android.content.Context,java.lang.String) -> a
    java.lang.String a() -> a
    java.lang.String f(android.content.Context) -> c
    java.lang.String g(android.content.Context) -> d
    java.lang.String[] j(android.content.Context) -> e
    boolean k(android.content.Context) -> f
    boolean l(android.content.Context) -> g
    int m(android.content.Context) -> h
    java.lang.String[] n(android.content.Context) -> i
    java.util.Locale x(android.content.Context) -> r
    java.lang.String o(android.content.Context) -> j
    java.lang.String p(android.content.Context) -> k
    int[] r(android.content.Context) -> l
    int a(java.lang.Object,java.lang.String) -> a
    java.lang.String s(android.content.Context) -> m
    java.lang.String t(android.content.Context) -> n
    java.lang.String u(android.content.Context) -> o
    java.lang.String v(android.content.Context) -> p
    boolean w(android.content.Context) -> q
u.aly.bj -> e.a.fm:
    boolean a -> a
    void a(java.lang.String,java.lang.String) -> a
    void a(java.lang.String,java.lang.String,java.lang.Exception) -> a
    void b(java.lang.String,java.lang.String) -> b
    void b(java.lang.String,java.lang.String,java.lang.Exception) -> b
    void c(java.lang.String,java.lang.String) -> c
    void c(java.lang.String,java.lang.String,java.lang.Exception) -> c
    void e(java.lang.String,java.lang.String) -> d
    void e(java.lang.String,java.lang.String,java.lang.Exception) -> d
u.aly.bo -> e.a.fn:
    java.lang.String a -> a
    java.util.Map b -> b
    u.aly.bq a(u.aly.bp,java.lang.Class) -> a
    org.json.JSONObject a(java.lang.String,org.json.JSONObject) -> a
    boolean a() -> a
    java.lang.String a(java.io.InputStream) -> a
    org.json.JSONObject a(java.lang.String) -> a
    org.apache.http.params.HttpParams b() -> b
    void b(java.lang.String) -> b
u.aly.bp -> e.a.fo:
    java.lang.String b -> b
    java.lang.String c -> c
    java.lang.String d -> d
    org.json.JSONObject a() -> a
    java.lang.String b() -> b
    java.lang.String c() -> c
    void a(java.lang.String) -> a
u.aly.bq -> e.a.fp:
u.aly.bu -> e.a.fq:
    int a -> a
    byte[] a(java.lang.String,java.lang.String) -> a
    byte[] a(byte[]) -> a
u.aly.bv -> e.a.fr:
    java.lang.String a -> a
    java.lang.String a(java.lang.String) -> a
    java.lang.String b(java.lang.String) -> b
    boolean d(java.lang.String) -> c
    java.lang.String a(java.io.InputStream) -> a
    byte[] b(java.io.InputStream) -> b
    void a(java.io.File,byte[]) -> a
    void c(java.io.InputStream) -> c
    void a(java.io.OutputStream) -> a
u.aly.bw -> e.a.fs:
    boolean a(byte,int) -> a
    boolean a(int,int) -> a
    int b(int,int) -> b
    byte a(byte,int,boolean) -> a
    int a(int,int,boolean) -> a
u.aly.bx -> e.a.ft:
    short[] a -> a
    int b -> b
    short a() -> a
    void a(short) -> a
    void d() -> c
    void c() -> b
    java.lang.String toString() -> toString
u.aly.bz -> e.a.fu:
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
u.aly.c -> e.a.fv:
    byte[] a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    byte[] d -> d
    byte[] e -> e
    byte[] f -> f
    int g -> g
    int h -> h
    int i -> i
    byte[] j -> j
    byte[] k -> k
    void a(java.lang.String) -> a
    java.lang.String a() -> a
    void a(int) -> a
    u.aly.c a(android.content.Context,java.lang.String,byte[]) -> a
    void b() -> b
    byte[] a(byte[],int) -> a
    byte[] d() -> d
    byte[] e() -> e
    byte[] c() -> c
    java.lang.String toString() -> toString
    byte[] a(byte[]) -> a
    java.lang.String b(byte[]) -> b
    byte[] b(java.lang.String) -> b
u.aly.ca -> e.a.fw:
    java.util.Comparator a -> a
    int a(byte,byte) -> a
    int a(int,int) -> a
    int a(byte[],byte[]) -> a
    int a(java.lang.Comparable,java.lang.Comparable) -> a
    int a(java.util.List,java.util.List) -> a
    int a(java.util.Set,java.util.Set) -> a
    int a(java.util.Map,java.util.Map) -> a
    void a(java.nio.ByteBuffer,java.lang.StringBuilder) -> a
    java.lang.String a(byte) -> a
u.aly.ca$1 -> e.a.fx:
u.aly.ca$a -> e.a.fy:
    int compare(java.lang.Object,java.lang.Object) -> compare
u.aly.cc -> e.a.fz:
    u.aly.cy a -> a
    u.aly.dl b -> b
    void a(u.aly.bz,byte[]) -> a
u.aly.cf -> e.a.ga:
u.aly.cg -> e.a.gb:
    short a() -> a
u.aly.ci -> e.a.gc:
    java.io.ByteArrayOutputStream a -> a
    u.aly.dk b -> b
    u.aly.cy c -> c
    byte[] a(u.aly.bz) -> a
u.aly.cj -> e.a.gd:
    java.lang.Object b -> b
    u.aly.cg c -> c
    java.util.Map a -> a
    u.aly.cg i() -> b
    java.lang.Object j() -> c
    boolean k() -> d
    void a(u.aly.cy) -> a
    void b(u.aly.cy) -> b
    java.lang.Object a(u.aly.cy,u.aly.ct) -> a
    void c(u.aly.cy) -> c
    java.lang.Object a(u.aly.cy,short) -> a
    void d(u.aly.cy) -> d
    u.aly.dd c() -> a
    u.aly.ct a(u.aly.cg) -> a
    u.aly.cg b(short) -> b
    java.lang.String toString() -> toString
u.aly.cj$1 -> e.a.ge:
u.aly.cj$a -> e.a.gf:
    void a(u.aly.cy,u.aly.cj) -> a
    void b(u.aly.cy,u.aly.cj) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.cj$b -> e.a.gg:
    u.aly.cj$a a() -> a
    u.aly.dg b() -> b
u.aly.cj$c -> e.a.gh:
    void a(u.aly.cy,u.aly.cj) -> a
    void b(u.aly.cy,u.aly.cj) -> b
    void a(u.aly.cy,u.aly.bz) -> a
    void b(u.aly.cy,u.aly.bz) -> b
u.aly.cj$d -> e.a.gi:
    u.aly.cj$c a() -> a
    u.aly.dg b() -> b
u.aly.ck -> e.a.gj:
    java.lang.Class a -> a
u.aly.cl -> e.a.gk:
    java.lang.String a -> a
    byte b -> b
    u.aly.cm c -> c
    java.util.Map d -> d
    void a(java.lang.Class,java.util.Map) -> a
u.aly.cm -> e.a.gl:
    byte b -> b
    boolean a -> a
    java.lang.String c -> c
    boolean d -> d
u.aly.cn -> e.a.gm:
    u.aly.cm a -> a
u.aly.co -> e.a.gn:
    u.aly.cm a -> a
    u.aly.cm c -> c
u.aly.cq -> e.a.go:
    java.lang.Class a -> a
u.aly.cr -> e.a.gp:
    u.aly.dd h -> f
    boolean c -> a
    boolean d -> b
    int e -> c
    boolean f -> d
    byte[] i -> g
    byte[] j -> h
    byte[] k -> i
    byte[] l -> j
    byte[] m -> k
    byte[] n -> l
    byte[] o -> m
    byte[] p -> n
    void a(u.aly.dd) -> a
    void b() -> a
    void a(u.aly.ct) -> a
    void c() -> b
    void d() -> c
    void a(u.aly.cv) -> a
    void e() -> d
    void a(u.aly.cu) -> a
    void f() -> e
    void a(boolean) -> a
    void a(byte) -> a
    void a(short) -> a
    void a(int) -> a
    void a(long) -> a
    void a(double) -> a
    void a(java.lang.String) -> a
    void a(java.nio.ByteBuffer) -> a
    u.aly.dd j() -> f
    void k() -> g
    u.aly.ct l() -> h
    void m() -> i
    u.aly.cv n() -> j
    void o() -> k
    u.aly.cu p() -> l
    void q() -> m
    u.aly.dc r() -> n
    void s() -> o
    boolean t() -> p
    byte u() -> q
    short v() -> r
    int w() -> s
    long x() -> t
    double y() -> u
    java.lang.String z() -> v
    java.lang.String b(int) -> b
    java.nio.ByteBuffer A() -> w
    int a(byte[],int,int) -> a
    void c(int) -> c
    void d(int) -> d
u.aly.cr$a -> e.a.gq:
    boolean a -> a
    boolean b -> b
    int c -> c
    u.aly.cy a(u.aly.dm) -> a
u.aly.cs -> e.a.gr:
    u.aly.dd d -> d
    u.aly.ct e -> f
    byte[] f -> g
    u.aly.bx m -> h
    short n -> i
    u.aly.ct o -> j
    java.lang.Boolean p -> k
    long q -> l
    byte[] a -> a
    byte[] b -> b
    byte[] r -> m
    byte[] c -> c
    void B() -> x
    void a(u.aly.dd) -> a
    void b() -> a
    void a(u.aly.ct) -> a
    void a(u.aly.ct,byte) -> a
    void d() -> c
    void a(u.aly.cv) -> a
    void a(u.aly.cu) -> a
    void a(boolean) -> a
    void a(byte) -> a
    void a(short) -> a
    void a(int) -> a
    void a(long) -> a
    void a(double) -> a
    void a(java.lang.String) -> a
    void a(java.nio.ByteBuffer) -> a
    void a(byte[],int,int) -> a
    void e() -> d
    void f() -> e
    void c() -> b
    void a(byte,int) -> a
    void b(int) -> b
    void b(long) -> b
    long c(long) -> c
    int c(int) -> c
    void a(long,byte[],int) -> a
    void b(byte) -> b
    void d(int) -> d
    u.aly.dd j() -> f
    void k() -> g
    u.aly.ct l() -> h
    u.aly.cv n() -> j
    u.aly.cu p() -> l
    u.aly.dc r() -> n
    boolean t() -> p
    byte u() -> q
    short v() -> r
    int w() -> s
    long x() -> t
    double y() -> u
    java.lang.String z() -> v
    java.nio.ByteBuffer A() -> w
    byte[] e(int) -> e
    void f(int) -> f
    void m() -> i
    void o() -> k
    void q() -> m
    void s() -> o
    int E() -> z
    long F() -> A
    int g(int) -> g
    long d(long) -> d
    long a(byte[]) -> a
    boolean c(byte) -> c
    byte d(byte) -> d
    byte e(byte) -> e
u.aly.cs$a -> e.a.gs:
    long a -> a
    u.aly.cy a(u.aly.dm) -> a
u.aly.ct -> e.a.gt:
    java.lang.String a -> a
    byte b -> b
    short c -> c
    java.lang.String toString() -> toString
u.aly.cu -> e.a.gu:
    byte a -> a
    int b -> b
u.aly.cv -> e.a.gv:
    byte a -> a
    byte b -> b
    int c -> c
u.aly.cy -> e.a.gw:
    u.aly.dm g -> e
    void a(u.aly.dd) -> a
    void b() -> a
    void a(u.aly.ct) -> a
    void c() -> b
    void d() -> c
    void a(u.aly.cv) -> a
    void e() -> d
    void a(u.aly.cu) -> a
    void f() -> e
    void a(boolean) -> a
    void a(short) -> a
    void a(int) -> a
    void a(long) -> a
    void a(double) -> a
    void a(java.lang.String) -> a
    void a(java.nio.ByteBuffer) -> a
    u.aly.dd j() -> f
    void k() -> g
    u.aly.ct l() -> h
    void m() -> i
    u.aly.cv n() -> j
    void o() -> k
    u.aly.cu p() -> l
    void q() -> m
    u.aly.dc r() -> n
    void s() -> o
    boolean t() -> p
    byte u() -> q
    short v() -> r
    int w() -> s
    long x() -> t
    double y() -> u
    java.lang.String z() -> v
    java.nio.ByteBuffer A() -> w
    void B() -> x
    java.lang.Class D() -> y
u.aly.cz -> e.a.gx:
    int g -> a
u.aly.d -> e.a.gy:
    java.lang.String a -> a
    java.io.File b -> b
    u.aly.as c -> c
    long d -> d
    long e -> e
    java.util.Set f -> f
    void a(u.aly.a) -> a
    void a() -> a
    u.aly.as b() -> b
    void g() -> f
    void d() -> c
    void e() -> d
    void f() -> e
    u.aly.as h() -> g
    void a(u.aly.as) -> a
u.aly.da -> e.a.gz:
    u.aly.cy a(u.aly.dm) -> a
u.aly.db -> e.a.ha:
    int a -> a
    void a(u.aly.cy,byte) -> a
    void a(u.aly.cy,byte,int) -> a
u.aly.dc -> e.a.hb:
    byte a -> a
    int b -> b
u.aly.dd -> e.a.hc:
    java.lang.String a -> a
u.aly.de -> e.a.hd:
    java.lang.Class D() -> y
    void a(java.util.BitSet,int) -> a
    java.util.BitSet b(int) -> b
    java.util.BitSet a(byte[]) -> a
    byte[] b(java.util.BitSet,int) -> b
u.aly.dg -> e.a.he:
    void b(u.aly.cy,u.aly.bz) -> b
    void a(u.aly.cy,u.aly.bz) -> a
u.aly.dh -> e.a.hf:
    u.aly.dg b() -> b
u.aly.di -> e.a.hg:
u.aly.dj -> e.a.hh:
u.aly.dk -> e.a.hi:
    java.io.InputStream a -> a
    java.io.OutputStream b -> b
    int a(byte[],int,int) -> a
    void b(byte[],int,int) -> b
u.aly.dl -> e.a.hj:
    byte[] a -> a
    int b -> b
    int c -> c
    void a(byte[]) -> a
    void c(byte[],int,int) -> c
    void e() -> a
    int a(byte[],int,int) -> a
    void b(byte[],int,int) -> b
    byte[] f() -> b
    int g() -> c
    int h() -> d
    void a(int) -> a
u.aly.dm -> e.a.hk:
    int a(byte[],int,int) -> a
    int d(byte[],int,int) -> d
    void b(byte[]) -> b
    void b(byte[],int,int) -> b
    byte[] f() -> b
    int g() -> c
    int h() -> d
    void a(int) -> a
u.aly.dn -> e.a.hl:
    int f -> a
u.aly.e -> e.a.hm:
    android.content.Context b -> a
    java.lang.String f() -> f
u.aly.f -> e.a.hn:
    byte[] b -> a
    u.aly.at c -> b
    android.content.Context d -> c
    java.lang.String a(u.aly.at) -> a
    boolean c(u.aly.at) -> c
    byte[] a(u.aly.au) -> a
    void b(u.aly.at) -> b
    u.aly.at a(u.aly.at,u.aly.at) -> a
    u.aly.at a() -> a
    void b() -> b
    void c() -> c
u.aly.g -> e.a.ho:
    android.content.Context b -> a
    java.lang.String f() -> f
u.aly.h -> e.a.hp:
    u.aly.d a -> a
    u.aly.f b -> b
    u.aly.d a(android.content.Context) -> a
    u.aly.f b(android.content.Context) -> b
u.aly.i -> e.a.hq:
    java.util.regex.Pattern c -> a
    android.content.Context d -> b
    java.lang.String f() -> f
    java.lang.String g() -> g
    java.lang.String b(java.lang.String) -> b
    java.io.File h() -> h
u.aly.j -> e.a.hr:
    u.aly.q a -> a
    u.aly.r b -> b
    com.umeng.analytics.ReportPolicy$e c -> c
    com.umeng.analytics.f d -> d
    u.aly.w e -> e
    u.aly.d f -> f
    int g -> g
    android.content.Context h -> h
    void a(u.aly.p) -> a
    void b(u.aly.p) -> b
    void b() -> a
    byte[] c() -> b
    u.aly.bf a(byte[]) -> a
    byte[] a(u.aly.bf) -> a
    boolean a(boolean) -> a
    boolean d() -> c
    void e() -> d
    void f() -> e
    void a(int,int) -> a
    void a(int,long) -> a
u.aly.k -> e.a.hs:
    u.aly.o a -> a
    android.content.Context b -> b
    u.aly.k c -> c
    u.aly.k a(android.content.Context) -> a
    void a(com.umeng.analytics.onlineconfig.a) -> a
    void a(u.aly.p) -> a
    void b(u.aly.p) -> b
    void b() -> a
    u.aly.o a(u.aly.k) -> a
u.aly.k$1 -> e.a.ht:
    u.aly.p a -> a
    u.aly.k b -> b
    void a() -> a
u.aly.k$3 -> e.a.hu:
    u.aly.k a -> a
    void a() -> a
u.aly.l -> e.a.hv:
    java.lang.String a -> a
    boolean b -> b
    android.content.SharedPreferences c -> c
    java.util.Map d -> d
    void a(boolean) -> a
u.aly.m -> e.a.hw:
    java.lang.Thread$UncaughtExceptionHandler a -> a
    u.aly.t b -> b
    void a(u.aly.t) -> a
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
    void a(java.lang.Throwable) -> a
u.aly.n -> e.a.hx:
    int a -> a
    int b -> b
    u.aly.l c -> c
    android.content.Context d -> d
    u.aly.k e -> e
    void a(java.lang.String,java.util.Map,long) -> a
    void a(java.lang.String,java.lang.String,long,int) -> a
    boolean a(java.lang.String) -> a
    boolean b(java.lang.String) -> b
    boolean a(java.util.Map) -> a
u.aly.o -> e.a.hy:
    void b(u.aly.p) -> b
    void a(u.aly.p) -> a
    void b() -> a
u.aly.p -> e.a.hz:
    void a(u.aly.bf,java.lang.String) -> a
u.aly.q -> e.a.ia:
    java.util.List a -> a
    u.aly.ah b -> b
    u.aly.ai c -> c
    u.aly.ak d -> d
    u.aly.ax e -> e
    android.content.Context f -> f
    int b() -> a
    void a(u.aly.p) -> a
    void a(u.aly.bf) -> a
    java.lang.String i() -> h
    void a(u.aly.ah) -> a
    u.aly.ai c() -> b
    u.aly.ak d() -> c
    u.aly.ax e() -> d
    u.aly.at f() -> e
    u.aly.as g() -> f
    u.aly.aj h() -> g
    void a(android.content.Context) -> a
    void b(android.content.Context) -> b
    void c(android.content.Context) -> c
u.aly.r -> e.a.ib:
    int d -> a
    java.lang.String e -> b
    java.lang.String f -> c
    int g -> d
    android.content.Context h -> e
    u.aly.w i -> f
    u.aly.f j -> g
    void a(u.aly.w) -> a
    int a(byte[]) -> a
    boolean a() -> a
    byte[] a(byte[],java.lang.String) -> a
    java.lang.String a(android.content.Context) -> a
    int b(byte[]) -> b
u.aly.t -> e.a.ic:
    void a(java.lang.Throwable) -> a
u.aly.u -> e.a.id:
    android.content.SharedPreferences a(android.content.Context,java.lang.String) -> a
    android.content.SharedPreferences a(android.content.Context) -> a
u.aly.v -> e.a.ie:
    java.lang.String d -> a
    java.lang.String e -> b
    u.aly.af a(android.content.Context) -> a
    void a(android.content.SharedPreferences) -> a
    java.lang.String b(android.content.Context) -> b
    void c(android.content.Context) -> c
    void d(android.content.Context) -> d
    boolean b(android.content.SharedPreferences) -> b
    java.lang.String a(android.content.Context,android.content.SharedPreferences) -> a
u.aly.w -> e.a.if:
    int d -> d
    int a -> a
    int b -> b
    int e -> e
    long c -> c
    long f -> f
    long g -> g
    android.content.Context m -> h
    void b(android.content.Context) -> b
    boolean b() -> a
    void c() -> b
    void d() -> c
    void e() -> d
    void f() -> e
    void g() -> f
    void h() -> g
    boolean i() -> h
    long j() -> i
    u.aly.aj a(android.content.Context) -> a
u.aly.x -> e.a.ig:
    java.lang.String a -> a
    long b -> b
u.aly.y -> e.a.ih:
    u.aly.be a(android.content.Context) -> a
    long[] b(android.content.Context) -> b
u.aly.z -> e.a.ii:
    java.util.Map b -> a
    java.util.ArrayList c -> b
    void a(java.lang.String) -> a
    void b(java.lang.String) -> b
    void a() -> a
    void a(android.content.Context) -> a
    java.util.List a(android.content.SharedPreferences) -> a
